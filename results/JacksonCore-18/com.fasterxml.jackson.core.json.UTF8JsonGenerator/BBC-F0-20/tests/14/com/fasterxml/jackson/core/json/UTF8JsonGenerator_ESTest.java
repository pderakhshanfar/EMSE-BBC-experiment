/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:03:24 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2628, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator1.writeBinary((InputStream) byteArrayInputStream0, (-4013));
      uTF8JsonGenerator0.writeRaw("write a boolean value");
      uTF8JsonGenerator1.flush();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.println(2);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 102, (ObjectCodec) null, mockPrintStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeNumber((-2158));
      char[] charArray0 = new char[5];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      charArray0[3] = '\u0000';
      uTF8JsonGenerator0.writeStringField("y.8_hhPWzDs", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      charArray0[4] = '\u0000';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 58);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 104, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[14];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 23, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-6), true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      String string0 = "G{P)MKC&y=sa$]";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G{P)MKC&y=sa$]");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 996, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 127, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 127, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2542, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringReader stringReader0 = new StringReader("mT>gj'[N6gyo2.");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = '*';
      charArray0[3] = '%';
      charArray0[4] = 'd';
      charArray0[5] = ':';
      charArray0[6] = ')';
      charArray0[7] = 'Y';
      charArray0[8] = 'q';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 128, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3490, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 616, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate", "com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate", false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 105, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 46, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)110;
      byteArray1[3] = (byte) (-23);
      byteArray1[4] = (byte)35;
      byteArray1[5] = (byte)35;
      byteArray1[6] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-3833));
      uTF8JsonGenerator0.writeRaw("write a string");
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)40;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 27, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.println(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 73, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(2);
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = ',';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = 'y';
      charArray0[5] = '\u001D';
      charArray0[6] = 'y';
      charArray0[7] = '\u001D';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      iOContext0.allocTokenBuffer(1365);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-29);
      BigInteger bigInteger0 = BigInteger.ONE;
      MockPrintStream mockPrintStream1 = new MockPrintStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-29), (ObjectCodec) null, mockPrintStream0, byteArray0, 54, true);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-29));
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[11];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 75, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeRaw('~');
      char[] charArray0 = new char[8];
      charArray0[3] = '\u0000';
      uTF8JsonGenerator0.writeStartObject();
      charArray0[2] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteriUgParserDelegate", "com.fasterxml.jackson.core.filter.FilteriUgParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteriUgParserDelegate", true);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4000, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteriUgParserDelegate");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 125, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeFieldName("MzioTh:WoKfBIl6=rJ");
      jsonGenerator0.writeStartArray();
      jsonGenerator0.writeString("MzioTh:WoKfBIl6=rJ");
      jsonGenerator0.writeFieldName("5*hl\"b&^T");
      jsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-29);
      BigInteger bigInteger0 = BigInteger.ONE;
      MockPrintStream mockPrintStream1 = new MockPrintStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      int int0 = 54;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-29), (ObjectCodec) null, mockPrintStream0, byteArray0, 54, true);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-29));
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1414), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 2, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 235, (ObjectCodec) null, mockPrintStream0, byteArray0, 52, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)34);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeStartArray();
      jsonGenerator0.writeString("<dd");
      jsonGenerator0.writeFieldName("M<`Ahd azv]");
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[11];
      mockFile0.setWritable(false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 75, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeRaw('~');
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[3] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      mockFileOutputStream0.release();
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)40;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-913), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 123, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 4, (ObjectCodec) null, mockPrintStream0, byteArray0, 56320, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1766), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeBooleanField("j", true);
      char[] charArray0 = iOContext0.allocNameCopyBuffer(57343);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeString(charArray0, 3, 3);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBinary(byteArray0, 0, (-3144));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("!+;#E>AiFus+", 3, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[3];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a null", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("}:");
      BigInteger bigInteger0 = BigInteger.ONE;
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current context not an object but ");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[6] = (byte) (-29);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, filterOutputStream0, byteArray0, 1, true);
      filterOutputStream0.close();
      uTF8JsonGenerator0.writeNumber((short) (byte) (-29));
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0._verifyValueWrite("}:");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not }:, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1414), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 1);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-29);
      BigInteger bigInteger0 = BigInteger.ONE;
      MockPrintStream mockPrintStream1 = new MockPrintStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-29), (ObjectCodec) null, mockPrintStream0, byteArray0, 54, true);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-29));
      uTF8JsonGenerator0.writeStartObject();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-29);
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray1, 1499, (int) (byte) (-29));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a binary value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParseDelegate", "com.fasterxml.jackson.core.filter.FilteringParseDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParseDelegate");
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 40, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      uTF8JsonGenerator0.writeString("");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.max(bigInteger1);
      bigInteger0.gcd(bigInteger1);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      System.setCurrentTimeMillis(57343);
      uTF8JsonGenerator1.writeNumber("");
      uTF8JsonGenerator0._verifyValueWrite("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1._writePPFieldName(serializedString0);
      char char0 = '2';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, '2', (-794));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2692, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeObjectFieldStart(";6VZs/B|p\"Mtk");
      uTF8JsonGenerator0.writeRaw("");
      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2692, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((long) 57343);
      String string0 = ";6VZs/B|p\"Mtk";
      uTF8JsonGenerator0.writeObjectFieldStart(";6VZs/B|p\"Mtk");
      uTF8JsonGenerator0.writeObjectField(";6VZs/B|p\"Mtk", (Object) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2692, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((long) 57343);
      uTF8JsonGenerator0.writeObjectFieldStart(";6VZs/B|p\"Mtk");
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)16;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 4327, (-2075));
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream1, (-633));
      uTF8JsonGenerator0.writeRaw(" bytes");
      // Undeclared exception!
      uTF8JsonGenerator0.writeString((char[]) null, 0, 152);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate", true);
      mockFileOutputStream0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-1046);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 121, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 4327);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 4318 bytes (out of 4327)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegat");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegat");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParserDelegat");
      byte[] byteArray0 = new byte[14];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeBinary(byteArray1, 2, 0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegat");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      try { 
        uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.filter.FilteringParserDelegat");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
      uTF8JsonGenerator0.writeRaw("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 23, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.close();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)127;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte) (-1), (-2205));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-10), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)44, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 58);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 39 bytes (out of 58)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-29);
      BigInteger bigInteger0 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 175, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      uTF8JsonGenerator0.writeBooleanField("@sOYmHaNSG4mb[=\"Y;e", false);
      byteArray0[3] = (byte) (-112);
      iOContext0.allocBase64Buffer();
      byteArray0[4] = (byte)0;
      uTF8JsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.abs();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeRaw("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("5*hl\"b&^T");
      uTF8JsonGenerator0.writeFieldName("@sOYmHaNSG4mb[=\"Y;e");
      char[] charArray0 = new char[4];
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (int) (byte) (-112));
      uTF8JsonGenerator0.writeRaw("@sOYmHaNSG4mb[=\"Y;e");
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeString(charArray0, 31, (-2));
      uTF8JsonGenerator0.writeEndArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-10), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)35, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.%ore.filter.FilteringWarserDelegate", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.%ore.filter.FilteringWarserDelegate");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      mockPrintStream0.println();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "";
      int int0 = (-198);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-198), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) bufferRecycler0;
      objectArray0[1] = (Object) uTF8JsonGenerator0;
      objectArray0[2] = (Object) "f}\"t#do@aJB;/m3";
      mockPrintStream0.format("f}\"t#do@aJB;/m3", objectArray0);
      uTF8JsonGenerator0.writeRawValue("com.fasterxml.jackson.%ore.filter.FilteringWarserDelegate");
      uTF8JsonGenerator0.writeStartObject();
      System.setCurrentTimeMillis(3410L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      uTF8JsonGenerator0.getOutputTarget();
      try { 
        uTF8JsonGenerator0.writeNumber((long) (byte)32);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate";
      MockFile mockFile0 = new MockFile("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate", false);
      iOContext0.allocReadIOBuffer(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2628, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2, false);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 0);
      try { 
        uTF8JsonGenerator1.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParseDelegate", "com.fasterxml.jackson.core.filter.FilteringParseDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParseDelegate");
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 40, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("start an array");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      uTF8JsonGenerator0.writeString("");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.max(bigInteger1);
      bigInteger0.gcd(bigInteger1);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      System.setCurrentTimeMillis(57343);
      uTF8JsonGenerator1.writeNumber("");
      uTF8JsonGenerator0._verifyValueWrite("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1._writePPFieldName(serializedString0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)40;
      byteArray0[3] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawValue("x3!w9}$Br1K\"8Y~");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNumber((long) (byte)57);
      uTF8JsonGenerator0.writeNumberField("kcVp]-O$d.Gzd", 0.0F);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2628, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber("jw");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      byte[] byteArray1 = iOContext1.allocBase64Buffer();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 3, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2628, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartObject((Object) null);
      try { 
        uTF8JsonGenerator0.writeNumber("jw");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder1.NO_BYTES, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBinary(byteArray0, 0, (-3144));
      String string0 = "tJb+s";
      uTF8JsonGenerator0.writeRaw("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParseDelegate", "com.fasterxml.jackson.core.filter.FilteringParseDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParseDelegate");
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 40, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      jsonGenerator0.writeBooleanField("", false);
      String string0 = "";
      jsonGenerator0.writeRawValue("");
      BigInteger bigInteger0 = BigInteger.ONE;
      jsonGenerator0.writeBinary(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2972, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParseDelegate", "com.fasterxml.jackson.core.filter.FilteringParseDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParseDelegate");
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 40, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      uTF8JsonGenerator0.writeString("");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      System.setCurrentTimeMillis(57343);
      uTF8JsonGenerator1.writeNumber("");
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.filter.FilteringParseDelegate");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writePPFieldName(serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-29);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 26, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeRaw("\nv0zxB");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("S%d5U");
      uTF8JsonGenerator0.writeFieldName("S%d5U");
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = '+';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 57, 841);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 57
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 235, (ObjectCodec) null, mockPrintStream0, byteArray0, 52, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)34);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jsonGenerator0.writeString(charArray0, 78, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 78
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      uTF8JsonGenerator0.writeStartArray();
      byteArray1[2] = (byte) (-29);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray1, 5, (int) (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteriUgParserDelegate", "com.fasterxml.jackson.core.filter.FilteriUgParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteriUgParserDelegate");
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)1529);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeElement(16);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      byte[] byteArray0 = new byte[14];
      byteArray0[6] = (byte) (-29);
      byteArray0[1] = (byte)35;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)35;
      int int0 = 5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      uTF8JsonGenerator0.writeStartArray();
      byteArray1[2] = (byte) (-29);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray1, 5, (int) (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2692, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((long) 57343);
      uTF8JsonGenerator0.writeObjectFieldStart(";6VZs/B|p\"Mtk");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      try { 
        uTF8JsonGenerator0.writeNumber(759);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBinary(byteArray0, (-920), (-3));
      uTF8JsonGenerator0.writeRaw("tJb+s");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 50, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeStartArray();
      SerializedString serializedString0 = new SerializedString("tJb+s");
      serializedString0.writeUnquotedUTF8(bufferedOutputStream0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeNumber(1008);
      uTF8JsonGenerator0.writeRaw("Current context not an object but ");
      uTF8JsonGenerator1._verifyValueWrite("Current context not an object but ");
      uTF8JsonGenerator0._outputSurrogates(56319, 56320);
      try { 
        uTF8JsonGenerator0._outputSurrogates(0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x0, second 0x0
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeString("");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      System.setCurrentTimeMillis((-1095L));
      uTF8JsonGenerator0.writeNumber("H");
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.abs();
      bigInteger1.intValue();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 235, (ObjectCodec) null, mockPrintStream0, byteArray0, 52, true);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)52);
      uTF8JsonGenerator0.writeRaw("write a binary value");
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeRaw("write a binary value");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeFieldName("write a binary value");
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = '|';
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRaw(charArray0, 125, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 125
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)35, (ObjectCodec) null, (OutputStream) null, byteArray0, (-1046), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      mockPrintStream1.println();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      iOContext0.allocWriteEncodingBuffer(1437);
      uTF8JsonGenerator0.writeRawValue("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.filter.FilteringParserDelegate", (float) 3);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-29);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BigInteger bigInteger0 = BigInteger.ONE;
      mockPrintStream0.append((CharSequence) "com.fasterxml.jackon.%ore.filter.FilteringWarserDelegate");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 102, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)24;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 997, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte)24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)40;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)40;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-903), (ObjectCodec) null, bufferedOutputStream0, byteArray0, (byte)14, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((int) (byte)68);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (byte)3);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)1;
      int int0 = 101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeNumber((-485L));
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (-6), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      System.setCurrentTimeMillis(3);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeStartArray();
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeRaw(".");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeNumber((long) (byte) (-29));
      char[] charArray0 = null;
      uTF8JsonGenerator0.writeString((char[]) null, 15, (-2296));
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) (-1356));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFile mockFile1 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFile mockFile2 = new MockFile("'6#g8>N*>ba;r>jp+");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile2);
      mockFileOutputStream1.getChannel();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 1, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("'6#g8>N*>ba;r>jp+");
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 114);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (byte) (-29), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2628, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator1.writeNumber("jw");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocWriteEncodingBuffer(56320);
      uTF8JsonGenerator1.writeRawValue("4c7");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      char[] charArray0 = new char[0];
      uTF8JsonGenerator1.writeRaw(charArray0, 2, (int) (byte) (-1));
      uTF8JsonGenerator1._outputSurrogates(2, 57343);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.abs();
      bigInteger1.intValue();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 235, (ObjectCodec) null, mockPrintStream0, byteArray0, 52, true);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)52);
      uTF8JsonGenerator0.writeRaw("write a binary value");
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeRaw("write a binary value");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeFieldName("write a binary value");
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2692, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((long) 57343);
      String string0 = ";6VZs/B|p\"Mtk";
      uTF8JsonGenerator0.writeObjectFieldStart(";6VZs/B|p\"Mtk");
      uTF8JsonGenerator0.writeRaw(";6VZs/B|p\"Mtk");
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      iOContext0.releaseConcatBuffer((char[]) null);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-6);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext0.allocWriteEncodingBuffer(1);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, (-1677), true);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParseDelegate", "com.fasterxml.jackson.core.filter.FilteringParseDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParseDelegate");
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-29);
      byteArray0[0] = (byte) (-29);
      byteArray0[0] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-82), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null, (int) (byte)35, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fpsterxma.jackson.core.filteq.FilteringParse)Delegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2628, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocWriteEncodingBuffer(56320);
      uTF8JsonGenerator1.writeRawValue("4c7");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      char[] charArray0 = new char[0];
      uTF8JsonGenerator1.writeRaw(charArray0, 2, (int) (byte) (-1));
      uTF8JsonGenerator1._outputSurrogates(2, 57343);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBinary(byteArray0, (-920), (-3));
      uTF8JsonGenerator0.writeRaw("tJb+s");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 50, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeUnquotedUTF8(bufferedOutputStream0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeNumber(1008);
      uTF8JsonGenerator0.writeRaw("Current context not an object but ");
      uTF8JsonGenerator1._verifyValueWrite("Current context not an object but ");
      uTF8JsonGenerator0._outputSurrogates(56319, 56320);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.abs();
      bigInteger1.intValue();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 235, (ObjectCodec) null, mockPrintStream0, byteArray0, 52, true);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)52);
      String string0 = "write a binary value";
      uTF8JsonGenerator0.writeRaw("write a binary value");
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeRaw("write a binary value");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeFieldName("write a binary value");
      try { 
        uTF8JsonGenerator0._writePPFieldName("write a binary value");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      uTF8JsonGenerator0.writeBooleanField("@sOYmHaNSG4mb[=\"Y;e", false);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)0;
      uTF8JsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.abs();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeRaw("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("5*hl\"b&^T");
      uTF8JsonGenerator0.writeFieldName("@sOYmHaNSG4mb[=\"Y;e");
      char[] charArray0 = new char[4];
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (int) (byte) (-112));
      uTF8JsonGenerator0.writeRaw("@sOYmHaNSG4mb[=\"Y;e");
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeString(charArray0, 31, (-2));
      uTF8JsonGenerator0.writeEndArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParse)Delegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParse)Delegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2628, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocWriteEncodingBuffer(56320);
      jsonGenerator0.writeFieldName("");
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 32765, 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeRaw("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator1.writeString(charArray0, 31, (-484));
      try { 
        jsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParse)Delegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParse)Delegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2628, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocWriteEncodingBuffer(56320);
      uTF8JsonGenerator1.writeRawValue("4c7");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      char[] charArray0 = new char[0];
      uTF8JsonGenerator1.writeRaw(charArray0, 2, (int) (byte) (-1));
      uTF8JsonGenerator1._outputSurrogates(2, 57343);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)27;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 235, false);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext1.allocWriteEncodingBuffer(3);
      uTF8JsonGenerator0._verifyPrettyValueWrite(".i", 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 4866);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeNumber((long) 3);
      String string1 = "";
      uTF8JsonGenerator0.writeString("");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.getLowestSetBit();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      System.setCurrentTimeMillis(10000000000L);
      String string2 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(byteArrayBuilder1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3712), (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder1.NO_BYTES, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.%ore.filter.FilteringWarserDelegate", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.%ore.filter.FilteringWarserDelegate");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-29), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeNumber((long) (byte) (-29));
      uTF8JsonGenerator0.writeString("");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.getLowestSetBit();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      System.setCurrentTimeMillis((-1095L));
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.filter.FilteringParserDelegate", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte byte0 = (byte)0;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print((-6076.314975041));
      int int0 = 1606;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1606, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 48, true);
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = '(';
      byteArrayOutputStream0.write(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, (-1448));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      mockFile0.setReadable(false, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      MockFile mockFile1 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1204), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 96, false);
      byte[] byteArray1 = new byte[6];
      uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.filter.FilteringParserDelegate", (BigDecimal) null);
      uTF8JsonGenerator0.writeNumber((double) 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-29);
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      try { 
        uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 111, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 13, 3553);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 111, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BigInteger bigInteger0 = BigInteger.ONE;
      jsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      uTF8JsonGenerator0.writeNumber((-2024L));
      mockPrintStream0.checkError();
      BigInteger bigInteger1 = BigInteger.ONE;
      jsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeRawValue("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate", 47, 0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1460), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      uTF8JsonGenerator0.writeFieldName("e0-Ps0~5gT+,<Y#,z @");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte byte0 = (byte)35;
      byte byte1 = (byte) (-82);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Illegal character (code 0x");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 5052, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      int int0 = 53;
      int int1 = 100;
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, (-371), 100);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.abs();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 235, (ObjectCodec) null, mockPrintStream0, byteArray0, 52, true);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)52);
      uTF8JsonGenerator0.writeRaw("write a binary value");
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeRaw("write a binary value");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeFieldName("write a binary value");
      try { 
        uTF8JsonGenerator0._writePPFieldName("write a binary value");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      System.setCurrentTimeMillis(3);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = new SerializedString("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 71, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber(1210L);
      uTF8JsonGenerator0.writeRaw("O$OU=G>n@qY V");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("-p/4X%Me;J)ht");
      uTF8JsonGenerator0.writeFieldName("-p/4X%Me;J)ht");
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(byteArrayBuilder1);
      int int0 = 281;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 281, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("\"r@>$pDI8X Mp]4Q", 3, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2692, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(1624L);
      uTF8JsonGenerator0.writeObjectFieldStart(";6VZs/B|p\"Mtk");
      String string0 = "";
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      int int0 = 5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte) (-29);
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeNumber((long) (byte) (-29));
      uTF8JsonGenerator0.writeString("");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (byte) (-29));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)35;
      int int0 = 11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 11, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("e0-Ps0~5gT+,<Y#,z @");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-29);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((long) (byte)17);
      uTF8JsonGenerator0.writeRaw("FLUSH_PASSED_TO_STREAM");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("AUTO_CLOSE_JSON_CONTENT");
      String string0 = "9k)?$c.>J65";
      uTF8JsonGenerator0.writeFieldName("9k)?$c.>J65");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, (-4063), 65599);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      uTF8JsonGenerator0.writeStartArray();
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte)14;
      uTF8JsonGenerator0.writeBinary(byteArray1, (-4556), (int) (byte)0);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)14, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1754, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.%ore.filter.FilteringWarserDelegate", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.%ore.filter.FilteringWarserDelegate");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BigInteger bigInteger0 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-29);
      byte byte0 = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-82), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)35, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      jsonGenerator0.useDefaultPrettyPrinter();
      int int0 = 128;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRawUTF8String(byteArray0, 53, 110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 8000);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)77;
      byte byte0 = (byte) (-106);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)31;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeStartArray();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("H#xbqj'N:Z", "write a number", true, '9', 1817);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 14)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeBooleanField("sta?t an ar)y", false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      jsonGenerator0.writeRawValue((SerializableString) serializedString0);
      jsonGenerator0.writeBoolean(false);
      IOContext iOContext1 = new IOContext(bufferRecycler1, "; illegal combination", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator1.writeRaw("?j,A$,%");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      byte[] byteArray0 = new byte[5];
      String string0 = "h:T-xF^^En),O~@)\",";
      MockPrintStream mockPrintStream0 = new MockPrintStream("h:T-xF^^En),O~@)\",");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3);
      byte byte0 = (byte) (-29);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedOutputStream0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.withEncoding(jsonEncoding0);
      String string1 = "n";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-22), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeRaw("0H_u8]zG5'");
      iOContext1.allocWriteEncodingBuffer((-28));
      uTF8JsonGenerator0.writeRawValue("n");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) (-198));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)50);
      uTF8JsonGenerator0.writeRaw("HY=^f");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeFieldName("5*hl\"b&^T");
      try { 
        uTF8JsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-470), (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("com.fasterxml.jackson.core.filter.FilteringParserDelegate", true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeRawValue("A3?ZMQ.Ds(\"'ZE38");
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      uTF8JsonGenerator0.writeNumber((long) 0);
      mockPrintStream0.checkError();
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      System.setCurrentTimeMillis(56320);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-470), (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeRawValue("A3?ZMQ.Ds(\"'ZE38");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      uTF8JsonGenerator0.writeNumber((long) 0);
      mockPrintStream0.checkError();
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      System.setCurrentTimeMillis(56320);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-29);
      uTF8JsonGenerator0.writeRaw("");
      try { 
        uTF8JsonGenerator0.writeNumber((long) (byte) (-29));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      serializedString0.writeUnquotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((int) (byte)14);
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      uTF8JsonGenerator0.writeBooleanField("@sOYmHaNSG4mb[=\"Y;e", false);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)0;
      uTF8JsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.abs();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeRaw("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeString("FVQ&UmCJV#?;u7r;$_");
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)56);
      uTF8JsonGenerator0.writeRaw("HY=^f");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeFieldName("5*hl\"b&^T");
      try { 
        uTF8JsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 8, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      uTF8JsonGenerator0.writeBooleanField("@sOYmHaNSG4mb[=\"Y;e", false);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)0;
      uTF8JsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.abs();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeRaw("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeRaw("_;4d0BgXztn!^)kx#x", (int) (byte)0, 13);
      uTF8JsonGenerator0.writeString("_;4d0BgXztn!^)kx#x");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)1, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      SerializedString serializedString0 = new SerializedString("");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((float) 2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 47, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      uTF8JsonGenerator0.writeStartArray();
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte)28;
      uTF8JsonGenerator0.writeBinary(byteArray1, (-4556), (int) (byte)0);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((-1113));
      uTF8JsonGenerator0.writeRaw("Current context not an object but ");
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      try { 
        uTF8JsonGenerator0._outputSurrogates((-563), (-2548));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xfffffdcd, second 0xfffff60c
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[0];
      int int0 = 182;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4556), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      String string0 = "e0-Ps0~5gT+,<Y#,z @";
      try { 
        uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      int int0 = (-1356);
      int int1 = 5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-29);
      int int2 = 268;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 268, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0, false);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(mockFileOutputStream0, 2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)117;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, mockPrintStream1, byteArray0, 42, false);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeNumber(0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      uTF8JsonGenerator0.writeBooleanField("@sOYmHaNSG4mb[=\"Y;e", false);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)0;
      uTF8JsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.abs();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeRaw("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("5*hl\"b&^T");
      uTF8JsonGenerator0.writeFieldName("@sOYmHaNSG4mb[=\"Y;e");
      uTF8JsonGenerator0.writeRaw('e');
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (int) (byte) (-74));
      uTF8JsonGenerator0.writeRaw("@sOYmHaNSG4mb[=\"Y;e");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-82);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1533, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 18, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 18, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 5, false);
      uTF8JsonGenerator1.writeRawUTF8String(byteArray0, 1, 56319);
      uTF8JsonGenerator1.writeStartArray((int) (byte)117);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 56320, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      mockFile0.setReadable(false, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      MockFile mockFile1 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      int int0 = 96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1204), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 96, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 0, 3);
      uTF8JsonGenerator0.writeStartArray((int) (byte) (-29));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2692, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(1624L);
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[1] = '';
      charArray0[4] = '4';
      charArray0[5] = '7';
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      charArray0[7] = 'D';
      charArray0[8] = 'u';
      uTF8JsonGenerator0.writeRaw(charArray0, (-1895), 0);
      String string0 = "start an array";
      String string1 = "cO1]e";
      char char0 = 'p';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-1895);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2692, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(1624L);
      char char0 = 'u';
      char char1 = 'D';
      char[] charArray0 = new char[9];
      uTF8JsonGenerator0.writeObjectFieldStart(";6VZs/B|p\"Mtk");
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[1] = '';
      charArray0[4] = '4';
      charArray0[5] = '7';
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-74);
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a binary value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 45, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeNumber(941);
      uTF8JsonGenerator0.writeNull();
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      char char0 = 'v';
      charArray0[1] = 'v';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 102, (ObjectCodec) null, mockPrintStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeNumber((-2158));
      char[] charArray0 = new char[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      charArray0[3] = '\u0000';
      char char0 = 'E';
      charArray0[4] = 'E';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      BigDecimal bigDecimal0 = new BigDecimal((long) 3);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte) (-29);
      byteArray1[5] = (byte) (-29);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray1, 1, 2);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockFile mockFile1 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 5);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)110, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (byte) (-29), false);
      String string0 = "e0-Ps0~5gT+,<Y#,z @";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("e0-Ps0~5gT+,<Y#,z @");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -29
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)27;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 224, false);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext1.allocWriteEncodingBuffer(3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue("=zW@?lS)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)35;
      boolean boolean0 = false;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2197), (ObjectCodec) null, (OutputStream) null, byteArray0, 52, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 102, (ObjectCodec) null, mockPrintStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeNumber((-2158));
      char[] charArray0 = new char[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      charArray0[3] = '\u0000';
      charArray0[4] = 'E';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      BigDecimal bigDecimal0 = new BigDecimal((long) 3);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte) (-29);
      byteArray1[5] = (byte) (-29);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray1, 1, 2);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[0];
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-817), (ObjectCodec) null, filterOutputStream0, byteArray0, 1051, true);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("'");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-29);
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeNumber((long) (byte) (-29));
      uTF8JsonGenerator0.writeString("");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      System.setCurrentTimeMillis((-1095L));
      uTF8JsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      uTF8JsonGenerator0.writeBooleanField("@sOYmHaNSG4mb[=\"Y;e", false);
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte)2;
      jsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      jsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        jsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      uTF8JsonGenerator0.writeFieldName("e0-Ps0~5gT+,<Y#,z @");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jacksn.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-6));
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)3, 3);
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber((-920));
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFile mockFile1 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 730, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1350, false);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeString((String) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-198), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRaw("n");
      iOContext0.allocWriteEncodingBuffer((-1313));
      uTF8JsonGenerator0.writeRawValue("/_`[KSo/~>b[g2e");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNumber((long) (byte)48);
      uTF8JsonGenerator0.writeRaw('S');
      String string0 = "10)#9ld!BkAwS";
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("10)#9ld!BkAwS", (float) 2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-84), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      char char0 = ')';
      char char1 = 'A';
      uTF8JsonGenerator0.writeRaw('y');
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2295, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-84), true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      StringReader stringReader0 = new StringReader("<MiI\u0006YK`rX>/uDl");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 8, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 3, (-796));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayBuilder byteArrayBuilder1 = readerBasedJsonParser0._getByteArrayBuilder();
      serializedString0.writeUnquotedUTF8(byteArrayBuilder1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("_e2yxxSe$=hKG", "com.fasterxml.jackson.core.Version", false, 'D', (-471));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 34)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFile mockFile1 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1204), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 96, false);
      uTF8JsonGenerator0.writeRaw("start an array");
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeRaw("EDp[!^");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, (-64), (-64));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)35;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFile0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-2462), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-198), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRaw("n");
      iOContext0.allocWriteEncodingBuffer((-1313));
      uTF8JsonGenerator0.writeRawValue("/_`[KSo/~>b[g2e");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNumber((long) (byte)48);
      String string0 = "10)#9ld!BkAwS";
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("10)#9ld!BkAwS", (float) 2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      byte byte0 = (byte)35;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.append((CharSequence) "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-10), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)3, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)4000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte)14;
      uTF8JsonGenerator0.writeBinary(byteArray1, (-4556), (int) (byte)0);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw('^');
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      uTF8JsonGenerator0.writeRawValue("");
      BigInteger bigInteger0 = BigInteger.ONE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) bigInteger0;
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeRaw((char[]) null, (-1356), 0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      mockPrintStream0.print((double) (byte)35);
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 33, false);
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      uTF8JsonGenerator0.writeString(charArray0, (-1876), 0);
      uTF8JsonGenerator0.writeNumber(4169.88);
      uTF8JsonGenerator0.writeNumber((float) (byte)46);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)25, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 45, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeNumber(941);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(89.21F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      StringReader stringReader0 = new StringReader("<MiI\u0006YK`rX>/uDl");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 8, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 3, (-796));
      uTF8JsonGenerator0.writeRaw("_e2yxxSe$=hKG");
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw('^');
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[13];
      uTF8JsonGenerator0.writeStartArray();
      byteArray1[0] = (byte)35;
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte)14;
      uTF8JsonGenerator0.writeBinary(byteArray1, (-4556), (int) (byte)0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.filter.FilteringParserDelegate", 1.0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)97;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-198), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRaw("n");
      iOContext0.allocWriteEncodingBuffer((-1313));
      uTF8JsonGenerator0.writeNumber(2615L);
      uTF8JsonGenerator0.writeRaw(")");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._verifyValueWrite("n");
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = 'J';
      charArray0[2] = 'u';
      charArray0[3] = '+';
      charArray0[4] = 'h';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-198), (-2033));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 102, (ObjectCodec) null, mockPrintStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeNumber(1L);
      uTF8JsonGenerator0.writeNumber((-2158));
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      charArray0[1] = '2';
      charArray0[2] = 'y';
      charArray0[3] = '\u001D';
      charArray0[4] = 'E';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = new BigDecimal((long) 3);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      uTF8JsonGenerator0.writeBooleanField("@sOYmHaNSG4mb[=\"Y;e", false);
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte)0;
      jsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      BigInteger bigInteger0 = BigInteger.ONE;
      jsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeRaw("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("5*hl\"b&^T");
      jsonGenerator0.writeStartObject();
      jsonGenerator0.writeFieldName("8CqZ[s~E+>MqHrNPk,b");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte)14;
      uTF8JsonGenerator0.writeBinary(byteArray1, (-4556), (int) (byte)0);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw('^');
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder1.toByteArray();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 281, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      mockPrintStream0.append((CharSequence) "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)4000);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("\"*H;B!uo!t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      byte byte0 = (byte) (-82);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 83, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      int int0 = 128;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-82);
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte) (-82);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (-3465), (-1468));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-29);
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeNumber((long) (byte) (-29));
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataOutputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = 'F';
      charArray0[2] = 'o';
      charArray0[3] = '<';
      charArray0[4] = '@';
      uTF8JsonGenerator0.writeString(charArray0, 3, (-572));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      System.setCurrentTimeMillis(723L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1370, (ObjectCodec) null, pipedOutputStream0, byteArray0, 4, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.core.JsonFactory$Feature");
      serializedString1.putUnquotedUTF8(byteBuffer0);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      int int0 = (-920);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)110;
      byteArray0[4] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-6), true);
      SerializedString serializedString0 = new SerializedString("Failed to decode VALUE_STRING as base64 (");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.faste}xmljackson.core.Versin", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(':');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      int int0 = (-83);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-83), (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2692, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(316L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)112;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 21, 240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      uTF8JsonGenerator0.writeStartArray();
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte)14;
      uTF8JsonGenerator0.writeBinary(byteArray1, (-4556), (int) (byte)0);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeStartArray();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("write a raw (unencoded) value", "write a raw (unencoded) value", true, 'u', 56319);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 29)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)35, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte) (-6), false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.putUnquotedUTF8(byteBuffer0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-42);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 102, (ObjectCodec) null, mockPrintStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeNumber(1L);
      uTF8JsonGenerator0.writeNumber((-2158));
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '2';
      charArray0[2] = 'y';
      charArray0[3] = '$';
      charArray0[4] = 'E';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = new BigDecimal((long) 3);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3311), (ObjectCodec) null, mockPrintStream0);
      short short0 = (short)54;
      uTF8JsonGenerator0.writeNumber((short)54);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((short)54);
      MockFile mockFile1 = new MockFile("");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-42);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (short) (-2898), (ObjectCodec) null, mockFileOutputStream1, byteArray0, (-1769), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, bufferedOutputStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = '7';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      uTF8JsonGenerator0.writeRawValue("");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) bigInteger0;
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)35;
      mockPrintStream0.format("", objectArray0);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeNumber((long) (-1356));
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-6));
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)3, 3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1895), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((long) 2);
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      char char0 = 'D';
      iOContext1.constructTextBuffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 512, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 512
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-6));
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)3, 3);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")+=4]");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-423), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, false);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("d3!Y[Hb7a0", "d3!Y[Hb7a0");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, filterOutputStream0, byteArray0, 50, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      uTF8JsonGenerator0.writeNumber(182);
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)110;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-198), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRaw("n");
      iOContext0.allocWriteEncodingBuffer((-1313));
      uTF8JsonGenerator0.writeNumber(2615L);
      uTF8JsonGenerator0.writeRaw(")");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._verifyValueWrite("n");
      SerializedString serializedString1 = new SerializedString("t>wJca@");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-470), (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeRawValue("A3?ZMQ.Ds(\"'ZE38");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      jsonGenerator0.writeNumber((short)3);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(55296);
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 811, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 253, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte)14;
      uTF8JsonGenerator0.writeBinary(byteArray1, (-4556), (int) (byte)0);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder1.toByteArray();
      DataOutputStream dataOutputStream1 = new DataOutputStream(byteArrayBuilder0);
      int int0 = (-1194);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-106);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1194), (ObjectCodec) null, filterOutputStream0, byteArray0, 1006, false);
      filterOutputStream0.write((int) (byte)33);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      MockFile mockFile1 = new MockFile(")P`Y5n!o5h!1R`j");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      iOContext0.allocWriteEncodingBuffer(0);
      uTF8JsonGenerator0.writeNumber("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1325, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2263, (ObjectCodec) null, mockFileOutputStream1, byteArrayBuilder0.NO_BYTES, 2024, false);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      try { 
        uTF8JsonGenerator1.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-876), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeBooleanField("uiXN!", true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeRawValue("uiXN!");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeRaw("uiXN!");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("}7>~Vu(SJ<xq^F4~[");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      uTF8JsonGenerator0.writeRawValue("");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      try { 
        uTF8JsonGenerator0._outputSurrogates(3, 2143);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x3, second 0x85f
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockFileOutputStream0.flush();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)35, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber(3);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 4096, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1895), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((long) 2);
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = 'u';
      charArray0[2] = 'D';
      charArray0[3] = '7';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 103);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 754, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0._verifyValueWrite("H'j!e");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayBuilder0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 754, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (byte)0, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeRawValue("start an array");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      uTF8JsonGenerator0.writeNumber(1L);
      uTF8JsonGenerator0.writeRaw("start an array");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 0, 261);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 0, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)9;
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1543, (ObjectCodec) null, dataOutputStream0, byteArray0, 44, false);
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      uTF8JsonGenerator0.writeBooleanField("@sOYmHaNSG4mb[=\"Y;e", false);
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte)0;
      jsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      BigInteger bigInteger0 = BigInteger.ONE;
      jsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeRaw("}7>~Vu(SJ<xq^F4~[");
      jsonGenerator0.writeBinary(byteArray0, 2, 2);
      jsonGenerator0.writeNumber((-694));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      System.setCurrentTimeMillis(723L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      int int0 = 9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 9, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      short short0 = (short) (-2898);
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-2898));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockFile mockFile1 = new MockFile("ROOT");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2179, false);
      uTF8JsonGenerator0.writeRaw("64");
      uTF8JsonGenerator0.writeNumber((long) 2179);
      uTF8JsonGenerator0.writeRaw("'6#g8>N*>ba;r>jp+");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-29), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeNumber(551);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = new BigDecimal((-638L));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      System.setCurrentTimeMillis(723L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2630), (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber(3);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = new BigDecimal((long) 0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 8);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid custom escape definitions; custom escape not found for character code 0x");
      mockFileOutputStream0.flush();
      System.setCurrentTimeMillis((-3666L));
      System.setCurrentTimeMillis(2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3320, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = '=';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((int) (byte)34);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)34, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      mockPrintStream0.println();
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("_V4` 6=cm{'<lh2", 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 224, false);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeNumber((long) (-920));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw("M{xnaA");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, (-1098), 3089);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1098
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(byteArrayBuilder1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 281, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("mhPt?q#a!.zW", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-198), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRaw("n");
      uTF8JsonGenerator0.writeNumber(2615L);
      uTF8JsonGenerator0.writeRaw(")");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("t");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 224, false);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeNumber((long) (-920));
      uTF8JsonGenerator0.writeRaw("M{xnaA");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "M{xnaA", 0, 1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 3217, (ObjectCodec) null, stringWriter1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      uTF8JsonGenerator0.writeBooleanField(")pGwDD4Xc>", false);
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte)0;
      jsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      BigInteger bigInteger0 = BigInteger.ONE;
      jsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      uTF8JsonGenerator0.writeNumber((-450L));
      uTF8JsonGenerator0.writeRaw("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("5*hl\"b&^T");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 8);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid custom escape definitions; custom escape not found for character code 0x");
      mockFileOutputStream0.flush();
      MockPrintStream mockPrintStream1 = new MockPrintStream("Failed copy(): ");
      mockPrintStream1.println();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2000, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (byte)14, false);
      uTF8JsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-306));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      uTF8JsonGenerator0.writeBooleanField(")pGwDD4Xc>", false);
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte)0;
      jsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      BigInteger bigInteger0 = BigInteger.ONE;
      jsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber((-450L));
      uTF8JsonGenerator0.writeRaw("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeStartArray();
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = '$';
      charArray0[2] = '>';
      charArray0[3] = '\'';
      charArray0[4] = 'B';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1063, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1063
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      mockFileOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.println();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 35, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((long) (-920));
      uTF8JsonGenerator0.writeNumber((-198));
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3019, (ObjectCodec) null, mockPrintStream0, byteArray0, (-920), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("CtFJ3d v4f|R1zM`U|R");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -920
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      String string1 = ")pGwDD4Xc>";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-356), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("0a(S%y -}!DK", false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 123, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = new BigDecimal(0.8);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 224, false);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      uTF8JsonGenerator0.writeNumber((long) (-920));
      uTF8JsonGenerator0.writeRaw("M{xnaA");
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = ';';
      charArray0[2] = 'A';
      charArray0[3] = '>';
      charArray0[4] = 'I';
      charArray0[5] = '0';
      uTF8JsonGenerator0.writeRaw(charArray0, 2851, 0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[4];
      Locale locale0 = Locale.KOREA;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format(locale1, "com.fasterxml.jackson.core.filter.FilteringParserDelegate", objectArray0);
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)99;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((float) 3);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      mockPrintStream0.print((float) 56319);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 57343, (byte)99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 224, false);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) (-920));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeBooleanField("start an array", false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeRaw("; illegal combination");
      uTF8JsonGenerator0.writeNumber((-1273L));
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = 'Y';
      charArray0[2] = 'G';
      charArray0[3] = 'M';
      charArray0[4] = '\\';
      charArray0[5] = '*';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 72, 844);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 72
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte)14;
      uTF8JsonGenerator0.writeBinary(byteArray1, (-4556), (int) (byte)0);
      uTF8JsonGenerator0.writeNumber((-3651));
      uTF8JsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      System.setCurrentTimeMillis(723L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 9, false);
      short short0 = (short) (-2898);
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-2898));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw("@sOYmHaNSG4mb[=\"Y;e");
      uTF8JsonGenerator0.writeNumber((long) (-2));
      uTF8JsonGenerator0.writeRaw("@sOYmHaNSG4mb[=\"Y;e");
      char char0 = ')';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", false, ')', 32768);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeBooleanField("start an array", false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeRaw("start an array");
      uTF8JsonGenerator0.writeNumber((-1273L));
      uTF8JsonGenerator0.writeRaw("write a number");
      jsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      BigDecimal bigDecimal0 = new BigDecimal(2331L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)101;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)99;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      jsonGenerator0.writeNumber((double) 55296);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 57343, (byte)99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[4];
      Locale locale0 = Locale.KOREA;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format(locale1, "com.fasterxml.jackson.core.filter.FilteringParserDelegate", objectArray0);
      byteArray0[0] = (byte)117;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 283, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBooleanField("", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      int int0 = 2203;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1536), (ObjectCodec) null, (OutputStream) null, byteArray0, 2203, true);
      int int1 = 510;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBooleanField("", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 33, false);
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      uTF8JsonGenerator0.writeRaw("CtFJ3d v4f|R1zM`U|R");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      String string0 = "start an array";
      uTF8JsonGenerator0.writeBooleanField("start an array", false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeRaw("; illegal combination");
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      try { 
        uTF8JsonGenerator0.writeObjectField("; illegal combination", pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(3171);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = new BigDecimal((long) (byte)35);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal2 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal2);
      uTF8JsonGenerator0.writeNumber("[fxW5Q");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      mockPrintStream0.println();
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      uTF8JsonGenerator0.writeNumber((-81L));
      uTF8JsonGenerator0.writeNumber(182);
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      uTF8JsonGenerator0.writeBooleanField("", false);
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte)0;
      jsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      jsonGenerator0.writeRaw("GJ|3)");
      uTF8JsonGenerator0.writeNumber((long) 1);
      jsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-29), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(551);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = new BigDecimal((-638L));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 33, false);
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      uTF8JsonGenerator0.writeString(charArray0, (-1876), 0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)22;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 224, false);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray((int) (byte)40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      uTF8JsonGenerator0.writeStartArray();
      String string0 = "5*hl\"b&^T";
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      uTF8JsonGenerator0.writeNumber(182);
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0.writeBooleanField(")pGwDD4Xc>", false);
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte)0;
      jsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      jsonGenerator0.writeRaw("GJ3)");
      uTF8JsonGenerator0.writeNumber((long) 1);
      jsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "Can not write a field name, expecting a value", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1557, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("c<OyjQ)F)%X@er");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)99;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 57343, (byte)99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.Version", "com.fasterxml.jackson.core.Version");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 2, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.appendTwoBytes(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.Version", "com.fasterxml.jackson.core.Version");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 65535, (-471));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, (OutputStream) null);
      String string0 = ")pGwDD4Xc>";
      uTF8JsonGenerator0.writeBooleanField("@sOYmHaNSG4mb[=\"Y;e", false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeRawValue("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      int int0 = (-154);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, (-154));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[12];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      mockFileOutputStream0.write(0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-557), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)35, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, (int) (byte)110, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 110
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      uTF8JsonGenerator0.writeBooleanField(")pGwDD4Xc>", false);
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte)0;
      jsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      jsonGenerator0.writeRaw("GJ3)");
      uTF8JsonGenerator0.writeNumber((long) 1);
      jsonGenerator0.writeRaw("");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-10);
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRawValue("Can not ");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((-581L));
      uTF8JsonGenerator0.writeRaw("Can not ");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeFieldName("}7>~Vu(SJ<xq^F4~[");
      uTF8JsonGenerator0.writeRaw('e');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1819, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-419));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = ":({gFo6ovb.E4>xQ*";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, ":({gFo6ovb.E4>xQ*", false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (-232), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(":({gFo6ovb.E4>xQ*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "com.fasterxml.jackson.core.Version";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 8, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("ntd#u@LYo)", 8, (-232));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-557), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)35, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, (int) (byte)110, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 110
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.Version", "com.fasterxml.jackson.core.Version");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.append((CharSequence) "c,diX");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2402, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 8, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeNumber("c,diX");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate", "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[4] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = 'y';
      charArray0[2] = '~';
      charArray0[3] = '!';
      charArray0[4] = 'J';
      charArray0[5] = ';';
      charArray0[6] = '(';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 8, (int) (byte)3);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      uTF8JsonGenerator0.writeNumber(182);
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "@sOYmHaNSG4mb[=\"Y;e";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      uTF8JsonGenerator0.writeBooleanField("@sOYmHaNSG4mb[=\"Y;e", false);
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte) (-74);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, (-507));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 182, (ObjectCodec) null, mockFileOutputStream0);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      int int0 = 182;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      uTF8JsonGenerator0.writeNumber((-97L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((byte[]) null, (int) (byte)55, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocNameCopyBuffer(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mGgb");
      iOContext0.allocTokenBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNull();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, tokenFilter0, false);
      String string0 = "c,diX";
      File file0 = MockFile.createTempFile("mGgb", "c,diX");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "c,diX");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)23;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4269, (ObjectCodec) null, filterOutputStream0, byteArray0, (-1625), true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "com.fasterxml.jackson.core.filter.FilteringParserDelegate";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.close();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte)14;
      uTF8JsonGenerator0.writeBinary(byteArray1, (-4556), (int) (byte)0);
      try { 
        uTF8JsonGenerator0.writeNumber((-3651));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      mockPrintStream0.println(2);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      mockPrintStream0.print((double) (byte)1);
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 33, false);
      uTF8JsonGenerator0.writeString("");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      System.setCurrentTimeMillis(4526L);
      uTF8JsonGenerator0.writeNumber("start an aOrray");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)18;
      byte byte0 = (byte)22;
      byteArray0[4] = (byte)22;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 224, false);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      int int0 = 99;
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStringField("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "com.fasterxml.jackson.core.Version";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      boolean boolean1 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-766), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1357, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-106);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 200, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-106), false);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 224, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator1.writeObject((Object) null);
      try { 
        uTF8JsonGenerator1._outputSurrogates((-1266), 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xfffffb0e, second 0x0
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      bufferedOutputStream0.flush();
      int int0 = 182;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      uTF8JsonGenerator0.writeNumber(3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((byte[]) null, (int) (byte)32, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[4] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      uTF8JsonGenerator0.writeNumber(182);
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = 'y';
      charArray0[2] = '~';
      charArray0[3] = '!';
      charArray0[4] = 'J';
      charArray0[5] = ';';
      charArray0[6] = '(';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 8, (int) (byte)3);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      uTF8JsonGenerator0.writeNumber(182);
      assertEquals(7L, mockFile0.length());
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2272, (ObjectCodec) null, (OutputStream) null, byteArray0, 110, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("et");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-106), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-506), true);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1946), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-198), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRaw("n");
      uTF8JsonGenerator0.writeNumber(2615L);
      uTF8JsonGenerator0.writeRaw(")");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      uTF8JsonGenerator0.writeBooleanField(")pGwDD4Xc>", false);
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte)0;
      jsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 56319, (-1223));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "@sOYmHaNSG4mb[=\"Y;e";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      uTF8JsonGenerator0.writeBooleanField(")pGwDD4Xc>", false);
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte)0;
      jsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      BigInteger bigInteger0 = BigInteger.ONE;
      jsonGenerator0.writeNumber(bigInteger0);
      try { 
        uTF8JsonGenerator0._outputSurrogates(31, 70);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x1f, second 0x46
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)22;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 224, false);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1356), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte)14;
      uTF8JsonGenerator0.writeBinary(byteArray1, (-4556), (int) (byte)0);
      uTF8JsonGenerator0.writeNumber((-3651));
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mGgb");
      iOContext0.allocTokenBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      writerBasedJsonGenerator0.writeNull();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, tokenFilter0, false);
      File file0 = MockFile.createTempFile("mGgb", "c,diX");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "c,diX");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)23;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4269, (ObjectCodec) null, filterOutputStream0, byteArray0, (-1625), true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("c,diX");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1625
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'w';
      charArray0[2] = '5';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 224, false);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 18, (ObjectCodec) null, (OutputStream) null, byteArray0, 8, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 8, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.Version");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext1.allocTokenBuffer((-873));
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 52, (ObjectCodec) null, pipedOutputStream0, byteArray0, 52, false);
      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 71);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 8);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler1, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 6, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "@sOYmHaNSG4mb[=\"Y;e";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      uTF8JsonGenerator0.writeBooleanField(")pGwDD4Xc>", false);
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, (-507));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)3;
      int int0 = 182;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-920), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 182, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((byte[]) null, (int) (byte)0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-470), (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("com.fasterxml.jackson.core.filter.FilteringParserDelegate", false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      uTF8JsonGenerator0.writeNumber((long) 0);
      mockPrintStream0.checkError();
      BigInteger bigInteger1 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeNumber(1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-83), (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"$Y;e", false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[4] = (byte)2;
      uTF8JsonGenerator0.writeBooleanField("@sOYmHaNSG4mb[=\"$Y;e", false);
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte)0;
      jsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"$Y;e");
      BigInteger bigInteger0 = BigInteger.ONE;
      jsonGenerator0.writeRaw("@sOYmHaNSG4mb[=\"$Y;e");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("RCLZjku$:o!$g:i", 127, 56320);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "com.fasterxml.jackson.core.Version";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "@sOYmHaNSG4mb[=\"Y;e";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byte byte0 = (byte) (-112);
      uTF8JsonGenerator0.writeBooleanField("@sOYmHaNSG4mb[=\"Y;e", false);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)0;
      uTF8JsonGenerator0.writeRawValue("@sOYmHaNSG4mb[=\"Y;e");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.abs();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = '3';
      charArray0[2] = 'L';
      charArray0[3] = '8';
      uTF8JsonGenerator0._charBuffer = charArray0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("}7>~Vu(SJ<xq^F4~[");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'w';
      charArray0[2] = '5';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 224, false);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-9.223372036854776E18));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte)83;
      byteArray1[4] = (byte) (-29);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, bufferedOutputStream0, byteArray1, 3, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)22;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 224, false);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (byte)22, (ObjectCodec) null, (OutputStream) null);
      try { 
        uTF8JsonGenerator1._outputSurrogates(3, 13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x3, second 0xd
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[7];
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 97, (ObjectCodec) null, mockPrintStream0, byteArray0, (-920), false);
      uTF8JsonGenerator0.getOutputTarget();
      Object object1 = new Object();
      IOContext iOContext3 = new IOContext(bufferRecycler0, object1, false);
      iOContext2.withEncoding(jsonEncoding0);
      Object object2 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext4 = new IOContext(bufferRecycler0, object2, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext4, (byte)0, (ObjectCodec) null, mockPrintStream0);
      try { 
        uTF8JsonGenerator1._outputSurrogates(0, 15);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x0, second 0xf
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mGgb");
      iOContext0.allocTokenBuffer();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, tokenFilter0, false);
      File file0 = MockFile.createTempFile("mGgb", "c,diX");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "c,diX");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(printStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)23;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4269, (ObjectCodec) null, filterOutputStream0, byteArray0, (-1625), true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1625
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartArray(3414);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ARRAY
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-74);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, (-507));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, (byte[]) null, 2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.Version", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2175);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 0, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 982, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-1), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("mhKv=U`#4*e?AZ'");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      int int0 = uTF8JsonGenerator0.getOutputBuffered();
      assertEquals(0, int0);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@sOYmHaNSG4mb[=\"Y;e", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte byte0 = (byte)1;
      BigInteger bigInteger0 = BigInteger.ONE;
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (-1622), (ObjectCodec) null, mockFileOutputStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("13-zv{o");
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }
}
