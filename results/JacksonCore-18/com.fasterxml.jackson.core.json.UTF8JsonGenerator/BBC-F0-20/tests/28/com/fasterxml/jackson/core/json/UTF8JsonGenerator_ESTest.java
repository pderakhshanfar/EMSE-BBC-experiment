/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:19:09 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte) (-90);
      byteArray1[2] = (byte) (-90);
      byteArray1[3] = (byte) (-90);
      byteArray1[4] = (byte) (-90);
      byteArray1[5] = (byte) (-90);
      byteArray1[6] = (byte) (-90);
      byteArray1[7] = (byte) (-90);
      byteArray1[8] = (byte) (-90);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 1, 2);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte) (-90), (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[2] = '0';
      charArray0[5] = '\'';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('0');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeElement(1860);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 716, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1860, false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (byte)118;
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 2);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)118;
      byteArray1[1] = (byte) (-69);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 1, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[2] = '0';
      charArray0[5] = '\'';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("'");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.type.ResolvedType");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFileOutputStream0.release();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.type.ResolvedType", ", expecting field name");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 992, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((-171.4102F));
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw('8');
      try { 
        uTF8JsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocReadIOBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom(2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeBinary((InputStream) null, 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-64), (ObjectCodec) null, (OutputStream) null, byteArray0, 3, false);
      SerializedString serializedString0 = new SerializedString("");
      bufferedInputStream0.close();
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g}rKhUWt9#", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("%", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)8, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      MockRandom mockRandom0 = new MockRandom(3);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getOutputTarget();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      byte[] byteArray0 = new byte[15];
      mockFileOutputStream0.close();
      iOContext1.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber(1L);
      SerializedString serializedString1 = new SerializedString("write a null");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(736);
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.type.ResolvedType");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("com.fasterxml.jackson.core.type.ResolvedType");
      mockFileOutputStream1.getChannel();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.type.ResolvedType");
      MockFile.createTempFile("com.fasterxml.jackson.core.type.ResolvedType", ", expecting field name");
      MockFileOutputStream mockFileOutputStream2 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 855, (ObjectCodec) null, mockFileOutputStream2);
      uTF8JsonGenerator0.writeNumber((-1700.4105F));
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not , expecting field name, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      byte[] byteArray0 = new byte[15];
      iOContext1.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 7, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      mockFileOutputStream0.close();
      uTF8JsonGenerator0.writeFieldName(")/X)\"Qom_E#B&Pnb");
      uTF8JsonGenerator0.writeRaw("");
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.getOutputBuffered();
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) mockPrintStream0;
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-90));
      uTF8JsonGenerator0.writeStartArray();
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = 'v';
      charArray0[2] = 'E';
      charArray0[3] = '1';
      charArray0[4] = '!';
      charArray0[5] = '$';
      charArray0[6] = 'P';
      charArray0[7] = 't';
      uTF8JsonGenerator0.writeRaw(charArray0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(1860);
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(3);
      TokenFilter tokenFilter3 = tokenFilter2.filterStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 32, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-1777), (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Q^5gXgE6t1");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q^5gXgE:1", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) mockPrintStream0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      byte[] byteArray1 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray1, 3, false);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (byte) (-90);
      doubleArray0[3] = (double) 55296;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 57343;
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, 1);
      uTF8JsonGenerator0._entityBuffer = byteArray0;
      uTF8JsonGenerator0.writeBooleanField("", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 56320, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 256, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("", byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockRandom mockRandom0 = new MockRandom(2325L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeRaw("': expected '");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 3);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 2763);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("g}rKhUWt9#", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("%", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)8, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      MockRandom mockRandom0 = new MockRandom(3);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getOutputTarget();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      System.setCurrentTimeMillis(1622L);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&bn\\JT");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("&bnJT/%$B");
      PrintStream printStream0 = mockPrintStream0.append('O');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1739);
      byteArrayOutputStream0.write(112);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-233), (ObjectCodec) null, printStream0, byteArray0, 6, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 1739);
      uTF8JsonGenerator0.writeStartArray();
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      uTF8JsonGenerator0.writeString(charArray0, 43, 0);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "com.fasterxml.jackson.core.type.ResolvedType";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.type.ResolvedType");
      MockFile.createTempFile("com.fasterxml.jackson.core.type.ResolvedType", "com.fasterxml.jackson.core.type.ResolvedType");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("com.fasterxml.jackson.core.type.ResolvedType");
      mockFileOutputStream1.getChannel();
      char char0 = 'l';
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 536868253, (ObjectCodec) null, mockFileOutputStream1);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeFieldName(")/X)\"Qom_E#B&Pnb");
      try { 
        uTF8JsonGenerator0.writeFieldName("~d");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = '(';
      charArray0[2] = 'H';
      charArray0[3] = '2';
      charArray0[4] = 'r';
      charArray0[5] = 'v';
      charArray0[6] = '>';
      charArray0[7] = '?';
      charArray0[8] = 'f';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeStartObject();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 4073, 22);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("oJNFb;.%z1h(/+NCJ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print((-1));
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-683), (ObjectCodec) null, mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((-683));
      tokenFilter1.filterStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 559);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 559 bytes (out of 559)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeRootValue(0);
      tokenFilter0.filterStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1439, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-205));
      uTF8JsonGenerator0.writeNumber((float) (byte)118);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext1.allocReadIOBuffer();
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 221, true);
      char[] charArray0 = new char[5];
      charArray0[1] = 'l';
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 3999);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3176);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 3167 bytes (out of 3176)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-63);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayOutputStream0.write((int) (byte)0);
      byteArray0[3] = (byte) (-63);
      MockRandom mockRandom0 = new MockRandom((byte) (-63));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-63), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber((float) (byte) (-63));
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.type.ResolvedType");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("com.fasterxml.jackson.core.type.ResolvedType");
      mockFileOutputStream1.getChannel();
      byte[] byteArray0 = new byte[17];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, mockFileOutputStream1);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeStartObject();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)13;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)127;
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-63);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayOutputStream0.write((int) (byte)0);
      byteArray0[3] = (byte) (-63);
      MockRandom mockRandom0 = new MockRandom((byte) (-63));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = new BigDecimal((long) 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2684, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2047, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      MockRandom mockRandom0 = new MockRandom(2);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getOutputTarget();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      System.setCurrentTimeMillis((byte)32);
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = 'O';
      charArray0[2] = '<';
      charArray0[3] = 'a';
      charArray0[4] = 'r';
      charArray0[5] = '@';
      uTF8JsonGenerator0.writeRaw(charArray0, (-2842), (-250));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-90), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 576, false);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumberField("': expected '", (double) 69);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Random.setNextRandom(2100);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "': expEcted H";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expEcted H", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      char[] charArray0 = iOContext1.allocTokenBuffer();
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2100, true);
      uTF8JsonGenerator0.writeString(charArray0, 32, 686);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 2100);
      System.setCurrentTimeMillis(2);
      uTF8JsonGenerator0.writeFieldName("': expEcted H");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.type.ResolvedType");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-343), (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      byteArrayOutputStream0.write(2);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate1.getCodec();
      uTF8JsonGenerator0.writeNumber((float) 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.flush();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._writePPFieldName(serializedString1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&bn\\JT");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("&bnJT/%$B");
      PrintStream printStream0 = mockPrintStream0.append('r');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(207);
      byteArrayOutputStream0.write(21);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-78), (ObjectCodec) null, printStream0, byteArray0, 1000000, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 0);
      uTF8JsonGenerator0.writeStartArray();
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 0, 6);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.type.ResolvedType");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("com.fasterxml.jackson.core.type.ResolvedType");
      mockFileOutputStream1.getChannel();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.type.ResolvedType");
      MockFile.createTempFile("com.fasterxml.jackson.core.type.ResolvedType", ", expecting field name");
      MockFileOutputStream mockFileOutputStream2 = new MockFileOutputStream(mockFile0);
      char char0 = 'l';
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.writeFieldName(")/X)\"Qom_E#B&Pnb");
      try { 
        uTF8JsonGenerator0.writeFieldName(")/X)\"Qom_E#B&Pnb");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocReadIOBuffer();
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 221, true);
      char[] charArray0 = new char[5];
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 4, 0);
      int int0 = 53;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      MockRandom mockRandom0 = new MockRandom(2325L);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getOutputTarget();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      System.setCurrentTimeMillis(2424L);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byteArrayOutputStream0.write(0);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      JsonGenerator jsonGenerator0 = filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      jsonGenerator0.getCodec();
      uTF8JsonGenerator0.writeNumber(0.0F);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 3);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      sequenceInputStream0.skip(3326L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, sequenceInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Random.setNextRandom(2100);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "Longest collision chain in symbol table (of size ";
      MockFile mockFile0 = new MockFile("Longest collision chain in symbol table (of size ", "Longest collision chain in symbol table (of size ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.getChannel();
      mockFile0.setReadable(false, false);
      byteArray0[1] = (byte)96;
      byteArray0[3] = (byte) (-103);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-29), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      byte[] byteArray1 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray1, 221, true);
      char[] charArray0 = new char[5];
      charArray0[1] = 'l';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[3] = '\u001E';
      charArray0[4] = 'l';
      int int0 = 1444;
      int int1 = 3851;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, int0, int1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "': expected '";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7965, (ObjectCodec) null, mockFileOutputStream0);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      uTF8JsonGenerator1.writeNumber(0.0F);
      uTF8JsonGenerator1.writeString("': expected '");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 2, 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocReadIOBuffer(124);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", expecting field name");
      File file0 = MockFile.createTempFile("': expected '", ", expecting field name");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream1);
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '[';
      charArray0[2] = '.';
      charArray0[3] = '5';
      charArray0[4] = 'w';
      charArray0[5] = '~';
      charArray0[2] = '2';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "'^ exU-ected ]";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'^ exU-ected ]", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocReadIOBuffer();
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 221, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 2205);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      byte[] byteArray1 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray1, 221, true);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("bom.fasterx(l.jackson.core.tJpe.ResolvedType");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("bom.fasterx(l.jackson.core.tJpe.ResolvedType");
      mockFileOutputStream1.getChannel();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeRootValue(56319);
      tokenFilter0.filterStartObject();
      MockRandom mockRandom0 = new MockRandom(4);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, (-295));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "': expected '";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      byte[] byteArray1 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray1, 221, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte) (-90), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -90
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)8;
      iOContext1.constructTextBuffer();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("': expected '", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)8, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 48, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      MockRandom mockRandom0 = new MockRandom(2325L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName(" slots -- suspect a DoS attack based on hash collisions.");
      uTF8JsonGenerator0.writeNumber((float) 53);
      uTF8JsonGenerator0.writeString(" slots -- suspect a DoS attack based on hash collisions.");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocReadIOBuffer();
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 221, true);
      char[] charArray0 = new char[5];
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 4, 0);
      uTF8JsonGenerator0.writeStartArray();
      int int0 = 43;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&bn\\JT");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("&bnJT/%$B");
      PrintStream printStream0 = mockPrintStream0.append('O');
      byte[] byteArray0 = new byte[2];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1739);
      byteArrayOutputStream0.write(112);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-233), (ObjectCodec) null, printStream0, byteArray0, 6, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 1739);
      uTF8JsonGenerator0.writeStartArray();
      char[] charArray0 = new char[12];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      uTF8JsonGenerator0.writeString(charArray0, 43, 0);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((long) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Random.setNextRandom(2100);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      iOContext1.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(115);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)40;
      uTF8JsonGenerator0.writeBinaryField("': expected '", byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "': expected '";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      mockFileOutputStream0.write(byteArray0, 0, (int) (byte)25);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 48, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, (byte)25);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pushbackInputStream1, 224);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byteArrayOutputStream0.write(0);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((float) 8000);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.flush();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '_';
      charArray0[2] = '5';
      charArray0[3] = '>';
      charArray0[4] = '1';
      charArray0[5] = '4';
      charArray0[6] = ',';
      charArray0[7] = 'u';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1595), 2700, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("NJ6|WCk/}4]@$B[^N");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Too few bytes available: missing ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1253, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeFieldName("NJ6|WCk/}4]@$B[^N");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.type.ResolvedType");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("com.fasterxml.jackson.core.type.ResolvedType");
      mockFileOutputStream1.getChannel();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(0L);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("W%960<M}M");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 536868255, (ObjectCodec) null, mockFileOutputStream1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.type.ResolvedType");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("com.fasterxml.jackson.core.type.ResolvedType");
      mockFileOutputStream1.getChannel();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(0L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      uTF8JsonGenerator0.writeNumber(2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("", byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext1.allocReadIOBuffer(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", expecting field name");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 13, (ObjectCodec) null, mockFileOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Random.setNextRandom(2100);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      char[] charArray0 = iOContext1.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2100, true);
      uTF8JsonGenerator0.writeString(charArray0, 32, 686);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-479), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "&bn\\JT/%$B";
      MockPrintStream mockPrintStream0 = new MockPrintStream("&bnJT/%$B");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      int int0 = 55;
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, (-1823), 6);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      StringReader stringReader0 = new StringReader(" G(a{");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1494);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 80, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 33, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.print((Object) bufferRecycler0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeProperty("write a boolean value");
      tokenFilter2.includeRootValue(4);
      tokenFilter0.filterStartObject();
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      MockRandom mockRandom0 = new MockRandom(3);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("W%960<M}M");
      uTF8JsonGenerator0.writeNumber((-878.3687F));
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 1, 0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext1.allocReadIOBuffer(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", expecting field name");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-53), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      tokenFilter0.includeProperty("': expected '");
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(56320);
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(56320);
      tokenFilter2.filterStartObject();
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      uTF8JsonGenerator0.writeBinary((InputStream) null, 0);
      uTF8JsonGenerator0.writeNumber(1819.0F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocReadIOBuffer();
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 229, false);
      try { 
        uTF8JsonGenerator0.writeNumber((short)1023);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 48, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      String string0 = "";
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("': expected '", 1, 54);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2034), (ObjectCodec) null, bufferedOutputStream1, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byteArrayOutputStream0.write(0);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((float) 8000);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeObjectFieldStart("k$zf?");
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("[Source: ");
      uTF8JsonGenerator0.writeNumber((float) (byte)104);
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print(686);
      iOContext1.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      TokenFilter tokenFilter2 = tokenFilter1.includeProperty((String) null);
      tokenFilter2.includeRootValue(0);
      tokenFilter1.filterStartObject();
      MockRandom mockRandom0 = new MockRandom((-1149L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(469);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1602), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 2394);
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Random.setNextRandom(2114);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Longest collision chain in symbol table (of size ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.getChannel();
      byteArray0[1] = (byte)96;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3214, (ObjectCodec) null, mockFileOutputStream0);
      String string0 = null;
      uTF8JsonGenerator0.writeString((String) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 0, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JZ&2#kf#", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(506);
      tokenFilter0.filterStartObject();
      tokenFilter1.includeProperty(";D:^u'p+G*h=OIB!oL");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      String string0 = "I\"\\TB!)2F\\u\"1AHd";
      uTF8JsonGenerator0.writeRaw(string0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 400, 3);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1304);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("YC ayoe>NWhdU|KeOfj");
      mockPrintStream0.append('B');
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockRandom mockRandom0 = new MockRandom(2);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 66, 1542);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.constructTextBuffer();
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[3];
      OutputStream outputStream0 = null;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 65, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&bn\\JT");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("&bnJT/%$B");
      PrintStream printStream0 = mockPrintStream0.append('O');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1739);
      mockPrintStream0.print(false);
      byteArrayOutputStream0.write(112);
      MockRandom mockRandom0 = new MockRandom(577L);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      int int0 = (-233);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-233), (ObjectCodec) null, printStream0, byteArray0, 6, true);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("&bnJT/%$B");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 112, 1381);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 6);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray0, (-651));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&bn\\JT");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("&bnJT/%$B");
      PrintStream printStream0 = mockPrintStream0.append('O');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1739);
      byteArrayOutputStream0.write(112);
      MockRandom mockRandom0 = new MockRandom(577L);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-233), (ObjectCodec) null, printStream0, byteArray0, 6, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 1739);
      uTF8JsonGenerator0.writeStartArray();
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      uTF8JsonGenerator0.writeString(charArray0, 43, 0);
      uTF8JsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 686, true);
      uTF8JsonGenerator0.writeNumberField("': expected '", (long) 2);
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      charArray0[6] = 'n';
      charArray0[7] = 'D';
      int int0 = 126;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No FormatFeatures defined for generator of type ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeFieldName("No FormatFeatures defined for generator of type ");
      uTF8JsonGenerator0.writeNumber(779.034F);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 11);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocReadIOBuffer();
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 221, true);
      uTF8JsonGenerator0.writeNumber(2137L);
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 48, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 55296, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 23, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = 'D';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'm';
      charArray0[6] = '\u001E';
      charArray0[7] = 'l';
      charArray0[8] = 'D';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 2355);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 686, true);
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      charArray0[6] = 'n';
      charArray0[7] = 'D';
      uTF8JsonGenerator0.writeBoolean(true);
      int int0 = 126;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JZ&2#kf#", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      tokenFilter0.includeProperty(";D:^u'p+G*h=OIB!oL");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, tokenFilter0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1195, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('k');
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1023, 1023);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1023
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-26);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockRandom mockRandom0 = new MockRandom(3);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        iOContext0.allocWriteEncodingBuffer();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JZ&2#kf#", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(506);
      tokenFilter0.filterStartObject();
      tokenFilter1.includeProperty(";D:^u'p+G*h=OIB!oL");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, tokenFilter0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 93, false);
      uTF8JsonGenerator0.writeRaw('k');
      uTF8JsonGenerator0.writeNumber(1880);
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2668, 1880);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2668
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      mockFileOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) iOContext0;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, true);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2687), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2672, false);
      uTF8JsonGenerator0.writeFieldName("Nnk#");
      uTF8JsonGenerator0.writeNumber((float) 2676);
      Locale locale0 = Locale.ITALY;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "': expected '", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArray0, 2, true);
      int int0 = 116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        uTF8JsonGenerator0.writeTypeId(sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing Type Ids
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Random.setNextRandom(2114);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No FormatFeatures defined for generator of type ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-90), true);
      mockPrintStream0.println("No FormatFeatures defined for generator of type ");
      SerializedString serializedString0 = new SerializedString("No FormatFeatures defined for generator of type ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext1.allocReadIOBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 55296, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((-2931));
      tokenFilter1.filterStartObject();
      MockRandom mockRandom0 = new MockRandom(2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeBinary((InputStream) null, 0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) 1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-184), (ObjectCodec) null, (OutputStream) null, byteArray0, 11, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'v';
      charArray0[5] = '\'';
      int int0 = (-3037);
      String string0 = "write a null";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("write a null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-184), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'v';
      charArray0[5] = '\'';
      charArray0[6] = '8';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("1q0hY@xu(\"v");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No FormatFeatures defined for generator of type ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFileOutputStream0.write((-282));
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2676, false);
      uTF8JsonGenerator0.writeFieldName("No FormatFeatures defined for generator of type ");
      uTF8JsonGenerator0.writeNumber(779.034F);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 11);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JZ&2#kf#", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(506);
      tokenFilter0.filterStartObject();
      tokenFilter1.includeProperty(";D:^u'p+G*h=OIB!oL");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      String string0 = "I\"\\TB!)2F\\u\"1AHd";
      uTF8JsonGenerator0.writeRaw(string0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 400, 3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "': expected '";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext1.allocReadIOBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 55296, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      int int0 = GeneratorBase.SURR2_FIRST;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      iOContext1.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 48, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 55296, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 23, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-3161L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      byte[] byteArray1 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray1, 55296, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((-2931));
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      TokenFilter tokenFilter3 = tokenFilter2.includeProperty(";D:^u'p+G*h=OIB!oL");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, false, true);
      uTF8JsonGenerator0.writeRaw("|B{5}K@");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 55296, (-678));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeStartObject();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)5;
      byte byte0 = (byte)54;
      byteArray0[2] = (byte)54;
      int int0 = 518;
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)54, 518);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(267);
      byteArrayOutputStream0.write(1040);
      MockRandom mockRandom0 = new MockRandom(3);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-93);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("S4%IikN=Ed", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(121);
      uTF8JsonGenerator0.writeStartObject();
      String string0 = "I9oCy(>br/@[iLTqH#0";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("I9oCy(>br/@[iLTqH#0", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&bn\\JT");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("&bnJT/%$B");
      mockPrintStream0.append('O');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1739);
      byteArrayOutputStream0.write(112);
      MockRandom mockRandom0 = new MockRandom(577L);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 11, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-2341));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-58);
      byteArrayOutputStream0.write((int) (byte)0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[1] = (byte) (-58);
      byteArray0[6] = (byte)0;
      MockRandom mockRandom0 = new MockRandom(577L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (-948), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((float) (byte) (-53));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      jsonGenerator0.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0.writeNumber(6);
      jsonGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, (-2698));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("start an object", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) bufferRecycler0;
      objectArray0[1] = (Object) iOContext0;
      objectArray0[2] = (Object) iOContext1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockFileOutputStream0;
      mockPrintStream0.printf("start an object", objectArray0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(43);
      uTF8JsonGenerator0.writeBinaryField("': expected '", byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-184), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'v';
      charArray0[5] = '\'';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream0, (-3037));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocReadIOBuffer();
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 229, true);
      char[] charArray0 = new char[5];
      charArray0[1] = 'l';
      charArray0[2] = 'D';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[4] = 'l';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.constructTextBuffer();
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)54;
      byte byte0 = (byte) (-115);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-114);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3847, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-115), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = '\'';
      charArray0[2] = 'L';
      charArray0[3] = '%';
      charArray0[4] = '-';
      charArray0[5] = '1';
      charArray0[6] = 'I';
      charArray0[7] = '~';
      charArray0[8] = '3';
      uTF8JsonGenerator0._charBuffer = charArray0;
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(267);
      byteArrayOutputStream0.write(1040);
      MockRandom mockRandom0 = new MockRandom(3);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-93);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1040);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, (OutputStream) null, byteArray0, 11, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "': expected '";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      jsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)34, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[1] = (byte)108;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)108, 3308);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 108
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-184), (ObjectCodec) null, (OutputStream) null, byteArray0, (-184), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[2] = 'w';
      charArray0[3] = 'v';
      charArray0[5] = '\'';
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -184
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext1.allocReadIOBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 55296, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((-2931));
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      tokenFilter2.includeProperty(";D:^u'p+G*h=OIB!oL");
      MockRandom mockRandom0 = new MockRandom(2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("write a null");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      iOContext1.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 48, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.setHighestNonEscapedChar(43);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("': expected '", 114);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      mockPrintStream0.printf(locale0, "': expected '", objectArray0);
      iOContext0.allocReadIOBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBooleanField("", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) "': expected '";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 80, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber(36);
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      uTF8JsonGenerator0.writeNumber((short) (-2));
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1658, 23);
      uTF8JsonGenerator0.writeNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1414), (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)104;
      byteArrayOutputStream0.write((int) (byte)104);
      FilteringGeneratorDelegate filteringGeneratorDelegate1 = new FilteringGeneratorDelegate(filteringGeneratorDelegate0, tokenFilter0, false, true);
      filteringGeneratorDelegate1.useDefaultPrettyPrinter();
      filteringGeneratorDelegate1.getCodec();
      uTF8JsonGenerator0.writeNumber((float) 0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("");
      serializedString1.asUnquotedUTF8();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("");
      try { 
        uTF8JsonGenerator0._writePPFieldName("#;NeEqG=L5~B#");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(7993);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-58);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)104;
      byteArrayOutputStream0.write((int) (byte)104);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[4] = (byte) (-58);
      byteArray0[6] = (byte) (-58);
      MockRandom mockRandom0 = new MockRandom(577L);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1291), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(1.0F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'w';
      charArray0[2] = 'a';
      charArray0[3] = 'v';
      charArray0[5] = '\'';
      charArray0[6] = '8';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferedOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 380, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 0, 1898);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream((InputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream1, true);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 981, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      int[] intArray0 = new int[3];
      intArray0[0] = 56320;
      intArray0[1] = 55296;
      intArray0[2] = 55296;
      uTF8JsonGenerator0._outputEscapes = intArray0;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(717.4133F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 10, false);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)47;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1999, (ObjectCodec) null, printStream0, byteArray0, 3130, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-8), (ObjectCodec) null, bufferedOutputStream0, byteArray0, (byte) (-10), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -10
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      ObjectCodec objectCodec0 = null;
      int int0 = (-2809);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"cyO");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2809), (ObjectCodec) null, mockPrintStream1, byteArray0, 2668, false);
      int int1 = 12;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 2, (byte)69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)114;
      MockRandom mockRandom0 = new MockRandom((-1L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-205), (ObjectCodec) null, pipedOutputStream0, byteArray1, 9, false);
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)8, false);
      uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom((-926L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName(")it;E=P^[\"7NUD/*a:");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocReadIOBuffer();
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 229, true);
      char[] charArray0 = new char[5];
      charArray0[1] = 'l';
      charArray0[2] = 'D';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[3] = '\u001E';
      charArray0[4] = 'l';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      String string0 = "";
      iOContext1.allocReadIOBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 229, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((-2931));
      TokenFilter tokenFilter2 = tokenFilter1.filterStartObject();
      TokenFilter tokenFilter3 = tokenFilter2.includeProperty(";D:^u'p+G*h=OIB!oL");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, false, true);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeRawValue(charArray0, 3, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("|% )Na+!9Q[,0Z)", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-557), (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Can not ", 4000, 4000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      jsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom((-1125L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("");
      jsonGenerator0.writeNumber((-334.15784F));
      uTF8JsonGenerator0._verifyValueWrite("': expected '");
      uTF8JsonGenerator0.writeNumber((double) 57343);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "': expected '";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext1.allocReadIOBuffer(2);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-53), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(10);
      SerializedString serializedString0 = new SerializedString("': expected '");
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      iOContext0.setEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      boolean boolean0 = true;
      int int0 = 2672;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)114, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2672, true);
      try { 
        uTF8JsonGenerator0.writeString("=");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&bn\\JT");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "+bn\\J6/~$B";
      MockPrintStream mockPrintStream0 = new MockPrintStream("+bnJ6/~$B");
      PrintStream printStream0 = mockPrintStream0.append('O');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)112;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 7, (ObjectCodec) null, printStream0, byteArray0, 97, false);
      printStream0.print((Object) "+bnJ6/~$B");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis(57343);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(7);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1414), (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)104;
      byteArrayOutputStream0.write((int) (byte)104);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)104;
      byteArray0[4] = (byte) (-58);
      byteArray0[6] = (byte)0;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("[C");
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
      iOContext0.allocBase64Buffer();
      MockRandom mockRandom0 = new MockRandom((-1125L));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)34;
      intArray0[1] = 91;
      intArray0[2] = 3;
      intArray0[3] = 0;
      uTF8JsonGenerator1._outputEscapes = intArray0;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator1.writeNumber((-334.15784F));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 55296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext1.allocReadIOBuffer();
      byte[] byteArray0 = new byte[20];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 229, true);
      char[] charArray0 = new char[5];
      charArray0[1] = 'l';
      charArray0[2] = 'D';
      charArray0[3] = '%';
      charArray0[4] = 'D';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, (OutputStream) null, byteArray0, 11, true);
      String string0 = "";
      SerializableString serializableString0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      boolean boolean0 = true;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 191, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[5];
      charArray0[1] = 'l';
      charArray0[2] = 'D';
      charArray0[4] = 'D';
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray1, 4132, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte) (-90));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte) (-16));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding1);
      iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)49;
      iOContext0.constructTextBuffer();
      byteArray0[1] = (byte)49;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 74, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(2);
      // Undeclared exception!
      jsonGenerator0.writeNumberField("x(Y{J+OR,,0E)UwUHJ", 3);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No FormatFeatures defined for generator of type ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext1.allocReadIOBuffer();
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1457, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(55296);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      String string0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-107);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 672, true);
      uTF8JsonGenerator0.setHighestNonEscapedChar((byte) (-78));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((short)40);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      mockPrintStream0.print(686);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(1722);
      uTF8JsonGenerator0.writeBinaryField("49d&/{hI", byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal((long) 3);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      String string0 = null;
      int int0 = 64;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 64, 191);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("O/Q}Bi/''m", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.setHighestNonEscapedChar(833);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext2 = new IOContext(bufferRecycler0, tokenFilter0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((short) (-7));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("^O&2");
      PrintStream printStream0 = mockPrintStream0.append('<');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeString("&bnJT/%$B");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 56319;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) '<';
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 56320;
      doubleArray0[7] = 2313.0;
      doubleArray0[8] = (double) 56320;
      uTF8JsonGenerator0.writeArray(doubleArray0, 3, 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("^O&2", (-784));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.flush();
      Object[] objectArray0 = new Object[0];
      iOContext1.allocTokenBuffer();
      mockPrintStream0.printf("", objectArray0);
      mockPrintStream0.print(686);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      System.setCurrentTimeMillis(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 7, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 2);
      bufferRecycler0.allocCharBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator((IOContext) null, 55296, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      jsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom((-1125L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("");
      jsonGenerator0.writeNumber((-334.15784F));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&bn\\JT");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "&bn\\JT/%$B";
      MockPrintStream mockPrintStream0 = new MockPrintStream("&bnJT/%$B");
      PrintStream printStream0 = mockPrintStream0.append('O');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)112;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1739, (ObjectCodec) null, printStream0, byteArray0, 97, false);
      printStream0.print((Object) "&bnJT/%$B");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1739;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 'O';
      doubleArray0[4] = (double) 56319;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, (-1229), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1229
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "': expected '";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "': expected '");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("': expected '", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "", true);
      byte[] byteArray0 = iOContext2.allocReadIOBuffer();
      int int0 = 229;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (-2190), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No FormatFeatures defined for generator of type ", true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      iOContext0.allocWriteEncodingBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[3] = '%';
      charArray0[4] = 'l';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      Random.setNextRandom(2475);
      uTF8JsonGenerator0.writeNumber((long) 2475);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.flush();
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.printf("", objectArray0);
      mockPrintStream0.print(686);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 686, true);
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      charArray0[6] = 'n';
      charArray0[7] = 'D';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext1.allocReadIOBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 229, true);
      uTF8JsonGenerator0.writeRaw("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2967);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      mockPrintStream0.print(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 7971, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (-1675), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1675
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)114;
      byteArray1[4] = (byte)51;
      byteArray1[5] = (byte)51;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-205), (ObjectCodec) null, pipedOutputStream0, byteArray1, (byte)51, true);
      BigInteger bigInteger0 = BigInteger.valueOf((byte)114);
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)51;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 74, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      BigInteger bigInteger0 = BigInteger.valueOf(0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      try { 
        uTF8JsonGenerator0.writeNumber((float) (byte)114);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((float) (byte) (-53));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      jsonGenerator0.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0.writeNumber(6);
      jsonGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, (-2698));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 583, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, (OutputStream) null, byteArray0, 56319, true);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1081, 0, mockRandom0);
      int int0 = 123;
      String string1 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-539), (ObjectCodec) null, mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, true);
      uTF8JsonGenerator1.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((short)8);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator1._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writePPFieldName("': expected '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      uTF8JsonGenerator0.flush();
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '(';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-324), 1985);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -324
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext1.allocReadIOBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      char[] charArray0 = new char[5];
      charArray0[1] = 'l';
      uTF8JsonGenerator0._checkStdFeatureChanges((byte) (-90), 2844);
      charArray0[2] = 'D';
      uTF8JsonGenerator0.writeString(charArray0, 1, (-324));
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(0);
      SerializedString serializedString0 = new SerializedString("PYVjP2");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("': expected '", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 583, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((float) (byte) (-53));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2048, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3194, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRaw("ZE Qu_4[ZFP7", 7, 2);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "': expected '";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-53), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(10);
      SerializedString serializedString0 = new SerializedString("': expected '");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 1041, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-16);
      byteArray1[1] = (byte) (-16);
      byteArray1[2] = (byte) (-109);
      byteArray1[3] = (byte) (-16);
      byteArray1[4] = (byte) (-16);
      byteArray1[5] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 10, (ObjectCodec) null, bufferedOutputStream0, byteArray1, 115, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext1.allocReadIOBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      char[] charArray0 = new char[5];
      charArray0[1] = 'l';
      charArray0[2] = 'D';
      uTF8JsonGenerator0.writeString(charArray0, 1, (-324));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No FormatFeatures defined for generator of type ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-8), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2676, false);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[2] = 'C';
      SerializedString serializedString0 = new SerializedString("': expected '");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3707), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)68, false);
      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte)3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) "': expected '";
      objectArray0[3] = (Object) "': expected '";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      byte[] byteArray0 = new byte[0];
      int int0 = 240;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      bufferedOutputStream0.write(byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNull();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2106, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (byte) (-90), true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      SerializedString serializedString0 = new SerializedString("");
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 55296, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 380, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "(]@9EO1*MW;XrqwA", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-16), (ObjectCodec) null, (OutputStream) null, byteArray0, 10, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      SerializedString serializedString0 = new SerializedString("&UZD]?c@$GI");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-58);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)104;
      byteArrayOutputStream0.write((int) (byte)104);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[4] = (byte) (-58);
      byteArray0[6] = (byte) (-40);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(577L);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("C&';dh<bJG/f.");
      try { 
        uTF8JsonGenerator0._writePPFieldName("C&';dh<bJG/f.");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      mockPrintStream0.print(0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 4090, (ObjectCodec) null, mockPrintStream0, byteArray0, 512, false);
      uTF8JsonGenerator0.writeString((char[]) null, 56320, 0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("&bnJT/%$B");
      PrintStream printStream0 = mockPrintStream0.append('O');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeString("&bnJT/%$B");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 55296;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 'O';
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 56320;
      doubleArray0[8] = (double) 0;
      uTF8JsonGenerator0.writeArray(doubleArray0, 3, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("start an object", (-1196));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("&bnJT/%$B");
      PrintStream printStream0 = mockPrintStream0.append('O');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeString("&bnJT/%$B");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(45);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 65535, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("&bnJT/%$B");
      PrintStream printStream0 = mockPrintStream0.append('O');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)112;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1739, (ObjectCodec) null, printStream0, byteArray0, 97, false);
      int int0 = 5;
      printStream0.print((Object) "&bnJT/%$B");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2195, 110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No FormatFeatures defined for generator of type ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-8), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2676, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 2676);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      String string0 = null;
      int int0 = (-4178);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 7980, 1023);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = 2114;
      Random.setNextRandom(2114);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Longest collision chain in symbol table (of size ";
      MockFile mockFile0 = new MockFile("Longest collision chain in symbol table (of size ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-82);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2114, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-29), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2687L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -29
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[2] = 'C';
      SerializedString serializedString0 = new SerializedString("': expected '");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      iOContext1.allocReadIOBuffer();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 437, 976);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      uTF8JsonGenerator0.writeNumber(0.0F);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      int int0 = (-539);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-539), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, true);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 7974, (ObjectCodec) null, mockPrintStream0, byteArray0, 2552, true);
      SerializedString serializedString0 = new SerializedString("': expected '");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, (OutputStream) null, byteArray0, 11, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1081, 0, mockRandom0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((int) byteArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)104;
      byteArrayOutputStream0.write((int) (byte)104);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte) (-40);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(577L);
      BigInteger bigInteger0 = new BigInteger((byte)104, (byte) (-53), mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber("NW2u]`l``ut& sD");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-53), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(10);
      SerializedString serializedString0 = new SerializedString("': expected '");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("': expected '", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "': expected '");
      mockPrintStream0.append((CharSequence) charBuffer0);
      mockPrintStream0.print(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 19, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 4000, (int) (byte) (-90));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("&bnJT/%$B");
      PrintStream printStream0 = mockPrintStream0.append('O');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeString("&bnJT/%$B");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("start an object", (-1196));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 10, false);
      String string0 = "=";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      mockPrintStream0.printf("': expected '", objectArray0);
      mockPrintStream0.print(0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 4090, (ObjectCodec) null, mockPrintStream0, byteArray0, 512, false);
      SerializedString serializedString0 = new SerializedString("': expected '");
      uTF8JsonGenerator0.writeBinaryField("': expected '", byteArray0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, (OutputStream) null, byteArray0, 11, true);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1081;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._verifyValueWrite("cIxVv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("_gbf[]1pJ7lfn\"g$");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.constructTextBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      char char0 = 'i';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)13;
      uTF8JsonGenerator0.writeNumber(4564);
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.appendQuotedUTF8(byteArray0, (byte)108);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&bn\\JT");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("&bnJT/%$B");
      PrintStream printStream0 = mockPrintStream0.append('O');
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)112;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1739, (ObjectCodec) null, printStream0, byteArray0, 97, false);
      int int0 = 5;
      printStream0.print((Object) "&bnJT/%$B");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis(57343);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2195, 110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(0);
      mockPrintStream0.print((Object) "");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis((-1L));
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 3910);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1414), (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)104;
      byteArrayOutputStream0.write((int) (byte)104);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)104;
      byteArray0[4] = (byte) (-58);
      byteArray0[6] = (byte)0;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom(577L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("C&';dh<bJG/f.");
      uTF8JsonGenerator0.writeNumber((-334.15784F));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 766, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-205), false);
      BigInteger bigInteger0 = BigInteger.valueOf(9223372036854775807L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -205
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      uTF8JsonGenerator0.writeNumber(0.0F);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(4);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      MockRandom mockRandom0 = new MockRandom(2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeFieldName("[C");
      uTF8JsonGenerator0.writeNumber(1896.0F);
      try { 
        uTF8JsonGenerator0.writeFieldName("[C");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream1, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      iOContext2.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      StringReader stringReader0 = new StringReader("%PIhfE");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(55296);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-143), (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      MockRandom mockRandom0 = new MockRandom((-638L));
      BigInteger bigInteger0 = new BigInteger(33, 57343, mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber("%PIhfE");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeFieldName("@Cn#t9");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) "': expected '";
      objectArray0[3] = (Object) "': expected '";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      byte[] byteArray0 = new byte[0];
      printStream0.print((int) (byte) (-90));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      iOContext0.allocReadIOBuffer();
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(printStream0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, bufferedOutputStream1);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, bufferedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-539), (ObjectCodec) null, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(56319);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.filterStartObject();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter3, true, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[2] = 'C';
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeRawValue(charArray0, 380, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 380
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) "': expected '";
      objectArray0[3] = (Object) "': expected '";
      byte[] byteArray0 = new byte[0];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler1, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-128), (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, 2110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      mockPrintStream0.print(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 19, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 4000, (int) (byte) (-90));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      String string0 = "\"%: O";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("\"%: O", 3, 12000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) "': expected '";
      objectArray0[3] = (Object) "': expected '";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      printStream0.print(3);
      iOContext1.allocReadIOBuffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 229, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'l';
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.signum();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, (OutputStream) null, byteArray0, 11, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1081, 0, mockRandom0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte) (-16));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byte byte0 = (byte)108;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      System.setCurrentTimeMillis(1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)108;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-53);
      byteArray1[4] = (byte) (-40);
      int int0 = 55;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) "': expected '";
      objectArray0[3] = (Object) "': expected '";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      printStream0.print(3);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 80, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber(36);
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.useDefaultPrettyPrinter();
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      uTF8JsonGenerator0.writeNumber(0.0F);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) "': expected '";
      objectArray0[3] = (Object) "': expected '";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      byte[] byteArray0 = new byte[0];
      int int0 = 240;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2106, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (byte) (-90), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 5, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -90
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) "': expected '";
      objectArray0[3] = (Object) "': expected '";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      printStream0.print(3);
      iOContext1.allocReadIOBuffer();
      IOContext iOContext2 = new IOContext(bufferRecycler0, "b),c+i0K71h.Wve", false);
      byte[] byteArray0 = iOContext2.allocReadIOBuffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 3632, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[5] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.allocWriteEncodingBuffer(4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 456, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, (OutputStream) null, byteArray0, 11, true);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1081, 0, mockRandom0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)13;
      uTF8JsonGenerator0.writeNumber(4564);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeStartArray((int) (byte)108);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte) (-40), true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'J';
      charArray0[2] = '|';
      charArray0[3] = '!';
      charArray0[4] = 'C';
      filteringGeneratorDelegate0.writeRawValue(charArray0, 115, (-909));
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      uTF8JsonGenerator0.writeNumber(0.0F);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.constructTextBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      mockPrintStream0.print(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 19, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) "': expected '";
      objectArray0[3] = (Object) "': expected '";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      printStream0.print(3);
      iOContext1.allocReadIOBuffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 229, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'l';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 4000, 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) "': expected '";
      objectArray0[3] = (Object) "': expected '";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      printStream0.print(3);
      iOContext1.allocReadIOBuffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 229, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'l';
      charArray0[2] = 'D';
      charArray0[3] = '%';
      charArray0[4] = '$';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      System.setCurrentTimeMillis(1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)108;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-53);
      byteArray1[4] = (byte) (-40);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte)108, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) "': expected '";
      objectArray0[3] = (Object) "': expected '";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      printStream0.print(3);
      iOContext1.allocReadIOBuffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 229, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'l';
      charArray0[2] = 'D';
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '_';
      charArray0[2] = '%';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-194), 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -194
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)13;
      uTF8JsonGenerator0.writeNumber(4564);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)13;
      uTF8JsonGenerator0.writeNumber(4564);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger((byte)108, (-172), mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte byte0 = (byte)115;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      String string0 = "=";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("No native support for writing Type Ids");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.constructTextBuffer();
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 123, true);
      String string0 = "=";
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)115, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) "': expected '";
      objectArray0[3] = (Object) "': expected '";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      printStream0.print(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      byte[] byteArray0 = new byte[0];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 240, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      byte[] byteArray0 = new byte[5];
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3120), (ObjectCodec) null, (OutputStream) null);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.constructTextBuffer();
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)115;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.setEncoding(jsonEncoding1);
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)115, (ObjectCodec) null, (OutputStream) null);
      String string0 = "=";
      uTF8JsonGenerator0.writeString("=");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("-7", (int) (byte)115, 58);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.constructTextBuffer();
      int int0 = 4;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)51;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      String string0 = "=";
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("=");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)13;
      uTF8JsonGenerator0.writeNumber(4564);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.constructTextBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 34, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      iOContext0.allocReadIOBuffer(8000);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber(103);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)115;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("`KUiP");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "`KUiP", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, (OutputStream) null, byteArray0, 11, true);
      BigDecimal bigDecimal0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray(682);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 240, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      String string0 = "=";
      uTF8JsonGenerator0.writeString(string0);
      String string1 = "-7";
      int int0 = 0;
      int int1 = 240;
      int int2 = 2076;
      uTF8JsonGenerator0.writeRaw(string1, int1, int2);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(int0);
      int int3 = (-2338);
      uTF8JsonGenerator0.writeRaw(string0, int3, bufferRecycler0.CHAR_CONCAT_BUFFER);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) "': expected '";
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("F+ze.QN", "F+ze.QN");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-3295), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte)108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3295
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) "': expected '";
      objectArray0[3] = (Object) "': expected '";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      printStream0.print(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 240, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, (OutputStream) null, byteArray0, (-461), false);
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 't';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)115, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -461
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-173), (ObjectCodec) null, (OutputStream) null, byteArray0, (-2), false);
      String string0 = "=";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("=");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': expected '", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) "': expected '";
      objectArray0[3] = (Object) "': expected '";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3052, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (-2020), true);
      try { 
        uTF8JsonGenerator0._outputSurrogates(3049, (byte)114);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xbe9, second 0x72
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Y-", ")");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) ")";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) ")";
      objectArray0[7] = (Object) "Y-";
      objectArray0[8] = (Object) null;
      PrintStream printStream0 = mockPrintStream1.format(locale0, ")", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, (ObjectCodec) null, printStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 240, true);
      String string0 = "=";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2048, true);
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = '.';
      charArray0[2] = '\'';
      charArray0[3] = 't';
      charArray0[4] = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)13;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3063, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 56319, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'Y';
      charArray0[2] = 'c';
      charArray0[3] = 'E';
      charArray0[4] = '7';
      charArray0[5] = 'G';
      charArray0[6] = '1';
      charArray0[7] = ',';
      charArray0[8] = '^';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 340, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 97, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1453);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 40, true);
      uTF8JsonGenerator0._verifyValueWrite("Lx5#8!");
      assertEquals(40, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      int int0 = 10;
      String string0 = ", expecting field name";
      StringReader stringReader0 = new StringReader(", expecting field name");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 10, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-50);
      byte byte0 = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-127);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 15, false);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("*eyd}qhB!&", "(`@\"_no%hPx*N2", false, 'c', (byte)19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 14)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile(";Ry+T8|.g3SZ. A;?z");
      MockFile mockFile1 = new MockFile(mockFile0, ";Ry+T8|.g3SZ. A;?z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 192, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }
}
