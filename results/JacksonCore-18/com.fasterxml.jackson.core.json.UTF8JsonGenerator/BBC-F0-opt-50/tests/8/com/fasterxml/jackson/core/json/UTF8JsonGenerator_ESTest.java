/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 15:57:39 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      bufferedInputStream0.markSupported();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a null");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a null");
      Locale locale0 = Locale.CHINA;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(6000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2593, false);
      BigDecimal bigDecimal0 = new BigDecimal(57343);
      mockPrintStream0.close();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeBinaryField("write a null", byteArray0);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeNumber("write a null");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byteArrayBuilder0.setCurrentSegmentLength(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = new SerializedString("kZ'q\"eV5DM*z=4LtX");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3836, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3836, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw('@');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      mockPrintStream0.checkError();
      mockPrintStream0.checkError();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B[;ZYPSMx");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("_x/LqZ+wPk:o.");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "B[;ZYPSMx");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 111, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)69, false);
      uTF8JsonGenerator0.writeNumber((-2359L));
      uTF8JsonGenerator0.writeRaw("B[;ZYPSMx");
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("start an object");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[2] = (Object) "*mZZD[#";
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      SerializedString serializedString0 = new SerializedString("5m#~$<L@EdyF");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("[gUni`+j=y_Y?ZmH");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeNumber("*mZZD[#");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((long) 3);
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '';
      objectArray0[0] = (Object) 'F';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 536868256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS", true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer((-3546));
      SerializedString serializedString0 = new SerializedString("] Z0k'");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "j*:]lSr#P>", true);
      int int0 = 19;
      iOContext1.allocWriteEncodingBuffer(19);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-69), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 11, true);
      iOContext1.allocNameCopyBuffer(55296);
      uTF8JsonGenerator0.writeNumber("+INF");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
      uTF8JsonGenerator0.writeNumber((short)10);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecti7g double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      iOContext0.allocReadIOBuffer();
      objectArray0[0] = (Object) "was expecti7g double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "*mZ#", objectArray0);
      byte[] byteArray0 = new byte[7];
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, filterOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRaw('!');
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmVnw/k.~WVS", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)109;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = new SerializedString("8!WNwW't7LN(");
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayBuilder0.setCurrentSegmentLength(1215);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3027);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0, true);
      mockPrintStream0.println('D');
      byteArrayBuilder0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 803, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS", true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer((-3546));
      SerializedString serializedString0 = new SerializedString("]# Z0k'");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "j*:]Sr#>", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-69), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 11, true);
      uTF8JsonGenerator0.writeNumber("+INF");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(998);
      uTF8JsonGenerator0.writeFieldName("D`4~auX");
      uTF8JsonGenerator0.writeRaw("Zr~R:9!E2Q?_");
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 117);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)69;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_x/LqZ+wPk:o.");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeNumber((double) 2);
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[1] = ':';
      charArray0[2] = 'C';
      charArray0[3] = 'O';
      charArray0[4] = 'C';
      charArray0[5] = 'O';
      charArray0[6] = 'O';
      charArray0[7] = 'C';
      charArray0[8] = 'O';
      uTF8JsonGenerator0.writeString(charArray0, 3, 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wP3:o]");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "_x/LqZ+wP3:o]", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)44;
      byteArray0[0] = (byte)44;
      byte byte1 = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)51;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-17), (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 98, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[2] = '2';
      charArray0[2] = '2';
      charArray0[3] = '4';
      charArray0[4] = 'X';
      mockPrintStream0.print(charArray0);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.writeQuotedUTF8(mockPrintStream0);
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "_x/LqZ+wPk:o.", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[2] = '2';
      charArray0[2] = '\'';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 128);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("_x/LqZ+wPk:o.");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1167), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 108, 1, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((-1167));
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)69, (ObjectCodec) null, mockPrintStream0, byteArray0, 65535, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      mockPrintStream0.checkError();
      mockPrintStream0.checkError();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      String string0 = "B[;ZYPSMx";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B[;ZYPSMx");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("_x/LqZ+wPk:o.");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "B[;ZYPSMx");
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 111, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)69, false);
      try { 
        uTF8JsonGenerator0.writeNumber((-2359L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.GERMANY;
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(3);
      SerializedString serializedString0 = new SerializedString("was expecting double-quote to start field name");
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("was expecting double-quote to start field name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 744, (ObjectCodec) null, mockPrintStream0, byteArray0, 2473, false);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartArray();
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = 'M';
      charArray0[2] = 'r';
      uTF8JsonGenerator0.writeString(charArray0, 3, 2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'T", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      iOContext1.constructTextBuffer();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)109, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      BigDecimal bigDecimal0 = new BigDecimal(57343);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber(1);
      // Undeclared exception!
      uTF8JsonGenerator0.writeBinaryField("'T", byteArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wP3:o]");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "_x/LqZ+wP3:o]", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)51;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 110, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) (byte) (-17));
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 110, 0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",zg!c`S&pFnAQogEyk");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)58, false);
      uTF8JsonGenerator0._outputTail = 2;
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeFieldName("x1wo\"");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      SerializableString serializableString0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("P_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[1];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      StringReader stringReader0 = new StringReader("?0:/87~1U@}z2L]<");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 337, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 47, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber("Current context not an ARRAY but ");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.writeQuotedUTF8(mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber("P_x/LqZ+wPk:o.");
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)51, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) 2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",zg!c`S&pFnAQogEyk");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)58, false);
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeFieldName("x1wo\"");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, stringWriter0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (byte)116, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator1.writeNumber((float) 56320);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "-vOdG4>j8P-@0Q &F";
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)51, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      byteArrayBuilder0.setCurrentSegmentLength(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      SerializedString serializedString0 = new SerializedString("kZ6'q0eV5DM*0=4LtX");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3836, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayBuilder0.setCurrentSegmentLength(6481);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3027);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0, true);
      mockPrintStream0.println('D');
      byteArrayBuilder0.reset();
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 131, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString1 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(1158);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)0;
      StringWriter stringWriter0 = new StringWriter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)93, (ObjectCodec) null, pipedOutputStream0, byteArray0, 14, false);
      uTF8JsonGenerator0.getOutputBuffered();
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)51, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      iOContext1.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeRaw("-vOdG4>j8P-@0Q &F");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, mockFileInputStream0, byteArray0, (byte)32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",zg!c`S&pFnAQogEyk");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)93, false);
      try { 
        uTF8JsonGenerator0.writeNumber((double) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",zg!c`S&pFnAQogEyk", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)58, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) (byte)48);
      StringWriter stringWriter0 = new StringWriter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-1310), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1310
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)51, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 55296, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("P_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[1];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0f)3TrH5zh&wM&4#6\"");
      int int0 = 2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 760, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, uTF8JsonGenerator0, true);
      mockFileOutputStream0.release();
      // Undeclared exception!
      uTF8JsonGenerator0.writeBinaryField("0f)3TrH5zh&wM&4#6\"", byteArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-50);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",zg!c`S&pFnAQogEyk", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 793, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-50), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) (byte)12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -50
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      SerializedString serializedString0 = new SerializedString("");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      short short0 = (short)4952;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",zg!c`S&pFnAQogEyk", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)58, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) (byte)48);
      StringWriter stringWriter0 = new StringWriter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeString("Incomplete surrogate pair: first char 0x");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)34, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZZD[#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      SerializedString serializedString0 = new SerializedString("5m#~$<L@EdyF");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3734), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("*mZZD[#");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      Locale locale1 = Locale.JAPANESE;
      char[] charArray0 = new char[5];
      charArray0[1] = '.';
      charArray0[2] = '';
      charArray0[4] = 'F';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 536868233);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS", true);
      byte byte0 = (byte)109;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 110, true);
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0f)3TrH5zh&wM&4#6\"");
      int int0 = 2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 760, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, uTF8JsonGenerator0, true);
      mockFileOutputStream0.release();
      // Undeclared exception!
      uTF8JsonGenerator0.writeBinaryField("0f)3TrH5zh&wM&4#6\"", byteArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`^WnmxUnw/k.~WVS");
      ObjectCodec objectCodec0 = null;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS");
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4, false);
      try { 
        uTF8JsonGenerator0.writeNumber("`^WnmxUnw/k.~WVS");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber("Current context not an ARRAY but ");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      int int0 = GeneratorBase.SURR2_LAST;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((short) (byte)51);
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1131, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1131
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"c_IG{");
      mockPrintStream0.checkError();
      int int0 = 91;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, mockPrintStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0._outputTail = 102;
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      iOContext1.allocTokenBuffer(57343);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 3, (-1656));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      byteArrayBuilder0.setCurrentSegmentLength(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      String string0 = "kZ6'q\"eV5DM*z=4LtX";
      SerializedString serializedString0 = new SerializedString("kZ6'q\"eV5DM*z=4LtX");
      int int0 = 3836;
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      char char0 = 'Y';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3836, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 128, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZZD[#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      SerializedString serializedString0 = new SerializedString("END_ARRAY");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("[gUni`+j=y_Y?ZmH");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3734), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("*mZZD[#");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom(385);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZZD[#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      SerializedString serializedString0 = new SerializedString("5m#~$<L@EdyF");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("[gUni`+j=y_Y?ZmH");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3734), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("*mZZD[#");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      Locale locale1 = Locale.JAPANESE;
      uTF8JsonGenerator0.writeNumber(0L);
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '.';
      charArray0[2] = '';
      charArray0[4] = 'F';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 536868256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecti7g double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecti7g double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) iOContext0;
      mockPrintStream0.printf(locale0, "*mZ#", objectArray0);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(2, mockRandom0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNull();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CD?d#Nw ?Y7NQ3\"", false);
      mockFileOutputStream0.release();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("*mZ#", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",zg!c`S&pFnAQogEyk", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)58, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
      StringWriter stringWriter0 = new StringWriter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeString("Incomplete surrogate pair: first char 0x");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[2] = (Object) "*mZ#";
      objectArray0[3] = (Object) null;
      objectArray0[1] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      SerializedString serializedString0 = new SerializedString("5m#~<<@EdyF");
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3734), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("*mZ#");
      uTF8JsonGenerator0._rootValueSeparator = (SerializableString) serializedString0;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((short) (-1831));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`^WnmxUnw/k.~WVS");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 8, false);
      uTF8JsonGenerator0.writeNumber((-2874.87F));
      uTF8JsonGenerator0.writeRaw('4');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)4952);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, (short)4952);
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = 'b';
      uTF8JsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-81);
      SerializedString serializedString0 = new SerializedString("kZ'q\"eV5DM*^z=4VLtX");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray1 = new byte[11];
      byteArray1[1] = (byte)69;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      uTF8JsonGenerator0.writeRaw('F');
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(3);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1473);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[24];
      charArray0[1] = '\u0000';
      SerializedString serializedString0 = new SerializedString("': was expecting ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-162), (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 5870, true);
      iOContext0.allocNameCopyBuffer(55296);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 1473, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-81);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7997, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBinaryField("\ni'Smxt", byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "write a null";
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a null");
      Locale locale0 = Locale.CHINA;
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(6000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2593, false);
      BigDecimal bigDecimal0 = new BigDecimal(57343);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      String string1 = "}<Y$";
      uTF8JsonGenerator0.writeBinaryField("}<Y$", byteArray0);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1473);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[24];
      charArray0[1] = '\u0000';
      charArray0[2] = 'X';
      charArray0[19] = '\u0000';
      charArray0[4] = '2';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-877), (ObjectCodec) null, objectOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("\ni'Smxt", (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"c_IG{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "\"c_IG{", true);
      iOContext0.allocTokenBuffer(55296);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField((String) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      iOContext0.allocReadIOBuffer(1441);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":pksXU\"h1\"yi fG!^C");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)13;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 34, false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "was expecting double-quote to start field name", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(":pksXU\"h1\"yi fG!^C");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(55296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "_x/LqZ+wPk:o.";
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[2] = '2';
      charArray0[2] = '2';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      mockPrintStream0.print('T');
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('T');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)69;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_x/LqZ+wPk:o.");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      Object object0 = new Object();
      short short0 = (short) (-1869);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-1869));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZZD[#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, locale0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("0cZP?)D2:,j");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber("[gUni`+j=y_Y?ZmH");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      int int0 = 1775;
      serializedString0.appendQuotedUTF8(byteArray0, 1775);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber("write a number");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1);
      SerializableString serializableString0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZZD[#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, mockPrintStream0, byteArray0, 6, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeBinaryField("was expecting double-quote to start field name", byteArray0);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FIELD_NAME");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("FIELD_NAME");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 8, false);
      try { 
        uTF8JsonGenerator0.writeNumber((-2874.87F));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`^WnmxUnw/k.~WVS");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 8, false);
      uTF8JsonGenerator0.writeNumber((-2874.87F));
      uTF8JsonGenerator0.writeRaw('4');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      mockFileOutputStream0.getChannel();
      uTF8JsonGenerator0.writeNumber((short)4952);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, (short)4952);
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = 'b';
      charArray0[2] = '4';
      uTF8JsonGenerator0.writeString(charArray0, 2, (-149));
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayBuilder0.setCurrentSegmentLength(1215);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3006);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0, true);
      byteArrayBuilder0.reset();
      String string0 = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 131, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(6002.2651363);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[2] = (Object) "*mZ#";
      objectArray0[3] = (Object) null;
      objectArray0[1] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      SerializedString serializedString0 = new SerializedString("5m#~<<@EdyF");
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3734), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("*mZ#");
      uTF8JsonGenerator0._rootValueSeparator = (SerializableString) serializedString0;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((short) (-1831));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZZD[#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      SerializedString serializedString0 = new SerializedString("5m#~$<L@EdyF");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("[gUni`+j=y_Y?ZmH");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3734), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("*mZZD[#");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      Locale locale1 = Locale.JAPANESE;
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeNumber(0L);
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '9';
      charArray0[2] = '';
      charArray0[3] = 'N';
      charArray0[4] = 'F';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 536868256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("lIBA2");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-991), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      MockPrintStream mockPrintStream0 = new MockPrintStream("lIBA2");
      PrintStream printStream0 = mockPrintStream0.append('~');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-117);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7994, (ObjectCodec) null, printStream0, byteArray0, 2000, true);
      uTF8JsonGenerator0.writeRaw("v-nhrt8Oyk'Z.");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an object but ");
      Locale locale0 = Locale.CHINA;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(19);
      SerializedString serializedString0 = new SerializedString("5m#~<<@EdyF");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "was expecting double-quote to start field name", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 89, (ObjectCodec) null, (OutputStream) null, byteArray0, 116, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeNumber("[gUni`+j=y_Y?ZmH");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-2669.5));
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((short)1826);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 89, 63);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      iOContext0.allocReadIOBuffer(1441);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":pksXU\"h1\"y1 fG!^Cy");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)13;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 34, false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "was expecting double-quote to start field name", false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.getOutputTarget();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeNumber(57343);
      Random.setNextRandom(91);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZZD[#";
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      BigDecimal bigDecimal0 = new BigDecimal((-498));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeBinaryField("was expecting double-quote to start field name", byteArray0);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeNumber((short)48);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)69;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_x/LqZ+wPk:o.");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "_x/LqZ+wPk:o.", true);
      mockFileOutputStream0.release();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 127);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, bufferedOutputStream0);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 127, (-2636));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZZD[#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, locale0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("0cZP?)D2:,j");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber("[gUni`+j=y_Y?ZmH");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.appendQuotedUTF8(byteArray0, 1775);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) (-3734));
      uTF8JsonGenerator0.writeRaw("was expecting double-quote to start field name", 1, 3);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((-3706L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 117, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "_x/LqZ+wPk:o.";
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)69;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_x/LqZ+wPk:o.");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "_x/LqZ+wPk:o.", true);
      mockFileOutputStream0.release();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 127);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator1.writeNumber(8);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1905), (ObjectCodec) null, pipedOutputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      iOContext2.allocTokenBuffer((-1204));
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding2);
      byte[] byteArray0 = new byte[4];
      uTF8JsonGenerator0.writeBinaryField("c1M", byteArray0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" entries, hash area of ");
      iOContext0.allocReadIOBuffer(1);
      Locale locale0 = Locale.JAPANESE;
      uTF8JsonGenerator0.writeNumber((float) (-1204));
      try { 
        uTF8JsonGenerator0.writeFieldName(" entries, hash area of ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)69;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext1.allocConcatBuffer();
      uTF8JsonGenerator0.writeBinaryField("JF)StC<ow", byteArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("_x/LqZ+wPk:o.");
      short short0 = (short) (-1869);
      uTF8JsonGenerator0.writeNumber((short) (-1869));
      uTF8JsonGenerator0.writeNumber("_x/LqZ+wPk:o.");
      SerializedString serializedString0 = new SerializedString("JF)StC<ow");
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`^WnmxUnw/k.~WVS");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 110, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) (byte)109);
      StringWriter stringWriter0 = new StringWriter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("}!fz8P");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(248);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 21, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      uTF8JsonGenerator0._outputEscapes = null;
      String string0 = "y3Ee;\\";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("y3Ee;");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(224);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?p;#Hce1HWb))ea");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1473, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "\"c_IG{";
      StringReader stringReader0 = new StringReader("\"c_IG{");
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"c_IG{");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("`il&HtE/u");
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = '-';
      charArray0[2] = 'q';
      charArray0[3] = 'A';
      charArray0[4] = '\'';
      charArray0[5] = 'q';
      charArray0[6] = 'q';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, (-152));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-712), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayBuilder0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      SerializedString serializedString0 = new SerializedString("was expecting double-quote to start field name");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      Locale locale1 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZZD[#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      int int0 = 6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, mockPrintStream0, byteArray0, 6, false);
      BigDecimal bigDecimal0 = new BigDecimal((-498));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeBinaryField("was expecting double-quote to start field name", byteArray0);
      uTF8JsonGenerator0.writeStartObject();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZ#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      mockPrintStream0.printf(locale0, "*mZ#", objectArray0);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(43, mockRandom0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNull();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CD?d#Nw?Y7NQ3\"", false);
      mockFileOutputStream0.release();
      uTF8JsonGenerator0.writeNumber(83);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZZD[#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      char[] charArray0 = new char[0];
      mockPrintStream0.print(charArray0);
      SerializedString serializedString0 = new SerializedString("*mZZD[#");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler2, jsonEncoding0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 975, (ObjectCodec) null, mockPrintStream0, byteArray0, 240, false);
      uTF8JsonGenerator0.writeNumber("]$kB)4X2um1lE$l");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`^WnmxUnw/k.~WVS");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS", false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1335), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) (byte)52);
      uTF8JsonGenerator0.writeNumber("FIELD_NAME");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (byte)69, (ObjectCodec) null, stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[2] = '2';
      charArray0[2] = '2';
      charArray0[3] = '4';
      MockPrintStream mockPrintStream1 = new MockPrintStream("[gUni`+j=y_Y?ZmH");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[gUni`+j=y_Y?ZmH", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 196, true);
      uTF8JsonGenerator0.writeNumber("[gUni`+j=y_Y?ZmH");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((double) (byte)109);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        iOContext0.releaseNameCopyBuffer(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZZD[#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      SerializedString serializedString0 = new SerializedString("5m#~<<@EdyF");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("[gUni`+j=y_Y?ZmH");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3734), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("*mZZD[#");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._verifyValueWrite("): ");
      uTF8JsonGenerator0.writeFieldName("3JiWoq@&jH7/Nz'4");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byteArrayBuilder0.setCurrentSegmentLength(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      SerializedString serializedString0 = new SerializedString("kZ'q\"eV5DM*z=4LtX");
      iOContext0.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3836, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SerializedString serializedString1 = new SerializedString("' (for ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"c_IG{");
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"c_IG{");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "was expecting double-quote to start field name";
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("was expecting double-quote to start field name", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "was expecting double-quote to start field name", objectArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(44, mockRandom0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-73), (ObjectCodec) null, printStream0, byteArray0, 109, true);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      IOContext iOContext2 = new IOContext(bufferRecycler0, "was expecting double-quote to start field name", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 114, (ObjectCodec) null, printStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler2, "II.t).go1b(N]0^%H", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byteArrayBuilder0.setCurrentSegmentLength(108);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      SerializedString serializedString0 = new SerializedString(" h>\"_x");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1482, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 496, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("kravi");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext2.allocTokenBuffer(0);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      iOContext3.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      iOContext2.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext4 = new IOContext(bufferRecycler0, "", false);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*mZ#");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 128, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 61, false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, locale0, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = 'm';
      charArray0[2] = '2';
      charArray0[3] = '<';
      uTF8JsonGenerator0.writeString(charArray0, 0, (-2439));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1475);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[24];
      charArray0[11] = '\u0000';
      charArray0[2] = 'X';
      charArray0[3] = '\u0000';
      charArray0[4] = '2';
      charArray0[5] = '4';
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an ARRAY but ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, false);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(49);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[24];
      charArray0[1] = '\u0000';
      charArray0[2] = 'X';
      charArray0[3] = '\u0000';
      charArray0[4] = '2';
      charArray0[5] = '4';
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an ARRAY but ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, false);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)51, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 23, 1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("was expecting double-quote to start field name", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)109;
      byte byte0 = (byte)0;
      byteArray0[5] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 432, (ObjectCodec) null, mockPrintStream0, byteArray0, 6, false);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) (byte)32);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`^WnmxUnw/k.~WVS");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS");
      byte[] byteArray0 = new byte[7];
      iOContext1.withEncoding(jsonEncoding0);
      String string0 = "'R=st";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3436), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1489), true);
      SerializedString serializedString0 = new SerializedString("WVXYN1EZNnm*?%");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[2] = '2';
      charArray0[2] = '2';
      charArray0[3] = '4';
      charArray0[4] = 'X';
      mockPrintStream0.print(charArray0);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, true);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.writeQuotedUTF8(mockPrintStream0);
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      iOContext0.allocNameCopyBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"c_IG{");
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"c_IG{");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getOutputTarget();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler2, bufferRecycler0, true);
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = 'W';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      BufferRecycler bufferRecycler3 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler3, "_x/LqZ+wPk:o.", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("was expecting double-quote to start field name", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[5] = (byte)2;
      byte byte0 = (byte)109;
      byteArray0[3] = (byte)2;
      MockPrintStream mockPrintStream1 = new MockPrintStream("[gUni`+j=y_Y?ZmH");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("Reader returned 0 characters when trying to read ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(2241.8292);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)69;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocTokenBuffer(4473);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(57343);
      IOContext iOContext2 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a null");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3176, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      uTF8JsonGenerator1.writeNumber(".U");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      double double0 = 22.442277;
      // Undeclared exception!
      uTF8JsonGenerator1.writeNumber(double0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`^WnmxUnw/k.~WVS");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append('s');
      int int0 = 106;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayBuilder0.setCurrentSegmentLength(1215);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3018);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0, false);
      byteArrayBuilder0.reset();
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 127, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(1748.1298F);
      uTF8JsonGenerator0.writeRaw('m');
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(127);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 21, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator1.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator1.flush();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[2] = '2';
      charArray0[2] = '2';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 94, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('l');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((short)24);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("_x/LqZ+wPk:o.", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZ#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "*mZ#", objectArray0);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(43, mockRandom0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, printStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      SerializedString serializedString0 = new SerializedString("");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)112, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1204), false);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1204
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 't';
      charArray0[2] = '6';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3999, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-944), 401, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1310, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 401, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "F89~OX]TZCE1i^|kf6", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)74;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3971, (ObjectCodec) null, (OutputStream) null, byteArray0, 3979, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("write a boolean value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "_x/LqZ+wPk:o.";
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)69;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockPrintStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      iOContext0.allocTokenBuffer(4473);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext2.setEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeBinaryField("JF)StC<ow", byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 56319, (ObjectCodec) null, pipedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 26, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(121.60543);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("I|iYRLk/3M_LF", 125, (-2282));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FIELD_NAME");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("FIELD_NAME");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 8, false);
      uTF8JsonGenerator0.writeNumber((-2874.87F));
      uTF8JsonGenerator0.writeRaw('4');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)74);
      System.setCurrentTimeMillis((-1800L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, (short)74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZZD[#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      SerializedString serializedString0 = new SerializedString("5m#~<<@EdyF");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("[gUni`+j=y_Y?ZmH");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3734), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("*mZZD[#");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._verifyValueWrite("): ");
      uTF8JsonGenerator0.writeFieldName("3JiWoq@&jH7/Nz'4");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`^WnmxUnw/k.~WVS");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 8, false);
      uTF8JsonGenerator0.writeNumber((-2874.87F));
      uTF8JsonGenerator0.writeRaw('4');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)4952);
      System.setCurrentTimeMillis((-1800L));
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, (short)4952);
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = 'b';
      charArray0[2] = '4';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 2514);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      String string0 = "_x/LqZ+wPk:o.";
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[2] = '2';
      charArray0[2] = '2';
      charArray0[3] = '4';
      charArray0[4] = 'X';
      mockPrintStream0.print(charArray0);
      String string1 = "Current context not an ARRAY but ";
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber("Current context not an ARRAY but ");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(">Jq:@ qO-Wuxrr");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1475);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.setEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-332), (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 3, false);
      BigDecimal bigDecimal0 = new BigDecimal(3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byteArrayBuilder0.setCurrentSegmentLength(0);
      byteArrayBuilder0.toByteArray();
      byteArrayBuilder0.setCurrentSegmentLength(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      SerializedString serializedString0 = new SerializedString("kZ'q\"eV5DM*z=4LtX");
      MockPrintStream mockPrintStream1 = new MockPrintStream(" entries, hash area of ");
      Locale locale0 = Locale.JAPANESE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3836, (ObjectCodec) null, mockPrintStream1);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(" entries, hash area of ", 536870910, 536870910);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("was expecting double-quote to start field name", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3998, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, "", true);
      uTF8JsonGenerator0.writeString((char[]) null, 23, (-523));
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("~t-", "~t-", true, '=', 56319);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 3)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1905), (ObjectCodec) null, pipedOutputStream0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext2.allocTokenBuffer(55296);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding2);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" entries, hash area of ");
      Locale locale0 = Locale.JAPANESE;
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeRaw('?');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)2792);
      uTF8JsonGenerator0.writeRaw(charArray0, 3, 3);
      uTF8JsonGenerator0.writeString(" entries, hash area of ");
      System.setCurrentTimeMillis(626L);
      uTF8JsonGenerator0.writeRaw('?');
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[2] = (Object) "*mZ#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Ag6ef");
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-474), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3686, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1905), (ObjectCodec) null, pipedOutputStream0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      int int0 = (-1204);
      iOContext2.allocTokenBuffer((-1204));
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      iOContext2.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding2);
      String string0 = "c1M";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      uTF8JsonGenerator0.writeNumberField("c1M", (long) 2);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      try { 
        uTF8JsonGenerator0.writeBinaryField("c1M", byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      mockPrintStream0.checkError();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B[;ZYPSMx");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      MockPrintStream mockPrintStream1 = new MockPrintStream("_x/LqZ+wPk:o.");
      Locale locale0 = Locale.JAPANESE;
      uTF8JsonGenerator0.writeNumber(3016.104F);
      uTF8JsonGenerator0.writeRaw('d');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((short) (byte)69);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("V1I_*:Um=IrNJ*283", (byte)69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[2] = '2';
      charArray0[2] = '2';
      charArray0[3] = '4';
      charArray0[4] = 'X';
      mockPrintStream0.print(charArray0);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber("Current context not an ARRAY but ");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.writeQuotedUTF8(mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((short) (byte)51);
      uTF8JsonGenerator0.writeNumber("_x/LqZ+wPk:o.");
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1905), (ObjectCodec) null, pipedOutputStream0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.allocTokenBuffer(55296);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding2);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" entries, hash area of ");
      Locale locale0 = Locale.JAPANESE;
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeRaw('?');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)2792);
      uTF8JsonGenerator0.writeString(" entries, hash area of ");
      System.setCurrentTimeMillis(626L);
      uTF8JsonGenerator0.writeRaw('?');
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1475);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[24];
      charArray0[1] = '\u0000';
      charArray0[2] = 'X';
      charArray0[3] = '\u0000';
      charArray0[4] = '2';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byteArrayBuilder0.append(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Can not ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("lIBA2");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      MockPrintStream mockPrintStream0 = new MockPrintStream("lIBA2");
      mockPrintStream0.append('%');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      SerializedString serializedString0 = new SerializedString("Me'$%z4vMH+H3/Ip");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-117), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      Locale locale0 = Locale.JAPANESE;
      uTF8JsonGenerator0.writeNumber((float) 2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("Failed to get Versioned out of ", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 200);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Failed to get Versioned out of ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = '`';
      charArray0[2] = '_';
      charArray0[3] = 's';
      charArray0[4] = 'W';
      charArray0[5] = '0';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1553, (ObjectCodec) null, pipedOutputStream0, byteArray0, 93, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('1');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`^WnmxUnw/k.~WVS");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS");
      byte[] byteArray0 = new byte[7];
      mockFileOutputStream0.write(3);
      byteArray0[0] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)5, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeNumber("fS1&]");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      mockPrintStream0.checkError();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("B[;ZYPSMx");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 111, false);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeBinaryField("&t~VB/'c#.0l!4", byteArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZ#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      SerializedString serializedString0 = new SerializedString("5m#~<<@EdyF");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("[gUni`+j=y_Y?ZmH");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3734), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("*mZ#");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0._verifyValueWrite("was expecting double-quote to start field name");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"c_IG{");
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"c_IG{");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      iOContext1.allocTokenBuffer(57343);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-81);
      byteArray0[5] = (byte)34;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)51;
      byteArray0[0] = (byte) (-23);
      byteArray0[7] = (byte) (-81);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-249), (ObjectCodec) null, mockPrintStream0, byteArray0, 1553, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('t');
      uTF8JsonGenerator0._verifyValueWrite("-vOdG4>j8P-@0Q &F");
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, (-1907));
      uTF8JsonGenerator0.close();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1475);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[6];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1475, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1475
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`^WnmxUnw/k.~WVS");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS");
      byte[] byteArray0 = new byte[7];
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append('s');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, printStream0, byteArray0, 106, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 3);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext2.allocReadIOBuffer(56319);
      Locale locale0 = Locale.JAPANESE;
      uTF8JsonGenerator0.writeNumber(2167.0F);
      uTF8JsonGenerator0.writeRaw('s');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 8, (-2860));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1905), (ObjectCodec) null, pipedOutputStream0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.allocTokenBuffer(55296);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding2);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" entries, hash area of ");
      Locale locale0 = Locale.JAPANESE;
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeRaw('?');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)2792);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(" entries, hash area of ", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[2] = '2';
      charArray0[2] = '2';
      charArray0[3] = '4';
      charArray0[4] = 'X';
      mockPrintStream0.print(charArray0);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber("Current context not an ARRAY but ");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.writeQuotedUTF8(mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((short) (byte)51);
      uTF8JsonGenerator0.writeNumber("_x/LqZ+wPk:o.");
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("FIELD_NAME");
      iOContext0.constructTextBuffer();
      Locale locale0 = Locale.CHINA;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      Locale locale1 = Locale.JAPANESE;
      StringReader stringReader0 = new StringReader("*mZ#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeRootValue(108);
      boolean boolean0 = false;
      char char0 = '>';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-398), (ObjectCodec) null, mockPrintStream0, byteArray0, (-1036), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("*mZ#");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1036
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      iOContext0.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)5, true);
      BigDecimal bigDecimal0 = new BigDecimal(2);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeBinaryField("Split surrogate on writeRaw() input (last character): first character 0x%4x", byteArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1475);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      mockPrintStream0.print(false);
      charArray0[2] = 'X';
      charArray0[3] = 'H';
      charArray0[4] = '2';
      charArray0[5] = '4';
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeStartObject((Object) null);
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte byte0 = (byte)51;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)51;
      byteArray0[0] = (byte) (-23);
      byteArray0[7] = (byte) (-81);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-249), (ObjectCodec) null, mockPrintStream0, byteArray0, 1553, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('t');
      uTF8JsonGenerator0._verifyValueWrite("-vOdG4>j8P-@0Q &F");
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      SerializedString serializedString0 = new SerializedString("`il&HtE/u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BigInteger bigInteger0 = BigInteger.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      charArray0[5] = ']';
      charArray0[6] = ']';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, 0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`^WnmxUnw/k.~WVS");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)5, true);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((float) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("XnFX+");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler0, "Can not write a field name, expecting a value", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4, (ObjectCodec) null, mockPrintStream0, byteArray0, 92, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)34, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1475);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'X';
      charArray0[3] = 'H';
      charArray0[4] = '2';
      MockPrintStream mockPrintStream1 = new MockPrintStream(objectOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      String string0 = null;
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)34, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)34, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)51;
      byteArray0[0] = (byte) (-23);
      byteArray0[7] = (byte) (-81);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-249), (ObjectCodec) null, mockPrintStream0, byteArray0, 1553, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('t');
      uTF8JsonGenerator0._verifyValueWrite("-vOdG4>j8P-@0Q &F");
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, (-1907));
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte) (-81);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-249), (ObjectCodec) null, mockPrintStream0, byteArray0, 1553, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('t');
      uTF8JsonGenerator0._verifyValueWrite("-vOdG4>j8P-@0Q &F");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZ#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      iOContext0.allocReadIOBuffer(2);
      Locale locale1 = Locale.JAPANESE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeRaw('>');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-2672.651));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1475);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'X';
      charArray0[3] = 'H';
      charArray0[4] = '2';
      charArray0[5] = '4';
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      byteArrayBuilder0.reset();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-250), (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 93, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 93, 1076);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-81);
      byteArray0[0] = (byte)34;
      byteArray0[3] = (byte) (-81);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "Can not write a field name, expecting a value", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 31, true);
      uTF8JsonGenerator0.writeNumber((float) (byte) (-91));
      uTF8JsonGenerator0.writeRaw('$');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)2363);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("lIBA2");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      MockPrintStream mockPrintStream0 = new MockPrintStream("lIBA2");
      PrintStream printStream0 = mockPrintStream0.append('%');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-117);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, printStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRaw("0](4bX-&_~GK$:e-=");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("kravi");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext2.allocTokenBuffer(0);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      iOContext3.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      iOContext2.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext4 = new IOContext(bufferRecycler0, "", false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 47, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.setCurrentSegmentLength(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      byteArrayBuilder0.reset();
      SerializedString serializedString0 = new SerializedString("kZ'q\"eV5DM*^z=4VLtX");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(489.2902F);
      uTF8JsonGenerator0.writeRaw('m');
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "kravi";
      MockPrintStream mockPrintStream0 = new MockPrintStream("kravi");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext2.allocTokenBuffer(0);
      uTF8JsonGenerator0.writeRaw('m');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)1509);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "kravi", false, 'm', 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '4';
      charArray0[4] = 'X';
      mockPrintStream0.print(charArray0);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber("Current context not an ARRAY but ");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZ#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Ag6ef");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"c_IG{");
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"c_IG{");
      mockPrintStream0.checkError();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.setCurrentSegmentLength((-3268));
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayBuilder0, true);
      SerializedString serializedString0 = new SerializedString("\"c_IG{");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-595), (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(151.2F);
      uTF8JsonGenerator0.writeRaw('m');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      BigInteger bigInteger0 = BigInteger.ZERO;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-vOdG4>j8P-@0Q &F", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.allocNameCopyBuffer((-1000));
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 51, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)34, false);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZ#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      iOContext0.allocReadIOBuffer(2);
      Locale locale1 = Locale.JAPANESE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeRaw('>');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (-575));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocTokenBuffer(240);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigInteger0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.setCurrentSegmentLength(2);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      char[] charArray0 = iOContext2.allocTokenBuffer(4000);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext3 = new IOContext(bufferRecycler0, byteArrayBuilder0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 11, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZ#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      mockPrintStream0.printf(locale0, "*mZ#", objectArray0);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(43, mockRandom0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0._verifyPrettyValueWrite(": expected close marker for ", 0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocTokenBuffer(240);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)51;
      byteArray0[5] = (byte) (-23);
      byteArray0[7] = (byte) (-81);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-878), (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("-vOdG4>j8P-@0Q &F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1483);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = '\\';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1483, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 4119, (-1903));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "-vOdG4>j8P-@0Q &F";
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)51;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.setEncoding(jsonEncoding1);
      byteArray0[2] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)51, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      int int0 = (-1000);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((-1136.487188));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.setCurrentSegmentLength(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      SerializedString serializedString0 = new SerializedString("kZ'q\"eV5DM*^z=4VLtX");
      iOContext0.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3836, true);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.setCurrentSegmentLength(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      SerializedString serializedString0 = new SerializedString("kZ'q\"eV5DM*^z=4VLtX");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(489.2902F);
      uTF8JsonGenerator0.writeRaw('m');
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(2);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1483);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = '\\';
      charArray0[2] = 'X';
      charArray0[3] = 'L';
      charArray0[4] = '2';
      charArray0[5] = '4';
      mockPrintStream0.print(charArray0);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 4, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("Current context not an ARRAY but ");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", expecting field name");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS");
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext2.setEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)12;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4214), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)125);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-4214), (ObjectCodec) null, mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1475);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[6];
      charArray0[1] = '\u0000';
      charArray0[2] = 'X';
      charArray0[3] = '\u0000';
      charArray0[4] = '2';
      charArray0[5] = '4';
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an ARRAY but ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, false);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "-vOdG4>j8P-@0Q &F";
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)51, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1000), (-1011));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZ#";
      objectArray0[3] = (Object) null;
      SerializedString serializedString0 = new SerializedString("was expecting double-quote to start field name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 117, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeRaw('m');
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1905), (ObjectCodec) null, pipedOutputStream0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.allocTokenBuffer((-1204));
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      iOContext2.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding2);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      uTF8JsonGenerator0.writeBinaryField("c1M", byteArray0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" entries, hash area of ");
      Locale locale0 = Locale.JAPANESE;
      uTF8JsonGenerator0.writeNumber((float) (-1204));
      char char0 = '?';
      uTF8JsonGenerator0.writeRaw('?');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3021), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      SerializedString serializedString0 = new SerializedString("_x/LqZ+wPk:o.");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`^WnmxUnw/k.~WVS");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)5, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeRaw('T');
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)51, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1000), (-1011));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("kravi");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext2.allocTokenBuffer(0);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      iOContext3.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)112;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext4 = new IOContext(bufferRecycler0, iOContext2, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext4, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)112, 2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`^WnmxUnw/k.~WVS");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`^WnmxUnw/k.~WVS");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      iOContext0.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)5, true);
      BigDecimal bigDecimal0 = new BigDecimal(2);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      String string0 = "*mZ#";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZ#";
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      String string1 = "6A;u-^_k9]f";
      // Undeclared exception!
      uTF8JsonGenerator0.writeBinaryField("6A;u-^_k9]f", byteArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byte byte0 = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)17;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-83), false);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = 'v';
      charArray0[2] = '1';
      charArray0[3] = '=';
      char char0 = ']';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, ']', (-484));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TokenFilter.INCLUDE_ALL");
      ObjectCodec objectCodec0 = null;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)5, false);
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1475);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = '\\';
      charArray0[2] = 'X';
      charArray0[3] = 'L';
      charArray0[4] = '2';
      charArray0[5] = '4';
      mockPrintStream0.print(charArray0);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 11, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("kravi");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext2.allocTokenBuffer(0);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      iOContext3.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      iOContext0.setEncoding(jsonEncoding0);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)112;
      uTF8JsonGenerator0.writeBinaryField("write a number", byteArray0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      MockPrintStream mockPrintStream1 = new MockPrintStream("^3M{N:M~N#Z!^9");
      Locale locale0 = Locale.JAPANESE;
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeRaw('?');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "_x/LqZ+wPk:o.";
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3021), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("_x/LqZ+wPk:o.");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("kravi");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext2.allocTokenBuffer(0);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      iOContext3.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)112;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext4 = new IOContext(bufferRecycler0, iOContext2, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext4, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeUTF8String(byteArray0, 5, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      MockPrintStream mockPrintStream1 = new MockPrintStream("_x/LqZ+wPk:o.");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "*mZ#";
      objectArray0[1] = (Object) "*mZ#";
      objectArray0[2] = (Object) mockPrintStream1;
      objectArray0[3] = (Object) "*mZ#";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "_x/LqZ+wPk:o.";
      objectArray0[6] = (Object) jsonEncoding0;
      mockPrintStream1.printf(locale0, "*mZ#", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1148, (ObjectCodec) null, mockPrintStream1, byteArray0, 1148, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-2699), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1475);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = '\\';
      charArray0[2] = 'X';
      charArray0[3] = 'L';
      charArray0[4] = '2';
      charArray0[5] = '4';
      mockPrintStream0.print(charArray0);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an ARRAY but ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZ#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      objectArray0[5] = (Object) null;
      mockPrintStream0.printf(locale0, "*mZ#", objectArray0);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(43, mockRandom0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 1, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"c_IG{");
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"c_IG{");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, mockPrintStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("`il&HtE/u");
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 18, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"c_IG{");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = '\'';
      charArray0[2] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1168), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1168), 3, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("start an array");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-488), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)21, true);
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 93, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vOdG4>j8P-@0Q &F");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte) (-81);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-249), (ObjectCodec) null, mockPrintStream0, byteArray0, 1553, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("kravi");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext2.allocTokenBuffer((-2219));
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      iOContext3.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)112;
      uTF8JsonGenerator0.writeBinaryField("write a number", byteArray0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      MockPrintStream mockPrintStream1 = new MockPrintStream("^3M{N:M~N#Z!^9");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jsonEncoding0;
      PrintStream printStream0 = mockPrintStream1.format(locale0, "line.separator", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 176, (ObjectCodec) null, printStream0, byteArray0, 1, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = false;
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-81);
      int int0 = Integer.MIN_VALUE;
      SerializedString serializedString0 = new SerializedString("kZ'q\"eV5DM*^z=4VLtX");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 34, (ObjectCodec) null, mockPrintStream0, byteArray0, 97, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3021), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-23), false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -23
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = false;
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-81);
      SerializedString serializedString0 = new SerializedString("kZ'q\"eV5DM*^z=4VLtX");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      int int0 = 2741;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte) (-81);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 175);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting double-quote to start field name");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "was expecting double-quote to start field name";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "*mZ#";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) iOContext0;
      objectArray0[5] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "*mZ#", objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 7, (ObjectCodec) null, printStream0, byteArray0, 16, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 7, 1594);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "i})lRc&'/BC";
      MockPrintStream mockPrintStream0 = new MockPrintStream("i})lRc&'/BC");
      mockPrintStream0.checkError();
      byte[] byteArray0 = new byte[1];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 1, (ObjectCodec) null, mockPrintStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 49;
      ObjectCodec objectCodec0 = null;
      iOContext0.allocTokenBuffer(1180);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1475);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1402, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 1447, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("b@#k+rvEH8/P", byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertArrayEquals(new byte[] {(byte)49, (byte)51, (byte)51, (byte)51, (byte)34, (byte)57, (byte)55}, byteArray0);
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = 'T';
      charArray0[2] = 'b';
      charArray0[3] = '?';
      charArray0[4] = '~';
      charArray0[5] = 's';
      charArray0[6] = 'f';
      charArray0[7] = '@';
      charArray0[8] = ')';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 54, 15);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3021), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.setCurrentSegmentLength(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, (-1977), true);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      int int0 = 4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 4, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("_x/LqZ+wPk:o.");
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)69;
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-81);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, Integer.MIN_VALUE, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)69, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeBinaryField("_x/LqZ+wPk:o.", byteArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i})lRc&'/BC");
      MockPrintStream mockPrintStream0 = new MockPrintStream("i})lRc&'/BC");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-76), (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      iOContext0.allocTokenBuffer(0);
      int[] intArray0 = new int[4];
      intArray0[0] = 56320;
      intArray0[2] = 1;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 1562, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"c_IG{");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = '\'';
      charArray0[2] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1168), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1168), 3, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("start an array");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-488), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)21, true);
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 93, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeBoolean(false);
      assertEquals(5, uTF8JsonGenerator1.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 213, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.shiftRight(83);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      try { 
        uTF8JsonGenerator0._outputSurrogates((-3105), (byte) (-59));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xfffff3df, second 0xffffffc5
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"c_IG{");
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"c_IG{");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, mockPrintStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      iOContext1.allocTokenBuffer(57343);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("@'Smxt", (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("i})lRc&'/BC");
      mockPrintStream0.checkError();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-76), (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      iOContext0.allocTokenBuffer(0);
      int[] intArray0 = new int[4];
      intArray0[0] = 56320;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      uTF8JsonGenerator0._outputEscapes = intArray0;
      iOContext0.withEncoding(jsonEncoding0);
      byteArray0[0] = (byte)112;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("i})lRc&'/BC", byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 105
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"c_IG{");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = '\'';
      charArray0[2] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1168), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1168), 3, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1168), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1168
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, (-1977), true);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = (-1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (-1), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1999, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 15, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      // Undeclared exception!
      try { 
        iOContext0.allocWriteEncodingBuffer(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }
}
