/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 09:01:58 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.nio.ByteBuffer;
import java.util.Collection;
import java.util.Enumeration;
import java.util.IllegalFormatConversionException;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[10];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      pipedOutputStream0.flush();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.CHINESE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, locale0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2853, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("\"9");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFileOutputStream0.write(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('6');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer(593);
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0._charBuffer = charArray0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeFieldName("vNi@:6^a$43");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Currcnt token (%s) not of boolean type", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      uTF8JsonGenerator0._charBuffer = charArray0;
      uTF8JsonGenerator0._verifyPrettyValueWrite("Currcnt token (%s) not of boolean type", 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("\"9");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)93;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2694, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 11, false);
      try { 
        uTF8JsonGenerator1.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("xv^QY");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "xv^QY", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)49;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 135, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte)32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[10];
      Locale locale0 = Locale.KOREAN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 4, false);
      try { 
        uTF8JsonGenerator0.writeNumber((long) 19);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("", "e7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[18];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("|0),2!$\\C~V/O{C/-7");
      FileSystemHandling.createFolder(evoSuiteFile0);
      String string0 = "z";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 34, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 128, false);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 2477);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1196, (ObjectCodec) null, (OutputStream) null);
      int int0 = 627;
      int int1 = 536870910;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 627);
      byte[] byteArray0 = new byte[1];
      pipedInputStream0.close();
      byteArray0[0] = (byte) (-2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("", "Split surrogate on writeRaw() input (last c5aracter): first charaRter 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, (-1623));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      URI uRI0 = MockURI.aFileURI;
      MockURI.resolve(uRI0, "vxoDx$R?k@Z)dh");
      MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = new MockFile("vxoDx$R?k@Z)dh");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.write((-4));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)15;
      iOContext0.allocTokenBuffer(3);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, filterOutputStream0, byteArray0, 91, true);
      uTF8JsonGenerator0.overrideStdFeatures((-4), 905);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(")");
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[10];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      pipedOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2435, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._verifyValueWrite("4G ci@IH");
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 2435);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("", "e7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[18];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("|0),2!$\\C~V/O{C/-7");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[0] = (byte)105;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)105, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      iOContext0.allocTokenBuffer(91);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.overrideStdFeatures(48, (-1476));
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumberField("", 30L);
      int[] intArray0 = new int[0];
      uTF8JsonGenerator1.writeNumber((int) (byte)105);
      uTF8JsonGenerator1._outputEscapes = intArray0;
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("10");
      mockPrintStream0.println((long) 3);
      mockPrintStream0.print((long) 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 95, (ObjectCodec) null, (OutputStream) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      uTF8JsonGenerator0.writeFieldName("");
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("xo6T");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("xo6T", "xo6T");
      MockPrintStream mockPrintStream0 = new MockPrintStream("xo6T");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[8];
      charArray0[2] = 'o';
      int int0 = 4000;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.UTF8JsonGenerator", 2, 4000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[9];
      int int0 = (-1474);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray1 = new char[5];
      charArray1[0] = 'O';
      charArray1[1] = 'O';
      charArray1[2] = 'O';
      charArray1[3] = 'O';
      charArray1[4] = 'O';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1294), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray1, (-1294), 3, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2748, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("8k30k$|q'w=15o9/", 2, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Currcnt token (%s) not of boolean type", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._verifyPrettyValueWrite("Currcnt token (%s) not of boolean type", 0);
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        uTF8JsonGenerator0._outputSurrogates((-2845), 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xfffff4e3, second 0x0
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(")");
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 2435;
      pipedOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2435, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeStringField(")", ")");
      uTF8JsonGenerator0._verifyValueWrite("4G ci@IH");
      try { 
        uTF8JsonGenerator0.writeRaw("4G ci@IH");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0._verifyValueWrite("Can not write a field name, expecting a value");
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.setCurrentValue((Object) null);
      uTF8JsonGenerator0.writeRaw(string0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[9];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-128), (ObjectCodec) null, pipedOutputStream0, byteArray0, 859, false);
      SerializedString serializedString1 = new SerializedString("InputStream.read() returned 0 characters when trying to read ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uR1TB@|aPJ4Xrp_n2");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocNameCopyBuffer(3);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 899, (ObjectCodec) null, byteArrayBuilder0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      uTF8JsonGenerator0._outputEscapes = intArray0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("uR1TB@|aPJ4Xrp_n2");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 117
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("xo6T");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("xo6T", "xo6T");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(114);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      String string0 = "z";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("xo6T");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("xo6T", "xo6T");
      MockPrintStream mockPrintStream0 = new MockPrintStream("xo6T");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      String string0 = "z";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 15);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null);
      iOContext1.allocReadIOBuffer(55296);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator1.writeFieldName("tD5-K`M3");
      Base64Variant base64Variant0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      charsToNameCanonicalizer0.release();
      MockFile mockFile0 = new MockFile("|0),2!$C~V/O{C", "");
      mockFile0.setWritable(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      SerializedString serializedString0 = new SerializedString("");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("^-t");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      mockFileOutputStream1.release();
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-72);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)86, false);
      try { 
        uTF8JsonGenerator0.writeRaw("Too few bytes available: missing ", 2, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("^]\"8m\"96/k@I}");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (-425), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -425
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null);
      iOContext1.allocReadIOBuffer(86);
      String string0 = "tD5-K`M3";
      uTF8JsonGenerator0.writeFieldName("tD5-K`M3");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) sequenceInputStream0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("RNz7");
      MockFile mockFile0 = new MockFile("RNz7", "RNz7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("xo6T");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("xo6T", "xo6T");
      MockPrintStream mockPrintStream0 = new MockPrintStream("xo6T");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("z");
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[0] = 'S';
      charArray0[2] = '';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      uTF8JsonGenerator0.writeString(charArray0, 3, 3);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeString(" slots -- suspect a DoS attack based on hash collisions.");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      charsToNameCanonicalizer0.release();
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.sym.ByteQuadsCa{onicalizer");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[7];
      charArray0[1] = 'S';
      charArray0[6] = 'L';
      charArray0[4] = 'S';
      charArray0[6] = '\u008C';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((-9.182352996020574));
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator1.writeString((char[]) null, 33, 0);
      String string0 = "";
      uTF8JsonGenerator0.writeString("");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 115);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("p|0),2!$C~V/O{C", "-7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = new Locale("", "-7");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2790, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte byte0 = (byte) (-125);
      URI uRI0 = MockURI.aFileURI;
      String string0 = "vxoDx$R?k@Z)dh";
      URI uRI1 = MockURI.resolve(uRI0, "vxoDx$R?k@Z)dh");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "vxoDx$R?k@Z)dh");
      URI uRI2 = MockURI.resolve(uRI1, uRI0);
      MockFile mockFile0 = new MockFile(uRI2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.write(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-263), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (byte)15);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((float) (byte)123);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("RC^Nz7");
      MockFile mockFile0 = new MockFile("RC^Nz7", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) uTF8JsonGenerator0;
      uTF8JsonGenerator0.writeRaw('');
      objectArray0[1] = (Object) mockFileOutputStream0;
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) iOContext0;
      objectArray0[5] = (Object) bigDecimal0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) '';
      // Undeclared exception!
      try { 
        mockPrintStream0.printf("Split surrogate on writeRaw() input (last character): first character 0x%4x", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != com.fasterxml.jackson.core.json.UTF8JsonGenerator
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(593);
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray1 = new byte[9];
      byteArray0[6232] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 512, (ObjectCodec) null, dataOutputStream0, byteArray1, 1, false);
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("RNz7");
      MockFile mockFile0 = new MockFile("RNz7", "RNz7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("", (long) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Mh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3488), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-75);
      byteArray0[1] = (byte) (-126);
      mockFileOutputStream0.write(3);
      charsToNameCanonicalizer0.release();
      byteArray0[4] = (byte) (-75);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2793, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (-688));
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1710);
      uTF8JsonGenerator0.writeRaw('\u008C');
      uTF8JsonGenerator0.writeBoolean(true);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("write a null", "CG4sp'cUVy%r|hrh*$D", true, '\\', (-539));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 19)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3488), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-126);
      mockFileOutputStream0.write(3);
      charsToNameCanonicalizer0.release();
      byteArray0[4] = (byte) (-75);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2793, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (-688));
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1710);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeFieldName("tD5-K`M3");
      SerializedString serializedString0 = new SerializedString("tD5-K`M3");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 1, (-1466));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("", "e7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[18];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("|0),2!$\\C~V/O{C/-7");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[0] = (byte)105;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)105, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 2, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = ")";
      StringReader stringReader0 = new StringReader(")");
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      pipedOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2435, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0._verifyValueWrite("4G ci@IH");
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 2435);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("^]\"8m\"96/k@I}");
      Locale locale0 = new Locale("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", "^]\"8m\"96/k@I}");
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Gtd.`|NfQ>i3sR&o}", (Object[]) null);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-763), (ObjectCodec) null, printStream0, byteArray0, 76, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("le:p?S3]RIHj7Bg{'[", 0, 4659);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("|0),2!$C~V/O{C", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = new Locale("", "|0),2!$C~V/O{C");
      byte[] byteArray0 = new byte[18];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2790, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(256);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1025, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (byte)17);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((int) (byte)36);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "Current context not an object but ", (byte)17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("^]\"8m\"96/k@I}");
      Locale locale0 = new Locale("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", "^]\"8m\"96/k@I}");
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Gtd.`|NfQ>i3sR&o}", (Object[]) null);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-763), (ObjectCodec) null, printStream0, byteArray0, 76, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("le:p?S3]RIHj7Bg{'[", 0, 4659);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      URI uRI0 = MockURI.aFileURI;
      String string0 = "vxoDx$R?k@Z)dh";
      URI uRI1 = MockURI.resolve(uRI0, "vxoDx$R?k@Z)dh");
      URI uRI2 = MockURI.resolve(uRI1, uRI0);
      MockFile mockFile0 = new MockFile(uRI2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.write(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-263), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (byte)15);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) (byte)44);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("", "\"9");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      mockFile0.delete();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1955, (ObjectCodec) null, mockFileOutputStream0);
      String string0 = "bcGgnhOuDO~@K{";
      uTF8JsonGenerator0.writeRawValue("bcGgnhOuDO~@K{");
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("RNz7", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2370, true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("Current context not an object but ");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, false);
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3428, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)105, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(593);
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray1 = new byte[9];
      byteArray0[6232] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray1, 593, false);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      String string0 = "tCq!?|?K";
      MockFile mockFile0 = new MockFile("tCq!?|?K", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)114;
      byte byte0 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)60;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2052), (ObjectCodec) null, mockPrintStream0, byteArray0, 512, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 2, 3030);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("|0),2!$C~V/O{C", "-7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = new Locale("", "-7");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)76;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 48, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 1, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("UTF32_LE", "UTF32_LE");
      MockFile mockFile1 = new MockFile("", "UTF32_LE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = new Locale("J1|@y \"10}u", "UTF32_LE");
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) bufferRecycler0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "UTF32_LE", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)105;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 701, (ObjectCodec) null, printStream0, byteArray0, (byte)3, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("UTF32_LE", 266L);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("UTF32_LE", "UTF32_LE");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 119, (ObjectCodec) null, mockPrintStream0);
      String string0 = "Unexpected problem: chain of filtered context broken";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 21);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, (byte[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Current context not an object but ");
      MockFile mockFile0 = new MockFile("Current context not an object but ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._releaseBuffers();
      byte byte0 = (byte) (-67);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Current context not an object but ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-78), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      uTF8JsonGenerator1.writeNumberField("d+1?\"I1>R?9,uG", (long) (byte)82);
      uTF8JsonGenerator1.writeNumber(23);
      uTF8JsonGenerator1.writeRaw("");
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "d+1?\"I1>R?9,uG", false, '$', 57343);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 15)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3488), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2827, false);
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((-9.182352996020574));
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1322, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator1.writeString((char[]) null, 5, 0);
      String string0 = "";
      uTF8JsonGenerator0.writeString("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.asUnquotedUTF8();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3488), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      readerBasedJsonParser0._nameStartRow = 1;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      mockFileOutputStream0.write(3);
      byteArray0[4] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2793, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (byte)57);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(string0, (byte)15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonFactory");
      MockFile mockFile0 = new MockFile("Current context not an object but ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._releaseBuffers();
      MockPrintStream mockPrintStream1 = new MockPrintStream("v=~@2ih");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 61, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("RC^Nz7", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockFile0.delete();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream1.release();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      dataOutputStream0.writeDouble(3);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-804), (ObjectCodec) null, mockPrintStream0, byteArray0, 127, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1587.93F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("z");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream0 = new MockPrintStream(">Z\"(y04]Qx6EeF.Q");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)91;
      uTF8JsonGenerator0.writeBinary(byteArray1);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.getCharacterEscapes();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber(0.0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1322, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator1.writeString((char[]) null, 5, 0);
      uTF8JsonGenerator0.writeString("");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-2147483648L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1209), (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      int int0 = 2143;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2143);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-3488), false);
      iOContext1.allocTokenBuffer();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      dataOutputStream0.writeDouble(45.721907632514);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Can not ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3488
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("UTF32_LE", "UTF32_LE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.writeDouble(1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-23), (ObjectCodec) null, dataOutputStream0, byteArray0, (-2492), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("UTF32_LE");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2492
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "5", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("5");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)58;
      SerializedString serializedString0 = new SerializedString("5");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(")");
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 'O', (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0._verifyValueWrite("4G ci@IH");
      try { 
        uTF8JsonGenerator0.writeNumber((float) 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[3] = 'a';
      Locale locale0 = new Locale("cgd!l", "nFoXA");
      MockPrintStream mockPrintStream0 = new MockPrintStream("5%G>pc~}^FT");
      mockPrintStream0.print(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)33;
      byte byte0 = (byte)35;
      byteArray0[3] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 111, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3488), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      mockFileOutputStream0.write(3);
      byteArray0[4] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2793, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (-688));
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1710);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      iOContext0.allocReadIOBuffer(593);
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1294), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-789.8560038));
      int int0 = 116;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 13, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("RNz7", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeNumber((double) 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]4M&SI;xZm4SX7yh9a", false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1717, true);
      String string0 = ">ti&:Zp[J\"{]ep2O(|";
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2128, 123);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(")");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2435, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber((float) 2);
      try { 
        uTF8JsonGenerator0.writeNumber((short)23);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("RNz7");
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("RNz7", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 5, 4129);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0._verifyValueWrite(")");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)122;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeBoolean(false);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '^';
      charArray0[2] = '}';
      charArray0[3] = 'C';
      charArray0[4] = 'I';
      charArray0[5] = 't';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-1250), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1250
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 30, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getCharacterEscapes();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-4);
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-1), (-996));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("UTF32_LE");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("Unexpected problem: chain of filtered context broken");
      SerializedString serializedString0 = new SerializedString("Unexpected problem: chain of filtered context broken");
      uTF8JsonGenerator0.writeNumber(">bP");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber(0.0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 534, 777);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("^]\"8m\"96/k@I}");
      Locale locale0 = Locale.KOREA;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.close();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("+_MyTRB");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+_MyTRB", false);
      int int0 = 34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 34, true);
      SerializedString serializedString0 = new SerializedString("");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "RC^Nz7";
      StringReader stringReader0 = new StringReader("RC^Nz7");
      MockFile mockFile0 = new MockFile("RC^Nz7", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      dataOutputStream0.writeDouble(3);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)31;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeObjectFieldStart("");
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-804), 127);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("co.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("^]\"8m\"96/k@I}");
      Locale locale0 = Locale.KOREA;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Gtd.`|NfQ>i3sR&o}", (Object[]) null);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1593, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'G';
      charArray0[2] = '#';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1128), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 1387, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 389, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 389, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3488), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      mockFileOutputStream0.write(3);
      byteArray0[4] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2793, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (-688));
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1710);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("RC^Nz7");
      MockFile mockFile0 = new MockFile("RC^Nz7", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      dataOutputStream0.writeDouble(3);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-100);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1300), (ObjectCodec) null, dataOutputStream0, byteArray0, 71, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 44, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("^]\"8m\"96/k@I}");
      Locale locale0 = Locale.KOREA;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Gtd.`|NfQ>i3sR&o}", (Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-20);
      printStream0.write(byteArray0);
      byteArray0[6] = (byte) (-20);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)58, (ObjectCodec) null, printStream0, byteArray0, 1404, false);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      uTF8JsonGenerator0.writeNumber((short)2758);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 283);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 30, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0._characterEscapes;
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (byte[]) null, 41, (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a binary value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("-7", "write a string");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 339, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("uF3a)T#AQ{+f~");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 2508, (-1315));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(")");
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, stringReader0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 31;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 31, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0._characterEscapes;
      uTF8JsonGenerator0.writeEndObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNullField("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 344, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 344
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("", "-7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = new Locale("", "-7");
      byte[] byteArray0 = new byte[18];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("|0),2!$\\C~V/O{C/-7");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[0] = (byte)105;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 57343, false);
      uTF8JsonGenerator0.writeObject("-7");
      uTF8JsonGenerator0.writeNumberField("^-t", (long) 3);
      uTF8JsonGenerator0.writeNull();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "^-t", 500, (int) (byte)51);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("|0),2!$C~V/O{C", "-7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("", "-7");
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format(locale0, "^-t", objectArray0);
      mockFileOutputStream0.write(0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2552), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("+_MyTRB", "e<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-45);
      byte byte0 = (byte) (-66);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-45);
      String string0 = "S";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("S", true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, tokenFilter0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      mockPrintStream0.close();
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeNumber((float) 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 1, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0123456789ABCDEF", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)15;
      byteArray0[1] = (byte)94;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      BigDecimal bigDecimal1 = new BigDecimal((double) 110);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0._characterEscapes;
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("a4,V@x}8");
      MockFile mockFile0 = new MockFile("", "UTF32_LE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "a4,V@x}8";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[2] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1114111, (ObjectCodec) null, printStream0, byteArray0, 3, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("RC^Nz7");
      MockFile mockFile0 = new MockFile("RC^Nz7", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[1];
      mockFileOutputStream0.write(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4116), (ObjectCodec) null, mockPrintStream0, byteArray0, 26, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 43, (ObjectCodec) null, mockPrintStream0, byteArray0, 26, true);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber((short)885);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("^]\"8m\"96/k@I}");
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.write(2);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale1 = new Locale("Gtd.`|NfQ>i3sR&o}", "Current context not an object but ");
      MockPrintStream mockPrintStream2 = new MockPrintStream("Gtd.`|NfQ>i3sR&o}");
      mockPrintStream2.print(true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream2, byteArray0, 126, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1189);
      uTF8JsonGenerator0.writeNumber((double) 2);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("|0),2!$C~V/O{C", "-7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("", "-7");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "^-t", objectArray0);
      byte[] byteArray0 = new byte[18];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("|0),2!$\\C~V/O{C/-7");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-820), (ObjectCodec) null, printStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumberField("X[|!>WNr}N-6;57JiZ", (long) 33);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanon1calizer");
      MockFile mockFile0 = new MockFile("UTF32_LE", "UTF32_LE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("com.fasterxml.jackson.core.sym.ByteQuadsCanon1calizer", "UTF32_LE");
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format(locale0, "", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-18);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2414), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      uTF8JsonGenerator0.writeRaw("X;L[y?x*");
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("UTF32_LE");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      uTF8JsonGenerator0.writeBinary(byteArray0, 128, (-1892));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-1253), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      SerializedString serializedString0 = new SerializedString(")");
      mockFileOutputStream0.write(58);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0.0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("start an object", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3488), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)15;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) tokenFilter0;
      mockPrintStream0.format(locale0, ":}Y?0oWZ=Z}=O", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-125), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeRaw('t');
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3488), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)15;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) tokenFilter0;
      mockPrintStream0.format(locale0, ":}Y?0oWZ=Z}=O", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6001, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 44, 855);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-23);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 116, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(2.147483647E9);
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`7";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0123456789ABCDEF", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)15;
      byteArray0[1] = (byte)94;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) 110);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`7";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0123456789ABCDEF", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)15;
      byteArray0[1] = (byte)94;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.close();
      try { 
        uTF8JsonGenerator0.writeNumber(110);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeObject((Object) null);
      uTF8JsonGenerator0.writeNumberField("", 759L);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeNumber((short)1838);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)18;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "5", true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1018, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject((Object) null);
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
      uTF8JsonGenerator0._maximumNonEscapedChar = 312;
      uTF8JsonGenerator0.writeFieldName(">ti&:Zp[J\"{]ep2O(|");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2098, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0._characterEscapes;
      uTF8JsonGenerator0.writeEndObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte byte0 = (byte)58;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)58;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, (int) (byte)58, 69);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 58
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("UTF32_LE", "8!");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0._characterEscapes;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 1351);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("^]\"8m\"96/k@I}");
      Locale locale0 = Locale.KOREA;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Gtd.`|NfQ>i3sR&o}", (Object[]) null);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1593, (ObjectCodec) null, printStream0, byteArray0, 1, true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      SerializedString serializedString0 = new SerializedString(")");
      uTF8JsonGenerator0.writeNumberField("", (long) 0);
      uTF8JsonGenerator0.writeNumber(0.8F);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0.writeNumber((short)512);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3117, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3117
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("^]\"8m\"96/k@I}");
      MockPrintStream mockPrintStream0 = new MockPrintStream("^]\"8m\"96/k@I}");
      Locale locale0 = Locale.KOREA;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1901), (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("^]\"8m\"96/k@I}");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, mockPrintStream1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2098, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0._characterEscapes;
      uTF8JsonGenerator0.writeEndObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((-1L));
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(593);
      char[] charArray0 = new char[4];
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1294), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-789.8560038));
      dataOutputStream0.writeDouble(469.0686347649922);
      uTF8JsonGenerator0.writeRaw("p{H7moH+j");
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 23);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = new SerializedString("p{H7moH+j");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "5", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-65);
      filterOutputStream0.write((-1400));
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-67);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, objectOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(114);
      uTF8JsonGenerator0.writeRaw("5");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte) (-67);
      byteArray1[4] = (byte) (-65);
      byteArray1[5] = (byte)43;
      byteArray1[6] = (byte) (-65);
      byteArray1[7] = (byte) (-65);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte)32, 2977);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1209), (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumberField("80^VM+$YL/{0\"yABnSa", (long) 0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString("80^VM+$YL/{0\"yABnSa");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("^]\"8m\"96/k@I}");
      MockPrintStream mockPrintStream0 = new MockPrintStream("^]\"8m\"96/k@I}");
      Locale locale0 = Locale.KOREA;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Gtd.`|NfQ>i3sR&o}", (Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-20);
      byteArray0[4] = (byte)113;
      printStream0.write(byteArray0);
      byteArray0[6] = (byte) (-20);
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      printStream0.print(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)58, (ObjectCodec) null, printStream0, byteArray0, 1404, false);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      uTF8JsonGenerator0.writeNumberField("Gtd.`|NfQ>i3sR&o}", (long) (byte) (-20));
      uTF8JsonGenerator0.writeNumber(21.747206F);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-20));
      uTF8JsonGenerator0.writeRaw("`hDUbSL`IhI");
      uTF8JsonGenerator0.writeNumber((float) (byte)34);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("^]\"8m\"96/k@I}");
      MockPrintStream mockPrintStream0 = new MockPrintStream("^]\"8m\"96/k@I}");
      Locale locale0 = Locale.KOREA;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Locale locale1 = new Locale("Gtd.`|NfQ>i3sR&o}", "Current context not an object but ");
      PrintStream printStream0 = mockPrintStream1.format(locale1, "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", (Object[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2822, (ObjectCodec) null, printStream0, byteArray0, 126, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("^]\"8m\"96/k@I}");
      MockPrintStream mockPrintStream0 = new MockPrintStream("^]\"8m\"96/k@I}");
      Locale locale0 = Locale.KOREA;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Gtd.`|NfQ>i3sR&o}", (Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-20);
      byteArray0[4] = (byte)113;
      printStream0.write(byteArray0);
      byteArray0[6] = (byte) (-20);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)58, (ObjectCodec) null, printStream0, byteArray0, 1404, false);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      uTF8JsonGenerator0.writeNumberField("Gtd.`|NfQ>i3sR&o}", (long) (byte) (-20));
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-20));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("UTF32_LE", "8!");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0._verifyValueWrite("8!");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not 8!, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber(0.0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1322, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator1.writeString((char[]) null, 5, 0);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)74;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 28, (ObjectCodec) null, (OutputStream) null, byteArray0, 1379, false);
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      String string0 = "6";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("6", (long) (byte) (-88));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      Locale locale0 = new Locale(" $.#0a7LXO@]", "-7");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = 'z';
      charArray0[2] = 'g';
      charArray0[3] = '5';
      charArray0[4] = 'r';
      charArray0[5] = 'b';
      uTF8JsonGenerator0.writeRaw(charArray0, 3, 3);
      uTF8JsonGenerator0.writeRaw('c');
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 116, (-998));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3981, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("", "UTF-32BE");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = new Locale(":b|eGja5JDYAGV", "", "");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) iOContext1;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) iOContext1;
      objectArray0[5] = (Object) stringReader0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "UTF-32BE", objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-18), (ObjectCodec) null, printStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumberField("", (long) (byte)113);
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonFactory");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 1, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-978), (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("UTF32_LE/-7");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      int int0 = 50;
      int int1 = 372;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 312, (ObjectCodec) null, mockPrintStream0, byteArray0, 33, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(593);
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1294), (ObjectCodec) null, pipedOutputStream0, byteArray1, 2, false);
      uTF8JsonGenerator0.writeNumber((-789.8560038));
      dataOutputStream0.writeDouble(469.0686347649922);
      uTF8JsonGenerator0.writeRaw("p{H7moH+j");
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 23);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = new SerializedString("p{H7moH+j");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      charsToNameCanonicalizer0.release();
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'S';
      charArray0[2] = 'R';
      charArray0[3] = 'L';
      charArray0[4] = '\u0016';
      charArray0[5] = 'S';
      charArray0[6] = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-45);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber((-1124.03031229823));
      uTF8JsonGenerator0.writeNumber((-1L));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeRaw('i');
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "5", true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      MockFile mockFile0 = new MockFile("X.Va<P?", "-7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("X.Va<P?", "5");
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format(locale0, "b`=_<uhU7", objectArray0);
      PrintStream printStream0 = mockPrintStream0.printf("X.Va<P?", objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-18), (ObjectCodec) null, printStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumberField("X.Va<P?", (-3545L));
      uTF8JsonGenerator0.writeNull();
      int int0 = (-1);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-7", (-999), (int) (byte)58);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2435, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
      int int0 = 2;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 2435);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-SA:w)y!VUW`f5,^s%}", true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "S", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 288, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, dataOutputStream0, byteArray0, 1036, false);
      iOContext0.allocReadIOBuffer(56320);
      uTF8JsonGenerator0.writeNumber((-1.0));
      SerializedString serializedString0 = new SerializedString(")");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber(3042.383F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0123456789ABCDEF", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)94;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      BigDecimal bigDecimal0 = new BigDecimal((double) 110);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 5, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5, false);
      BigDecimal bigDecimal0 = new BigDecimal(1904.0039889489);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      MockFile mockFile0 = new MockFile("-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-45);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber((long) 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeRaw('i');
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("^]\"8m\"96/k@I}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.KOREA;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Gtd.`|NfQ>i3sR&o}", (Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-20);
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)58;
      printStream0.write(byteArray0);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-20);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)58, (ObjectCodec) null, printStream0, byteArray0, 1404, false);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      uTF8JsonGenerator0.writeNumberField("Gtd.`|NfQ>i3sR&o}", 1258L);
      uTF8JsonGenerator0.writeNull();
      try { 
        uTF8JsonGenerator0._writePPFieldName("^]\"8m\"96/k@I}");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[4];
      charArray0[1] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[0] = (byte)22;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)22;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
      uTF8JsonGenerator0.writeNumber((short)110);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanon1calizer");
      Locale locale0 = new Locale("com.fasterxml.jackson.core.sym.ByteQuadsCanon1calizer", "-7");
      Object[] objectArray0 = new Object[0];
      byte[] byteArray0 = new byte[3];
      MockFile mockFile0 = new MockFile(">1lB|1rx");
      File file0 = MockFile.createTempFile(",'nS!r0+PV3d$r^V", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) "m+hr:#i@h5sZ!&ah";
      objectArray1[1] = (Object) iOContext0;
      objectArray1[2] = (Object) file0;
      objectArray1[3] = (Object) "com.fasterxml.jackson.core.sym.ByteQuadsCanon1calizer";
      objectArray1[4] = (Object) "UTF32_LE";
      objectArray1[5] = (Object) bufferRecycler0;
      objectArray1[6] = (Object) bufferRecycler0;
      Object object0 = new Object();
      objectArray1[7] = object0;
      PrintStream printStream0 = mockPrintStream0.format("", objectArray1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2898), (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeString(">1lB|1rx");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1953), (ObjectCodec) null, filterOutputStream0, byteArray0, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("tCq!?|?K", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tCq!?|?K");
      uTF8JsonGenerator0.writeRaw("#nNt", 3, 1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)78;
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 3);
      uTF8JsonGenerator0.writeRaw('8');
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("", "-7");
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format(locale0, "", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3659), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 123, (byte)58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      iOContext0.allocReadIOBuffer(593);
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      SerializedString serializedString0 = new SerializedString("'");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 1381, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3981, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("UTF-32BE", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2010), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      long[] longArray0 = new long[0];
      uTF8JsonGenerator0.writeArray(longArray0, 13, (-2508));
      uTF8JsonGenerator0.writeNumber(0L);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("RNz7");
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("RNz7", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("RNz7", "");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("gm?+d", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">lhH{");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2785), (ObjectCodec) null, printStream0, byteArray0, 1898, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 29, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNull();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      uTF8JsonGenerator0.writeNumber(2675.45646);
      uTF8JsonGenerator0.writeFieldName("P/FsH846n&^HK;X`");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("^)");
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^)", false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, 108, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("+_MyTRB", "e<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-45);
      String string0 = "S";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("S", true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, tokenFilter0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      mockPrintStream0.close();
      uTF8JsonGenerator0.writeNumber((double) 3);
      SerializedString serializedString0 = new SerializedString("+_MyTRB");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((float) 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 1, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanon1calizer");
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("com.fasterxml.jackson.core.sym.ByteQuadsCanon1calizer", "-7");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1955, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRawValue("bcGgnhO~DO~@K(");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("bcGgnhO~DO~@K(", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "5", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2000, false);
      int int0 = 2208;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2208);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonFactory");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 1, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 2596, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either '*' or '/' for a comment", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("was expecting either '*' or '/' for a comment", false);
      byte[] byteArray0 = new byte[2];
      iOContext0.allocReadIOBuffer(32);
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-35);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 63, true);
      SerializedString serializedString0 = new SerializedString("j2gV4sTC2K#87X");
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("+_MyTRB", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-45), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((-3334.4546826));
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      StringWriter stringWriter0 = new StringWriter();
      String string0 = ":NH_/oQf";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 98, 65535);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, (OutputStream) null, byteArray0, 114, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) (byte) (-64));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("No ObjectCodec defined");
      String string0 = "<";
      uTF8JsonGenerator0.writeNumber((short)42);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("<", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonFactory");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.JsonFactory");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 6, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._flushBuffer();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1455, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNull();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeNumber(0.0);
      uTF8JsonGenerator1.writeNumber((float) 56319);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "", 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      ObjectCodec objectCodec0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2386), (ObjectCodec) null, dataOutputStream0, byteArray0, 4, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-182));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2845);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1385), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3701, false);
      uTF8JsonGenerator0._verifyValueWrite("4%>(");
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2098, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0._characterEscapes;
      uTF8JsonGenerator0._characterEscapes = null;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext1 = new IOContext(bufferRecycler0, "UTF32_LE", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)58;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)58, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 684, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1209), (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com&fasterxml.jic9son.core.sym.TyteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("com&fasterxml.jic9son.core.sym.TyteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com&fasterxml.jic9son.core.sym.TyteQuadsCanonicalizer");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-746), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      StringReader stringReader1 = new StringReader(" bytes (out of ");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("Y11", "UTF32_LE");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, (-2063), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("+_MyTRB", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte) (-45);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 42, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeNumber((long) (byte)34);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 2, 2013);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^N,'y_Y\"c-vLxfG\"-", false);
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)48;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 2047, false);
      uTF8JsonGenerator0.writeNumber((double) 55296);
      SerializedString serializedString0 = new SerializedString("^N,'y_Y\"c-vLxfG\"-");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeNumber((-1822.21F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3174), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, (-1330), (-3174));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber((float) 2);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanon1calizer");
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("com.fasterxml.jackson.core.sym.ByteQuadsCanon1calizer", "-7");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-820), (ObjectCodec) null, printStream0, byteArray0, 1, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)22;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)22, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)22, false);
      SerializedString serializedString0 = new SerializedString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3174), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
      int int0 = 717;
      uTF8JsonGenerator0.writeRaw("hzRwu'0xZ_<xciz}K");
      try { 
        uTF8JsonGenerator0._outputSurrogates(200, 356);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xc8, second 0x164
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5976, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber((-3799L));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("RNz7");
      MockFile mockFile0 = new MockFile("UThF2_LE", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("K$VV )*GQ", "");
      Object[] objectArray0 = new Object[1];
      mockFileOutputStream0.close();
      objectArray0[0] = (Object) null;
      mockPrintStream0.format(locale0, "", objectArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[1];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeDouble(107.548037);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 123, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonFactory");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.JsonFactory");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3811, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2882, false);
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-990), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 102, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("start an object");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0123456789ABCDEF");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)15, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[0];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer.createRoot();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3174), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
      int int0 = 717;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 717, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(1224);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 105, 1);
      uTF8JsonGenerator0.writeFieldName(")");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, dataOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      iOContext0.allocReadIOBuffer(593);
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
      uTF8JsonGenerator0.writeFieldName(">ti&:Zp[J\"{]ep2O(|");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("tCq!?|?K", "-7");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)118;
      BigDecimal.valueOf(2147483647L);
      BigInteger bigInteger0 = BigInteger.TEN;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 33, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-2685));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("RNz7");
      MockFile mockFile0 = new MockFile("UThF2_LE", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("K$VV )*GQ", "");
      mockFileOutputStream0.write(3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      mockPrintStream0.format(locale0, "", objectArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[1];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeDouble(107.548037);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeRaw("&i.S2D_GN TRc");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 123, (-1523));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0123456789ABCDEF");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)80;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      BigDecimal bigDecimal0 = new BigDecimal((double) 110);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      char[] charArray0 = new char[4];
      uTF8JsonGenerator0.writeString(charArray0, 1727, 0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("-7");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3488), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0123456789ABCDEF");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)15;
      mockFileOutputStream0.write(3);
      byteArray0[4] = (byte)80;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2790, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)102);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1710);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      charsToNameCanonicalizer0.release();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'L';
      charArray0[4] = ')';
      charArray0[5] = '=';
      charArray0[6] = '';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)48;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockPrintStream0, byteArray0, 53, false);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1361), (ObjectCodec) null, byteArrayBuilder0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1361), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 38, true);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)22;
      byteArray0[8] = (byte)22;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber("mdrf");
      uTF8JsonGenerator0.writeRaw("N@(*igPt[um[+pnOz");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, (int) (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3488), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0123456789ABCDEF");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)18, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-2593), true);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.flush();
      BigDecimal bigDecimal0 = new BigDecimal(4);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2593
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      Locale locale0 = new Locale("", "-7");
      Object[] objectArray0 = new Object[0];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)58;
      SerializedString serializedString0 = new SerializedString("-7");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2996, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = 'z';
      charArray0[2] = '[';
      charArray0[3] = 'g';
      charArray0[4] = 'r';
      charArray0[5] = 'q';
      charArray0[6] = ':';
      charArray0[7] = '.';
      charArray0[8] = '2';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("RNz7");
      MockFile mockFile0 = new MockFile("UThF2_LE", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("K$VV )*GQ", "");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      mockPrintStream0.format(locale0, "", objectArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[1];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeDouble(107.548037);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeRaw("&i.S2D_GN TRc");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 123, (-1523));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayBuilder0);
      char char0 = 'U';
      uTF8JsonGenerator0.writeRaw('U');
      byteArrayBuilder0.write((-1312));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("P/FsH846n&^HK;X`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("UTF32_LE");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeNumber((-599.0));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current token (%s) not of boolean type", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("No ObjectCodec defined");
      uTF8JsonGenerator0._verifyPrettyValueWrite("No ObjectCodec defined", 0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      try { 
        uTF8JsonGenerator0.writeObjectFieldStart(" does not support schema of type '");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("UTF32_LE", "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("UTF32_LE");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "UTF32_LE", false);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeNumber("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)58;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRawUTF8String(byteArray0, 56319, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("RNz7");
      MockFile mockFile0 = new MockFile("UThF2_LE", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("K$VV )*GQ", "");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      mockPrintStream0.format(locale0, "", objectArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 117, false);
      SerializedString serializedString0 = new SerializedString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)22, false);
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = '=';
      charArray0[2] = '';
      charArray0[3] = 'S';
      charArray0[4] = 'L';
      charArray0[5] = ')';
      charArray0[6] = ')';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 0, (int) (byte)34);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-990), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 102, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte)22;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((double) 1);
      dataOutputStream0.writeDouble((byte)22);
      uTF8JsonGenerator0.writeNumber(474);
      int int0 = (-1071);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null, (-1071), (int) (byte)22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current token (%s) not of boolean type", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-829), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("Current token (%s) not of boolean type");
      String string0 = "write a raw (unencoded) value";
      int int0 = 1;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("write a raw (unencoded) value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current token (%s) not of boolean type", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("");
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber((long) 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-34);
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 104, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber("_(~54#TIloe~kMW");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-996), (ObjectCodec) null, dataOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw(charArray0, (int) (byte) (-34), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -34
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      charsToNameCanonicalizer0.release();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'L';
      uTF8JsonGenerator0.writeNumber(3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", (-495), 951);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-45);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      uTF8JsonGenerator0.writeString(charArray0, 1727, 0);
      uTF8JsonGenerator0.writeNumber((short) (byte)51);
      String string0 = "";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", (String) null, false, 'T', 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      iOContext0.allocReadIOBuffer(593);
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
      uTF8JsonGenerator0.writeFieldName(">ti&:Zp[J\"{]ep2O(|");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      System.setCurrentTimeMillis(905L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2110, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0._characterEscapes;
      uTF8JsonGenerator0._characterEscapes = null;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Eh6B!\\u1$VO([`h";
      StringReader stringReader0 = new StringReader(string0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3488), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0123456789ABCDEF");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)80;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2790, true);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRaw('U');
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 567, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", "-7");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "k", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-799), (ObjectCodec) null, printStream0, byteArray0, 1, true);
      SerializedString serializedString0 = new SerializedString("-7");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("", (long) 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      stringReader0.markSupported();
      charArray0[2] = 'a';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-978), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 102, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.flush();
      BigDecimal bigDecimal0 = new BigDecimal((-937));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("tCq!?|?K", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tCq!?|?K");
      uTF8JsonGenerator0.writeRaw("#nNt", 3, 1);
      uTF8JsonGenerator0.writeNumber((float) 33);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeRaw(charArray0, (-2023), (int) (byte) (-34));
      SerializedString serializedString0 = new SerializedString("ui?g?");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((float) (byte)52);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte)22;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((double) 1);
      dataOutputStream0.writeDouble((byte)22);
      uTF8JsonGenerator0.writeNumber("mdrf");
      uTF8JsonGenerator0.writeRaw("N@(*igPt[um[+pnOz");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)91, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 91
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      charsToNameCanonicalizer0.release();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'L';
      charArray0[5] = '=';
      charArray0[6] = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current token (%s) not of boolean type", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("");
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 1);
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 55296, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator1.writeNumber("Too few bytes available: missing ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current token (%s) not of boolean type", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("No ObjectCodec defined");
      uTF8JsonGenerator0._verifyPrettyValueWrite("No ObjectCodec defined", 0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber(1624);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("No ObjectCodec defined", (-1101), 2308);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeFieldName(">ti&:Zp[J\"{]ep2O(|");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("Failed rehash(): old count=");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte byte0 = (byte) (-34);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      String string0 = "write a binary value";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a binary value", false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 19, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      try { 
        uTF8JsonGenerator0.writeFieldName("Failed rehash(): old count=");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte)22;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber("mdrf");
      uTF8JsonGenerator0.writeRaw("N@(*igPt[um[+pnOz");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, (int) (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-45);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFile0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 128, (ObjectCodec) null, mockPrintStream0, byteArray0, 56320, true);
      uTF8JsonGenerator1.writeNumber(645.0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 0, 56319);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      OutputStream outputStream0 = null;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4560, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      String string0 = "write a raw (unencoded) value";
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
      boolean boolean1 = false;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 39, (ObjectCodec) null, (OutputStream) null, (byte[]) null, (-418), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (-3107), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[0] = '+';
      charArray0[2] = 'R';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      uTF8JsonGenerator0.writeString(charArray0, 1477, (-2556));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(165L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)24;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 1, (int) (byte)40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      String string0 = "-7";
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-820), (ObjectCodec) null, printStream0, byteArray0, 1, true);
      SerializedString serializedString0 = new SerializedString("-7");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      String string0 = "-7";
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      String string1 = "Unexpected problem: chain of filtered context broken";
      uTF8JsonGenerator0.writeFieldName("Unexpected problem: chain of filtered context broken");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedString serializedString0 = new SerializedString("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocNameCopyBuffer(2313);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      StringReader stringReader1 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-944), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("UTF32_LE", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("]X?1$V");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 33, 1285);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-34);
      int int0 = 92;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 256, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-34), true);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current token (%s) not of boolean type", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("");
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = '+';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 898);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current token (%s) not of boolean type", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("");
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      uTF8JsonGenerator0.writeNumber((long) 3);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer";
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 3127, false);
      try { 
        uTF8JsonGenerator0.writeNumber((double) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '+';
      charArray0[2] = 'R';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      uTF8JsonGenerator0.writeString(charArray0, 1477, (-2556));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(165L);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current token (%s) not of boolean type", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      String string0 = "No ObjectCodec defined";
      uTF8JsonGenerator0.writeRawValue("No ObjectCodec defined");
      uTF8JsonGenerator0._verifyPrettyValueWrite("No ObjectCodec defined", 0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 1);
      try { 
        uTF8JsonGenerator0.writeFieldName("No ObjectCodec defined");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("UTF32_LE");
      uTF8JsonGenerator0.writeRaw("#nNt", 3, 1);
      uTF8JsonGenerator0.writeNumber((float) 33);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("0Qp:0KS_T+", "0Qp:0KS_T+");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-468), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("w6IF>!r^");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("w6IF>!r^", 0, 950);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      stringReader0.markSupported();
      charArray0[2] = 'a';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-990), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 102, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.flush();
      BigDecimal bigDecimal0 = new BigDecimal((-937));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-34);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-34), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName(">ti&:Zp[J\"{]ep2O(|");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -34
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = 'j';
      charArray0[2] = 'X';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("start an object");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)118;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 51, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("start an object");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.write(2);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-2147483648L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0._flushBuffer();
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.withEncoding((JsonEncoding) null);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-34), (ObjectCodec) null, pipedOutputStream1, byteArray0, 57343, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, (-6111));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-45);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber((long) 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4560, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 512, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 1605, (-791), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream(128);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 541, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1605, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-2023), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2023
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("UTF32_LE");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'o';
      charArray0[2] = 'L';
      charArray0[3] = '1';
      charArray0[4] = ')';
      uTF8JsonGenerator0.writeNumber((-599.0));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("UTF32_LE");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "-7", false);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeNumber((double) 3);
      uTF8JsonGenerator1.writeNumber("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonFactory");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = false;
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)18;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.JsonFactory");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charsToNameCanonicalizer0.makeChild('L');
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append((CharSequence) "-7");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3960, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = new SerializedString("start an object");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      charsToNameCanonicalizer0.release();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'S';
      charArray0[2] = '1';
      charArray0[3] = 'L';
      charArray0[4] = ')';
      charArray0[5] = '=';
      charArray0[6] = '';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" JDV*zY0 D(6k`");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) " JDV*zY0 D(6k`");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2384), (ObjectCodec) null, printStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 262144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonFactory");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 439, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)18;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeString((char[]) null, 121, (-998));
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.JsonFactory");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeRaw("N@(*igPt[um[+pnOz");
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 512, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 1605, (-791), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream(128);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-48);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("VALUE_EMBEDDED_OBJECT", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1605, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1605, true);
      double double0 = (-222.6195208453879);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", (-415));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-990), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 102, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current token (%s) not of boolean type", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("");
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 28, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-2023), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2023
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 18, true);
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 123, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "start an object";
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'j';
      charArray0[2] = 'X';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("UTF32_LE");
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeRaw("#nNt", 3, 1);
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeNumber((float) 33);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'j';
      charArray0[2] = 'X';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("start an object");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2254), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 39, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) (byte)118);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 12, true);
      uTF8JsonGenerator0.writeNumber((double) (-990));
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2060), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.getOutputBuffered();
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current token (%s) not of boolean type", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-829), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("Current token (%s) not of boolean type");
      uTF8JsonGenerator0.writeFieldName("Current token (%s) not of boolean type");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (-829), 84);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)118;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 50, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 33);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("UTF32_LE");
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'S';
      charArray0[2] = '1';
      charArray0[3] = 'L';
      charArray0[4] = ')';
      charArray0[5] = '=';
      charArray0[6] = '';
      charArray0[7] = '|';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 51, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'j';
      charArray0[2] = 'X';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6ei|Z}J8b0}\"c6");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeString(charArray0, 5076, 0);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonFactory");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 439, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-62);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-62), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -62
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 512, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 1605, (-791), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream(128);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-62);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 583, (ObjectCodec) null, pipedOutputStream0, byteArray0, 583, true);
      uTF8JsonGenerator0._bufferRecyclable = true;
      uTF8JsonGenerator0._verifyValueWrite("! ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 3310, false);
      uTF8JsonGenerator0.writeNumber((double) 3);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'j';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-990), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-729), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1116, true);
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1135, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)78, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 512, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 1605, (-791), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream(128);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-62);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 583, (ObjectCodec) null, pipedOutputStream0, byteArray0, 583, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'j';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-990), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2750, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(1.0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append((CharSequence) "-7");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 29, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)118;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)118, (ObjectCodec) null, (OutputStream) null, byteArray0, 97, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-3));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-804), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -804
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4560, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current token (%s) not of boolean type", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 127;
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-829), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRawValue("Current token (%s) not of boolean type");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("write a raw (unencoded) value", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current token (%s) not of boolean type", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current token (%s) not of boolean type");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) jsonEncoding0;
      objectArray0[2] = (Object) iOContext0;
      PrintStream printStream0 = mockPrintStream1.format("Current token (%s) not of boolean type", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 127, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0._verifyValueWrite("Current token (%s) not of boolean type");
      uTF8JsonGenerator0.writeBoolean(false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '3';
      charArray0[2] = 't';
      charArray0[3] = 'Q';
      charArray0[4] = ' ';
      charArray0[5] = '.';
      charArray0[6] = 'z';
      charArray0[7] = 'C';
      charArray0[8] = 'D';
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1602, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'j';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-990), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-990), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      assertArrayEquals(new byte[] {(byte)49, (byte)46, (byte)48, (byte) (-34), (byte) (-34), (byte) (-34), (byte) (-34), (byte)118, (byte) (-34)}, byteArray0);
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4560, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNull();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4560, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawValue("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("write a raw (unencoded) value", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("FJT[g(Au,`KUuJvc\"`");
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (-365), (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4560, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("write a raw (unencoded) value", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("UTF32_LE", "-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      int int0 = 2906;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 101, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'j';
      charArray0[2] = 'X';
      charArray0[3] = 'a';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-990), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._flushBuffer();
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocConcatBuffer();
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("-2");
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-82);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }
}
