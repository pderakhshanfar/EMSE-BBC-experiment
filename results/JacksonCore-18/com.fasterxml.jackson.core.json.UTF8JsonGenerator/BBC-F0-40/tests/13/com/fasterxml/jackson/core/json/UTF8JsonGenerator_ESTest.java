/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:03:42 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.nio.ByteBuffer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k\"f");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 92, false);
      uTF8JsonGenerator0._verifyValueWrite("k\"f");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName("k\"f");
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeString("k\"f");
      uTF8JsonGenerator0.writeRaw("Can not ");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "SUPRyO0zZ5";
      String string1 = "M|7Z";
      MockPrintStream mockPrintStream0 = new MockPrintStream("M|7Z");
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)22;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte) (-29);
      int int0 = 16;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 16, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBinary(byteArray0);
      MockFile mockFile0 = new MockFile("M|7Z");
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockFile0, "1DRvpB<7fK'bgXjO");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 1DRvpB<7fK'bgXjO
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BYr7&");
      iOContext0.allocReadIOBuffer(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-562), (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      jsonGenerator0.writeRaw("");
      jsonGenerator0.writeStartObject();
      JsonGenerator jsonGenerator1 = jsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeBooleanField(" of 4-char base64 unit: can only used between units", true);
      try { 
        jsonGenerator1.writeNumber((float) 55296);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.writeStartObject((Object) null);
      uTF8JsonGenerator0.writeEndObject();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((String) null, ": was expecting closing quote for a string value", true, 't', 733);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 48)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SUP!RyO0zZ5");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte)6;
      mockFileOutputStream0.write(byteArray0);
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)6, false);
      uTF8JsonGenerator0.writeStartArray();
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = '8';
      charArray0[3] = '{';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      System.setCurrentTimeMillis(56319);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      String string0 = "H!";
      uTF8JsonGenerator0.writeRaw("H!");
      uTF8JsonGenerator0.writeStartArray();
      Base64Variant base64Variant0 = null;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BYr7&");
      iOContext0.allocReadIOBuffer(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-562), (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      jsonGenerator0.writeRaw("");
      jsonGenerator0.writeStartObject();
      JsonGenerator jsonGenerator1 = jsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator1.close();
      // Undeclared exception!
      try { 
        jsonGenerator1.writeRaw("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1114111, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BYr7&");
      iOContext0.allocReadIOBuffer(1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("BYr7&");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "FEUEj',-iEcK^j");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-562), (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      jsonGenerator0.writeRaw("");
      jsonGenerator0.writeStartObject();
      jsonGenerator0.useDefaultPrettyPrinter();
      boolean boolean0 = true;
      try { 
        jsonGenerator0.writeString("z`9");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      mockFileOutputStream0.write(byteArray0);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      iOContext0.allocTokenBuffer((-1252));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2587, false);
      String string0 = ", expecting field name";
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeBooleanField(", expecting field name", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      mockFileOutputStream0.write(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5516, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 3, false);
      byte[] byteArray1 = new byte[6];
      mockFileOutputStream1.getChannel();
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte) (-105);
      byteArray1[3] = (byte)63;
      byteArray1[4] = (byte) (-90);
      byteArray1[5] = (byte)11;
      uTF8JsonGenerator0.writeBinary(byteArray1, 933, (int) (byte) (-105));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBooleanField("", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BYr7&");
      iOContext0.allocReadIOBuffer(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-562), (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      jsonGenerator0.writeRaw("");
      jsonGenerator0.writeStartObject();
      jsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeBooleanField(" of 4-char base64 unit: can only used between units", true);
      try { 
        jsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Current context not an ARRAY but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", true);
      byte[] byteArray0 = new byte[1];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
      uTF8JsonGenerator0.writeStartObject((Object) "Current context not an ARRAY but ");
      char char0 = 't';
      uTF8JsonGenerator0.writeEndObject();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Current context not an ARRAY but ", "Current context not an ARRAY but ", false, 't', 733);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 33)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocWriteEncodingBuffer(1300);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", true);
      byte[] byteArray0 = new byte[1];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("Current context not an ARRAY but ", "t<P!Bv qFXS*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-324), (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)112);
      BigDecimal bigDecimal0 = new BigDecimal((-1964.836));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BYr7&");
      iOContext0.allocReadIOBuffer(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-562), (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber("t-NRu<S^");
      uTF8JsonGenerator0.writeRaw("start an array");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("BYr7&");
      jsonGenerator0.writeFieldName("BYr7&");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BYr7&");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-562), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber("t-NRu<S^");
      uTF8JsonGenerator0.writeRaw("start an array");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-562), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k\"f");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 92, false);
      uTF8JsonGenerator0._verifyValueWrite("10");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName("10");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      bigDecimal0.toString();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 512, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumberField("-'\"MxoNbbU'n}7\"", bigDecimal0);
      uTF8JsonGenerator0.writeRaw("679Z");
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("%h$P[?;)o-");
      SerializedString serializedString1 = new SerializedString("5k$Ki");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (-1218));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SUP!RyO0zZ5");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte)6;
      mockFileOutputStream0.write(byteArray0);
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-269), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)6, false);
      uTF8JsonGenerator0.writeStartArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!^*kz");
      uTF8JsonGenerator0.writeNumber((int) (byte)91);
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = '8';
      charArray0[3] = '{';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      System.setCurrentTimeMillis(56319);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)38;
      byteArray0[0] = (byte)38;
      mockFile0.setWritable(true, false);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1581), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)38, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("/tmp/foo.bar", 3, 32768);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("w8LBeT*v`Y];']%f");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-17);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1544, (ObjectCodec) null, pipedOutputStream0, byteArray0, 116, false);
      uTF8JsonGenerator0._verifyValueWrite("cPj{Y'&KeE");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      String string0 = "\\.";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName(".");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SUP!RyO0zZ5");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte)6;
      mockFileOutputStream0.write(byteArray0);
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-269), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)6, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)91);
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = '8';
      charArray0[3] = '{';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      System.setCurrentTimeMillis(56319);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeRaw("H!");
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("start an object", "SUP!RyO0zZ5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1639, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)117, (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 117
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUPRyO0zZ5");
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBinary(byteArray0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("SUPRyO0zZ5");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      jsonGenerator0.writeNumberField("SUPRyO0zZ5", bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.releaseReadIOBuffer((byte[]) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2580, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      mockFileOutputStream0.write(2000);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 192, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      mockFileOutputStream0.write(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-30), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("Current context not an ARRAY but ");
      uTF8JsonGenerator0.writeNumber("f");
      uTF8JsonGenerator0.writeRaw("3Gd&!Ls?*HK ]rN");
      SerializedString serializedString1 = new SerializedString("0Y@bU");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 3751);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      byteArrayBuilder0.reset();
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 61, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(25L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Current context not an ARRAY but ");
      iOContext0.allocTokenBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.asShortBuffer();
      uTF8JsonGenerator0.writeNumber(0.0F);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      bigInteger0.clearBit(2015);
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Current context not an ARRAY but ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 33, false);
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (-3661), (-1936));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-66), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      byteArrayBuilder0.reset();
      char[] charArray0 = new char[7];
      uTF8JsonGenerator0.writeArrayFieldStart(">l8AA7i<");
      charArray0[0] = '[';
      byteArrayBuilder0.release();
      charArray0[1] = ']';
      charArray0[2] = '';
      charArray0[4] = '_';
      charArray0[0] = 't';
      charArray0[6] = '@';
      uTF8JsonGenerator0.writeString(charArray0, 2, 2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, (-2), 37);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SUP!RyO0zZ5");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte)6;
      mockFileOutputStream0.write(byteArray0);
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-269), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)6, false);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)32);
      uTF8JsonGenerator0.writeNumber((float) 0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = '8';
      charArray0[2] = 'A';
      charArray0[3] = '{';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      System.setCurrentTimeMillis(56319);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeRaw("H!");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setWritable(true, true);
      iOContext0.allocNameCopyBuffer(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 60, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber("/tmp/foo.bar");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("/tmp/foo.bar");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "\"N-hC9";
      StringReader stringReader0 = new StringReader("\"N-hC9");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2707), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      charsToNameCanonicalizer0.findSymbol(charArray0, (-264), (-264), (-264));
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(33);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, byteArrayOutputStream0);
      String string1 = "Can not ";
      uTF8JsonGenerator0.writeString("Can not ");
      uTF8JsonGenerator0.writeBooleanField("Current context not an object but ", true);
      try { 
        uTF8JsonGenerator0.writeFieldName("h]=c's#9 5");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)112;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString0 = new SerializedString("GX8B");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (byte)112);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUPRyO0zZ5");
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBinary(byteArray0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("SUPRyO0zZ5");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jsonGenerator0.writeNumberField("SUPRyO0zZ5", bigDecimal0);
      jsonGenerator0.writeNumber("com.fasterxml.jackson.core.util.JsonGeneratorDelegate");
      uTF8JsonGenerator0.writeRaw("");
      SerializedString serializedString0 = new SerializedString("Br`Q\"2tc");
      try { 
        jsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 56319;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.release();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 't';
      charArray0[2] = '@';
      charArray0[3] = ']';
      uTF8JsonGenerator0.writeString(charArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-98);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "~}lHcW)o[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setWritable(false, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-98), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("/tmp/foo.bar");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -98
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SUP!RyO0zZ5", false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)52;
      byteArray1[5] = (byte)112;
      byteArray1[6] = (byte)112;
      byteArray1[7] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, mockPrintStream0, byteArray1, (byte)0, false);
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString1 = new SerializedString("GX8B");
      SerializedString serializedString2 = new SerializedString("9|**");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (byte)48, (byte)6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      int int0 = 10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 10, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, 438);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 56319;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (double) 57343;
      doubleArray0[5] = (double) 55296;
      doubleArray0[6] = (double) 55296;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 1, 2462);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("yP@?na^_", false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3104, false);
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)97;
      byte byte0 = (byte)34;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)32;
      byteArray0[6] = (byte)32;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, dataOutputStream0, byteArray0, 46, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)32);
      byte[] byteArray1 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArray1, (-4256));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "\"N-hC9";
      StringReader stringReader0 = new StringReader("\"N-hC9");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 262, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      mockPrintStream0.println(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 3);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      byteArrayInputStream0.read();
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, 127);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 125 bytes (out of 127)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "SUPRyO0zZ5";
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUPRyO0zZ5");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBinary(byteArray0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("SUPRyO0zZ5");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jsonGenerator0.writeNumberField("SUPRyO0zZ5", bigDecimal0);
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        jsonGenerator0.writeNumber(1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "SUP!RyO0zZ5";
      MockPrintStream mockPrintStream0 = new MockPrintStream(",P|dd4ET");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3064, (ObjectCodec) null, mockPrintStream0, byteArray0, 2047, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(3);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      jsonGenerator0.writeBooleanField("h", true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      iOContext0.allocTokenBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      String string0 = ", expecting field name";
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      uTF8JsonGenerator0.writeBinary((InputStream) null, 0);
      iOContext0.allocReadIOBuffer(843);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 614, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3417, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gq#Wx1/G~");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      SerializedString serializedString1 = new SerializedString("Current context not an ARRAY but ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      mockPrintStream0.println(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 3);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, 127);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 124 bytes (out of 127)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/tmp/foo.bar");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 404, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1);
      uTF8JsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "w8LBeT*v`Y];']%f";
      StringReader stringReader0 = new StringReader("w8LBeT*v`Y];']%f");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 512, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeString("Can not ");
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 55296;
      longArray0[1] = (long) 512;
      uTF8JsonGenerator0.writeArray(longArray0, 1, (-394));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 56319, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Object[] objectArray0 = new Object[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-66), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = ']';
      charArray0[2] = '';
      charArray0[3] = 'Q';
      charArray0[4] = '_';
      charArray0[5] = 't';
      charArray0[6] = '@';
      uTF8JsonGenerator0.writeString(charArray0, 2, 2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)97;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-4117), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-1025), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1025
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      mockPrintStream0.println(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      System.setCurrentTimeMillis(1L);
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockFile mockFile1 = new MockFile(mockFile0, "BYr7&");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2809, (ObjectCodec) null, mockPrintStream0, byteArray0, 70, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 4785);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 55296;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 56319;
      doubleArray0[5] = (double) 4785;
      doubleArray0[6] = (double) 3;
      uTF8JsonGenerator0.writeArray(doubleArray0, 0, (-1319));
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("BYr7&/BYr7&");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      uTF8JsonGenerator0.writeRaw("j]J5P:Fl>H(A");
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) 3);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "SUP!RyO0zZ5";
      MockPrintStream mockPrintStream0 = new MockPrintStream(",P|dd4ET");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3064, (ObjectCodec) null, mockPrintStream0, byteArray0, 2047, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      uTF8JsonGenerator0._writePPFieldName("SUP!RyO0zZ5");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "SUP!RyO0zZ5";
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber((-56));
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0._writePPFieldName("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator1._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 27);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      SerializedString serializedString2 = new SerializedString(", although was supposed to have one");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-58);
      byteArray1[1] = (byte) (-2);
      byteArray1[2] = (byte) (-40);
      byteArray1[3] = (byte) (-117);
      byteArray1[4] = (byte)116;
      byteArray1[5] = (byte) (-60);
      byteArray1[6] = (byte)127;
      byteArray1[7] = (byte) (-106);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 5, 8000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      MockFile mockFile0 = new MockFile("-tT;r|", "");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-310), (ObjectCodec) null, dataOutputStream0, byteArray0, 121, true);
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString0 = new SerializedString("-tT;r|");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-310), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      mockFile0.setWritable(true, false);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1581), (ObjectCodec) null, mockPrintStream0, byteArray0, 944, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeString(charArray0, (-606), 0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-6230), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 114, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SUP!RyO0zZ5", false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeUnquotedUTF8(mockFileOutputStream0);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)4, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, ", although was supposed to have one");
      mockFile1.setLastModified(0);
      System.setCurrentTimeMillis(1145L);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler1, object0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)124;
      byteArray0[8] = (byte) (-101);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, (OutputStream) null, byteArray0, 1376, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName(", although was supposed to have one");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.close();
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k\"f");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 92, false);
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName("q1=|r'bgI9D,4\"");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      iOContext0.allocTokenBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      String string0 = ", expecting field name";
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      uTF8JsonGenerator0.writeBinary((InputStream) null, 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 614, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3417, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-56);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, dataOutputStream0, byteArray0, 46, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)2);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      long[] longArray0 = new long[8];
      longArray0[0] = 581L;
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) (byte) (-56);
      longArray0[3] = (long) 1;
      longArray0[4] = 98L;
      longArray0[5] = (long) (byte)34;
      longArray0[6] = (long) (byte)112;
      longArray0[7] = (long) (byte)35;
      jsonGenerator0.writeArray(longArray0, 3, 5);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("BYr7&");
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "Current context not an ARRAY but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false, "Gm2)ym0az939E6");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Gm2)ym0az939E6
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-6230), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 114, false);
      uTF8JsonGenerator0.close();
      iOContext1.allocBase64Buffer();
      System.setCurrentTimeMillis((-449L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      mockFileOutputStream0.write(2);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5516, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBooleanField("", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 27);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      SerializedString serializedString2 = new SerializedString(", although was supposed to have one");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("vLLQ2uY\"cz", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k\"tf", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-144), false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SUP!RyO0zZ5");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3032), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString1 = new SerializedString("GX8B");
      SerializedString serializedString2 = new SerializedString("RhRYg@6'UwFP(a?itg)");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte) (-56);
      byteArray1[3] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 0, (-3032));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)21;
      mockFile1.setWritable(true, true);
      byteArray0[3] = (byte)14;
      char[] charArray0 = iOContext0.allocTokenBuffer();
      byteArray0[4] = (byte)57;
      System.setCurrentTimeMillis((-543L));
      StringReader stringReader0 = new StringReader("K(?CU|*?8>");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 179, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-3105), 1511, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 12, 128);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "BYr7&", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)35, true);
      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 35, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 3, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) (-6230));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SUP!RyO0zZ5");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-56));
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0._writePPFieldName("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator1._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Yi603ZE!sz+}X \"4");
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(1);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      mockFileOutputStream0.getChannel();
      iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2711, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString("Yi603ZE!sz+}X \"4");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeRaw("Yi603ZE!sz+}X \"4");
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeUTF8String(byteArray0, 3370, 3);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 33, 3);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      mockPrintStream0.println(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, bufferedOutputStream0, byteArray0, (-1), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SUP!RyO0zZ5");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asUnquotedUTF8();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1112, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (byte)92, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 92
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "BYr7&";
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockFile mockFile1 = new MockFile(mockFile0, "BYr7&");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[1];
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFile0, true);
      dataOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2809, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0._verifyValueWrite("FmJ$ ");
      // Undeclared exception!
      uTF8JsonGenerator0.writeBooleanField("BYr7&", false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BYr7&");
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(1);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2711, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = new SerializedString("BYr7&");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("BYr7&");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string0 = "";
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1024);
      SerializedString serializedString1 = new SerializedString("");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)11;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "Current context not an ARRAY but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte byte0 = (byte)0;
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(2);
      mockFileOutputStream0.write(byteArray1);
      byte[] byteArray2 = iOContext0.allocBase64Buffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 127);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0, byteArray2, 3, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray2, 1, (byte)0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, Integer.MAX_VALUE, (ObjectCodec) null, mockFileOutputStream0, byteArray1, (byte)0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SUP!RyO0zZ5");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)6;
      mockFileOutputStream0.write(byteArray0);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)6;
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("write a raw (unencoded) value", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, 3215, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      mockFileOutputStream0.write(byteArray0);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      char[] charArray0 = iOContext0.allocTokenBuffer((-1252));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2587, false);
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeRaw(charArray0, 21, 3);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, (-816));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("Invalid UTF-8 middle byte 0x");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(33);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, byteArrayOutputStream0);
      iOContext0.setEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(48);
      charsToNameCanonicalizer1.makeChild((-11060));
      uTF8JsonGenerator0.writeRaw("e4u l?\"9v");
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._verifyPrettyValueWrite("Invalid UTF-8 middle byte 0x", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BYr7&");
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(1);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2711, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString("BYr7&");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild((-2172));
      uTF8JsonGenerator0.writeRaw("BYr7&");
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeUTF8String(byteArray0, 3370, 3);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      mockPrintStream0.println(3);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('7');
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Au{]", 2, 611);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[5];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 46, (ObjectCodec) null, (OutputStream) null, byteArray0, 224, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", true);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)35, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      mockFileOutputStream0.close();
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 36, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BYr7&");
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(1);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2711, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString("Gm2)ym0az939E6");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      charsToNameCanonicalizer1.makeChild((-2172));
      uTF8JsonGenerator0.writeRaw("Gm2)ym0az939E6");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("6)gCMo", 66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)2;
      byte byte0 = (byte) (-56);
      byteArray0[7] = (byte) (-56);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, dataOutputStream0, byteArray0, 46, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)2);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0._writePPFieldName("BYr7&");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._verifyValueWrite(",B{fF.b[Y9");
      char char0 = ' ';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("BYr7&", "Cl ~b!v8>-]3\">$QcQp", true, ' ', 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 19)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString((String) null);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      int int0 = 13;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      String string0 = "";
      SerializedString serializedString1 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(696.32F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-56);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, dataOutputStream0, byteArray0, 46, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)2);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0._writePPFieldName("BYr7&");
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
      uTF8JsonGenerator0._verifyValueWrite("Current context not an ARRAY but ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-56);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 149, (ObjectCodec) null, dataOutputStream0, byteArray0, 46, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)2);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("BYr7&");
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-2286);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-486), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -486
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2294);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      Locale locale0 = Locale.US;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, printStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[5];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-351), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 34, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockPrintStream0.println(2629);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-78);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      SerializedString serializedString0 = new SerializedString("Can not ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-56);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, dataOutputStream0, byteArray0, 46, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)2);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("BYr7&");
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@ljZoV'r0j.(TTAkXa}");
      char[] charArray0 = iOContext0.allocTokenBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.clearBit(2015);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw(charArray0, 26, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(()");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1914), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName("");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 34, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      mockFileOutputStream0.write(byteArray0);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      iOContext0.allocTokenBuffer((-1252));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 2587, false);
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putUnquotedUTF8(byteBuffer0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      char[] charArray0 = null;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.clearBit(56319);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = null;
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/tmp/foo.bar");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      iOContext0.allocTokenBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 404, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      String string1 = "";
      uTF8JsonGenerator0.writeString("");
      boolean boolean1 = true;
      char char0 = '^';
      int int0 = (-775);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") does not override copy(); it has to");
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-63), true);
      uTF8JsonGenerator0._verifyValueWrite(") does not override copy(); it has to");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("$T5BT[i\"F61{");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -63
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/tmp/foo.bar");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.UTF8StreamJsonParser");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
      uTF8JsonGenerator0.writeObjectFieldStart("");
      try { 
        uTF8JsonGenerator0._verifyValueWrite("Current context not an ARRAY but ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not Current context not an ARRAY but , expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      iOContext0.allocTokenBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 404, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)5072);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 36, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeNumber(61);
      uTF8JsonGenerator0.writeNumber("ahA<`");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      mockPrintStream0.println(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(629);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BigDecimal bigDecimal0 = new BigDecimal(734.14);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-56);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, dataOutputStream0, byteArray0, 46, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)2);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BigDecimal bigDecimal0 = new BigDecimal(760.1781990021);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "k\"tf";
      File file0 = MockFile.createTempFile("k\"tf", "k\"tf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k\"tf", false);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      file0.setWritable(true, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      iOContext2.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 96, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 6, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 944);
      uTF8JsonGenerator0.writeBooleanField("iMW", false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "w8LBeT*v`Y];']%f";
      StringReader stringReader0 = new StringReader("w8LBeT*v`Y];']%f");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(33);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 33, (ObjectCodec) null, byteArrayOutputStream0);
      iOContext0.setEncoding(jsonEncoding0);
      charsToNameCanonicalizer0.makeChild(2534);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)110);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      iOContext0.allocTokenBuffer(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)38;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1418, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (byte)38);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      iOContext0.allocTokenBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 404, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)5072);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("Invalid UTF-8 middle byte 0x");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParserDelegate0, readerBasedJsonParser0);
      JsonParserSequence jsonParserSequence1 = JsonParserSequence.createFlattened(jsonParserSequence0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence1, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(4468);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      uTF8JsonGenerator0.writeString("\"N`5IbH-9+gc^(3K,h`");
      iOContext0.setEncoding(jsonEncoding0);
      charsToNameCanonicalizer0.makeChild((-1580));
      uTF8JsonGenerator0.writeBooleanField("A2TmtS(OPkk)%7", true);
      SerializedString serializedString0 = new SerializedString("+iT}Uq_(o( ");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('w');
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      iOContext0.allocTokenBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(", expecting field name");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile.createTempFile("k\"tf", "k\"tf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k\"tf", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.allocWriteEncodingBuffer((-2286));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeNumber((long) 0);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)48, (int) (byte)0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeString(charArray0, 16, 0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      SerializedString serializedString0 = new SerializedString("k\"tf");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      mockPrintStream0.println(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('7');
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Au{]", 2, 611);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      iOContext0.allocTokenBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1710);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeFieldName("q1=|r'bgI9D,4\"");
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = '@';
      charArray0[2] = ';';
      charArray0[3] = '@';
      charArray0[4] = ';';
      charArray0[6] = 'U';
      charArray0[7] = '@';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)45;
      byteArray0[0] = (byte)45;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      BigInteger.valueOf((byte)45);
      char char0 = '&';
      char[] charArray0 = new char[8];
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      uTF8JsonGenerator0.writeBoolean(false);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      mockFileOutputStream0.close();
      boolean boolean0 = true;
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[10];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName("q1=|r'bgI9D,4\"");
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = ';';
      charArray0[2] = '@';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[10];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName("q1=|r'bgI9D,4\"");
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = ';';
      charArray0[2] = '@';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 33, false);
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("q1=|r'bgI9D,4\"");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short)114);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(", expecting field name", (-195), (int) (short)114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("ALLOW_YAML_COMMENTS");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4vel4{8%u%O(F^");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ALLOW_YAML_COMMENTS", false);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(11);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 43, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 101, false);
      SerializedString serializedString0 = new SerializedString("BYr7&");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      String string0 = "";
      SerializedString serializedString1 = new SerializedString("],g,$uD#]");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(28);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-6230), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 114, false);
      SerializedString serializedString1 = new SerializedString("write a string");
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) 3);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-6230), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 114, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SUP!RyO0zZ5");
      byte byte0 = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)6;
      mockFileOutputStream0.write(byteArray0);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-214), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)6, true);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)32);
      uTF8JsonGenerator0.writeNumber((float) 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      mockFile0.setWritable(true, false);
      iOContext0.allocTokenBuffer();
      mockFile1.setReadOnly();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1581), (ObjectCodec) null, mockPrintStream0, byteArray0, 944, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (byte)51);
      SerializedString serializedString0 = new SerializedString("^y-_-E%j]Q");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile mockFile2 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile3 = new MockFile(mockFile2, "");
      mockFile2.setLastModified(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile3);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 3, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-6230), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 114, false);
      SerializedString serializedString1 = new SerializedString("write a string");
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)1865);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "w8LBeT*v`Y];']%f";
      StringReader stringReader0 = new StringReader("w8LBeT*v`Y];']%f");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(33);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, byteArrayOutputStream0);
      iOContext0.setEncoding(jsonEncoding0);
      charsToNameCanonicalizer0.makeChild(2534);
      uTF8JsonGenerator0.writeBooleanField("Invalid UTF-8 middle byte 0x", false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)110);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      mockFile1.setLastModified(0L);
      mockFile0.setWritable(true, true);
      System.setCurrentTimeMillis((-1574L));
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 944, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '>';
      charArray0[2] = 'b';
      charArray0[4] = '>';
      charArray0[5] = 'A';
      charArray0[2] = '~';
      charArray0[7] = '&';
      charArray0[8] = 'l';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      uTF8JsonGenerator0.writeNumber((-1.0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 500, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "Current context not an ARRAY but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2353, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      BigInteger.valueOf(3);
      uTF8JsonGenerator0.writeRaw('>');
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 446, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)38;
      byteArray0[0] = (byte)38;
      mockFile1.setLastModified(0L);
      System.setCurrentTimeMillis((-1574L));
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 46, (ObjectCodec) null, mockPrintStream0, byteArray0, 72, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeBooleanField("/tmp/foo.bar", false);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "(\rKD*=.sNrl", false);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "@<^>HG64{");
      mockFile0.setLastModified(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)38, (ObjectCodec) null, mockPrintStream0, byteArray0, 1124, false);
      BigInteger.valueOf(55296);
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '9';
      charArray0[4] = '~';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = '9';
      charArray0[8] = '~';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 51, (-510));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "Current context not an ARRAY but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockFile mockFile0 = new MockFile("Current context not an ARRAY but ");
      mockFile0.setExecutable(true, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (-860), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('$');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -860
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockFile mockFile0 = new MockFile("Current context not an ARRAY but ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartObject((Object) mockFile0);
      SerializedString serializedString1 = new SerializedString("");
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("9(F{:.tCf``T");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("|S2eg", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      mockPrintStream0.println(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString(", although was supposed to have one");
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0._verifyPrettyValueWrite("9(F{:.tCf``T", 0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockFile mockFile1 = new MockFile(mockFile0, "BYr7&");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0, byteArray0, 3, true);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartObject(object0);
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 98);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile.createTempFile("k\"tf", "k\"tf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k\"tf", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.allocWriteEncodingBuffer((-2286));
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeNumber((long) 0);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)48, (int) (byte)0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeString(charArray0, 16, 0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, "j]J5P:Fl>H(A", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)11, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)11, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1483, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SUP!RyO0zZ5");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ObjectCodec objectCodec0 = null;
      mockFileOutputStream0.close();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-214), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      try { 
        uTF8JsonGenerator0.writeNumber(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockFile mockFile1 = new MockFile(mockFile0, "BYr7&");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 2, 98);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile.createTempFile("k\"tf", "k\"tf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k\"tf", false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1624, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(6);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?+'J&-x\u0003j. ~)b");
      System.setCurrentTimeMillis(0L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "?+'J&-x\u0003j. ~)b", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      float float0 = 10.08975F;
      byteArrayBuilder0.write(1395);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("WD8y}b", 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BYr7&");
      byte[] byteArray0 = iOContext1.allocReadIOBuffer((-2504));
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2711, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = new SerializedString("BYr7&");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      String string0 = "";
      SerializedString serializedString1 = new SerializedString("");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-6230), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 114, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeBooleanField(".F?sBG3fwR", false);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      String string0 = "";
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      BigInteger bigInteger0 = BigInteger.valueOf((byte)38);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 114, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("=w8LBeT*v`Y];']%f");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(33);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, byteArrayOutputStream0);
      iOContext0.setEncoding(jsonEncoding0);
      charsToNameCanonicalizer0.makeChild(2534);
      uTF8JsonGenerator0.writeBooleanField("Invalid UTF-8 middle byte 0x", false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)110);
      uTF8JsonGenerator0.writeStartArray();
      System.setCurrentTimeMillis(2450L);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      BigInteger.valueOf((byte)38);
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '9';
      charArray0[2] = '~';
      charArray0[3] = '~';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      mockFile1.setLastModified(0L);
      mockFile0.setWritable(true, true);
      System.setCurrentTimeMillis((-1574L));
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 944, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '>';
      charArray0[2] = 'b';
      charArray0[4] = '>';
      charArray0[5] = 'A';
      charArray0[2] = '~';
      charArray0[7] = '&';
      charArray0[8] = 'l';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockFile mockFile1 = new MockFile(mockFile0, "BYr7&");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2809, (ObjectCodec) null, mockPrintStream0, byteArray0, 70, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 4785);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("j]J5P:Fl>H(A");
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(449.0F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("Invalid UTF-8 middle byte 0x");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 36, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      uTF8JsonGenerator0.writeString("QYX~/:ymvdJ,Wdu_");
      iOContext0.setEncoding(jsonEncoding0);
      charsToNameCanonicalizer0.makeChild(1);
      uTF8JsonGenerator0.writeBooleanField("Invalid UTF-8 middle byte 0x", false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)1147);
      uTF8JsonGenerator0.writeStartArray();
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ARRAY
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7o'*c?0&!0");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("7o'*c?0&!0");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockPrintStream mockPrintStream0 = new MockPrintStream("7o'*c?0&!0");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      System.setCurrentTimeMillis(3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = 'A';
      uTF8JsonGenerator0.writeString(charArray0, (-2438), 0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      mockFileOutputStream0.getChannel();
      mockFileOutputStream0.flush();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-514), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("\"N-hC9");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = '4';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2, false);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 31, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      File file0 = MockFile.createTempFile("\"N-hC9", "\"N-hC9");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) jsonEncoding0;
      objectArray0[2] = (Object) charsToNameCanonicalizer0;
      objectArray0[3] = (Object) jsonEncoding0;
      objectArray0[4] = (Object) bufferRecycler0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) stringReader0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) jsonEncoding0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "ZB\"1`F\"l=|[", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeString(charArray0, 91, (-1601));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 36, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeNumber("ahA<`");
      uTF8JsonGenerator0.writeRaw(";5H7lv");
      try { 
        uTF8JsonGenerator0._outputSurrogates(1444, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x5a4, second 0x2
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      mockFileOutputStream0.getChannel();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 87, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockFile mockFile0 = new MockFile("Current context not an ARRAY but ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)57;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 195, true);
      SerializedString serializedString1 = new SerializedString("Current context not an ARRAY but ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "/tmp/foo.bar");
      mockFile0.setLastModified(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte byte0 = (byte)38;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)38, true);
      BigInteger bigInteger0 = BigInteger.valueOf((-4879L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-6230), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 114, false);
      SerializedString serializedString1 = new SerializedString("write a string");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName("Current context not an ARRAY but ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      iOContext0.allocBase64Buffer();
      MockFile mockFile1 = new MockFile("BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFile0.setExecutable(false, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeRaw('$');
      SerializedString serializedString0 = new SerializedString("Z=U#6I~_b");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      mockFileOutputStream0.getChannel();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-514), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeNumber(3390.55F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "BYr7&";
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockFile mockFile1 = new MockFile(mockFile0, "BYr7&");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2809, (ObjectCodec) null, mockPrintStream0, byteArray0, 70, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 4785);
      System.setCurrentTimeMillis((-628L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("Invalid UTF-8 middle byte 0x");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 36, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      charsToNameCanonicalizer0.makeChild(1);
      uTF8JsonGenerator0.writeBooleanField("Invalid UTF-8 middle byte 0x", false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)1147);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)38;
      mockFile1.delete();
      byteArray0[0] = (byte)38;
      mockFile1.setLastModified(0L);
      boolean boolean0 = true;
      iOContext0.allocTokenBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)38, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)38, 1000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-85);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)64;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-109), (ObjectCodec) null, (OutputStream) null, byteArray0, 1009, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1581), (ObjectCodec) null, mockPrintStream0, byteArray0, 944, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      System.setCurrentTimeMillis((-1574L));
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("9sVyY`xL\"B?6IJgB?");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SUP!RyO0zZ5");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-214), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7o'*c?0&!0");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("7o'*c?0&!0");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockPrintStream mockPrintStream0 = new MockPrintStream("7o'*c?0&!0");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) serializedString0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "7o'*c?0&!0", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1036), (ObjectCodec) null, printStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(3);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) (byte)34);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(0L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)23;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)15, (byte)23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      mockFile1.setLastModified(0L);
      mockFile0.setWritable(true, false);
      System.setCurrentTimeMillis((-1574L));
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 944, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '>';
      charArray0[2] = 'b';
      charArray0[3] = '-';
      charArray0[4] = '>';
      charArray0[5] = 'A';
      charArray0[6] = '~';
      charArray0[7] = '&';
      charArray0[8] = 'l';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, (-1411));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber((float) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SUP!RyO0zZ5");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("|S2eg", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      mockPrintStream0.println(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "BYr7&";
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)35, false);
      uTF8JsonGenerator0.writeNumber("");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setWritable(false, false);
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)112, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)21, true);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2289);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)38;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1581), (ObjectCodec) null, mockPrintStream0, byteArray1, (byte)38, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 3, 1);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      MockFile mockFile1 = new MockFile("", ": expected close marker for ");
      mockFile1.getAbsolutePath();
      MockFile mockFile2 = new MockFile(mockFile1, "=Lwq~$0VrK ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockFile mockFile3 = new MockFile("=Lwq~$0VrK ", "");
      mockPrintStream0.println(40);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile3, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5359, (ObjectCodec) null, mockPrintStream0, byteArray0, 10, false);
      SerializedString serializedString0 = new SerializedString(": expected close marker for ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 10, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[7];
      uTF8JsonGenerator0._maximumNonEscapedChar = 3;
      charArray0[0] = '8';
      charArray0[1] = 'H';
      charArray0[2] = ']';
      charArray0[3] = 'Y';
      charArray0[4] = '9';
      charArray0[5] = 'q';
      charArray0[6] = 'f';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-390), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -390
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Current context not an ARRAY but ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "&t";
      MockPrintStream mockPrintStream0 = new MockPrintStream("&t");
      Object[] objectArray0 = new Object[2];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-568), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)10, false);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "9(F{:.tCf``T";
      mockPrintStream0.format("9(F{:.tCf``T", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("9(F{:.tCf``T");
      mockPrintStream1.println(1);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 19, (ObjectCodec) null, mockPrintStream1, byteArray0, (-1459), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      mockPrintStream0.println(100);
      SerializedString serializedString0 = new SerializedString("~jJ?[b*)");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 711, (ObjectCodec) null, mockPrintStream0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      String string0 = "~}lHcW)o[";
      MockFile mockFile1 = new MockFile(mockFile0, "~}lHcW)o[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setWritable(false, false);
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 60, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      uTF8JsonGenerator0.writeStartObject((Object) dataInputStream0);
      try { 
        uTF8JsonGenerator0.writeNumber("~}lHcW)o[");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader(")");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2385, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)14;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (-1121), 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      charsToNameCanonicalizer0.makeChild(17);
      uTF8JsonGenerator0.writeBooleanField("/tmp/foo.bar", true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (-433));
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-433));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2114, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      mockFile0.setWritable(true, false);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1581), (ObjectCodec) null, mockPrintStream0, byteArray0, 944, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      // Undeclared exception!
      uTF8JsonGenerator0.writeBooleanField("/tmp/foo.bar", true);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"@^3>nSxhi~qc=`^)u");
      StringReader stringReader0 = new StringReader("Invalid UTF-8 middle byte 0x");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 36, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")*>");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.setEncoding(jsonEncoding1);
      charsToNameCanonicalizer0.makeChild(1);
      uTF8JsonGenerator0.writeRaw("Invalid UTF-8 middle byte 0x", 3, 1);
      System.setCurrentTimeMillis(56320);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber("A4");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Current context not an ARRAY but ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-56);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, dataOutputStream0, byteArray0, 46, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)2);
      BigDecimal bigDecimal0 = new BigDecimal(760.1781990021);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      String string0 = "~}lHcW)o[";
      MockFile mockFile1 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setWritable(false, false);
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 60, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber("~}lHcW)o[");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("/tmp/foo.bar");
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 3 bytes (out of 3)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)97;
      BigInteger bigInteger0 = BigInteger.valueOf((byte)112);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, (-735));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("BYr7&", "j5*^/$,W_");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockFile mockFile1 = new MockFile("J\"CK\"S]xw:- BKo:", "com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      mockPrintStream0.println(34);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 44, false);
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile("/tmp/foo.bar", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BYr7&");
      iOContext1.allocReadIOBuffer((-2504));
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      mockFile0.setWritable(false, true);
      iOContext2.allocTokenBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)57;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1990), false);
      BigInteger bigInteger0 = BigInteger.valueOf((byte)57);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1990
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte byte0 = (byte)0;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      mockFileOutputStream0.write(byteArray0);
      mockFileOutputStream0.close();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(9);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1435, false);
      uTF8JsonGenerator0._releaseBuffers();
      iOContext0.allocBase64Buffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBooleanField("Current context not an ARRAY but ", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"@^3>nSxhi~qc=`^)u");
      StringReader stringReader0 = new StringReader("Invalid UTF-8 middle byte 0x");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 36, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.setEncoding(jsonEncoding1);
      charsToNameCanonicalizer0.makeChild(1);
      uTF8JsonGenerator0.writeBooleanField("Invalid UTF-8 middle byte 0x", false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)1147);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BYr7&");
      byte[] byteArray0 = iOContext1.allocReadIOBuffer((-2504));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("BYr7&");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2711, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      mockFileOutputStream0.write(byteArray0);
      SerializedString serializedString0 = new SerializedString("BYr7&");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeBinaryField("d[Ff3j<O{vk{I", byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      mockFile0.setWritable(true, false);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1581), (ObjectCodec) null, mockPrintStream0, byteArray0, 944, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 108, 32768);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "~}lHcW)o[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setWritable(false, false);
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 60, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber("~}lHcW)o[");
      uTF8JsonGenerator0.writeRaw("~}lHcW)o[");
      try { 
        uTF8JsonGenerator0._outputSurrogates(2, 2047);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x2, second 0x7ff
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("9(F{:.tCf``T");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("|S2eg", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      File file0 = MockFile.createTempFile("|S2eg", "com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      MockFile mockFile0 = new MockFile(file0, "com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      mockFile0.setWritable(true, false);
      iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, printStream0, byteArray0, 3055, true);
      BigInteger bigInteger0 = BigInteger.valueOf(313L);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      MockFile mockFile2 = new MockFile("", "/tmp/foo.bar");
      mockPrintStream0.println(884);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile2, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile("/tmp/foo.bar", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      MockFile mockFile2 = new MockFile("", "/tmp/foo.bar");
      mockFile2.setWritable(true, true);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1242, true);
      uTF8JsonGenerator0.writeStartObject((Object) mockFile2);
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      mockFile0.setWritable(true, false);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1581), (ObjectCodec) null, mockPrintStream0, byteArray0, 944, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      System.setCurrentTimeMillis((-1574L));
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BYr7&");
      byte[] byteArray0 = iOContext1.allocReadIOBuffer((-2504));
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2711, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = new SerializedString("BYr7&");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "Current context not an ARRAY but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
      mockFileOutputStream0.write(byteArray0);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 127);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0, byteArray1, 3, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 1, (byte)0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, Integer.MAX_VALUE, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "Current context not an ARRAY but ");
      MockFile mockFile2 = new MockFile(mockFile1, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile2);
      mockFile1.setWritable(true, true);
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5241), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte)38;
      byteArray1[2] = (byte)38;
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)38;
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte)38, 944);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 36, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      charsToNameCanonicalizer0.makeChild(1);
      uTF8JsonGenerator0.writeBooleanField("", false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)1147);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      iOContext0.allocReadIOBuffer((-34));
      mockFileOutputStream0.write(byteArray0);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1074, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 1, true);
      mockFileOutputStream0.getChannel();
      uTF8JsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.type.TypeReference");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("Current context not an ARRAY but ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-55);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      iOContext0.allocWriteEncodingBuffer((int) (byte) (-56));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(34);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("gs`b|\"RSs %`~");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      int int0 = 4366;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("VR", "gs`b|\"RSs %`~", true, 'E', 4366);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 13)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-275), (ObjectCodec) null, (OutputStream) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.negate();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 1, (-275));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, (-237), 664);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      mockPrintStream0.println(1074);
      mockFile0.setWritable(true, false);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1581), (ObjectCodec) null, mockPrintStream0, byteArray0, 944, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      System.setCurrentTimeMillis((-1574L));
      uTF8JsonGenerator0._flushBuffer();
      mockFile1.delete();
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal((BigInteger) null, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "Current context not an ARRAY but ";
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-269), (ObjectCodec) null, mockFileOutputStream0, byteArray1, (-1075), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile.createTempFile("k\"tf", "k\"tf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k\"tf", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      iOContext0.allocWriteEncodingBuffer((-2286));
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeRaw("'HA|=J6vP7`RJ", (int) (byte)0, 0);
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 4344, (int) (byte)0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeRaw('*');
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      MockFile mockFile2 = new MockFile("", "/tmp/foo.bar");
      mockFile2.setWritable(true, true);
      iOContext0.allocTokenBuffer();
      byte byte0 = (byte)57;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2577), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)14, true);
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 114, (byte)21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.setEncoding(jsonEncoding1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k\"tf");
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      byte[] byteArray0 = iOContext2.allocReadIOBuffer(1);
      mockFileOutputStream0.write(byteArray0);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 167, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 512, (-544));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte) (-56);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, dataOutputStream0, byteArray0, 46, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(7994);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("BYr7&", "Too few bytes available: missing ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)97, (ObjectCodec) null, dataOutputStream0, byteArray0, (-544), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject((Object) mockFile0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -544
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      iOContext0.allocReadIOBuffer((-34));
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)97, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1422), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)21;
      mockFile1.setWritable(true, true);
      byteArray0[3] = (byte)14;
      iOContext0.allocTokenBuffer();
      byteArray0[4] = (byte)57;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2577), (ObjectCodec) null, mockPrintStream0, byteArray0, 1736, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1146, 1511);
      System.setCurrentTimeMillis((-543L));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      iOContext0.allocReadIOBuffer((-34));
      mockFileOutputStream0.write(byteArray1);
      byteArray0[0] = (byte)0;
      iOContext0.allocBase64Buffer();
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 23);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 36, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("", false);
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      iOContext0.allocReadIOBuffer((-34));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)97, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1422), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1422
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-275), (ObjectCodec) null, (OutputStream) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, (-237), 664);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 36, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("BYr7&", "BYr7&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte) (-56);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, dataOutputStream0, byteArray0, 46, true);
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(8L, mockFile0.length());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "Current context not an ARRAY but ";
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)0;
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = iOContext0.allocReadIOBuffer((-34));
      byteArray0[0] = (byte)0;
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray2, 2, false);
      uTF8JsonGenerator0._releaseBuffers();
      iOContext0.allocBase64Buffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2907, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2907
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Generator of type ", true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3265);
      mockFileOutputStream0.write(byteArray0);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3265, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      int int0 = 2282;
      MockPrintStream mockPrintStream0 = new MockPrintStream("DS(]+!-xC#C|H%#Lg");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 36, 1041);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-89);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      String string0 = "Too few bytes available: missing ";
      char char0 = 'e';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Too few bytes available: missing ", "Too few bytes available: missing ", false, 'e', 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 33)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.getOutputBuffered();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "com.fasterxml.jackson.core.ObjectCodec", true, ']', 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 38)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile("k\"tf", "k\"tf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      iOContext0.allocWriteEncodingBuffer((-2286));
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeRaw("'HA|=J6vP7`RJ", (int) (byte)0, 0);
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 4344, (int) (byte)32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4344
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("9(F{:.tCf``T");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("|S2eg", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      mockPrintStream0.println(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString(", although was supposed to have one");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "[O0=P#^";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[O0=P#^", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 738, (ObjectCodec) null, byteArrayOutputStream0, (byte[]) null, 116, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(3);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ");
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      iOContext0.allocReadIOBuffer((-34));
      mockFileOutputStream0.write(byteArray1);
      byteArray0[0] = (byte)0;
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-34), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 16, false);
      uTF8JsonGenerator0._releaseBuffers();
      iOContext0.allocBase64Buffer();
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 16);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-275), (ObjectCodec) null, (OutputStream) null);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("DS(]+!-xC#C|H%#Lg");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2282, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-83), true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)21;
      mockFile1.setWritable(true, true);
      byteArray0[3] = (byte)14;
      iOContext0.allocTokenBuffer();
      byteArray0[4] = (byte)57;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1511, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }
}
