/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 15:58:19 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.nio.CharBuffer;
import java.nio.channels.FileChannel;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[13];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber(3814);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator1.writeRaw('\u0083');
      uTF8JsonGenerator1.writeNumber((float) 0);
      SerializedString serializedString0 = new SerializedString(">q/l_`FQ\"U0");
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[12];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2210), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-2210));
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 937, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"", 0, 2);
      iOContext0.allocWriteEncodingBuffer(3);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      iOContext0.allocNameCopyBuffer(2);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 776);
      uTF8JsonGenerator0.writeNumber(2392.0F);
      String string0 = "";
      uTF8JsonGenerator0.writeFieldName("");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(2974);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 40, false);
      uTF8JsonGenerator0._flushBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.skip(305L);
      uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, (-1231));
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal(256.640164345);
      uTF8JsonGenerator0.writeString("write a string");
      try { 
        uTF8JsonGenerator0._outputSurrogates(2000, 536868245);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x7d0, second 0x1ffff595
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2210), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-2210));
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((-2210));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonGenerationException");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1000000000, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 56, 157, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1229), (ObjectCodec) null, objectOutputStream0, byteArray0, 70, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[8];
      iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      iOContext0.allocNameCopyBuffer(2);
      uTF8JsonGenerator0.writeFieldName(">q/l_`FQ\"U0");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("|o/TYBzD=$xN", 3, 56319);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0._flushBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.skip(55296);
      uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, 0);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("l2s#9X3@=:mZU6");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Y>NeaLcjPLRJ6u<3)");
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-123), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      uTF8JsonGenerator0._flushBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.skip(1);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-713));
      SerializedString serializedString0 = new SerializedString("Y>NeaLcjPLRJ6u<3)");
      SerializedString serializedString1 = new SerializedString("start an object");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      uTF8JsonGenerator0.writeString("Z`q5peO5$[#%mT8~+=0");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(32768);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 71, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, (-670), 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Gj/l_FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintStream0.print((Object) iOContext0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 55296;
      uTF8JsonGenerator0.writeArray(intArray0, 346, Integer.MAX_VALUE);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      bufferRecycler0.allocCharBuffer(0);
      uTF8JsonGenerator0.writeNumber("Gj/l_FQ\"U0");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 677, false);
      uTF8JsonGenerator0._flushBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.skip(0L);
      uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, (-177));
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-177));
      uTF8JsonGenerator0.writeString("Current context not an object but ");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      int int0 = (-67);
      iOContext0.allocWriteEncodingBuffer((-67));
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", false);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) (-67));
      uTF8JsonGenerator0.writeString(">q/l_`FQ\"U0");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1);
      String string1 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      System.setCurrentTimeMillis((-479L));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-116), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 48, false);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 56320;
      intArray0[2] = (int) (byte)5;
      intArray0[3] = (int) (byte) (-98);
      intArray0[4] = 0;
      intArray0[5] = 2;
      uTF8JsonGenerator0._outputEscapes = intArray0;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[12];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext1.allocWriteEncodingBuffer(55296);
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeString(">5droLJ0U}BWKMXN?");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("@7Hx[/;d/cX:.UhyuU", 1585, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      int int0 = 32;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      iOContext1.allocWriteEncodingBuffer(55296);
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2210), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-2210));
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeRaw(">q/l_`FQ\"U0");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-444), 119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -444
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      iOContext0.allocTokenBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 165, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(">q/l_`FQ\"U0");
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeString("1}]<kdD\"l46v^P3");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">q/l_`FQ\"U0");
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 1023);
      uTF8JsonGenerator0._flushBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, 2132);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 2125 bytes (out of 2132)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2210), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-2210));
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((long) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("#vave,v&*vc!FU_", true);
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = '\u008D';
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      ObjectCodec objectCodec0 = null;
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[2];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-492), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 34, false);
      iOContext0.allocWriteEncodingBuffer(4445);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("J&,/!{");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3Dk}+F}!5R Fvhd=");
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 102, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)46, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(">q/l_`FQ\"U0");
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)117;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3473), (ObjectCodec) null, mockPrintStream0, byteArray0, 113, false);
      uTF8JsonGenerator0.writeNumber(">q/l_`FQ\"U0");
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeString("");
      SerializedString serializedString0 = new SerializedString("-B-P");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName("write a number");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">q/l_`FQ\"U0", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 47, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      iOContext0.constructTextBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      byte[] byteArray1 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockPrintStream0, byteArray1, 3, false);
      iOContext0.allocNameCopyBuffer(2);
      uTF8JsonGenerator0.writeFieldName(">q/l_`FQ\"U0");
      SerializedString serializedString0 = new SerializedString("");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 1, 1);
      uTF8JsonGenerator0.writeStartArray();
      jsonGenerator0.writeNumber((double) 56320);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2210), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 2);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeRaw(">q/l_`FQ\"U0");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("#vave,v&*vc!FU_", true);
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = '';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#vave,v&*vc!FU_");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 223, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 192, false);
      SerializedString serializedString0 = new SerializedString(">q/l_`FQ\"U0");
      SerializedString serializedString1 = new SerializedString("T'&n3kV]bUv,.Xru}");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '9';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = '5';
      charArray0[6] = '5';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 76, false);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(">q/l_`FQ\"U0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4>q/l_`FQ\"U0");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer(1);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField("4>q/l_`FQ\"U0", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeString("4>q/l_`FQ\"U0");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeNumber((long) 2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, (-2590));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      iOContext0.allocNameCopyBuffer(2);
      uTF8JsonGenerator0.writeNumber((float) 50);
      uTF8JsonGenerator0.writeFieldName(">q/l_`FQ\"U0");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(">q/l_`FQ\"U0");
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      int int0 = (-3473);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)117;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3473), (ObjectCodec) null, mockPrintStream0, byteArray0, 113, false);
      uTF8JsonGenerator0.writeNumber(">q/l_`FQ\"U0");
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeString("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext2.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 1520, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)48, false);
      // Undeclared exception!
      uTF8JsonGenerator1.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[13];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber(117);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator1.writeRaw('~');
      uTF8JsonGenerator1.writeNumber((float) 0);
      SerializedString serializedString0 = new SerializedString(">q/l_`FQ\"U0");
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw(">q/l_`FQ\"U0", 4030, 55296);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      byte[] byteArray1 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, printStream0, byteArray1, 677, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-3268));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">q/l_`FQ\"U0");
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 591, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 1023);
      uTF8JsonGenerator0._flushBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.skip(1);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, 2132);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 2126 bytes (out of 2132)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-227), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("#vave,v&*vc!FU_", true);
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw('');
      uTF8JsonGenerator0.writeRaw(">q/l_`FQ\"U0");
      uTF8JsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.println(1308L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      char[] charArray0 = iOContext1.allocTokenBuffer();
      mockFileOutputStream0.write(1368);
      uTF8JsonGenerator0._flushBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeBoolean(false);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeString(charArray0, 3, 2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      char[] charArray0 = iOContext0.allocTokenBuffer(3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 165, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(">q/l_`FQ\"U0");
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 147, 8000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.withEncoding((JsonEncoding) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      mockPrintStream0.print((float) 2);
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)0;
      iOContext0.allocTokenBuffer(0);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 34, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.println((long) 2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-120);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 634, false);
      iOContext0.allocTokenBuffer();
      mockFileOutputStream0.write((int) (byte) (-29));
      uTF8JsonGenerator0._flushBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 57343);
      int int0 = 49;
      uTF8JsonGenerator0.writeNumber((float) 3);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName(">q/l_`FQ\"U0");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.println(1308L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      iOContext1.allocTokenBuffer();
      mockFileOutputStream0.write(1368);
      uTF8JsonGenerator0._flushBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, (-1));
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">q/l_`FQ\"U0");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)65;
      mockPrintStream0.write(byteArray0);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray1 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 591, false);
      uTF8JsonGenerator0._flushBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream0.read(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1 bytes (out of 1)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-105), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 3, false);
      uTF8JsonGenerator1._flushBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        uTF8JsonGenerator1.writeBinary((InputStream) byteArrayInputStream0, 1376);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1368 bytes (out of 1376)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4>q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer(1);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField("4>q/l_`FQ\"U0", true);
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeString("4>q/l_`FQ\"U0");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeNumber((long) 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[8];
      iOContext1.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 58, (ObjectCodec) null, printStream0, byteArray0, 55296, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "4>q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4>q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      iOContext0.allocWriteEncodingBuffer(34);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.mod(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('[');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">q/l_`FQ\"U0");
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 591, false);
      uTF8JsonGenerator0._flushBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream1);
      uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, 1);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      byte[] byteArray1 = new byte[8];
      iOContext0.allocNameCopyBuffer(2);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3933);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 255, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.mod(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      iOContext1.setEncoding(jsonEncoding0);
      mockPrintStream0.print((float) 2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0, byteArray0, (byte) (-1), true);
      iOContext1.allocNameCopyBuffer(0);
      mockPrintStream0.print((Object) "BX{wzp0#i&]!V'hp");
      uTF8JsonGenerator0._flushBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, (int) (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      char[] charArray0 = iOContext1.allocNameCopyBuffer(0);
      SerializedString serializedString0 = new SerializedString(">q/l_`FQ\"U0");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 730, (ObjectCodec) null, mockFileOutputStream1);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeString(charArray0, 9, 9);
      uTF8JsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      int[] intArray0 = new int[7];
      intArray0[6] = 1;
      uTF8JsonGenerator0.writeStartObject((Object) iOContext1);
      intArray0[1] = 2;
      intArray0[4] = 1;
      mockPrintStream0.print((Object) iOContext1);
      intArray0[5] = 56320;
      System.setCurrentTimeMillis(56320);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)77;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 10, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)117;
      intArray0[1] = 0;
      intArray0[2] = 975;
      uTF8JsonGenerator0._outputEscapes = intArray0;
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = iOContext0.withEncoding((JsonEncoding) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      mockPrintStream0.print((float) 2);
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)88;
      iOContext0.allocTokenBuffer(0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(">q/l_`FQ\"U0");
      BigDecimal bigDecimal0 = new BigDecimal(1939.7385);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, mockFileOutputStream1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 3118, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(16.022294297231223);
      uTF8JsonGenerator0.writeNumber((-1596));
      uTF8JsonGenerator0.writeNumber((float) 57);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, (-136), 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      mockPrintStream0.println((long) 41);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      iOContext0.allocTokenBuffer();
      mockFileOutputStream0.write(2);
      uTF8JsonGenerator0._flushBuffer();
      String string0 = "";
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, 75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      int[] intArray0 = new int[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[6] = 1;
      intArray0[1] = 2;
      intArray0[4] = 1;
      mockPrintStream0.print((Object) iOContext1);
      intArray0[5] = 56320;
      iOContext0.allocNameCopyBuffer(56319);
      uTF8JsonGenerator0.writeNumber((float) 56320);
      uTF8JsonGenerator0.writeRaw("");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      iOContext0.setEncoding(jsonEncoding0);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      iOContext1.allocBase64Buffer();
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2210), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeNumber(2);
      SerializedString serializedString0 = new SerializedString(">q/l_`FQ\"U0");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      iOContext1.allocBase64Buffer();
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2210), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      iOContext0.allocNameCopyBuffer(2);
      uTF8JsonGenerator0.writeNumber((float) 50);
      uTF8JsonGenerator0.writeFieldName(">q/l_`FQ\"U0");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 3, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._maximumNonEscapedChar = 2;
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeString("[P3a7");
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      mockPrintStream0.println(charArray0);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (-380));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b+L''],`7wWz");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", false);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeRaw(',');
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeNumber((short)514);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeRaw('h');
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeNumber((short)4);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      int[] intArray0 = new int[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[6] = 1;
      intArray0[1] = 2;
      intArray0[4] = 1;
      mockPrintStream0.print((Object) iOContext1);
      intArray0[5] = 56320;
      iOContext0.allocNameCopyBuffer(56319);
      uTF8JsonGenerator0.writeNumber((float) 56320);
      uTF8JsonGenerator0.writeFieldName("");
      URI uRI0 = MockURI.create("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      iOContext0.allocTokenBuffer();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 15, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", false);
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal((double) 56319);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.withEncoding((JsonEncoding) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(">q/l_`FQ\"U0", false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      iOContext0.allocNameCopyBuffer(1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4645), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeFieldName(">q/l_`FQ\"U0");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 2072, 55296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      int int0 = 32;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftRight(512);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 223, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBoolean(true);
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 591, 1181);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[13];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 165, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber(117);
      uTF8JsonGenerator0.writeNumber((float) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)77;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 10, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      mockPrintStream0.print(charArray0);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)77;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 10, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)117;
      intArray0[1] = 0;
      intArray0[2] = 975;
      uTF8JsonGenerator0._outputEscapes = intArray0;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      mockFileOutputStream0.release();
      mockFileOutputStream0.write(3);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0._flushBuffer();
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'g';
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.withEncoding((JsonEncoding) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(">q/l_`FQ\"U0", false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      iOContext0.allocNameCopyBuffer(1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4645), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber(3259L);
      SerializedString serializedString1 = new SerializedString("-x5%!YL^5l./JAzr|II");
      serializedString1.writeUnquotedUTF8(mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      System.setCurrentTimeMillis(55296);
      uTF8JsonGenerator1._outputSurrogates(56319, 57343);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      char[] charArray0 = iOContext1.allocNameCopyBuffer(0);
      SerializedString serializedString0 = new SerializedString(">q/l_`FQ\"U0");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 730, (ObjectCodec) null, mockFileOutputStream1);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeString(charArray0, 92, 16);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 591, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 1023);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 2);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(">q/l_`FQ\"U0");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-39);
      byteArray0[8] = (byte) (-32);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3584), (-3393));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 76, 72, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(uTF8StreamJsonParser0, uTF8StreamJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte) (-39);
      byteArray1[2] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 52, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      int int0 = 8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      iOContext1.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-92);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";[e");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 370);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)90;
      byteArray0[0] = (byte)6;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-92);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";[e", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 370);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Too few bytes available: missing ", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      iOContext1.allocNameCopyBuffer(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1646), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber((long) 2);
      SerializedString serializedString1 = new SerializedString(" in a value");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis((-1862L));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-3059), 8, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 168, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeString("[P3a7");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 15, 2);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 99, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      String string0 = "Z";
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '?';
      charArray0[2] = 'x';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      mockFileOutputStream0.getChannel();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeBooleanField("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 591, false);
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 56320, 1023);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4445, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBooleanField("", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      BigDecimal bigDecimal0 = new BigDecimal((double) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = 'N';
      charArray0[3] = '#';
      charArray0[4] = '|';
      charArray0[6] = '/';
      charArray0[7] = '8';
      charArray0[8] = '|';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-111), 125);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Internal error: total len assumed to be ", false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      iOContext0.allocNameCopyBuffer(1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber((long) (byte)105);
      SerializedString serializedString1 = new SerializedString("-x5%!YL^5l./JAzr|II");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis(4L);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      byteArrayBuilder0.toByteArray();
      int int0 = 57;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 549, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      String string0 = "";
      uTF8JsonGenerator0.writeBooleanField("", true);
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      mockFileOutputStream0.getChannel();
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string0 = "Can not write a field name, expecting a value";
      uTF8JsonGenerator0.writeBooleanField("Can not write a field name, expecting a value", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      mockFileOutputStream0.release();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 123, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      try { 
        uTF8JsonGenerator1.writeNumber(313);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      iOContext1.allocBase64Buffer();
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2210), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      iOContext0.allocNameCopyBuffer(2);
      mockFileOutputStream0.write((-5865));
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((double) 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 591, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 1023);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNull();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      iOContext1.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBooleanField((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      iOContext1.allocBase64Buffer();
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2210), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      char[] charArray0 = iOContext0.allocNameCopyBuffer(2);
      mockFileOutputStream0.write((-5865));
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeString(charArray0, 114, 6);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      iOContext0.allocNameCopyBuffer(3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeBooleanField("!^%@FE3jUs2r*Ab", true);
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      byte[] byteArray0 = new byte[8];
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = '5';
      charArray0[2] = 'u';
      charArray0[3] = ')';
      charArray0[4] = 'u';
      charArray0[5] = '2';
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)33;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)26;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray1, 1127, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      iOContext1.allocWriteEncodingBuffer((-1997));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      mockFileOutputStream0.getChannel();
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      uTF8JsonGenerator0.writeBooleanField("Can not write a field name, expecting a value", true);
      uTF8JsonGenerator0.writeNumber((double) (-3));
      uTF8JsonGenerator0.writeNumber(3);
      mockPrintStream0.println((long) 2);
      char[] charArray0 = new char[6];
      charArray0[1] = '\u0000';
      uTF8JsonGenerator0._outputTail = (-451);
      charArray0[2] = 'k';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(10000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.withEncoding((JsonEncoding) null);
      ObjectCodec objectCodec0 = null;
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0, byteArray0, 3, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ">q/l_`FQ\"U0");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 57, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockFileOutputStream0.release();
      iOContext0.allocNameCopyBuffer(3);
      SerializedString serializedString0 = new SerializedString("start an object");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4188, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)63, true);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.print((float) (byte) (-1));
      char[] charArray0 = iOContext0.allocTokenBuffer(3470);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2026), (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString(charArray0, 3, 3869);
      uTF8JsonGenerator0.writeFieldName(">q/l_`FQ\"U0");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = iOContext0.withEncoding((JsonEncoding) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.write(byteArray0);
      iOContext0.allocNameCopyBuffer((-2607));
      mockFileOutputStream0.write(0);
      SerializedString serializedString0 = new SerializedString(">q/l_`FQ\"U0");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3485, (ObjectCodec) null, mockPrintStream0, byteArray0, 2845, true);
      uTF8JsonGenerator0.writeNumber(0.0F);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = iOContext0.withEncoding((JsonEncoding) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 954, true);
      iOContext0.allocNameCopyBuffer((-2607));
      mockFileOutputStream0.write(0);
      uTF8JsonGenerator0._flushBuffer();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      char[] charArray0 = iOContext0.allocNameCopyBuffer(3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">q/l_`FQ\"U0");
      mockPrintStream0.print(charArray0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNull();
      mockPrintStream0.write(1921);
      BigDecimal bigDecimal0 = new BigDecimal((double) 1);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString2);
      uTF8JsonGenerator0.writeString("");
      try { 
        uTF8JsonGenerator1.writeFieldName("ALLOW_NUMERIC_LEADING_ZEROS");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      char[] charArray0 = iOContext0.allocNameCopyBuffer(3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">q/l_`FQ\"U0");
      mockPrintStream0.print(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator1.writeNumber((-134.711931));
      uTF8JsonGenerator0.writeNumber(48);
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator1._verifyPrettyValueWrite("", 2);
      uTF8JsonGenerator0.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeNumber(32);
      mockPrintStream0.println((long) 0);
      uTF8JsonGenerator0.writeNumber((long) (-105));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      mockPrintStream0.print((-3764L));
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding0);
      mockPrintStream0.print(1.0F);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)114;
      iOContext0.allocNameCopyBuffer((byte)114);
      SerializedString serializedString0 = new SerializedString("6,");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2101), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      try { 
        uTF8JsonGenerator0.writeNumber((long) (-2101));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockFileOutputStream0.close();
      iOContext0.allocNameCopyBuffer(3);
      SerializedString serializedString0 = new SerializedString("start an object");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 143, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(".Vc");
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-40);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte) (-41);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber(4349.13428935);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-40));
      uTF8JsonGenerator0.writeNumber((-1198.2156F));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((float) (byte) (-41));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2515), true);
      SerializedString serializedString0 = new SerializedString("R!+- l4f>MgjBS/-4");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(">q/l_`FQ\"U0");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ">q/l_`FQ\"U0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      BigDecimal bigDecimal0 = new BigDecimal(33.52505093671786);
      uTF8JsonGenerator0._releaseBuffers();
      IOContext iOContext1 = new IOContext(bufferRecycler0, fileChannel0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 55296, false);
      try { 
        uTF8JsonGenerator1.writeUTF8String(byteArrayBuilder0.NO_BYTES, 92, 56319);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)78;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 64, (ObjectCodec) null, mockPrintStream2, byteArray0, (byte)78, true);
      uTF8JsonGenerator0.writeBinaryField(">q/l_`FQ\"U0", byteArray0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asUnquotedUTF8();
      serializedString0.asQuotedChars();
      SerializedString serializedString1 = new SerializedString("J&,/!{");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("?iNK5LD@}]<", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3Dk}+F}!5R Fvhd=");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      iOContext0.allocNameCopyBuffer(3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber((long) 0);
      SerializedString serializedString1 = new SerializedString(">q/l_`FQ\"U0");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 48, (ObjectCodec) null, mockPrintStream0, byteArray0, 223, false);
      BigDecimal bigDecimal0 = new BigDecimal((double) 1);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((short) (-1));
      uTF8JsonGenerator0.writeNumber(">q/l_`FQ\"U0");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 18, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1997), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 3, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-41);
      int int0 = 27;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 27, true);
      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("w[7P+ lA_08oo6B2Irr");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2587, (ObjectCodec) null, (OutputStream) null, byteArray0, 52, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1940, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      iOContext0.allocNameCopyBuffer(3);
      SerializedString serializedString0 = new SerializedString("start an object");
      BigDecimal bigDecimal0 = new BigDecimal((-27L));
      BigDecimal bigDecimal1 = new BigDecimal((double) 2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 119, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1628, true);
      uTF8JsonGenerator0.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      StringReader stringReader0 = new StringReader(" <c}~p~KC");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder1.NO_BYTES, 33, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeRaw('h');
      uTF8JsonGenerator0.writeNumber(3717.47F);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeNumber((short)4);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream1.getChannel();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)43;
      mockFileOutputStream1.write(byteArray0, 0, 2336);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1, true);
      byte byte0 = (byte)68;
      MockFileOutputStream mockFileOutputStream2 = new MockFileOutputStream(">q/l_`FQ\"U0");
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)68;
      byteArray1[1] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 67, (ObjectCodec) null, mockFileOutputStream2, byteArray1, 29, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeNumber((long) 1);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)32, (ObjectCodec) null, mockFileOutputStream2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      boolean boolean0 = false;
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw('-');
      uTF8JsonGenerator0.writeNumber((float) 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)37;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('O');
      uTF8JsonGenerator0.writeNumber(0.0F);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      mockFileOutputStream0.getChannel();
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">q/l_`FQ\"U0");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      uTF8JsonGenerator0.writeBooleanField("Can not write a field name, expecting a value", true);
      uTF8JsonGenerator0.writeNumber((double) (-3));
      uTF8JsonGenerator0.writeNumber(3);
      mockPrintStream0.println((long) 2);
      char[] charArray0 = new char[6];
      charArray0[1] = '\u0000';
      charArray0[3] = '2';
      charArray0[4] = '5';
      charArray0[5] = 'u';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeRaw('h');
      uTF8JsonGenerator0.writeNumber(3717.47F);
      uTF8JsonGenerator0.writeNumber((float) 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("K\"nY#{2ZIBXX+b.*)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1810);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";[e", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 370);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(">q/l_`FQ\"U0");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)41, (ObjectCodec) null, mockPrintStream0, byteArray0, 101, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      IOContext iOContext0 = new IOContext(bufferRecycler0, ">q/l_`FQ\"U0", false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SerializedString serializedString0 = new SerializedString("^7O");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3382, true);
      uTF8JsonGenerator0.writeNumber((short)4000);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("]BuFse");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = '.';
      charArray0[2] = 'Q';
      charArray0[3] = 'd';
      charArray0[4] = 'y';
      charArray0[5] = '7';
      charArray0[6] = 'H';
      charArray0[7] = 'x';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-458), 974, true);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 864, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 81, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("]BuFse");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      SerializedString serializedString1 = new SerializedString("J&,/!{");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("?iNK5LD@}]<", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3Dk}+F}!5R Fvhd=");
      uTF8JsonGenerator0.writeNumber(0.0F);
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 18, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRaw('x');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2424), (ObjectCodec) null, mockPrintStream0, byteArray0, (-2424), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2424
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 45, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2898), false);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 57343, 710);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      String string0 = "10_U6";
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("10_U6");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber(1.0F);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1.0));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBooleanField("write a raw (unencoded) value", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[8];
      iOContext1.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 58, (ObjectCodec) null, printStream0, byteArray0, 55296, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1.0));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = '<';
      charArray0[2] = 'v';
      charArray0[3] = '';
      charArray0[4] = 'c';
      charArray0[5] = 'i';
      charArray0[6] = 'h';
      charArray0[7] = 'c';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.withEncoding((JsonEncoding) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      mockPrintStream0.print((float) 2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)88;
      byteArray0[4] = (byte)114;
      char[] charArray0 = iOContext0.allocTokenBuffer(0);
      SerializedString serializedString0 = new SerializedString(">q/l_`FQ\"U0");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 158, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString(charArray0, 78, (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1.0));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0.writeNumber((-1596));
      System.setCurrentTimeMillis(0);
      BigDecimal bigDecimal0 = new BigDecimal(9.223372036854776E18);
      uTF8JsonGenerator0.writeNumber(1190L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 99, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeRaw('h');
      uTF8JsonGenerator0.writeNumber(3717.47F);
      uTF8JsonGenerator0.writeNumber(1494.118);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 2, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      char[] charArray0 = iOContext0.allocNameCopyBuffer(3);
      SerializedString serializedString0 = new SerializedString("start an object");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 120, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeString(charArray0, 750, 0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = iOContext0.withEncoding((JsonEncoding) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyPrettyValueWrite(">q/l_`FQ\"U0", 0);
      SerializableString serializableString0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext1.allocNameCopyBuffer(256);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 224, true);
      uTF8JsonGenerator0.writeBooleanField("", true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      iOContext2.allocTokenBuffer();
      uTF8JsonGenerator0.writeNumber(1.0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      mockFileOutputStream0.getChannel();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder1);
      uTF8JsonGenerator0.writeBooleanField("", true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((long) 2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      SerializedString serializedString1 = new SerializedString("J&,/!{");
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4000, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeRaw('u');
      uTF8JsonGenerator0.writeNumber((-2211.4F));
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 57343, 710);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNull();
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 'L';
      charArray0[4] = 't';
      charArray0[5] = 'L';
      charArray0[6] = 't';
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1912, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("qK8?w3H9e&W'");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) bufferRecycler0;
      objectArray0[1] = (Object) iOContext0;
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) ", copied ";
      mockPrintStream0.printf(", copied ", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2486), (ObjectCodec) null, mockPrintStream0, byteArray0, 8000, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeBooleanField("qK8?w3H9e&W'", false);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      char[] charArray0 = iOContext1.allocNameCopyBuffer(262144);
      SerializedString serializedString0 = new SerializedString(">q/l_`FQ\"U0");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)88, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeString(charArray0, 3955, 750);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1.0));
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 1513, (-733));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer((-105));
      iOContext1.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      mockPrintStream0.println('%');
      MockFile mockFile0 = new MockFile(">q/l_`FQ\"U0");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 0, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1670);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[5];
      int int0 = 58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1696), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 58, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(1829.546060429);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('-');
      uTF8JsonGenerator0.writeNumber((float) 0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      iOContext1.allocBase64Buffer();
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber(117);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = iOContext0.withEncoding((JsonEncoding) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      mockPrintStream0.print((float) 2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)88;
      byteArray0[4] = (byte)114;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      char[] charArray0 = iOContext1.allocNameCopyBuffer(0);
      SerializedString serializedString0 = new SerializedString(">q/l_`FQ\"U0");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 158, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString(charArray0, 78, 98);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      SerializedString serializedString0 = new SerializedString("?SQnp{Po:X}KitVW");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)54;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, mockPrintStream0, byteArray0, 35, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = '0';
      charArray0[2] = ' ';
      charArray0[3] = 'd';
      charArray0[4] = '4';
      charArray0[5] = '{';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (-933), 512);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 57343);
      int int0 = 49;
      uTF8JsonGenerator0.writeNumber((float) 3);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName(">q/l_`FQ\"U0");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.close();
      int int0 = 223;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-105), (ObjectCodec) null, mockPrintStream0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      SerializedString serializedString1 = new SerializedString(">q/l_`FQ\"U0");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1300), (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "3Dk}+F}!5R Fvhd=";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dm%hM796WR@,MY\"F");
      String string1 = "N+5p0fXzC+vM";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("N+5p0fXzC+vM", 108, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeBooleanField("", true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 57343, 710);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNull();
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 'L';
      charArray0[4] = 't';
      charArray0[5] = 'L';
      charArray0[6] = 't';
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      iOContext1.setEncoding(jsonEncoding0);
      mockPrintStream0.print((float) 2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)114;
      BigDecimal bigDecimal0 = new BigDecimal(382.25);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)69, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = null;
      try {
        serializedString0 = new SerializedString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Null String illegal for SerializedString
         //
         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ">q/l_`FQ\"U0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 18, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("': expected '");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)78;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)78, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">q/l_`FQ\"U0");
      String string0 = "<oju9KJD*e(+MIg{o.k";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null, (int) (byte)11, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 24, (ObjectCodec) null, mockPrintStream0, byteArray0, 223, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 3);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      mockFileOutputStream0.getChannel();
      byteArray0[0] = (byte) (-1);
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">q/l_`FQ\"U0");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      uTF8JsonGenerator0.writeBooleanField("Can not write a field name, expecting a value", true);
      uTF8JsonGenerator0.writeNumber((double) (-3));
      uTF8JsonGenerator0.writeNumber(3);
      mockPrintStream0.println((long) 2);
      uTF8JsonGenerator0.writeNumber(2831.9543F);
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = '7';
      charArray0[2] = 'k';
      charArray0[3] = 'B';
      charArray0[4] = '5';
      charArray0[5] = 'u';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeBooleanField("", true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((long) 2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1492, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      iOContext1.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-3133.0843268638));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">q/l_`FQ\"U0");
      mockPrintStream0.append((CharSequence) charBuffer0, 0, 0);
      byte[] byteArray0 = new byte[0];
      int int0 = 113;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 113, false);
      iOContext0.allocWriteEncodingBuffer(2);
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2046, (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 102, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1777), (ObjectCodec) null, (OutputStream) null, byteArray0, 12, true);
      uTF8JsonGenerator0.getOutputBuffered();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1.0));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-1085.3474251));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1.0));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-2.525602594432941));
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(0);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 3, 1706);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2459, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(28);
      uTF8JsonGenerator0.writeNumber((float) (byte)54);
      uTF8JsonGenerator0.writeFieldName("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeString((char[]) null, 117, 3);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ">q/l_`FQ\"U0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8000, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 18, false);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">q/l_`FQ\"U0", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, fileChannel0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-142.19774F));
      uTF8JsonGenerator0.writeBoolean(true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 276, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeRaw("Too few bytes available: missing ");
      uTF8JsonGenerator1.flush();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "V`L\"[", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1717, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("f}`");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, (OutputStream) null, byteArray0, 120, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ">q/l_`FQ\"U0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("(Zx", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeBooleanField("", true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 117, 710);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNull();
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 'L';
      charArray0[4] = 't';
      charArray0[5] = 'L';
      charArray0[6] = 't';
      charArray0[7] = '/';
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@XQ4r5k@Q&", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 73, (ObjectCodec) null, pipedOutputStream0, byteArray0, 33, true);
      uTF8JsonGenerator0.getOutputTarget();
      try { 
        uTF8JsonGenerator0.writeNumber(2619.2698F);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      SerializedString serializedString1 = new SerializedString("J&,/!{");
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4000, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeRaw('u');
      float float0 = (-2211.4F);
      try { 
        uTF8JsonGenerator0.writeStringField(", although was supposed to have one", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[8];
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      iOContext1.withEncoding(jsonEncoding0);
      double double0 = (-3133.0843268638);
      try { 
        uTF8JsonGenerator0._writePPFieldName(">q/l_`FQ\"U0");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, byteArrayBuilder0);
      byteArrayBuilder0.write(byteArray0, 2, (-1596));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0.writeNumber((-1596));
      uTF8JsonGenerator0.writeNumber((float) 57);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.toByteArray();
      String string0 = "xc1zxdP";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("xc1zxdP");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 611, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ">q/l_`FQ\"U0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8000, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 18, false);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("': expected '");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0._verifyValueWrite("write a boolean value");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)78;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      uTF8JsonGenerator0.writeFieldName("write a boolean value");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)102;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      mockPrintStream0.print(1981.0443);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "write a boolean value", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a boolean value");
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 't';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1);
      printStream0.close();
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeString("||&1C  23ks4L");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 248, 3);
      uTF8JsonGenerator0.writeNumber((short)2047);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      boolean boolean0 = true;
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 48, (ObjectCodec) null, mockPrintStream0, byteArray0, 223, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 110, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 't';
      uTF8JsonGenerator0.writeNumber(3);
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("FLOAT", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 903, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      iOContext0.allocTokenBuffer();
      byteArray0[4] = (byte)18;
      uTF8JsonGenerator0.writeBooleanField("?iNK5LD@}]<", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber("@`J");
      uTF8JsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((-3133.0843268638));
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) (-733));
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber(1396.8029F);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      mockPrintStream0.print(1981.0443);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "write a boolean value", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a boolean value");
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 't';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1);
      printStream0.close();
      iOContext1.allocReadIOBuffer(0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeString("||&1C  23ks4L");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-678), 1632);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -678
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1.0));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-1085.3474251));
      uTF8JsonGenerator0.writeNumber(127);
      Object object0 = new Object();
      String string0 = "@`J";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, byteArrayBuilder0);
      byteArrayBuilder0.write(byteArray0, 2, (-1596));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0.writeNumber((-1596));
      iOContext0.allocReadIOBuffer(3);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeString("h-]] r9nJMw4TD");
      uTF8JsonGenerator0.writeNumber(3531.0F);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("?Z1 c%5uOdR");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = '[';
      charArray0[2] = 'p';
      charArray0[3] = '$';
      charArray0[4] = '}';
      charArray0[5] = '7';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 15, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 117, 33, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 15, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-114);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 30, 239);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">q/l_`FQ\"U0", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, fileChannel0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((-257.1450181769));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber((-112.86F));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)68;
      uTF8JsonGenerator0._outputBuffer = byteArray0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber(0.8);
      uTF8JsonGenerator0.writeNumber((-8));
      System.setCurrentTimeMillis((-2281L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("9y\"'LW", (-8));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "r;S#s(?\"", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      PrintStream printStream0 = mockPrintStream0.append('z');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">q/l_`FQ\"U0", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, fileChannel0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockFileOutputStream0);
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 2;
      uTF8JsonGenerator0.writeArray(intArray0, 4276, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, byteArrayBuilder0);
      byteArrayBuilder0.write(byteArray0, 2, (-1596));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0.writeNumber((-1596));
      uTF8JsonGenerator0.writeNumber((float) 57);
      uTF8JsonGenerator0.writeRaw('a');
      uTF8JsonGenerator0.writeNumber((float) 0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      byte byte0 = (byte)108;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">q/l_`FQ\"U0", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byte byte1 = (byte)21;
      byteArray0[0] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2334, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4246, false);
      uTF8JsonGenerator0.writeNumber((double) (byte)75);
      uTF8JsonGenerator0._checkStdFeatureChanges(4481, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2334, (-408));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      SerializableString serializableString0 = null;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 57343);
      try { 
        uTF8JsonGenerator0._outputSurrogates(49, (-3395));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x31, second 0xfffff2bd
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
      try { 
        iOContext2.releaseWriteEncodingBuffer(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 'L';
      charArray0[3] = 't';
      charArray0[4] = 't';
      uTF8JsonGenerator0.writeRaw(charArray0, 3, 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 3, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 48, (ObjectCodec) null, mockPrintStream0, byteArray0, 223, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 1023, 754);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1.0));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0.writeNumber((-1596));
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("9y\"'LW", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      objectArray0[0] = (Object) pipedOutputStream0;
      mockPrintStream0.println(0.0F);
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "write a boolean value", objectArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 14, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0);
      printStream0.close();
      iOContext0.allocReadIOBuffer(3);
      SerializedString serializedString0 = new SerializedString("7<KfR&gl*u1+");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">q/l_`FQ\"U0", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, fileChannel0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((-257.1450181769));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber((int) (byte)108);
      uTF8JsonGenerator0.writeNumber((-112.86F));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("qK8?w3H9e&W'");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) bufferRecycler0;
      objectArray0[1] = (Object) iOContext0;
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) ", copied ";
      PrintStream printStream0 = mockPrintStream0.printf(", copied ", objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)36;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 20, (ObjectCodec) null, printStream0, byteArray0, (-859), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -859
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, ">q/l_`FQ\"U0", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)21;
      byteArray0[0] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2334, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4246, false);
      uTF8JsonGenerator0.writeNumber((double) (byte)75);
      uTF8JsonGenerator0._checkStdFeatureChanges(4481, 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)108, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 470, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      mockPrintStream0.println(0.0F);
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "write a boolean value", objectArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 14, 1);
      locale0.hasExtensions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0);
      printStream0.close();
      iOContext0.allocReadIOBuffer(3);
      SerializedString serializedString0 = new SerializedString("7<KfR&gl*u1+");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeString("e1|JET)Al");
      uTF8JsonGenerator0.writeRaw("e1|JET)Al");
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.println((-679.5));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[3];
      uTF8JsonGenerator0.writeBinary(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      try { 
        uTF8JsonGenerator0._outputSurrogates(44, (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x2c, second 0x0
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.println((-679.5));
      MockPrintStream mockPrintStream1 = new MockPrintStream(pipedOutputStream0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, mockPrintStream0, byteArray0, 46, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      SerializedString serializedString1 = new SerializedString("J&,/!{");
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4000, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, (byte)0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0", true);
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      mockPrintStream0.println(0.0F);
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "write a boolean value", objectArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 14, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0);
      printStream0.close();
      iOContext0.allocReadIOBuffer(3);
      SerializedString serializedString0 = new SerializedString("7<KfR&gl*u1+");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeString("e1|JET)Al");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 903, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      iOContext0.allocTokenBuffer();
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-1);
      uTF8JsonGenerator0.writeBooleanField("?iNK5LD@}]<", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber("@`J");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      String string0 = "write a boolean value";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0._verifyValueWrite(" bytes (out of ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 6, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000000, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("0", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "+Infinity";
      uTF8JsonGenerator0.writeNumber("5L~VnZMf#[_T$:");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("0");
      serializedString1.asQuotedChars();
      StringWriter stringWriter0 = new StringWriter(55296);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Can not write a field name, expecting a value");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 903, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-1);
      byteArray0[7] = (byte)3;
      uTF8JsonGenerator0.writeNumber(850.80231);
      byteArrayBuilder0.write(byteArray0, 2, (-1596));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)18);
      uTF8JsonGenerator0.writeString((char[]) null, 1, 0);
      uTF8JsonGenerator0.writeRaw((char[]) null, 3, (-1021));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-1);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-1), (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(1.0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1112), (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)48, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBooleanField("Can not write a field name, expecting a value", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber(">q/l_`FQ\"U0");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.writeObject((Object) null);
      serializedString0.asQuotedChars();
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBooleanField("Can not write a field name, expecting a value", true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("Can not write a field name, expecting a value");
      serializedString1.asQuotedChars();
      serializedString1.asUnquotedUTF8();
      uTF8JsonGenerator0.writeNumber("v/");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 1);
      uTF8JsonGenerator0.getOutputTarget();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0._verifyValueWrite("write a boolean value");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)78;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1007), 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1007
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.toByteArray();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)18;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      byteArrayBuilder0.write(byteArray0, 2, (-1596));
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5152), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeStartObject((Object) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 13, 11);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      iOContext1.setEncoding(jsonEncoding0);
      mockPrintStream0.print((float) 2);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)69;
      byte byte1 = (byte)114;
      byteArray0[4] = (byte)114;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      byteArrayBuilder0.write(byteArray0, 2, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)69, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, (-1596), 2027);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1596
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArrayBuilder0.write(byteArray0, (-1609), (-2));
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, (-1718), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1777), (ObjectCodec) null, (OutputStream) null, byteArray0, 12, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBooleanField("+{o\"Fu[{#`?L\"A", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1777), (ObjectCodec) null, (OutputStream) null, byteArray0, 12, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      int int0 = 12;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1777), (ObjectCodec) null, (OutputStream) null, byteArray0, 12, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      iOContext1.setEncoding(jsonEncoding0);
      mockPrintStream0.print((float) 2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0, byteArray0, (byte) (-1), true);
      iOContext1.allocNameCopyBuffer(0);
      uTF8JsonGenerator0._flushBuffer();
      SerializedString serializedString0 = new SerializedString(">q/l_`FQ\"U0");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 3, 3);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding1);
      mockPrintStream0.print((float) 3);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      int int0 = (-1012);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, (-1012), true);
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) (-1012));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBooleanField("Can not write a field name, expecting a value", true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      boolean boolean0 = true;
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        iOContext1.releaseWriteEncodingBuffer(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)9;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte)63);
      try { 
        uTF8JsonGenerator0._outputSurrogates((byte) (-6), (byte)110);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xfffffffa, second 0x6e
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "write a boolean value", objectArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 14, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0);
      printStream0.close();
      iOContext0.allocReadIOBuffer(3);
      SerializedString serializedString0 = new SerializedString("7<KfR&gl*u1+");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 903, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-1);
      byteArray0[7] = (byte)3;
      uTF8JsonGenerator0.writeNumber(0.0);
      byteArrayBuilder0.write(byteArray0, 2, (-1596));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((int) (byte)18);
      uTF8JsonGenerator0.writeString((char[]) null, 1, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 3700, 286);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0._verifyValueWrite("write a boolean value");
      char[] charArray0 = new char[2];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)78;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.toByteArray();
      int int0 = (-1596);
      byteArrayBuilder0.write(byteArrayBuilder0.NO_BYTES, 2, (-1596));
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5133), (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 13, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      iOContext0.allocWriteEncodingBuffer((-105));
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 903, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = 't';
      charArray0[2] = 'L';
      charArray0[3] = 'G';
      charArray0[4] = 't';
      charArray0[5] = 'L';
      charArray0[6] = 'L';
      charArray0[7] = 't';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)0, 548);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)18;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      SerializedString serializedString0 = new SerializedString("]WTR1xe=23pWd.");
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2139, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (byte)18, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1.0));
      byteArrayBuilder0.write(byteArray0, 2, (-733));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0.writeNumber((-1596));
      uTF8JsonGenerator0.writeNumber((float) (-733));
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      SerializedString serializedString1 = new SerializedString("J&,/!{");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4000, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 3, 3);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding1);
      mockPrintStream0.print((float) 3);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, (-1012), true);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString0 = new SerializedString(">q/l_`FQ\"U0");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      byte byte0 = (byte) (-1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.print((-1.0F));
      int int0 = 2749;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2749, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte)73, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.constructTextBuffer();
      iOContext1.allocNameCopyBuffer(55296);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.println((-679.5));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)18;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      try { 
        uTF8JsonGenerator0._outputSurrogates(44, (byte)18);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x2c, second 0x12
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "write a boolean value", objectArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 14, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, mockPrintStream0);
      printStream0.close();
      iOContext0.allocReadIOBuffer(3);
      SerializedString serializedString0 = new SerializedString("7<KfR&gl*u1+");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      int int0 = (-3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1260, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      SerializableString serializableString0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1777), (ObjectCodec) null, (OutputStream) null, byteArray0, 12, true);
      SerializableString serializableString0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.println(3019.7138566923845);
      String string0 = "write a boolean value";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "write a boolean value", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, mockPrintStream1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "VtNO#\\\"W=c-qP_:0(", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 903, (ObjectCodec) null, byteArrayBuilder0);
      byte byte0 = (byte)73;
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      int int0 = 2;
      byteArrayBuilder0.write(byteArray0, 2, (-1596));
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 2195, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2195
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = 903;
      String string0 = "ENG;2q^";
      byteArrayBuilder0.toByteArray();
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte) (-1), false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 903, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      uTF8JsonGenerator0.writeNumber(0.0);
      byteArrayBuilder0.write(byteArray0, 2, (-1596));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((double) (byte)73);
      uTF8JsonGenerator0.writeNumber((int) (byte)18);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.println(3032.6818942305026);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-561), (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 696);
      try { 
        uTF8JsonGenerator0._outputSurrogates((-3716), 112);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xfffff17c, second 0x70
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)", 2, 1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.toByteArray();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)18;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      byteArrayBuilder0.write(byteArray0, 2, (-1596));
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5152), (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 13, 11);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBooleanField("Can not write a field name, expecting a value", true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("Can not write a field name, expecting a value");
      serializedString1.asQuotedChars();
      serializedString1.asUnquotedUTF8();
      uTF8JsonGenerator0.writeNumber("");
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 903, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      byteArrayBuilder0.write(byteArray0, 2, (-1596));
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.mod(bigInteger0);
      bigInteger1.shiftRight(57343);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      byteArrayBuilder0.release();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(") not VALUE_STRING, can not access as binary", 49, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.println(3019.7138566923845);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "write a boolean value", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 't';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1);
      printStream0.close();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1466, (ObjectCodec) null, (OutputStream) null, byteArray0, 564, true);
      iOContext1.allocNameCopyBuffer((-1339));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.mod(bigInteger0);
      bigInteger2.shiftRight(2);
      BigInteger bigInteger3 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBooleanField("Can not write a field name, expecting a value", true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("Can not write a field name, expecting a value");
      serializedString1.asQuotedChars();
      serializedString1.asUnquotedUTF8();
      uTF8JsonGenerator0.writeNumber("v/");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 1);
      uTF8JsonGenerator0.getOutputTarget();
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = ">q/l_`FQ\"U0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      iOContext1.setEncoding(jsonEncoding0);
      mockPrintStream0.print((float) 2);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)114;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((byte)69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-1), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1842), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("v/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1842
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Locale locale0 = Locale.KOREA;
      String string0 = "write a boolean value";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) iOContext1;
      objectArray0[2] = (Object) iOContext0;
      IOContext iOContext2 = new IOContext(bufferRecycler0, locale0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, mockPrintStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "write a boolean value";
      objectArray0[5] = (Object) "write a boolean value";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "write a boolean value", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 55296, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator1.writeNumber((BigDecimal) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writePPFieldName("Oa^Jd)ZMC-1B~*^\"HY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.mod(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger2.shiftRight(240);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.println(3019.7138566923845);
      String string0 = "write a boolean value";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-561), (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 696);
      // Undeclared exception!
      try { 
        byteArrayBuilder0.write(byteArray0, 5, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBooleanField("Can not write a field name, expecting a value", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "write a binary value");
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("Can not write a field name, expecting a value");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(">q/l_`FQ\"U0", (-2627));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "?";
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) ">q/l_`FQ\"U0";
      mockPrintStream0.format("?", objectArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = '\"';
      charArray0[2] = ')';
      charArray0[3] = 'r';
      charArray0[4] = '{';
      charArray0[5] = '+';
      charArray0[6] = '_';
      charArray0[7] = '+';
      charArray0[8] = '{';
      mockPrintStream0.println(charArray0);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      mockPrintStream0.print((float) 3);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)69, true);
      iOContext0.allocNameCopyBuffer(2);
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      iOContext1.setEncoding(jsonEncoding0);
      mockPrintStream0.print((float) 2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0, byteArray0, (byte) (-1), true);
      iOContext1.allocNameCopyBuffer(0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.write(byteArray0, 0, (-764));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 49, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeBooleanField(">q/l_`FQ\"U0", true);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.println(3019.7138566923845);
      String string0 = "write a boolean value";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "write a boolean value", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, mockPrintStream1);
      BigDecimal bigDecimal0 = null;
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1777), (ObjectCodec) null, (OutputStream) null, byteArray0, 12, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue("Split surrogate on writeRaw() input (last haracter): first character 0x%4x", 12, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">q");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ">q/l_`FQ\"U0");
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBooleanField("Can not write a field name, expecting a value", true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("Can not write a field name, expecting a value");
      uTF8JsonGenerator0.getOutputBuffered();
      serializedString1.asQuotedChars();
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBooleanField("Can not write a field name, expecting a value", true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("Can not write a field name, expecting a value");
      serializedString1.asQuotedChars();
      serializedString1.asUnquotedUTF8();
      uTF8JsonGenerator0.writeNumber("v/");
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      String string0 = "write a boolean value";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "write a boolean value", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("write a boolean value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocConcatBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 500, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)3;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "?";
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) ">q/l_`FQ\"U0";
      mockPrintStream0.format("?", objectArray0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      iOContext1.setEncoding(jsonEncoding0);
      mockPrintStream0.print((float) 2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0, byteArray0, (byte) (-1), true);
      iOContext1.allocNameCopyBuffer(0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBooleanField("Can not write a field name, expecting a value", true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("Can not write a field name, expecting a value");
      serializedString1.asQuotedChars();
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.mod(bigInteger0);
      bigInteger1.shiftRight(57343);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      assertEquals(2, byteArrayBuilder0.getCurrentSegmentLength());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      String string0 = "ENG;2q^";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)73;
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        byteArrayBuilder0.write(byteArray0, 1, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      String string0 = "ENG;2q^";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        byteArrayBuilder0.write(byteArray0, 1, 56320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      int int0 = (-1157);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (-1157), (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-1157), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1777), (ObjectCodec) null, (OutputStream) null, byteArray0, 12, true);
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue("Split surrogate on writeRaw() input (last character): first character 0x%4x", 12, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">q/l_`FQ\"U0");
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ">q/l_`FQ\"U0", 0, 2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      iOContext1.setEncoding(jsonEncoding0);
      mockPrintStream0.print((float) 2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0, byteArray0, (byte) (-1), true);
      iOContext1.allocNameCopyBuffer(0);
      uTF8JsonGenerator0._flushBuffer();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
