/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 15:56:58 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[2];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      doReturn(false).when(iOContext0).isResourceManaged();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      mockPrintStream0.write((int) (byte) (-128));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 666, (ObjectCodec) null, mockPrintStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("UTF-16LE");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "UTF-16LE");
      String string0 = " : ";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      uTF8JsonGenerator0.close();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 55296, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)7998);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[3];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      mockPrintStream0.write(255);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis((byte)32);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("UTF-16LE", (int) (byte)32, (-472));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-547), 255);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis(3);
      uTF8JsonGenerator0.writeRaw("s/SU", 2, 2);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[8] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE", "UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-29), (ObjectCodec) null, mockPrintStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._entityBuffer = byteArray0;
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis((byte) (-29));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(";", (-2492), 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      doReturn(false).when(iOContext0).isResourceManaged();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-669), (ObjectCodec) null, mockPrintStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      int int0 = 13;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('5');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, (OutputStream) null);
      iOContext0.allocTokenBuffer(57343);
      uTF8JsonGenerator0.writeString((String) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, (byte[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(2015);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3254), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      char char0 = 'z';
      uTF8JsonGenerator0.writeRaw('\u0086');
      uTF8JsonGenerator0.writeFieldName(" bytes (out of ");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(0.0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)6, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      defaultPrettyPrinter0.writeStartArray(uTF8JsonGenerator0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      defaultPrettyPrinter1.withRootSeparator((SerializableString) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      mockFile1.setLastModified(1768L);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber(1292L);
      uTF8JsonGenerator0._verifyPrettyValueWrite(",>?", 3);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)6;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRawUTF8String(byteArray1, 57343, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)6, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      defaultPrettyPrinter0.writeStartArray(uTF8JsonGenerator0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      mockFile1.setLastModified(1768L);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator1.writeNumber((short) (byte)47);
      int int0 = 28;
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 28, 57343);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant(":Z*)2/", ":Z*)2/", false, 'q', (-4809));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 6)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "=U";
      MockFile mockFile0 = new MockFile("=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2165);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)9;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 1000000000, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0._checkStdFeatureChanges(1624, 2);
      try { 
        uTF8JsonGenerator0.writeNumber(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[8] = (byte) (-29);
      String string0 = "UTF-16LE";
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16LE", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeNumber(4000);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-695), (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)6, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      defaultPrettyPrinter0.writeStartArray(uTF8JsonGenerator0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      mockFile1.setLastModified(1768L);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator1.writeNumber((short) (byte)47);
      SerializedString serializedString0 = new SerializedString("Broken surrogate pair: first char 0x");
      try { 
        uTF8JsonGenerator1.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-669), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, 536868918);
      mockPrintStream0.print(charArray0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)6, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      mockFile1.setLastModified(1768L);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator1.writeNumber((short) (byte)34);
      SerializedString serializedString0 = new SerializedString("Broken surrogate pair: first char 0x");
      try { 
        uTF8JsonGenerator1.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[3];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(iOContext0).allocBase64Buffer();
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      mockPrintStream0.write(255);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("UTF-16LE");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3611, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString1);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, 57343);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      ObjectCodec objectCodec0 = null;
      String string0 = "a";
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-1), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("a");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      iOContext0.allocBase64Buffer();
      String string0 = "Too few bytes available: missing ";
      uTF8JsonGenerator0._verifyValueWrite("Too few bytes available: missing ");
      String string1 = "t&GtShZ";
      uTF8JsonGenerator0.writeFieldName("t&GtShZ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, 1239);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a binary value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      iOContext0.allocWriteEncodingBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-6633), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1433, false);
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        uTF8JsonGenerator0.writeNumber((long) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)88;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 885, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) 3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFile1, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, (-3), true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(56320);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("e", "e");
      MockFile mockFile1 = new MockFile(mockFile0, "e");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3116), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      String string0 = "AXmO;E\\a";
      uTF8JsonGenerator0.writeArrayFieldStart("AXmO;Ea");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 98, (ObjectCodec) null, mockPrintStream1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 20, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        uTF8JsonGenerator0.writeNumber((short)32);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "=h~=2+[Fj", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 47, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      doReturn(false).when(iOContext0).isResourceManaged();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-669), (ObjectCodec) null, mockPrintStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3039);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1174), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      uTF8JsonGenerator0.writeBoolean(false);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ARRAY
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[8] = (byte) (-29);
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE", "UTF-16LE");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      dataOutputStream0.writeChars("UTF-16LE");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte) (-29), (ObjectCodec) null, mockPrintStream0, byteArray0, 16, false);
      uTF8JsonGenerator0.writeNumber(406L);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) sequenceInputStream0, (int) (byte)34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      String string0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream(547);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2756);
      IOContext iOContext0 = new IOContext(bufferRecycler1, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(3);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)56;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, (-1265), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1265
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      iOContext0.releaseReadIOBuffer((byte[]) null);
      uTF8JsonGenerator0.close();
      mockPrintStream0.println(":Z*)2/");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("{ZW#l21");
      MockFile mockFile1 = new MockFile("9U", "9U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3254), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("9U");
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(2);
      uTF8JsonGenerator0.writeBinary(byteArray1);
      uTF8JsonGenerator0.writeRaw("write a boolean value");
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = '=';
      charArray0[4] = '~';
      uTF8JsonGenerator0.writeRaw(charArray0, 4, 2);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[8] = (byte) (-29);
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE", "UTF-16LE");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-851), (ObjectCodec) null, mockPrintStream0, byteArray0, 32, false);
      uTF8JsonGenerator0.writeNumber((-55.93078736815712));
      uTF8JsonGenerator0.writeNumber((int) (byte)55);
      uTF8JsonGenerator0.writeRaw(charArray0, 65535, (int) (byte) (-29));
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile("write a number", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringReader stringReader0 = new StringReader(":Z*)2/");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((byte)0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 39, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      charsToNameCanonicalizer1.release();
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeChars("=U");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 126, true);
      try { 
        uTF8JsonGenerator0.writeNumber(1528L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString("");
      String string0 = "0GE.XMJcT";
      MockPrintStream mockPrintStream0 = new MockPrintStream("0GE.XMJcT");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(56320);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2801));
      byteArrayBuilder0.finishCurrentSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1772, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 70, (-365));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "=h~=2+[Fj", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 47, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 35, false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      uTF8JsonGenerator0.writeString("J\"JpHgtpLT");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("start an array");
      mockPrintStream0.write(2000);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-16LE", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, mockPrintStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis(3);
      uTF8JsonGenerator0.writeRaw("UTF-16LE", 0, 3);
      uTF8JsonGenerator0.writeRaw('h');
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFile1, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("=U");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0._checkStdFeatureChanges(0, 153);
      uTF8JsonGenerator0.writeNumber(41);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 3);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 46, false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      uTF8JsonGenerator0.writeString("J\"JpHgtpLT");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[8] = (byte) (-29);
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[15];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream("UTF-16LE", "UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-851), (ObjectCodec) null, mockPrintStream1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.allocReadIOBuffer((-3));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw("write a boolean value");
      SerializableString serializableString0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      String string0 = "G.";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "G.", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2969, (ObjectCodec) null, (OutputStream) null);
      String string1 = "K9>XWiWy\\Xwk~6fR\\";
      String string2 = "";
      uTF8JsonGenerator0.writeString("=*S9-_1kqt?%%]");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an array", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      uTF8JsonGenerator0.writeString("start an array");
      iOContext1.allocReadIOBuffer(1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "K2[;A)YZIrrKQ9", false);
      MockFile mockFile0 = new MockFile("K2[;A)YZIrrKQ9", "9U");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile1 = new MockFile("9U", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4012, (ObjectCodec) null, dataOutputStream0, byteArray0, 3, true);
      iOContext0.allocBase64Buffer();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
      uTF8JsonGenerator0.writeString("");
      iOContext0.allocReadIOBuffer(3);
      dataOutputStream0.writeChars("9U");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 4012);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)105;
      char[] charArray0 = new char[20];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext4, 4000, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber(92);
      uTF8JsonGenerator0.writeNumber("UTF-16LE");
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "K2[;A)YZIrrKQ9", false);
      MockFile mockFile0 = new MockFile("9U");
      MockFile mockFile1 = new MockFile("9U", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4012, (ObjectCodec) null, dataOutputStream0, byteArray0, 51, true);
      iOContext0.allocBase64Buffer();
      iOContext0.allocReadIOBuffer(3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2801));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-6), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'E';
      charArray0[2] = 'S';
      charArray0[3] = ' ';
      charArray0[4] = 's';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile("write a number", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5985);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1114111, (ObjectCodec) null, mockPrintStream1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      uTF8JsonGenerator0.writeString("lV2q|3j]\"6O");
      uTF8JsonGenerator0.writeFieldName("_ wh 5q1/oS");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyValueWrite("=U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn((Object) byteArray0, (Object) null).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(117);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte) (-29), (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "K2[;A)YZIrrKQ9", false);
      MockFile mockFile0 = new MockFile("K2[;A)YZIrrKQ9", "9U");
      MockFile mockFile1 = new MockFile("9U", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      mockPrintStream0.print((long) 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4012, (ObjectCodec) null, dataOutputStream0, byteArray0, 3, true);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeRaw("y.d3ARkY/@-D'");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("{ZW#l21");
      MockFile mockFile1 = new MockFile("9U", "9U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3254), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("9U");
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(2);
      uTF8JsonGenerator0.writeBinary(byteArray1);
      uTF8JsonGenerator0.writeRaw("write a boolean value");
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = 'I';
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeNumber(0.0);
      char[] charArray0 = new char[5];
      uTF8JsonGenerator0.writeEndArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = ":Z*)2/";
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      char char0 = 'p';
      SerializedString serializedString0 = new SerializedString(":Z*)2/");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeBoolean(false);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-6), (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0._verifyValueWrite("Invalid custom escape definitions; custom escape not found for character code 0x");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not Invalid custom escape definitions; custom escape not found for character code 0x, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, 56320, false);
      uTF8JsonGenerator1.writeArrayFieldStart("W_UXz{]\"g#6\":pY");
      uTF8JsonGenerator1.close();
      uTF8JsonGenerator1.writeNumber(5215L);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 40, (ObjectCodec) null, (OutputStream) null, byteArray0, (-2628), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator2.writeRaw('1');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2628
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "K2[;A)YZIrrKQ9", false);
      MockFile mockFile0 = new MockFile("9U");
      MockFile mockFile1 = new MockFile("9U", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4012, (ObjectCodec) null, dataOutputStream0, byteArray0, 51, true);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("");
      iOContext0.allocReadIOBuffer(3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte)52);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.reset();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 240);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)107;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)75;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream0, byteArray0, 38, false);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, mockPrintStream0);
      iOContext1.allocBase64Buffer();
      uTF8JsonGenerator1._verifyValueWrite("write a boolean value");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("=U");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      doReturn(false).when(iOContext0).isResourceManaged();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-669), (ObjectCodec) null, mockPrintStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      String string0 = "UTF-16LE";
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-820), (ObjectCodec) null, mockPrintStream1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 56319, false);
      uTF8JsonGenerator1.writeArrayFieldStart(":Z*)2/");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 56319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = ":Z*)2/";
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      serializedString0.appendUnquotedUTF8(byteArray0, 3);
      char[] charArray0 = new char[5];
      uTF8JsonGenerator0.writeString(charArray0, 3, 2);
      uTF8JsonGenerator0.writeEndArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString("K9>XWiWyXwk~6fR");
      uTF8JsonGenerator0._verifyValueWrite("write a boolean value");
      SerializedString serializedString0 = new SerializedString("K9>XWiWyXwk~6fR");
      uTF8JsonGenerator0.writeNumber((-1180L));
      uTF8JsonGenerator0.writeNumber((-3681.087188597367));
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("=U");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2159), (ObjectCodec) null, pipedOutputStream0, byteArray0, 118, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("write a number");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 108, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber(2871);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)52;
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("=U");
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[0] = '#';
      BigDecimal bigDecimal0 = new BigDecimal(2);
      bigDecimal0.intValueExact();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1255), (ObjectCodec) null, dataOutputStream0, byteArray0, 20, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber(0.0);
      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(2015);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3254), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRaw('\u0086');
      uTF8JsonGenerator0.writeFieldName(" bytes (out of ");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(0.0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte byte0 = (byte)52;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte)52);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.reset();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 240);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 2, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(2404L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-669), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, 536868926);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "=h~=2+[Fj", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 47, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "=U";
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("=U");
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'U';
      charArray0[2] = '\u001D';
      charArray0[3] = '\u001D';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 130, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, (int) (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(748);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-820), (ObjectCodec) null, mockPrintStream1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("UTF-16LE");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeStartArray((int) (byte)34);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2801));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 20, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeObjectFieldStart("com.fasterxml.jackson.core.JsonParseException");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeEndObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 2567);
      byte[] byteArray1 = new byte[4];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 1, false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeNumber(1236);
      uTF8JsonGenerator0.writeNumber("write a boolean value");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      mockPrintStream0.write(11);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 666, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      BigDecimal bigDecimal0 = new BigDecimal(544.40075668838);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal1.intValueExact();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0.0);
      try { 
        uTF8JsonGenerator0._writePPFieldName("START_OBJECT");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      ObjectCodec objectCodec1 = null;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-128), (ObjectCodec) null, mockPrintStream0, byteArray0, (-1142), true);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("UTF-16LE", (byte) (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockPrintStream0, byteArray0, 56320, false);
      mockPrintStream0.println(":Z*)2/");
      SerializedString serializedString0 = new SerializedString("XaepFKy^5~wQ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("=U");
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[2] = '#';
      charArray0[3] = '#';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 316, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 7992, (ObjectCodec) null, dataOutputStream0, byteArray0, 828, false);
      uTF8JsonGenerator1.writeNumber((double) 828);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      mockFile1.setWritable(false, false);
      uTF8JsonGenerator1.writeRaw((SerializableString) serializedString0);
      char[] charArray1 = new char[1];
      charArray1[0] = '#';
      serializedString0.appendQuoted(charArray1, 21);
      serializedString0.appendUnquotedUTF8(byteArray0, 828);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeStartObject();
      try { 
        uTF8JsonGenerator1.writeBinary((Base64Variant) null, byteArray0, 0, (int) (byte)34);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a binary value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      mockPrintStream0.write(11);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, mockPrintStream0, byteArray0, 5087, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      mockPrintStream0.print(1.0);
      dataOutputStream0.writeChars("ZAV{_*{pK");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 90, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeStartObject((Object) bufferRecycler0);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeRaw('_');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 1, 56319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("0sJ9nZ|OjG", ", although was supposed to have one");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile0.createNewFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeNumber((short)49);
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeString((char[]) null, 99, 3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 691, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("UTF-16LE");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((byte)34);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString2);
      serializedString2.appendUnquotedUTF8(byteArray0, (byte)32);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, serializedString1, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      String string0 = ") in base64 content";
      IOContext iOContext1 = new IOContext(bufferRecycler1, ") in base64 content", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      iOContext1.allocBase64Buffer();
      uTF8JsonGenerator0.writeString(") in base64 content");
      uTF8JsonGenerator0.writeRawValue("com.fasterxml.jackson.core.JsonToken", 2, 3);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator1._verifyValueWrite("y[k9EwRf+o4");
      uTF8JsonGenerator1.writeFieldName("");
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._verifyPrettyValueWrite("", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 90, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber((short)63);
      uTF8JsonGenerator0.writeString(":Z*)2/");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      String string0 = "UTF-16LE";
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 691, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("Too few bytes available: missing ", "");
      String string0 = "write a number";
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte byte0 = (byte)52;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":Z*)2/", true);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)52, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      try { 
        uTF8JsonGenerator0.writeNumber((double) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      int int0 = 104;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      serializedString0.appendUnquotedUTF8(byteArray0, 3);
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '_';
      uTF8JsonGenerator0.writeString(charArray0, 3, 2);
      uTF8JsonGenerator0.writeEndArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)105;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ionG)B");
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)121;
      byteArray0[8] = (byte)71;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (byte)105, 1045);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      String string0 = ",5*t";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 695, (ObjectCodec) null, mockPrintStream0, byteArray0, 46, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, (-1740));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("kHmtu");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler0, "write a number", false);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext3 = new IOContext(bufferRecycler1, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 1, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      doReturn(false).when(iOContext0).isResourceManaged();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-669), (ObjectCodec) null, mockPrintStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.toEngineeringString();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C.mk");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 54, (ObjectCodec) null, mockPrintStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.toEngineeringString();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber((short) (byte)52);
      uTF8JsonGenerator0.writeString("write a number");
      SerializedString serializedString0 = new SerializedString(" bytes (out of ");
      SerializedString serializedString1 = new SerializedString("v[GZ`<#SE.");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      serializedString0.appendUnquotedUTF8(byteArray0, 3);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      mockPrintStream0.write(17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 666, (ObjectCodec) null, mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("UTF-16LE");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      dataOutputStream0.writeChars(" : ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      dataOutputStream0.writeInt(192);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis(966L);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 12, (ObjectCodec) null, dataOutputStream0, byteArray0, 85, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(" : ", 1, (int) (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 691, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('3');
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray1 = new char[8];
      charArray1[0] = '3';
      charArray1[1] = '3';
      charArray1[2] = '3';
      charArray1[3] = '3';
      charArray1[4] = '3';
      charArray1[5] = '3';
      charArray1[6] = 'V';
      charArray1[7] = '3';
      uTF8JsonGenerator0.writeRaw(charArray1, 3, 3);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      String string0 = "UTF-16LE";
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 691, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.appendUnquotedUTF8(byteArray0, 56319);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      mockPrintStream0.flush();
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString("K9>XWiWyXwk~6fR");
      uTF8JsonGenerator0._verifyValueWrite("write a boolean value");
      SerializedString serializedString0 = new SerializedString("K9>XWiWyXwk~6fR");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      uTF8JsonGenerator0.writeRaw("}r31KO0~*|nMDb");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(748);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-820), (ObjectCodec) null, mockPrintStream1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      mockPrintStream0.append('x');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 46, (ObjectCodec) null, dataOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumberField("", (BigDecimal) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal1.intValueExact();
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      String string0 = "UTF16_BE";
      IOContext iOContext1 = new IOContext(bufferRecycler0, "UTF16_BE", false);
      iOContext1.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2085, (ObjectCodec) null, (OutputStream) null, byteArray1, (-4007), false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeRaw('k');
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 2, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2801));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 20, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 91, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(748);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-820), (ObjectCodec) null, mockPrintStream1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeNumberField("_r`zxg?_", (long) 2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      serializedString0.appendQuotedUTF8(byteArray0, 53);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a string", ":Z*)40fp2/");
      MockFile mockFile1 = new MockFile("write a string", "write a string");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)52;
      byte byte0 = (byte)59;
      byteArray0[5] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 83, (ObjectCodec) null, mockPrintStream0, byteArray0, 16, false);
      String string0 = "";
      uTF8JsonGenerator0._verifyValueWrite("");
      String string1 = "";
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.getCurrentValue();
      try { 
        uTF8JsonGenerator0.writeObjectId((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No native support for writing Object Ids
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-2350), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber(47);
      uTF8JsonGenerator0.writeNumber("write a boolean value");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("=U");
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 27, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeArrayFieldStart("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeStartObject();
      uTF8JsonGenerator0.writeFieldName("Invalid custom escape definitions; custom escape not found for character code 0x");
      int int0 = GeneratorBase.SURR2_LAST;
      uTF8JsonGenerator0.writeNumber((long) 0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 2567);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-41);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 0, true);
      uTF8JsonGenerator0.writeRaw('_');
      SerializedString serializedString0 = new SerializedString("R~]lgB^V&7q@ImFhd(w");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("=U");
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      dataOutputStream0.write(123);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-617), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 18, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 691, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      MockPrintStream mockPrintStream1 = new MockPrintStream("UTF-16LE");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((byte)34);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("0/nLycQ?,G");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "=U";
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 108, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0._checkStdFeatureChanges(3707, 108);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeNumber(55296);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 691, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(" bytes (out of ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Current context not an ARRAY but ", 0, 4245);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1175), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) (-669));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("start an array", "start an array");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3254), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString("start an array");
      byte[] byteArray1 = bufferRecycler0.allocByteBuffer(0);
      uTF8JsonGenerator0.writeBinary(byteArray1);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0._charBuffer = charArray0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("write a boolean value");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5985);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1114111, (ObjectCodec) null, mockPrintStream1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      uTF8JsonGenerator0.writeString("lV2q|3j]\"6O");
      uTF8JsonGenerator0.writeFieldName("_ wh 5q1/oS");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(2015);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3254), (ObjectCodec) null, dataOutputStream0, byteArray0, 46, false);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("=U");
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(2);
      uTF8JsonGenerator0.writeBinary(byteArray1);
      uTF8JsonGenerator0.writeFieldName("write a string");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(150L);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0._verifyValueWrite("com.fasterxml.jackson.core.JsonToken");
      uTF8JsonGenerator0.writeFieldName("write a boolean value");
      uTF8JsonGenerator0.getOutputBuffered();
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0._releaseBuffers();
      StringWriter stringWriter1 = stringWriter0.append(':');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 106, (ObjectCodec) null, stringWriter1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("=U");
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'U';
      charArray0[2] = '#';
      charArray0[3] = 's';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 130, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, (int) (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("!=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile("!=U", "!=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(2015);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3254), (ObjectCodec) null, dataOutputStream0, byteArray0, 46, false);
      char[] charArray0 = new char[8];
      charArray0[2] = 'C';
      charArray0[3] = 'n';
      charArray0[4] = '1';
      charArray0[5] = 'n';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)D/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)D/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeFieldName("U,");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((long) (byte)34);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 4);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, 566);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      String string0 = "UTF-16LE";
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-669), (ObjectCodec) null, mockPrintStream0);
      int int0 = (-2480);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-2480), 536868926);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "K2[;A)YZIrrKQ9", false);
      MockFile mockFile0 = new MockFile("K2[;A)YZIrrKQ9", "MrU");
      MockFile mockFile1 = new MockFile("MrU", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.println(false);
      byteArray0[0] = (byte)48;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4012, (ObjectCodec) null, dataOutputStream0, byteArray0, 3, true);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte)48, 0);
      String string0 = null;
      char char0 = '\'';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((String) null, "MrU", true, '\'', (-856));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 3)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("write a number");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 130, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, 2);
      uTF8JsonGenerator0.writeFieldName("write a number");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-669), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, (byte)0);
      uTF8JsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2801));
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 20, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      iOContext0.allocReadIOBuffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)14;
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (byte) (-97));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((-1343L));
      uTF8JsonGenerator0.writeNumber((double) 1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      mockFile0.toURI();
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 576, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      long long0 = (-707L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2740);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString("K9>XWiWyXwk~6fR");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars(":Z*)2/");
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'U';
      charArray0[2] = '#';
      charArray0[3] = 's';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 130, false);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeRaw(charArray0, 3, 4);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeNumber((float) (byte)46);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(" : ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 3, 1, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile(" : ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1393), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 15, 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      String string0 = "UTF-16LE";
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-669), (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 11, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "=U";
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(2015);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3254), (ObjectCodec) null, dataOutputStream0, byteArray0, 46, false);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("=U");
      uTF8JsonGenerator0.writeFieldName("!/54ul1BAHMg~KI");
      uTF8JsonGenerator0.writeNumber((-1100.072));
      try { 
        uTF8JsonGenerator0._writePPFieldName("Q@i[zaQ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(748);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-820), (ObjectCodec) null, mockPrintStream1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2801));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 20, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeRaw("");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintStream mockPrintStream1 = new MockPrintStream("SD1{/rK>mLt");
      int int0 = 98;
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 98, (ObjectCodec) null, mockPrintStream2);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Pr` E,+s$%ckU,1tQw", "", false, 'A', 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("write a string", ":Z*)40fp2/");
      MockFile mockFile1 = new MockFile("write a string", "write a string");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte)52);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 240);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 2, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding1, false);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext2.withEncoding(jsonEncoding2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-102), (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 2, false);
      try { 
        uTF8JsonGenerator0.writeRaw('d');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "i]", true);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.allocBase64Buffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 46, 55296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars(":Z*)2/");
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'U';
      charArray0[2] = '#';
      charArray0[3] = 's';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 130, false);
      uTF8JsonGenerator0.writeNumber((double) 3);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte)52;
      uTF8JsonGenerator0.writeFieldName("=U");
      uTF8JsonGenerator0.writeNumber((double) (byte)0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(2015);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3254), (ObjectCodec) null, dataOutputStream0, byteArray0, 46, false);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("=U");
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeStartArray(1);
      uTF8JsonGenerator0.writeNumber((-1100.072));
      String string0 = "Q@i[zaQ";
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = ":Z*)2/";
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format("", objectArray0);
      byte[] byteArray0 = new byte[12];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3289, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-4097.4607381));
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(3);
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      char char0 = '.';
      charArray0[1] = '.';
      charArray0[2] = '@';
      uTF8JsonGenerator0.writeRaw(charArray0, 2565, 0);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars(":Z*)2/");
      System.setCurrentTimeMillis((-2392L));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 99, false);
      uTF8JsonGenerator0.writeRaw("ALLOW_YAML_COMMENTS");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream("=U");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m,ygFaP-$/iZu|FLz`q");
      mockPrintStream0.println('(');
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 516, false);
      uTF8JsonGenerator0.writeFieldName("U,");
      int int0 = GeneratorBase.SURR1_FIRST;
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal0 = new BigDecimal((long) 1, mathContext0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)32, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(":Z*)2/");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("^?n5[+O)xU");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1);
      uTF8JsonGenerator0.writeNumber((-707L));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 90, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 57343, false);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile("|GHOAg%D4/&", "|GHOAg%D4/&");
      MockFile mockFile2 = new MockFile(mockFile1, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockFile2.mkdirs();
      mockFile2.mkdirs();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-90), (ObjectCodec) null, dataOutputStream0, byteArray0, 1, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((-919.7F));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString("K9>XWiWyXwk~6fR");
      uTF8JsonGenerator0.writeArrayFieldStart("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0._verifyValueWrite("write a boolean value");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeFieldName("Ku]6r]G3-J):h^.");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((long) 121);
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("write a number");
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 130, false);
      uTF8JsonGenerator0.writeNumber(408.0);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 0, (int) (byte)0);
      uTF8JsonGenerator0.writeNumber((short) (byte)56);
      uTF8JsonGenerator0.writeString("`rmtR2C]aw&S%lL");
      SerializedString serializedString0 = new SerializedString("start an object");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      mockFile0.mkdirs();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)52, (ObjectCodec) null, mockPrintStream0, byteArray0, 2795, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("", "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-2350), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber(47);
      uTF8JsonGenerator0.writeNumber("write a boolean value");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(2015);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3254), (ObjectCodec) null, dataOutputStream0, byteArray0, 46, false);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("=U");
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((-1100.072));
      try { 
        uTF8JsonGenerator0._writePPFieldName("Q@i[zaQ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)52, false);
      uTF8JsonGenerator0.writeNumberField("=U", (BigDecimal) null);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      BigDecimal bigDecimal2 = new BigDecimal(1144);
      bigDecimal2.intValueExact();
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      bigDecimal3.multiply(bigDecimal1);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)110, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i");
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockFile1.mkdirs();
      mockFile1.mkdirs();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'{1*zOs`DZ[c");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 4000, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("write a number");
      char[] charArray0 = new char[0];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("=U/:Z*)2/write a number");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "=U");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 130, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2029, (ObjectCodec) null, (OutputStream) null);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("[:@P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(8000);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[7];
      mockFile0.delete();
      mockFile1.mkdirs();
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a number");
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-73);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1687), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3W+rWf+", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(3948);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-45);
      byteArray0[8] = (byte)7;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 677, (byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      mockPrintStream0.write(11);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 666, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      BigDecimal bigDecimal0 = new BigDecimal(544.40075668838);
      mockPrintStream0.println((float) 57343);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal1.intValueExact();
      bigDecimal0.multiply(bigDecimal1);
      uTF8JsonGenerator0.writeNumberField("UTF-16LE", bigDecimal1);
      try { 
        uTF8JsonGenerator0.writeFieldName("UTF-16LE");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2801));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 20, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("write a number");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 130, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("=U", 25, (int) (byte)52);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(2015);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3254), (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRaw('z');
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      uTF8JsonGenerator0.writeRaw((char[]) null, 1, (-2971));
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2801));
      BigInteger bigInteger0 = BigInteger.TEN;
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) mockFileInputStream0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(":Z*)2/");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("^?n5[+O)xU");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1);
      uTF8JsonGenerator0.writeNumber((-707L));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("dmme_>");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 604, 26, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0._verifyValueWrite(">k9yX3Laf$W0~s");
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("write a number");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 130, false);
      uTF8JsonGenerator0.writeNumber(408.0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-2350), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber(47);
      uTF8JsonGenerator0.writeNumber("write a number");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal1.shortValueExact();
      bigDecimal1.intValueExact();
      iOContext0.allocBase64Buffer();
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=h~=2+[Fj");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 71);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "=h~=2+[Fj", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 47, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      String string0 = "write a number";
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("write a number");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 108, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0._checkStdFeatureChanges(3707, 1890);
      uTF8JsonGenerator0.writeNumber(2058);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(":Z*)2/");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("^?n5^+O)u~");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1);
      uTF8JsonGenerator0.writeNumber((-707L));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("write a number");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 130, false);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 0, (int) (byte)0);
      uTF8JsonGenerator0.writeNumber((short) (byte)50);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("INT", 24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding1, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext3 = new IOContext(bufferRecycler0, "", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'Y';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext3, 56319, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 33, 1, true);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding1, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(512);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 3, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, (-1886), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeFieldName(", copyCount=");
      uTF8JsonGenerator1.writeNumber((long) 57343);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext2, 56319, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator2._rootValueSeparator;
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeNumber(13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i");
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockFile1.mkdirs();
      mockFile1.mkdirs();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'{1*zOs`DZ[c");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 4000, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("'{1*zOs`DZ[c", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars(":Z*)2/");
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      charArray0[1] = 'U';
      charArray0[2] = '#';
      charArray0[3] = 's';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 130, false);
      uTF8JsonGenerator0.writeNumber(408.0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte)52;
      byteArray1[3] = (byte)52;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)52;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (byte)0, 104);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2292, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeStartObject();
      mockPrintStream0.print(0.0F);
      try { 
        uTF8JsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("write a number");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 130, false);
      uTF8JsonGenerator0.writeNumber(408.0);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 0, (int) (byte)0);
      uTF8JsonGenerator0.writeNumber((short) (byte)56);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[7];
      mockFile0.delete();
      mockFile1.mkdirs();
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a number");
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, dataOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0._verifyPrettyValueWrite("=U", (byte)0);
      uTF8JsonGenerator0.writeNumber((-1286));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)107;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 40, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.close();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((String) null, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false, ' ', (-1583));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 75)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)52;
      MockPrintStream mockPrintStream0 = new MockPrintStream(":Z*)2/");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "0", objectArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, printStream0, byteArray1, 3956, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 54, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-45), false);
      uTF8JsonGenerator0._maximumNonEscapedChar = 25;
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -45
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString("K9>XWiWyXwk~6fR");
      uTF8JsonGenerator0.writeArrayFieldStart("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0._verifyValueWrite("write a boolean value");
      uTF8JsonGenerator0.writeFieldName("Ku]6r]G3-J):h^.");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((long) 120);
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = iOContext0.allocTokenBuffer(57343);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeRawValue(charArray0, 1265, 16);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal1.intValueExact();
      bigDecimal1.multiply(bigDecimal0);
      String string0 = "";
      BigDecimal bigDecimal2 = new BigDecimal(948.98);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream("=U");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("^?n5^+O)u~");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((-707L));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      mockFile1.setExecutable(false, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 16, false);
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(3);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 119, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 119
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding1, false);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 58, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(9223372036854775807L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(187);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-986), (ObjectCodec) null, dataOutputStream0);
      dataOutputStream0.writeInt((byte)0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 6);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("_U,Re;Qfi8|,+98");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-44);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      String string0 = "^?n5^+O)u~";
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 85);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      dataOutputStream0.writeChars("^?n5^+O)u~");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-44), true);
      uTF8JsonGenerator0._checkStdFeatureChanges(65535, 102);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1890);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -44
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(2015);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, dataOutputStream0);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeFieldName("wU(NQ'3yJJ");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(9223372036854775807L);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-961), (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator1.writeNumber(Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Object object0 = new Object();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, pipedOutputStream0);
      iOContext0.allocTokenBuffer(1);
      uTF8JsonGenerator0.writeString((String) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, (byte[]) null, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3295, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      String string0 = "write a boolean value";
      BigDecimal bigDecimal0 = new BigDecimal((-439.410913));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2801));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-7L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.JsonToken");
      uTF8JsonGenerator0._verifyValueWrite("Z~)5");
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = 'W';
      charArray0[2] = 'p';
      charArray0[3] = '\"';
      charArray0[4] = '\\';
      charArray0[5] = '+';
      charArray0[6] = '6';
      charArray0[7] = 'P';
      charArray0[8] = '_';
      uTF8JsonGenerator0.writeString(charArray0, 2, 2);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0._checkStdFeatureChanges(3, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString("K9>XWiWyXwk~6fR");
      uTF8JsonGenerator0._verifyValueWrite("write a boolean value");
      uTF8JsonGenerator0.writeFieldName("Ku]6r]G3-J):h^.");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((long) 38);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("_@_j!0", (-1800));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("^?n5^+O)u~");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeNumber((-1.0));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((-58.46692F));
      uTF8JsonGenerator0.writeRaw('Y');
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, (OutputStream) null, byteArray0, (-590), false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("write a number");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 108, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 125, (-1402));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("_U,Re;Qfi8|,+98");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)97;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 30, true);
      uTF8JsonGenerator0._checkStdFeatureChanges((byte)97, (byte)0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(7994);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("^?n5^+O)u~");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((-707L));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("_U,Re;Qfi8|,+98");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-44);
      iOContext0.allocBase64Buffer();
      CharsToNameCanonicalizer.createRoot();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChar(1000000000);
      dataOutputStream0.write(85);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(mockPrintStream0);
      dataOutputStream1.writeInt(2861);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-44);
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte) (-44);
      byteArray1[3] = (byte)114;
      byteArray1[4] = (byte) (-44);
      byteArray1[5] = (byte) (-44);
      byteArray1[6] = (byte) (-44);
      byteArray1[7] = (byte) (-44);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 1, 2);
      uTF8JsonGenerator0.writeFieldName("<;g/v");
      uTF8JsonGenerator0.writeNumber((long) (byte)114);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding1, false);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 58, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName(" b8tes (out of ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("_U,Re;Qfi8|,+98");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      iOContext0.allocBase64Buffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write((int) (byte) (-44));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 73, (ObjectCodec) null, objectOutputStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(mockPrintStream0);
      dataOutputStream1.writeInt(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-785), (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      byteArrayBuilder0.appendTwoBytes(63);
      uTF8JsonGenerator0.writeFieldName("_U,Re;Qfi8|,+98");
      uTF8JsonGenerator0.writeNumber((long) 63);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, dataOutputStream1, byteArray0, 17, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(2015);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3254), (ObjectCodec) null, dataOutputStream0, byteArray0, 46, false);
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '1';
      charArray0[2] = 'C';
      charArray0[3] = 'n';
      charArray0[4] = '1';
      charArray0[5] = '=';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=h~=2+[Fj");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 71;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 71);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "=h~=2+[Fj", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeChars("=h~=2+[Fj");
      mockFile1.setWritable(true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1509, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      uTF8JsonGenerator0._checkStdFeatureChanges(27, 13);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-97.59199192));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 125, (ObjectCodec) null, mockPrintStream0, byteArray1, 2284, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((-2100.357086850361));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("_U,Re;Qfi8|,+98");
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-44);
      byteArray0[0] = (byte) (-44);
      iOContext0.allocBase64Buffer();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-44);
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte) (-44);
      byteArray1[3] = (byte) (-44);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 818, (ObjectCodec) null, mockPrintStream0, byteArray1, 44, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.JsonToken");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(2270.0);
      uTF8JsonGenerator0.writeNumber((short) (-1265));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.JsonToken");
      uTF8JsonGenerator0._verifyValueWrite("Z~)5");
      uTF8JsonGenerator0.writeFieldName("write a boolean value");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((-384L));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-55);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      SerializedString serializedString0 = new SerializedString("=U");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.JsonToken");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeFieldName("write a boolean value");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((-384L));
      uTF8JsonGenerator0.writeNumber((double) 3);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeInt(2019);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-736), (ObjectCodec) null, mockPrintStream0, byteArray0, 56, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("_U,Re;Qfi8|,+98");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      iOContext0.allocBase64Buffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-490), (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("_U,Re;Qfi8|,+98");
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 33, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.intValueExact();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)107;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.writeInt(2);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byteArrayBuilder0.appendTwoBytes((-219));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, (byte)107, false);
      dataOutputStream0.writeUTF("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      String string0 = " bytes (out of ";
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)107;
      byteArray1[1] = (byte)56;
      byteArray1[2] = (byte)107;
      byteArray1[3] = (byte)56;
      byteArray1[4] = (byte)107;
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (-2140), 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal1.intValueExact();
      iOContext0.allocBase64Buffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)107;
      byteArray0[4] = (byte)75;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      mockPrintStream0.write(11);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 666, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      BigDecimal bigDecimal0 = new BigDecimal(544.40075668838);
      mockPrintStream0.println(0.0F);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal1.intValueExact();
      bigDecimal0.multiply(bigDecimal1);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("UTF-16LE", bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = ":Z*)2/";
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2056, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(":Z*)2/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("^?n5^+O)u~");
      mockFile0.setWritable(true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0._checkStdFeatureChanges(1890, 1890);
      uTF8JsonGenerator0.writeNumber(0.0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, (-1000));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-58.46692F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "=U";
      String string1 = ":Z*)2/";
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write((int) (byte)0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(mockPrintStream0);
      dataOutputStream1.writeInt(2);
      uTF8JsonGenerator0.writeBinary(byteArray0, 101, (int) (byte)0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-2367), (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(187);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-986), (ObjectCodec) null, dataOutputStream0);
      dataOutputStream0.writeInt((byte)0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 6);
      uTF8JsonGenerator0.writeFieldName(":Z*)2/");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 485, (ObjectCodec) null, dataOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)107;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.writeInt(2);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byteArrayBuilder0.appendTwoBytes((-219));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, (byte)107, false);
      try { 
        uTF8JsonGenerator0.writeFieldName(" bytes (out of ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeChar(3);
      dataOutputStream0.write(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0);
      dataOutputStream0.writeInt(4660);
      uTF8JsonGenerator0.writeFieldName(":Z*)2/");
      uTF8JsonGenerator0.writeNumber(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 1646);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 9, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      doReturn(true).when(iOContext0).isResourceManaged();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 691, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      SerializedString serializedString0 = new SerializedString("CT+OFmc");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.close();
      char char0 = 'R';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("UTF-16LE", "UTF-16LE", true, 's', 98);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 8)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("*6>+LOq*", "write a boolean value");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write(3);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeArrayFieldStart("+(:LZ$f9T");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(3001L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "i]";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "i]", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.allocBase64Buffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 46, 127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.write((int) (byte)0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(mockPrintStream0);
      dataOutputStream1.writeInt(2);
      uTF8JsonGenerator0.writeBinary(byteArray0, 101, (int) (byte)0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-2367), (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/", "=U");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 856);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeInt((-860));
      dataOutputStream0.writeChar((-3534));
      dataOutputStream0.write(2015);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 370, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = '=';
      charArray0[3] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'C';
      charArray0[7] = '1';
      charArray0[8] = '=';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 55296, 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      boolean boolean0 = true;
      ObjectCodec objectCodec0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)107;
      byte byte0 = (byte)75;
      byteArray0[4] = (byte)75;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-180), (ObjectCodec) null, mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.writeInt(117);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 2, (int) (byte)107);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("^?n5^+O)u~");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0._checkStdFeatureChanges(1890, 1890);
      uTF8JsonGenerator0.writeNumber((int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.JsonToken");
      uTF8JsonGenerator0.writeFieldName("write a boolean value");
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFile1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 4396, (ObjectCodec) null, mockPrintStream0, byteArray0, 781, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 53, 8000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 114);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      IOContext iOContext0 = new IOContext(bufferRecycler2, pipedInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 192, false);
      SerializedString serializedString0 = new SerializedString("=U");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = 'j';
      charArray0[4] = 'x';
      charArray0[5] = '%';
      charArray0[6] = '3';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler1, pipedInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeNumber(0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeChar(3);
      dataOutputStream0.write(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0);
      dataOutputStream0.writeInt(4660);
      byteArrayBuilder0.appendTwoBytes(1);
      uTF8JsonGenerator0.writeFieldName(":Z*)2/");
      uTF8JsonGenerator0.writeNumber(0L);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/", "=U");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 856);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      int int0 = (-3534);
      dataOutputStream0.writeChar((-3534));
      dataOutputStream0.write(2015);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0);
      dataOutputStream0.writeInt(108);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 107, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 107
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 114);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      IOContext iOContext0 = new IOContext(bufferRecycler2, pipedInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 192, false);
      SerializedString serializedString0 = new SerializedString("=U");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2778));
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 73, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-128);
      String string0 = "UTF-16LE";
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-128), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      SerializedString serializedString0 = new SerializedString("UTF-16LE");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.getOutputTarget();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(125);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 22, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeStartObject();
      try { 
        uTF8JsonGenerator1.writeString((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1769), (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeArrayFieldStart("=U");
      uTF8JsonGenerator0.close();
      int int0 = 8;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 5, (ObjectCodec) null, mockPrintStream0, byteArray0, 914, true);
      mockPrintStream0.println("=U");
      uTF8JsonGenerator1.writeArrayFieldStart("=U");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "=U";
      String string1 = ":Z*)2/";
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("write a number");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 90, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-2350), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(47);
      iOContext1.constructTextBuffer();
      uTF8JsonGenerator0.writeNumber("write a boolean value");
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      uTF8JsonGenerator0.close();
      int int0 = 1283;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1283, (ObjectCodec) null, (OutputStream) null, byteArray0, 52, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      float float0 = 1601.5214F;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = ":Z*)2/";
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeByte(2);
      dataOutputStream0.writeChar(3);
      dataOutputStream0.write(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0);
      dataOutputStream0.writeInt(4660);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 128, 56319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      doReturn(false).when(iOContext0).isResourceManaged();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 691, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      SerializedString serializedString0 = new SerializedString("CT+OFmc");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.close();
      char char0 = 'R';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("UTF-16LE", "UTF-16LE", true, 's', 98);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 8)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-2350), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(47);
      uTF8JsonGenerator0.writeNumber("write a boolean value");
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)75;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)56, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '=';
      charArray0[2] = '1';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 0, 127);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString("Current context not an object but ");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = 'j';
      charArray0[4] = 'x';
      charArray0[5] = '%';
      charArray0[6] = '3';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler1, pipedInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString((String) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, (byte[]) null, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = ":Z*)2/";
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeChar(3);
      dataOutputStream0.write(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0);
      dataOutputStream0.writeInt(4660);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeChar(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-412), (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = '<';
      charArray0[2] = 'Q';
      uTF8JsonGenerator0.writeString(charArray0, (-2634), (-2179));
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("=U");
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[2] = '#';
      charArray0[3] = '#';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 316, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 7992, (ObjectCodec) null, dataOutputStream0, byteArray0, 828, false);
      uTF8JsonGenerator1.writeNumber((double) 828);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeRaw((SerializableString) serializedString0);
      serializedString0.appendUnquotedUTF8(byteArray0, 828);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      mockPrintStream0.write(11);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 666, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      BigDecimal bigDecimal0 = new BigDecimal(544.40075668838);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal1.intValueExact();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      bigDecimal0.multiply(bigDecimal1);
      try { 
        uTF8JsonGenerator0.writeNumberField("UTF-16LE", bigDecimal1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ":Z*)2/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeArrayFieldStart(":Z*)2/");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator1.writeRaw('f');
      SerializedString serializedString1 = new SerializedString("R~]lgB^V&7q@ImFhd(w");
      SerializedString serializedString2 = new SerializedString("R~]lgB^V&7q@ImFhd(w");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", "=U");
      MockFile mockFile1 = new MockFile(mockFile0, "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("=U");
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'U';
      charArray0[2] = '#';
      charArray0[3] = 's';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 130, false);
      uTF8JsonGenerator0.writeNumber((double) 3);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.appendUnquotedUTF8(byteArray0, 30);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 42, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeRaw('A');
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      boolean boolean0 = true;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Pr` E,+s$%ckU,1tQw", ")", true, 'A', 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 1)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = ":Z*)2/";
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeChar(3);
      dataOutputStream0.write(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0);
      dataOutputStream0.writeInt(4660);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 128, 56319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)75;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 108, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4879), (ObjectCodec) null, mockPrintStream0, byteArray0, 110, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("write a number");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, ") not VALUE_STRING, can not access as binary");
      MockPrintStream mockPrintStream0 = new MockPrintStream(":Z*)2/");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)0;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("^?n5[+O)xU");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1);
      uTF8JsonGenerator0.writeNumber((-707L));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      serializedString1.appendUnquotedUTF8(byteArray1, (byte)48);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.allocBase64Buffer();
      SerializedString serializedString0 = new SerializedString("e");
      uTF8JsonGenerator0._rootValueSeparator = (SerializableString) serializedString0;
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.JsonToken");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      iOContext0.allocReadIOBuffer(41);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.JsonToken");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((-384L));
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      BigDecimal bigDecimal0 = new BigDecimal((double) 2);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal1.intValueExact();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4226, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      bigDecimal1.multiply(bigDecimal0);
      try { 
        uTF8JsonGenerator0.writeFieldName("=U");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      mockPrintStream0.write(11);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 691, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      BigDecimal bigDecimal0 = new BigDecimal(544.40075668838);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal1.intValueExact();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      bigDecimal0.multiply(bigDecimal1);
      try { 
        uTF8JsonGenerator0.writeNumberField("UTF-16LE", bigDecimal1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.write(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0);
      dataOutputStream0.writeInt(4660);
      uTF8JsonGenerator0.writeObjectField(":Z*)2/", (Object) null);
      byteArrayBuilder0.appendTwoBytes(1);
      try { 
        uTF8JsonGenerator0.writeFieldName(":Z*)2/");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("_U,Re;Qfi8|,+98");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)3, (ObjectCodec) null, mockPrintStream0, byteArray0, 229, false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = 'j';
      charArray0[4] = 'x';
      charArray0[5] = '%';
      charArray0[6] = '3';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler1, pipedInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString((String) null);
      try { 
        uTF8JsonGenerator0._outputSurrogates(1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x1, second 0x1
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-128);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocConcatBuffer();
      doReturn(byteArray0).when(iOContext0).allocWriteEncodingBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16LE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 691, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getCurrentValue();
      SerializedString serializedString0 = new SerializedString("C+OnFmBc");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.getOutputTarget();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((byte)34);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, serializedString1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (byte)14, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator1.writeBoolean(true);
      try { 
        uTF8JsonGenerator1._outputSurrogates(57, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x39, second 0x1
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeBoolean(true);
      try { 
        uTF8JsonGenerator0._outputSurrogates(2, 55);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x2, second 0x37
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 17, true);
      uTF8JsonGenerator0.writeNumber(1008.1967883212011);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(9);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeChar(3);
      dataOutputStream0.write(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 42, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('A');
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Pr` E,+s$%ckU,1tQw", ")", true, 'A', 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 1)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-32);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1261, (ObjectCodec) null, pipedOutputStream0, byteArray0, 12, false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'x';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = 'm';
      charArray0[5] = 'u';
      charArray0[6] = 'E';
      charArray0[7] = 'E';
      charArray0[8] = 'E';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, (-1079));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile("=U", "=U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-44);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte) (-44), (-514));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2778));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('[');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)15, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'u';
      charArray0[2] = 'E';
      charArray0[3] = 'j';
      charArray0[4] = 'x';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2137.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("_U,Re;Qfi8|,+98");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)3, (ObjectCodec) null, mockPrintStream0, byteArray0, 229, false);
      uTF8JsonGenerator0.writeNumber((double) (byte)97);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("^?n5^+O)u~");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0._checkStdFeatureChanges(1890, 1890);
      uTF8JsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeChar(3);
      dataOutputStream0.write(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 128, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeChars("^?n5^+O)u~");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'u';
      charArray0[2] = 'E';
      charArray0[3] = 'j';
      charArray0[6] = '3';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-513), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = 'm';
      charArray0[4] = ')';
      charArray0[5] = 'x';
      charArray0[6] = 'm';
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("3ju{tD");
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("_U,Re;Qfi8|,+98");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-77);
      byteArray0[8] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-44), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(706.34473435626);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -44
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'u';
      charArray0[2] = 'E';
      charArray0[3] = 'j';
      charArray0[4] = 'x';
      charArray0[5] = '%';
      charArray0[6] = '3';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "|*V", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, (-558), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('3');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -558
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeChars(" entries");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2778));
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 97, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      String string0 = "";
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal1.intValueExact();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      bigDecimal1.multiply(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)26;
      iOContext0.allocTokenBuffer();
      byteArray0[4] = (byte) (-64);
      byte byte0 = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1), true);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      String string0 = "write a number";
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-44);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 117, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      String string0 = "";
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal1.intValueExact();
      bigDecimal0.multiply(bigDecimal1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("b%m)].e=dP^w`PK0", bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'X';
      charArray0[2] = 'a';
      charArray0[3] = 'D';
      charArray0[4] = 'c';
      charArray0[5] = ')';
      charArray0[6] = '4';
      charArray0[7] = 'H';
      charArray0[8] = '%';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-241), 0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 84);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 97, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-99);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-99), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocWriteEncodingBuffer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jy");
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1), true);
      uTF8JsonGenerator0._verifyValueWrite("Kd<6gS(%");
      assertEquals((-1), uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2778));
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeChars("Illegal character (");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1472), (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal1.intValueExact();
      bigDecimal0.multiply(bigDecimal1);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-419), (ObjectCodec) null, (OutputStream) null, byteArray0, 44, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 32767, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'u';
      charArray0[2] = 'E';
      charArray0[3] = 'j';
      charArray0[4] = 'x';
      charArray0[5] = '%';
      charArray0[6] = '3';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '/';
      charArray0[2] = '9';
      charArray0[3] = 'j';
      charArray0[4] = 'x';
      charArray0[5] = '%';
      charArray0[6] = '3';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler1, pipedInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString((String) null);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("=U", ":Z*)2/");
      MockFile mockFile1 = new MockFile(mockFile0, "write a number");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-44);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte) (-44), (-514));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
