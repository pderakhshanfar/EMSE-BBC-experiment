/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 15:56:48 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7980, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 7980, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (byte)110);
      uTF8JsonGenerator0.writeObjectFieldStart("-x!W");
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      iOContext0.allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0._rootValueSeparator = (SerializableString) serializedString0;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 3, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("FXz+G]kS.mco");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 78, (ObjectCodec) null, mockPrintStream0, byteArray0, 78, true);
      uTF8JsonGenerator0.writeNumber("FXz+G]kS.mco");
      uTF8JsonGenerator0.writeString("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((String) null);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("+");
      mockPrintStream0.println(false);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2132), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber("+");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("+");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7980, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 7980, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("+");
      mockPrintStream0.println(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(895.10767873);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeArrayFieldStart("");
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[2] = '1';
      charArray0[4] = 't';
      charArray0[5] = 'J';
      charArray0[7] = 'U';
      uTF8JsonGenerator0._charBuffer = charArray0;
      SerializedString serializedString0 = new SerializedString("");
      iOContext1.allocReadIOBuffer((int) (byte)0);
      uTF8JsonGenerator0.writeNumber(29);
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("No ObjectCodec defined");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 95, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("~xNB");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 102);
      byteArrayBuilder0.release();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("~xNB", (double) 56319);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("xB}[pi_?'zxBI2");
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("|");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber("Invalid custom escape definitiows; custom escapeSnot found for character code 0x");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-31);
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte) (-64);
      byteArray1[3] = (byte) (-65);
      byteArray1[4] = (byte) (-56);
      byteArray1[5] = (byte)57;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte) (-1);
      uTF8JsonGenerator0.writeBinary(byteArray1);
      uTF8JsonGenerator0.writeNumber(1);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("xB}[pi_?'zxBI2");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-3655));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[2] = (byte)70;
      MockPrintStream mockPrintStream0 = new MockPrintStream(";O");
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3771, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString("d\"");
      uTF8JsonGenerator0.writeString(";O");
      uTF8JsonGenerator0.writeNumber(53);
      uTF8JsonGenerator0.writeNumber((short) (byte)70);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeArrayFieldStart("");
      char[] charArray0 = new char[10];
      charArray0[0] = '6';
      charArray0[2] = '1';
      charArray0[4] = 'z';
      charArray0[5] = 'J';
      charArray0[7] = 'z';
      charArray0[8] = '$';
      uTF8JsonGenerator0._charBuffer = charArray0;
      uTF8JsonGenerator0.writeNumber((-1L));
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeNumber(29);
      uTF8JsonGenerator0.writeNumber(";A");
      uTF8JsonGenerator0.writeNumberField("", (double) 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      MockFile mockFile0 = new MockFile((File) null, "10");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[4];
      mockFile0.toURL();
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = '2';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 15, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-3658));
      byte byte0 = (byte)70;
      MockPrintStream mockPrintStream0 = new MockPrintStream(";O");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4112, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, false);
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyValueWrite(";O");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 95, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("~xNB");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 102);
      byteArrayBuilder0.release();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("~xNB");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      String string0 = "h\"\\uHz]gjEU'$$tY:";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      iOContext0.allocWriteEncodingBuffer(78);
      iOContext0.allocTokenBuffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-949), (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber(string0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumberField("3^3y]6' n^X@", (double) 0);
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      byteArrayBuilder0.write(byteArray0, 102, 101);
      int int0 = 7980;
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 3);
      boolean boolean1 = false;
      byteArrayBuilder0.append(3);
      iOContext0.allocWriteEncodingBuffer(118);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(240);
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 7980, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeArrayFieldStart("");
      char[] charArray0 = new char[10];
      charArray0[0] = '6';
      charArray0[2] = '1';
      charArray0[3] = '$';
      charArray0[4] = 'z';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byteArrayBuilder0.release();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 867, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      byteArrayBuilder0.write(byteArray0, 102, 101);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 3);
      byteArrayBuilder0.append(3);
      iOContext0.allocWriteEncodingBuffer(118);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(240);
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 7980, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(", although was supposed to have one");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      String string0 = ", although was supposed to have one";
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      mockPrintStream0.println();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, mockPrintStream0, byteArray0, 114, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber(13);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1942, 114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2047);
      byte[] byteArray0 = byteArrayBuilder0.resetAndGetFirstSegment();
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, byteArrayBuilder1, byteArray0, 3, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".M8<$hGN");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator1 = jsonGenerator0.disable(jsonGenerator_Feature0);
      byteArrayBuilder0.release();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeFieldName(".M8<$hGN");
      BigDecimal bigDecimal0 = new BigDecimal((double) 56320);
      jsonGenerator1.writeUTF8String(byteArray0, 21, 44);
      jsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeRaw(charArray0, 1208, 2594);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      String string0 = "h\"\\uHz]gjEU'$$tY:";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(78);
      iOContext0.allocTokenBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, (-2672));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1660), (ObjectCodec) null, mockPrintStream0, byteArray0, 101, true);
      byteArrayBuilder0.append((-949));
      uTF8JsonGenerator0.writeNumberField(string0, 1052.59901726);
      try { 
        uTF8JsonGenerator0.writeFieldName(string0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2047);
      byte[] byteArray0 = byteArrayBuilder0.resetAndGetFirstSegment();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, byteArrayBuilder1, byteArray0, 3, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".M8<$hGN");
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString(".M8<$hGN");
      uTF8JsonGenerator1.writeNumber((float) 0);
      uTF8JsonGenerator1._writePPFieldName(".M8<$hGN");
      try { 
        uTF8JsonGenerator1.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(";O");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      mockPrintStream0.println(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-98);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 684, (ObjectCodec) null, mockPrintStream0, byteArray0, 2605, false);
      uTF8JsonGenerator0.writeNumber("start an array");
      uTF8JsonGenerator0.writeNumber(0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)2812);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2354, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.close();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jsonGenerator0.getOutputBuffered();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("^\"&33z9M3IU68R=[F", "4", false, 'Z', 3113);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 1)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2047);
      byte[] byteArray0 = byteArrayBuilder0.resetAndGetFirstSegment();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, byteArrayBuilder1, byteArray0, 3, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".M8<$hGN");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator0.disable(jsonGenerator_Feature0);
      byteArrayBuilder0.release();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeFieldName(".M8<$hGN");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println(false);
      mockPrintStream0.println(false);
      int int0 = 101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockPrintStream0, byteArray0, (-3856), false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-66), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("~xNB");
      String string0 = "q/TuO}M8";
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("q/TuO}M8", (double) 3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(9);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      byteArrayOutputStream0.write(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 8, 1873);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2354, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("3:ez/kx=wZ%(#%.");
      uTF8JsonGenerator0._verifyValueWrite("O)q+_@$9?<");
      try { 
        jsonGenerator0.writeString("7<Z[)TjK");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeArrayFieldStart("");
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[2] = '1';
      charArray0[3] = '$';
      charArray0[4] = 'z';
      charArray0[5] = 'J';
      charArray0[7] = 'U';
      charArray0[8] = '$';
      uTF8JsonGenerator0._charBuffer = charArray0;
      uTF8JsonGenerator0.writeNumber((-1L));
      SerializedString serializedString0 = new SerializedString("");
      iOContext1.allocReadIOBuffer((int) (byte)0);
      uTF8JsonGenerator0.writeNumber(29);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("", (-4504.928152676052));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byte[] byteArray0 = new byte[5];
      byteArrayBuilder0.append(2);
      System.setCurrentTimeMillis(3466L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(9);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw('\u0087');
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputBuffered();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", true, '\u0087', 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      iOContext0.allocTokenBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 91, true);
      uTF8JsonGenerator0.writeNumberField("P", Double.NaN);
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.ONE;
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      MathContext mathContext0 = new MathContext(2, roundingMode0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, mathContext0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "10";
      MockFile mockFile0 = new MockFile("10");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = new SerializedString("10");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 2 bytes (out of 2)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      String string0 = "~xNB";
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber("~xNB");
      uTF8JsonGenerator0.writeStartArray((-1768));
      iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeNumber(3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      MockFile mockFile0 = new MockFile((File) null, "10");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      SerializedString serializedString0 = new SerializedString("10");
      char[] charArray0 = new char[4];
      int int0 = 16;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 70, false);
      try { 
        uTF8JsonGenerator0.writeNumber(32768);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer(3);
      iOContext0.allocTokenBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 91, true);
      uTF8JsonGenerator0.writeNumberField("P", Double.NaN);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber("~xNB");
      uTF8JsonGenerator0.writeNumber((short)11);
      char[] charArray0 = new char[1];
      uTF8JsonGenerator0.writeString(charArray0, 118, 0);
      uTF8JsonGenerator0._verifyValueWrite("~xNB");
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.finishCurrentSegment();
      byteArray0[1] = (byte)0;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream(";O");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2212, false);
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = '!';
      charArray0[4] = '!';
      uTF8JsonGenerator0.writeNumber((short)48);
      charArray0[5] = 'T';
      charArray0[6] = '!';
      charArray0[7] = '!';
      uTF8JsonGenerator0.writeString(charArray0, 3, (-5264));
      uTF8JsonGenerator0._verifyValueWrite("FIELD_NAME");
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("5>");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      uTF8JsonGenerator0.writeString(charArray0, (-2501), (int) (byte)0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      String string0 = "2";
      MockPrintStream mockPrintStream0 = new MockPrintStream("2");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3761, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("2");
      uTF8JsonGenerator0.writeNumber((-1551L));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeString("2");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((int) (byte)48);
      uTF8JsonGenerator0.getOutputBuffered();
      String string1 = "_8#IaLDt9";
      char char0 = '4';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("2", "_8#IaLDt9", false, '4', (-5080));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 9)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = iOContext0.allocTokenBuffer(9);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString(charArray0, 16, 3);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2354, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRaw("3:ez/kx=wZ%(#%.");
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 55296, 63);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1337), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 98, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 99, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("PL_rvDq");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      mockPrintStream0.println(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)70;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 116, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber("PL_rvDq");
      uTF8JsonGenerator0.writeNumber((long) (byte)51);
      uTF8JsonGenerator0.writeString("PL_rvDq");
      String string0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f|7$H)wQ2\"^y48B,y");
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = '!';
      charArray0[2] = 'M';
      charArray0[3] = '%';
      charArray0[4] = '^';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) charBuffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-111);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3991, (ObjectCodec) null, printStream0, byteArray0, (byte) (-111), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -111
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocBase64Buffer();
      iOContext1.allocTokenBuffer(1);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2267);
      int int0 = 4124;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 43, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("", (double) 0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber("~xNB");
      uTF8JsonGenerator0.writeStartArray((-1768));
      iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString((String) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-66);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-2), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, (int) (byte)99, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 95, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("~xNB");
      String string0 = "q/TuO}M8";
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("q/TuO}M8", (double) 3);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("PL_rvDq");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      mockPrintStream0.println(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber("PL_rvDq");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      int int0 = 2354;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2354, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      try { 
        jsonGenerator0.writeString("O)q+_@$9?<");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber("~xNB");
      uTF8JsonGenerator0.writeStartArray((-1768));
      uTF8JsonGenerator0.writeNumber(1491.9F);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte byte0 = (byte)127;
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      mockPrintStream0.println();
      mockPrintStream0.println(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1332, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 4000);
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = '\'';
      charArray0[2] = 'l';
      charArray0[3] = 'P';
      charArray0[4] = 'p';
      charArray0[5] = 'J';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 3586, 4000);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "P";
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      byteArrayBuilder0.release();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char char0 = 'h';
      uTF8JsonGenerator0.writeRaw('h');
      uTF8JsonGenerator0.writeNumber(0.0F);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byteArrayBuilder0.release();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      int int0 = (-768);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-768), (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2047);
      byte[] byteArray0 = byteArrayBuilder0.resetAndGetFirstSegment();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, byteArrayBuilder1, byteArray0, 3, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      byteArrayBuilder0.release();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString("OHQ");
      try { 
        uTF8JsonGenerator0._writePPFieldName("Can not write a field name, expecting a value");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-3658));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      MockPrintStream mockPrintStream0 = new MockPrintStream(";O");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3761, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(";O");
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeString("7<Z[)TjK");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2354, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRaw("3:ez/kx=wZ%(#%.");
      try { 
        jsonGenerator0.writeNumber(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArrayBuilder0.write(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char char0 = '2';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 32, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 2766, false);
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber("~xNB");
      uTF8JsonGenerator0.writeStartArray((-1768));
      uTF8JsonGenerator0.writeRaw('l');
      uTF8JsonGenerator0.writeNumber(1491.9F);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = new SerializedString("~xNB");
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 1, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 961);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 1006);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 18);
      byteArrayBuilder0.write(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 5013, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(")");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1813);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, byteArrayBuilder0);
      String string0 = "com.fasterxml.jackson.core.ObjectCodec";
      uTF8JsonGenerator0.writeArrayFieldStart("com.fasterxml.jackson.core.ObjectCodec");
      BigDecimal bigDecimal0 = new BigDecimal((-1789L));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      try { 
        uTF8JsonGenerator0._outputSurrogates(60, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x3c, second 0x0
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2047);
      byte[] byteArray0 = byteArrayBuilder0.resetAndGetFirstSegment();
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, byteArrayBuilder1, byteArray0, 3, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".M8<$hGN");
      byteArrayBuilder0.release();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 363);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-312), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -312
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2047);
      byte[] byteArray0 = byteArrayBuilder0.resetAndGetFirstSegment();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, byteArrayBuilder1, byteArray0, 3, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".M8<$hGN");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byteArrayBuilder0.release();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArrayBuilder0.write(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber(539L);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      mockPrintStream0.println();
      mockPrintStream0.println(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1332, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber(6);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byteArrayBuilder0.toByteArray();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      ObjectCodec objectCodec0 = null;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1380), (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("Current context not an ARRAY but ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.finishCurrentSegment();
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.write(0);
      byteArray0[2] = (byte)70;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)127;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte)70;
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = new SerializedString(")");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)70, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.append(0);
      byteArray0[2] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding1, false);
      iOContext2.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = new SerializedString(")");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-2733));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)70;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 890, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeArrayFieldStart("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer");
      uTF8JsonGenerator0.writeNumber(1L);
      SerializedString serializedString0 = new SerializedString(">");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((-1111));
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber((-830));
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      iOContext0.allocWriteEncodingBuffer((-1656));
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 91, true);
      uTF8JsonGenerator0.writeNumberField("P", Double.NaN);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.io.CharacterEscapes");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7980, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 7980, true);
      uTF8JsonGenerator0.writeNumberField("write a binary value", (-23.13776826));
      uTF8JsonGenerator0.writeRaw(charArray0, 7980, 0);
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("2");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3761, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("2");
      uTF8JsonGenerator0.writeNumber((-1551L));
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeString("2");
      uTF8JsonGenerator0.writeObject("': expected '");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((short) (byte)49);
      uTF8JsonGenerator0.writeNumber((int) (byte)57);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte)70;
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = new SerializedString(")");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)70, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeNumber((float) (byte)70);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeNumber((short)1615);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      mockPrintStream0.println();
      mockPrintStream0.println(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1332, false);
      int int0 = 480;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 480);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      byteArrayBuilder0.append((-259));
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeArrayFieldStart("");
      uTF8JsonGenerator0.writeNumber((-1L));
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer((int) (byte)0);
      uTF8JsonGenerator0.writeNumber(29);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber(55296);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 18, 56319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      MockFile mockFile0 = new MockFile((File) null, "10");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = new SerializedString("10");
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = 'e';
      charArray0[2] = 'k';
      charArray0[3] = '2';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)51;
      byte byte0 = (byte)59;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)53;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (byte)16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2354, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNumberField("O)q+_@o9?<", 3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRaw("3:ez/kx=wZ%(#%.");
      try { 
        uTF8JsonGenerator0._verifyValueWrite("O)q+_@o9?<");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not O)q+_@o9?<, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      MockPrintStream mockPrintStream0 = new MockPrintStream("2");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      byteArrayBuilder0.toByteArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 110, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(")");
      char[] charArray0 = new char[15];
      charArray0[0] = '!';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      charArray0[1] = 'y';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, (-1823));
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1944, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeArrayFieldStart("");
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1944, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-1644), false);
      uTF8JsonGenerator1.flush();
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeString("9uC^<QO_W^");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1644
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4112, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1118, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 4112, 2);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 892);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArrayBuilder0.setCurrentSegmentLength(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2354, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArrayBuilder0.append(2);
      uTF8JsonGenerator0.writeStartObject();
      String string0 = "O)q+_@o9?<";
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRaw("3:ez/kx=wZ%(#%.");
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 16, 110);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      byte byte0 = (byte)70;
      byteArrayBuilder0.write(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("amg");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1508, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (byte)127, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField("", (double) (byte)127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      MockPrintStream mockPrintStream0 = new MockPrintStream("2");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3761, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("2");
      uTF8JsonGenerator0.writeNumber((-1551L));
      uTF8JsonGenerator0.writeRaw(' ');
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeString("2");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((int) (byte)48);
      uTF8JsonGenerator0.writeFieldName("2");
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      MockPrintStream mockPrintStream0 = new MockPrintStream("2");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3761, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("2");
      uTF8JsonGenerator0.writeNumber((-1551L));
      uTF8JsonGenerator0.writeRaw(' ');
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeString("2");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (-61));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeArrayFieldStart("");
      uTF8JsonGenerator0.writeNumber((-1L));
      SerializedString serializedString0 = new SerializedString(".~4x~J>");
      uTF8JsonGenerator0.close();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      int int0 = 892;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 892);
      byteArrayBuilder0.setCurrentSegmentLength(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2354, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("-9");
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4830, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeArrayFieldStart("Rdahff/M9EkH)`&YzL$");
      uTF8JsonGenerator0.writeNumber(439L);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRaw("FLOAT");
      uTF8JsonGenerator0._verifyValueWrite("US-ASCII");
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2047);
      byte[] byteArray0 = byteArrayBuilder0.resetAndGetFirstSegment();
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, byteArrayBuilder1, byteArray0, 3, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".M8<$hGN");
      byteArrayBuilder0.release();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".M8<$hGN");
      uTF8JsonGenerator0.writeString(charArray0, (-1823), 0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNumber(63);
      uTF8JsonGenerator0.writeString(charArray0, 63, 2671);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(")");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      String string0 = "M_28/Y\"noNU<";
      SerializedString serializedString2 = new SerializedString("M_28/Y\"noNU<");
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)70;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte)127;
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)127, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 1508, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField(")", (double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(52);
      byteArrayBuilder0.append(16);
      byteArrayBuilder0.write(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1100), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(1560L);
      uTF8JsonGenerator0.writeRaw('r');
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(")");
      char[] charArray0 = new char[15];
      charArray0[0] = '!';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      charArray0[1] = 'y';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, (-1823));
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("I*cKTHguFVV2S[i");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4112, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1118, true);
      uTF8JsonGenerator0.writeNumberField("write a binary value", (-23.13776826));
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw(charArray0, 4112, 0);
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(9);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber(63);
      int int0 = 3347;
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "P");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 9, (ObjectCodec) null, stringWriter1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3993), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeArrayFieldStart("Rdahff/M9EkH)`&YzL$");
      uTF8JsonGenerator0.writeNumber((long) 0);
      SerializedString serializedString0 = new SerializedString("Rdahff/M9EkH)`&YzL$");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      iOContext2.allocReadIOBuffer(57343);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4830, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeArrayFieldStart("Rdahff/M9EkH)`&YzL$");
      uTF8JsonGenerator0.writeNumber(439L);
      SerializedString serializedString0 = new SerializedString(" slots is now full (all ");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      byte[] byteArray1 = iOContext1.allocReadIOBuffer(0);
      uTF8JsonGenerator0.writeNumber(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "/J";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "/J", false);
      ObjectCodec objectCodec0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.append(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("OLD.3_4S:l5./");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      System.setCurrentTimeMillis(0L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-4144), (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      MockFile mockFile0 = new MockFile((File) null, "10");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'e';
      charArray0[2] = 'k';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      charArray0[3] = 'B';
      charArray0[4] = 'd';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
      uTF8JsonGenerator0.writeRaw('6');
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 382, (-2084));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 91, true);
      uTF8JsonGenerator0.writeNumberField("P", Double.NaN);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.io.CharacterEscapes");
      uTF8JsonGenerator0.writeRaw(charArray0, 3, 91);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(114);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TWAb>W");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4112, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1118, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      byteArrayBuilder0.release();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeString("P");
      try { 
        uTF8JsonGenerator0._writePPFieldName("J),i=RLa_?pN8U");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      int int0 = 1118;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)26;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1349, true);
      iOContext1.constructTextBuffer();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      byteArrayBuilder0.release();
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'Z';
      charArray0[2] = '\\';
      charArray0[3] = '7';
      uTF8JsonGenerator0.writeRaw(charArray0, (-2668), 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      SerializedString serializedString0 = new SerializedString("P");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P");
      byteArrayBuilder0.release();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = new SerializedString("P");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3995, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short)653);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1570), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 125, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 127, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      uTF8JsonGenerator1.enable(jsonGenerator_Feature0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      MockPrintStream mockPrintStream0 = new MockPrintStream("2");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3761, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("2");
      uTF8JsonGenerator0.writeNumber((-1551L));
      uTF8JsonGenerator0.writeRaw(' ');
      SerializedString serializedString0 = new SerializedString("2");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "P";
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      int int0 = 0;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4112, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1118, true);
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 12);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeArrayFieldStart("");
      uTF8JsonGenerator0.writeNumber((-1L));
      SerializedString serializedString0 = new SerializedString(".~4x~J>");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeNumber(23);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 18, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw('N');
      byteArrayBuilder0.completeAndCoalesce(0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(890.05F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(%a}Fg%");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      byteArrayBuilder0.write(88);
      MockPrintStream mockPrintStream0 = new MockPrintStream(".");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      SerializedString serializedString0 = new SerializedString(".");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 88, true);
      try { 
        uTF8JsonGenerator0.writeNumber("(%a}Fg%");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2982);
      byteArrayBuilder0.write(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(".");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      SerializedString serializedString0 = new SerializedString(")");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1899, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1491), false);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2047);
      byteArrayBuilder0.write(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("~xNB");
      FileSystemHandling.createFolder(evoSuiteFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2703), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("~xNB");
      uTF8JsonGenerator0.writeStartArray(0);
      uTF8JsonGenerator0.writeRaw('w');
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) 2047);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(9);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber(63);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3347);
      uTF8JsonGenerator0.writeRaw("C&0N(zeb)p82E5^b|G", 2, 2);
      uTF8JsonGenerator0.writeNumber((-3855L));
      uTF8JsonGenerator0._verifyPrettyValueWrite("P", 0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 1);
      MathContext mathContext0 = MathContext.UNLIMITED;
      mathContext0.toString();
      bigDecimal0.plus(mathContext0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "P";
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      int int0 = 1118;
      SerializedString serializedString0 = new SerializedString("");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3;
      longArray0[1] = 0L;
      uTF8JsonGenerator0.writeArray(longArray0, 18, 0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("XbD", "", true, '[', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4830, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw((char[]) null, 116, (-394));
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("(]RE&A*YeM{");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(620);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 17, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 4112, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0._verifyPrettyValueWrite("($}*XE/v#0_`;qE ", 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(52);
      byteArrayBuilder0.append(342);
      byteArrayBuilder0.write(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      System.setCurrentTimeMillis(0L);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 58, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 60;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 60, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeArrayFieldStart("com.fasterxml.jackson.core.ObjectCodec");
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      try { 
        uTF8JsonGenerator0._outputSurrogates(2, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x2, second 0x2
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedString serializedString0 = new SerializedString("V^+jNtg");
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 18, false);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4112, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1118, true);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("XbD", 1, (-849));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.append(0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 65599, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("write a boolean value", 2048, 65599);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)70;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeArrayFieldStart(".");
      uTF8JsonGenerator1.writeNumber((-361L));
      SerializedString serializedString0 = new SerializedString(" slots is now full (all ");
      uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((int) (byte)0);
      uTF8JsonGenerator1.writeNumber(2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-119));
      MockPrintStream mockPrintStream0 = new MockPrintStream("WZ(5]8AU&qhx[");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 235, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('F');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4112, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1118, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      byteArrayBuilder0.release();
      uTF8JsonGenerator0.writeRaw(charArray0, 2047, 1);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, (-2881));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber(539L);
      uTF8JsonGenerator0.writeRaw('');
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      mockPrintStream0.println(false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(")");
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeNumber((short) (byte)49);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
      mockPrintStream0.println(true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("~xNB");
      FileSystemHandling.createFolder(evoSuiteFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("~xNB");
      uTF8JsonGenerator0.writeStartArray((-1768));
      uTF8JsonGenerator0.writeRaw('l');
      uTF8JsonGenerator0.writeNumber(1491.9F);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.append(12);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 917, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte) (-15), false);
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = '<';
      charArray0[3] = 'q';
      charArray0[4] = '9';
      charArray0[5] = 'h';
      charArray0[3] = 'q';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1542, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1542
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4830, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeArrayFieldStart("Rdahff/M9EkH)`&YzL$");
      mockPrintStream0.checkError();
      iOContext1.constructTextBuffer();
      uTF8JsonGenerator0.writeNumber(439L);
      SerializedString serializedString0 = new SerializedString(" slots is now full (all ");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(")");
      char[] charArray0 = new char[15];
      // Undeclared exception!
      uTF8JsonGenerator0.writeObjectFieldStart("/w4?`(yo");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.append(0);
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(")");
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      uTF8JsonGenerator0.writeNumber((long) (byte)52);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      String string0 = ")";
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 760, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(")");
      char[] charArray0 = new char[15];
      charArray0[0] = '!';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      charArray0[1] = 'y';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, (-1823));
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNumber((-2));
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)32, 1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      byteArrayBuilder0.write(1);
      iOContext0.allocTokenBuffer((int) (byte) (-66));
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream("xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("xNB");
      uTF8JsonGenerator0.writeRaw('l');
      byteArrayBuilder0.toByteArray();
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.filter.TokenFilter");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      MockPrintStream mockPrintStream0 = new MockPrintStream("2");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3761, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("2");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-1551L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byteArrayBuilder0.append(0);
      byteArrayBuilder0.write(4645);
      iOContext0.allocTokenBuffer(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4645, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, (-1239), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("}'{[y/gS-k1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1239
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4830, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeArrayFieldStart("Rdahff/M9EkH)`&YzL$");
      mockPrintStream0.checkError();
      uTF8JsonGenerator0.writeNumber(439L);
      SerializedString serializedString0 = new SerializedString(" slots is now full (all ");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte)127;
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      SerializedString serializedString0 = new SerializedString(")");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)70, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeRaw('l');
      uTF8JsonGenerator0.writeNumber((float) (byte)70);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)127, 2696);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(")");
      char[] charArray0 = new char[15];
      charArray0[0] = '!';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      charArray0[1] = 'y';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, (-1823));
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNumber((-2));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1118, (ObjectCodec) null, mockPrintStream0, byteArray0, 75, true);
      uTF8JsonGenerator0.writeNumber("Reader returned 0 characters when trying to read ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      uTF8JsonGenerator0.writeString(charArray0, 5, 1);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNumber(3);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.append(0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-83);
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-83);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
      int int0 = 55296;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(")", (int) (byte) (-83), 325);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0._verifyValueWrite("");
      BigDecimal bigDecimal0 = new BigDecimal((long) 57343);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      try { 
        uTF8JsonGenerator1._outputSurrogates(2, 3965);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x2, second 0xf7d
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = iOContext0.allocTokenBuffer(9);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber(63);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 3347);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 32768);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4000
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 128, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2838, false);
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 'w';
      charArray0[2] = 'q';
      charArray0[3] = '[';
      charArray0[4] = 'h';
      charArray0[5] = 'u';
      charArray0[6] = '9';
      charArray0[7] = 'm';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 21, (int) (byte)117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      byteArrayBuilder0.write(1);
      iOContext0.allocTokenBuffer((int) (byte) (-66));
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream("xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("xNB");
      uTF8JsonGenerator0.writeRaw('l');
      uTF8JsonGenerator0.writeNumber(195.732F);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      String string0 = "";
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0._verifyValueWrite("");
      int int0 = 8000;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 8000, 200);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8000
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) bufferRecycler0;
      pipedInputStream0.close();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeStartArray(2);
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeNumber((-1290));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("bZaRjZ9*83]r3{K");
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4112, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1118, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      byteArrayBuilder0.release();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(false);
      int int0 = (-32768);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 760, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(")");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byteArrayBuilder0.append(0);
      byteArrayBuilder0.write(4645);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 0);
      SerializedString serializedString0 = new SerializedString("Cn|P[)@wM!1'x");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder1);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 892);
      byteArrayBuilder0.setCurrentSegmentLength(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2354, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRaw("3:ez/kx=wZ%(#%.");
      try { 
        uTF8JsonGenerator0._verifyValueWrite("O)q+_@o9?<");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not O)q+_@o9?<, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.append(0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte)127;
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.append(0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      byteArrayBuilder0.append(2);
      byteArrayBuilder1.write(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      int int0 = 63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 63, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.append(0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte)127;
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(")");
      uTF8JsonGenerator0.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream("xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      boolean boolean0 = false;
      StringReader stringReader0 = new StringReader("xNB");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 9, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder1 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1519, (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder0.NO_BYTES, 1000, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("xNB");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.append(0);
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 101, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byteArrayBuilder0.setCurrentSegmentLength(518);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber("rt|{=\"");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("WZ(5]8AU&qhx[");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, "XCXs[[D&", true);
      StringReader stringReader0 = new StringReader("XCXs[[D&");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2372), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeArrayFieldStart("p+A`3R0x|'Bn(Z");
      uTF8JsonGenerator0.flush();
      mockPrintStream0.checkError();
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeNumber((long) 3);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byteArrayBuilder0.setCurrentSegmentLength(518);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeQuotedUTF8(byteArrayBuilder0);
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2071));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString("2iW_<j7V9[&e");
      uTF8JsonGenerator0.writeNumber((long) 1);
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      System.setCurrentTimeMillis(1819L);
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("Can not ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4112, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1118, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 4112, 2);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byteArrayBuilder0.write(36);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext0.withEncoding(jsonEncoding0);
      System.setCurrentTimeMillis(1287L);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayBuilder0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 17, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte) (-47);
      byteArray0[8] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("'cOn:<wG'nl!");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRaw("");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray1, 2100, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.append(0);
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      System.setCurrentTimeMillis(0L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 573, true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0._verifyValueWrite("write a null");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.append(0);
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayBuilder0, true);
      mockPrintStream1.println();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)127, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte)70, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(")");
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'y';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.fasterxml.jackson.core.base.ParserMinimalBase");
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, (-1823));
      uTF8JsonGenerator0.writeNumber(")");
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream("xNB");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("xNB");
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'y';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)32, (-1823));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tQou^'0%\"");
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer((-721));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeArrayFieldStart("zj");
      uTF8JsonGenerator0.flush();
      mockPrintStream0.checkError();
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("zj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(9);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4830, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeArrayFieldStart("Rdahff/M9EkH)`&YzL$");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      int int0 = 4112;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4112, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1118, true);
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.append(0);
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte)127;
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(")");
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      uTF8JsonGenerator0.writeNumber((long) (byte)52);
      uTF8JsonGenerator0.writeRaw('?');
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byteArrayBuilder0.finishCurrentSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4112, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1118, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 4112, 2);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-4968));
      StringReader stringReader0 = new StringReader(")P>QsA2|^7kg");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty(")P>QsA2|^7kg");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray(2483);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "@OHAW";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", false);
      iOContext0.allocReadIOBuffer(3415);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = new SerializedString("@OHAW");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.append(0);
      byteArray0[2] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte)127;
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      SerializedString serializedString0 = new SerializedString(")");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 93, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 61, 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byteArrayBuilder0.setCurrentSegmentLength(518);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0._verifyValueWrite("O)q+_@o9?<");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not O)q+_@o9?<, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 61, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = 'H';
      charArray0[2] = '#';
      charArray0[3] = '&';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 61, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      iOContext0.allocReadIOBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 63, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 3, (-114));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, (-159));
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1475, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeArrayFieldStart("com.fasterxml.jackson.core.ObjectCodec");
      uTF8JsonGenerator0.flush();
      mockPrintStream0.checkError();
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw(']');
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byteArrayBuilder0.resetAndGetFirstSegment();
      byteArrayBuilder0.setCurrentSegmentLength(518);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 100, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byteArrayBuilder0.setCurrentSegmentLength(518);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      iOContext0.allocConcatBuffer();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2039), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = '&';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, (-2215));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 1058;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte) (-52);
      byteArray0[8] = (byte)117;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1058, (ObjectCodec) null, pipedOutputStream0, byteArray0, 115, false);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte) (-14));
      int int1 = (-795);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-795), (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      byteArrayBuilder0.toByteArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2071));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      SerializedString serializedString0 = new SerializedString("VALUE_NULL");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2039), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 0, 90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2071));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString("') as character #");
      uTF8JsonGenerator0.writeNumber(0L);
      BigDecimal bigDecimal0 = new BigDecimal((long) (-2071));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      uTF8JsonGenerator0._releaseBuffers();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("nKX0W9~o%k6E");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 93, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 57343);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      mockPrintStream0.println();
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber(")");
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'y';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, (-1823));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4112, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1118, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((float) 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) bufferRecycler0;
      MockPrintStream mockPrintStream1 = new MockPrintStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      mockPrintStream0.write(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectArray0[0], true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, mockPrintStream0, byteArray0, 48, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1555, false);
      SerializedString serializedString0 = new SerializedString(", expecting field name");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeArrayFieldStart("com.fasterxml.jackson.core.ObjectCodec");
      uTF8JsonGenerator0.flush();
      mockPrintStream0.checkError();
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeString("F&%]|x$h");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("'cOn:<wG'nl!");
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.flush();
      mockPrintStream0.checkError();
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 18);
      BigDecimal bigDecimal0 = new BigDecimal((-1038L));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2071));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Current context not an object but ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "/J", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) bufferRecycler0;
      MockPrintStream mockPrintStream1 = new MockPrintStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      mockPrintStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockPrintStream1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)9);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeArrayFieldStart("com.fasterxml.jackson.core.ObjectCodec");
      uTF8JsonGenerator0.flush();
      mockPrintStream0.checkError();
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeString("F&%]|x$h");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2071));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      SerializedString serializedString0 = new SerializedString("VALUE_NULL");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-818));
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-987), (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 3, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2039), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      String string0 = "&X=Cr3h,feI2(";
      uTF8JsonGenerator0.writeString("&X=Cr3h,feI2(");
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = 'E';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1000000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 125, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-182), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -182
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2178));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1812), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2178), false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2178
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.printf(locale0, "com.fasterxml.jackson.core.util.MinimalPrettyPrinter", objectArray0);
      byteArray0[3] = (byte) (-66);
      mockPrintStream0.write(byteArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(")");
      mockPrintStream1.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 443, (ObjectCodec) null, mockPrintStream1, byteArrayBuilder0.NO_BYTES, 4951, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, (byte)70, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)93;
      iOContext0.allocTokenBuffer();
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-128);
      mockPrintStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-128), (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2071));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2071), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-653), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.println(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 2882, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("@OHAW");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "/J", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) bufferRecycler0;
      pipedInputStream0.close();
      objectArray0[6] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Illegal character (", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2861);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1, byteArrayBuilder0.NO_BYTES, 2861, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("nKX0W9~o%k6E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2071));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byteArrayBuilder0.toByteArray();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1380), (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, (-4631), (-616));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2071));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1955, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 128);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1002, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 1002);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-971), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-971), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -971
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-948));
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, 0);
      uTF8JsonGenerator0.writeNumber((long) 0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 97, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byteArrayBuilder0.append((-32));
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 2, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-948));
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-128);
      mockPrintStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-128), (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "@OHAW";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      String string1 = ")";
      MockPrintStream mockPrintStream1 = new MockPrintStream(")");
      mockPrintStream1.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 230, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, (-1550), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1550
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      byteArrayBuilder0.toByteArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-1497.521F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "/J", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 115);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("/J");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2071));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1546L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-11), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("*c");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -11
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) bufferRecycler0;
      pipedInputStream0.close();
      objectArray0[6] = (Object) pipedOutputStream0;
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeStartArray(2);
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeNumber((-1290));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-23);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 90, (-1562));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      String string0 = ")";
      MockPrintStream mockPrintStream1 = new MockPrintStream(")");
      mockPrintStream1.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 230, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "/J", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) iOContext0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byte byte0 = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)8;
      mockPrintStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)70, (ObjectCodec) null, pipedOutputStream0, byteArray0, 108, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 123);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayBuilder1);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber((short)2237);
      uTF8JsonGenerator0._verifyValueWrite("@OHAW");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) bufferRecycler0;
      pipedInputStream0.close();
      objectArray0[6] = (Object) pipedOutputStream0;
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeStartArray(2);
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("0123456789ABCDEF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 573);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)70;
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArrayBuilder0.write(1);
      byteArray0[3] = (byte) (-66);
      mockPrintStream0.write(byteArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(")");
      mockPrintStream1.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 443, (ObjectCodec) null, mockPrintStream1, byteArrayBuilder0.NO_BYTES, 4951, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2071));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      MockPrintStream mockPrintStream1 = new MockPrintStream(")");
      mockPrintStream1.println();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 230, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      int int1 = 126;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "/J";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "/J", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) bufferRecycler0;
      pipedInputStream0.close();
      objectArray0[6] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Illegal character (", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 635, (-3882));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1608), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1462), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1462
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2312, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4548), (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber((short)2090);
      uTF8JsonGenerator0._verifyValueWrite("#_.=CPB;pq[Uc8mxJ");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      MockFile mockFile0 = new MockFile((File) null, "10");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'e';
      charArray0[2] = 'k';
      charArray0[3] = 'B';
      charArray0[4] = 'd';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "/J";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) bufferRecycler0;
      pipedInputStream0.close();
      objectArray0[6] = (Object) pipedOutputStream0;
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext0.releaseReadIOBuffer((byte[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3628, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("P.P", 116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      byteArrayBuilder0.appendTwoBytes((-1420));
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, (byte[]) null, 55296, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 93);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 123, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, (-2380), 3207);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2380
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@OHAW", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-4548), (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 34, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 21, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4548), (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2071));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("\n", 115);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2071));
      MockPrintStream mockPrintStream0 = new MockPrintStream(")");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2071), (ObjectCodec) null, byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.flush();
      mockPrintStream0.checkError();
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeNumber(1453);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 2520, 1026);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      String string0 = "O&f~&~pAkx=I5$";
      StringReader stringReader0 = new StringReader("O&f~&~pAkx=I5$");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1995, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      int int0 = (-2374);
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeObjectField("O&f~&~pAkx=I5$", object1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      MockFile mockFile0 = new MockFile((File) null, "10");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-4548), (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 0, 635);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "/J", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) bufferRecycler0;
      pipedInputStream0.close();
      objectArray0[6] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Illegal character (", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeStartArray();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      iOContext1.releaseReadIOBuffer((byte[]) null);
      try { 
        uTF8JsonGenerator0._outputSurrogates((byte)40, (byte)40);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x28, second 0x28
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4548), (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 3, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2071));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("J!@}bgjGg");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-226), (ObjectCodec) null, mockPrintStream0, byteArray0, (-1202), false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 6, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, Integer.MAX_VALUE, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 93);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 123, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("ydl]^AW!Y6");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "P";
      MockPrintStream mockPrintStream0 = new MockPrintStream("P");
      iOContext0.allocReadIOBuffer();
      iOContext0.allocTokenBuffer(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.flush();
      mockPrintStream0.println();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 2520, 1026);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "/J", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) bufferRecycler0;
      pipedInputStream0.close();
      objectArray0[6] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Illegal character (", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeStartArray();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("/J", ":ZkOY", false, '-', (-693));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 5)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "@OHAW", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4548), (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 3, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0);
      char char0 = '<';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("K\" rZ)P|uv X", "K\" rZ)P|uv X", false, '<', 55296);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 13)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }
}
