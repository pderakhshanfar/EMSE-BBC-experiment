/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 15:56:53 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 44, false);
      uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeRaw("Z37aKs]jK1K^TA");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", false);
      int int0 = 41;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '\'';
      mockFileOutputStream0.getChannel();
      charArray0[2] = 'z';
      charArray0[1] = '}';
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeString(charArray0, 2, 2);
      uTF8JsonGenerator0._writePPFieldName("Invalid custom escape definitions; custom escape not found for character code 0x");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":T}YF$KQvY1 a\"h-W");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":T}YF$KQvY1 a\"h-W", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1172), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)6, false);
      uTF8JsonGenerator0.writeNumber(":T}YF$KQvY1 a\"h-W");
      uTF8JsonGenerator0.writeRaw("Z37aKs]jK1K^TA");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      uTF8JsonGenerator0.writeFieldName("");
      BigDecimal bigDecimal0 = new BigDecimal(1);
      uTF8JsonGenerator0.writeString(":T}YF$KQvY1 a\"h-W");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber("~+");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~+");
      uTF8JsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-42), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 115, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      BigDecimal bigDecimal0 = new BigDecimal(55);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigDecimal0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("(xpdP`(N?><@<=)2", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-57);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55, true);
      uTF8JsonGenerator0.writeNumber("OQv$%-.'f@gb");
      uTF8JsonGenerator0.writeRaw("joA[:i");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("X+#qYwo@=-", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)64;
      mockFileOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3309, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 115, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1796), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      char[] charArray0 = new char[7];
      uTF8JsonGenerator0.writeNumber((long) 0);
      charArray0[1] = 'C';
      charArray0[6] = ']';
      charArray0[4] = 'm';
      charArray0[5] = 'F';
      charArray0[6] = ' ';
      mockFileOutputStream0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expected a digit for number exponent", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      StringReader stringReader0 = new StringReader("expected a digit for number exponent");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)35;
      byteArray0[8] = (byte)35;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte) (-63);
      byteArray0[8] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1644, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)35, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 1185);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 44, true);
      uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeRaw("Z37aKs]jK1K^TA");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'M';
      uTF8JsonGenerator0.writeString(charArray0, (int) 'M', 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1796), (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[7];
      uTF8JsonGenerator0.writeNumber((long) 0);
      charArray0[1] = 'C';
      charArray0[6] = ']';
      charArray0[4] = 'm';
      charArray0[5] = 'F';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      uTF8JsonGenerator0.writeString(charArray0, 3, 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("Invalid custom escape definitions; custom escape not found for character code 0x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Inval=d custom escape definitions; custom escpe not found for character coe 0x", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      SerializedString serializedString0 = new SerializedString("Internal error: TypeReference constructed without actual type information");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Internal error: TypeReference constructed without actual type information", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-37);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 91, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeUTF8String(byteArray0, Integer.MAX_VALUE, (-1282));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "Inval=d custom escape definitions; custom escpe not found for character coe 0x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Inval=d custom escape definitions; custom escpe not found for character coe 0x", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      try { 
        uTF8JsonGenerator0.writeNumber((short)70);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[3];
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.util.ByteArrayBuilder");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 1716, false);
      uTF8JsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 78, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-1.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitins; |ustom escape not found for clarcter ode }x");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitins; |ustom escape not found for clarcter ode }x");
      serializedString0.asQuotedChars();
      mockFileOutputStream0.release();
      BigDecimal bigDecimal0 = new BigDecimal(2);
      uTF8JsonGenerator0.close();
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.multiply(bigInteger1);
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[9];
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 2);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("X+#qYwo@=-", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12000, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNumberField("X+#qYwo@=-", (float) 1);
      try { 
        uTF8JsonGenerator0.writeNumber((float) 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[9];
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 975, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 975, true);
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      String string1 = "write a binary value";
      uTF8JsonGenerator0.writeArrayFieldStart("write a binary value");
      uTF8JsonGenerator0.writeStringField("M\"p", "com.fasterxml.jackson.core.io.JsonStringEncoder");
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 58, 104);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 44, true);
      uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeRaw("Z37aKs]jK1K^TA");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-9223372036854775808L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[1];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      StringReader stringReader0 = new StringReader("4%ETc1\rGS#r%");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = new SerializedString("");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      serializedString0.asUnquotedUTF8();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-252), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4959, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[7];
      charArray0[2] = '7';
      charArray0[6] = ']';
      charArray0[4] = 'm';
      charArray0[5] = 'F';
      charArray0[6] = '\u0011';
      mockFileOutputStream0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("6");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-8);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2289), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 12, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      String string0 = "6iWn{?VRpj";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '5';
      charArray0[2] = 'H';
      charArray0[3] = '7';
      charArray0[4] = 'O';
      charArray0[5] = 'Q';
      charArray0[6] = ':';
      charArray0[7] = 'v';
      charArray0[8] = 'L';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 804, (-2496));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      serializedString0.appendQuotedUTF8(byteArray0, 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 765, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, bufferedInputStream0, byteArray0, 94);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 41, false);
      uTF8JsonGenerator0.writeRaw("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString("t[OL^{lFB BFWQrG\"mI");
      uTF8JsonGenerator0.close();
      try { 
        uTF8JsonGenerator0.writeFieldName("Invalid custom escape definitions; custom escape not found for character code 0x");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[1];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-391), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeFieldName("4%ETc1\rGS#r%");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      SerializedString serializedString0 = new SerializedString("fxgj=3SP5AbK167TbF");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1796), (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = '7';
      charArray0[6] = ']';
      charArray0[4] = 'm';
      charArray0[5] = 'F';
      charArray0[6] = ' ';
      mockFileOutputStream0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[1];
      SerializedString serializedString0 = new SerializedString("");
      File file0 = MockFile.createTempFile("*<Flhq~9%ru\"", "[(lP_9o:2#eYhS@");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 850, (ObjectCodec) null, objectOutputStream0, byteArray0, 2219, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("X+#qYwo@=-", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12000, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNumberField("X+#qYwo@=-", (float) 1);
      uTF8JsonGenerator0.writeEndObject();
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-30);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 222, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, (int) (byte) (-30));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = ";Ut4KtHs)";
      MockPrintStream mockPrintStream0 = new MockPrintStream(";Ut4KtHs)");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 76, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1774, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber("aO_?S;?nyFuP/_);am");
      StringWriter stringWriter0 = new StringWriter(1562);
      StringWriter stringWriter1 = new StringWriter();
      uTF8JsonGenerator0._outputSurrogates(3, 57308);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 44, false);
      uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '<';
      charArray0[2] = '|';
      uTF8JsonGenerator0._charBuffer = charArray0;
      String string0 = "Z37aKs]jK1K^TA";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Z37aKs]jK1K^TA");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-93);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-93), true);
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 't';
      charArray0[2] = '[';
      charArray0[3] = ';';
      charArray0[4] = 'F';
      charArray0[5] = 'v';
      charArray0[6] = '8';
      charArray0[7] = 'q';
      charArray0[8] = '!';
      uTF8JsonGenerator0.writeRaw(charArray0, Integer.MAX_VALUE, 92);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[9];
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext1.allocNameCopyBuffer(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 987, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 987, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 63, 14);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1838, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 224, true);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("STRICT_DUPLICATE_DETECTION");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid cVstom escape definitions; custom escape not founr for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      String string0 = "Unexpected end-of-String in base64 content";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(".d:{");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2130, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 147, true);
      StringReader stringReader0 = new StringReader("Unexpected end-of-String in base64 content");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 148, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, mockFileOutputStream1, byteArray1, 38, true);
      try { 
        uTF8JsonGenerator1.writeBinary((Base64Variant) null, (InputStream) null, 33);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 41, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 56320;
      doubleArray0[4] = (double) 55296;
      doubleArray0[5] = (double) 56319;
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 2981);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      String string0 = "NaN";
      StringReader stringReader0 = new StringReader("NaN");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      String string1 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, (-593));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(".d:{");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2125, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 147, true);
      uTF8JsonGenerator0.writeNumber("Unexpected end-of-String in base64 content");
      uTF8JsonGenerator0.writeRaw(", expecting field name");
      uTF8JsonGenerator0.writeFieldName("mJ^>$FOYph^NqR");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray1[1] = (byte)5;
      mockFileOutputStream0.flush();
      mockFileOutputStream0.write(10);
      byteArray1[2] = (byte)71;
      uTF8JsonGenerator0.writeBinary(byteArray0, 2, (-589));
      byteArray1[3] = (byte)95;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte)5);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(".d:{");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2125, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 147, true);
      uTF8JsonGenerator0.writeNumber("Unexpected end-of-String in base64 content");
      uTF8JsonGenerator0.writeRaw(", expecting field name");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray1[1] = (byte)5;
      mockFileOutputStream0.flush();
      byteArray1[2] = (byte)71;
      uTF8JsonGenerator0.writeBinary(byteArray0, 2, (-589));
      byteArray1[3] = (byte)95;
      byteArray1[4] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 0, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 222, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-3), false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid cVstom escape definitions; custom escape not founr for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(".d:{");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2130, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 147, true);
      uTF8JsonGenerator0.writeNumber("Unexpected end-of-String in base64 content");
      uTF8JsonGenerator0.writeRaw(", expecting field name");
      uTF8JsonGenerator0.writeFieldName("mJ^>$FOYph^NqR");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      byteArray0[0] = (byte)62;
      SerializedString serializedString0 = new SerializedString("Unexpected end-of-String in base64 content");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      mockFileOutputStream0.flush();
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1950, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      String string1 = "";
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 56320;
      doubleArray0[4] = (double) 55296;
      doubleArray0[5] = (double) 56319;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) mockFileInputStream0, 449);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("ALLOW_NUMERIC_LEADING_ZEROS", "ALLOW_NUMERIC_LEADING_ZEROS");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)124;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 109, (ObjectCodec) null, objectOutputStream0, byteArray0, 1366, true);
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'j';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-1757), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", false);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3916), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 15, true);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 3, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("ma[+xRxrRROG|)LeJ7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 49, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Random.setNextRandom(85);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "write a string";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a string", false);
      MockFile mockFile0 = new MockFile("write a string", "2wyWK(");
      File file0 = MockFile.createTempFile("gaNW2", "gaNW2", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&9e-_k~nMP)E@{zFd4Z");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-3), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("write a raw (unencoded) value", 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 100, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-51);
      byteArray1[5] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (-2507), (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("puko]Dh7hWcF5V");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1222), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-1), true);
      SerializedString serializedString0 = new SerializedString("puko]Dh7hWcF5V");
      serializedString0.asQuotedChars();
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte) (-1));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, mockFileOutputStream0);
      String string0 = "s*(7cLC\" ]tWvO";
      uTF8JsonGenerator0.writeRaw("s*(7cLC\" ]tWvO");
      uTF8JsonGenerator0.writeFieldName("s*(7cLC\" ]tWvO");
      uTF8JsonGenerator0.writeNumber((float) (byte) (-1));
      uTF8JsonGenerator0.writeBoolean(true);
      try { 
        uTF8JsonGenerator0._writePPFieldName(", expecting field name");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[1];
      IOContext iOContext1 = new IOContext(bufferRecycler0, "N", true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      int int0 = (-900);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-900), (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('R');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("n+YwX@=-", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12000, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((short) (-2));
      SerializedString serializedString0 = new SerializedString("P");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 106, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(".d:{");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2125, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 147, true);
      uTF8JsonGenerator0.writeNumber("Unexpected end-of-String in base64 content");
      uTF8JsonGenerator0.writeRaw(", expecting field name");
      uTF8JsonGenerator0.writeFieldName("mJ^>$FOYph^NqR");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray1[1] = (byte)5;
      mockFileOutputStream0.flush();
      byteArray1[2] = (byte)71;
      uTF8JsonGenerator0.writeBinary(byteArray0, 2, (-589));
      byteArray1[3] = (byte)95;
      byteArray1[4] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 0, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-23), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = ':';
      uTF8JsonGenerator0.writeString(charArray0, (-413), (int) (byte) (-23));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4lc2. 684AO(_>x}P", false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-3066), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = new SerializedString("4lc2. 684AO(_>x}P");
      iOContext1.constructTextBuffer();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("$", " }", false, 'H', 89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 2)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) bufferRecycler0;
      objectArray0[4] = (Object) bufferedInputStream0;
      objectArray0[5] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0, byteArray0, (byte)34, false);
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.asQuotedChars();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      mockFileOutputStream0.write(byteArray0);
      byteArray0[1] = (byte)112;
      mockFileOutputStream0.write(byteArray0);
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) serializedString0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf("Invalid custom escape definitions; custom escape not found for character code 0x", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4lc2. 684AO(_>x}P", true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "4lc2. 684AO(_>x}P", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2717, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = new SerializedString("wSR{w\r/h{;(V");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escpe efinitions; cstom escape not found for character code 0x", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Invalid custom escpe efinitions; cstom escape not found for character code 0x");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        uTF8JsonGenerator0.writeNumber(3409L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4000, true);
      uTF8JsonGenerator0.writeRaw('-');
      uTF8JsonGenerator0.writeString((String) null);
      mockFileOutputStream0.write(byteArray0);
      char[] charArray0 = new char[6];
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[5] = '-';
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      mockFileOutputStream0.release();
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeFieldName(", although was supposed to have one");
      uTF8JsonGenerator0.writeNumber((-3806.9546F));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 15, 473);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      uTF8JsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid cVstom escape definitions; custom escape not founr for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(".d:{");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2130, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 147, true);
      uTF8JsonGenerator0.writeNumber("Unexpected end-of-String in base64 content");
      uTF8JsonGenerator0.writeRaw(", expecting field name");
      uTF8JsonGenerator0.writeFieldName("mJ^>$FOYph^NqR");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray1[1] = (byte) (-11);
      byte byte0 = (byte)71;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj");
      StringReader stringReader0 = new StringReader("6iWn{?VRpj");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw("6iWn{?VRpj");
      uTF8JsonGenerator0.writeFieldName("6iWn{?VRpj");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 454, (byte)71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 454
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "ALLOW_NUMERIC_LEADING_ZEROS";
      MockPrintStream mockPrintStream0 = new MockPrintStream("ALLOW_NUMERIC_LEADING_ZEROS");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.print((double) 3);
      byteArray0[0] = (byte) (-74);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((byte) (-74));
      int int0 = 18;
      int int1 = 100;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRawUTF8String((byte[]) null, 18, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "-AX?.?Ql4#?";
      MockPrintStream mockPrintStream0 = new MockPrintStream("-AX?.?Ql4#?");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 52, (ObjectCodec) null, mockPrintStream0, byteArray0, 78, true);
      String string1 = "";
      uTF8JsonGenerator0.version();
      uTF8JsonGenerator0.writeArray((double[]) null, 52, 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3540, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "ALLOW_NUMERIC_LEADING_ZEROS";
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = 'y';
      char char0 = '#';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      StringReader stringReader0 = new StringReader("6iWn{?VRpj");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 70, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ALLOW_NUMERIC_LEADING_ZEROS");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.print((double) 3);
      byteArray0[0] = (byte) (-74);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.setHighestNonEscapedChar((byte) (-74));
      uTF8JsonGenerator0.writeNumber("ALLOW_NUMERIC_LEADING_ZEROS");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      BigDecimal bigDecimal0 = new BigDecimal((long) 55296);
      uTF8JsonGenerator0.close();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 56319);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 43, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber((short) (-510));
      try { 
        uTF8JsonGenerator1.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2094, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeRaw('7');
      uTF8JsonGenerator0.writeString("");
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = '7';
      mockFileOutputStream0.write(byteArray0);
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = '7';
      charArray0[7] = '7';
      charArray0[8] = '7';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`g<K?_/Hri[Nm^u&o\"", true);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)34, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)52);
      uTF8JsonGenerator0.writeString((char[]) null, (-2160), (-3279));
      SerializedString serializedString0 = new SerializedString("-Infinity");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "ALLOW_NUMERIC_LEADING_ZEROS";
      MockPrintStream mockPrintStream0 = new MockPrintStream("ALLOW_NUMERIC_LEADING_ZEROS");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 775, (ObjectCodec) null, mockPrintStream0, byteArray0, 2692, true);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-187);
      doubleArray0[1] = (double) 2692;
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2692);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "Inval=d custom escape definitions; custom escpe not found for character coe 0x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Inval=d custom escape definitions; custom escpe not found for character coe 0x", false);
      byte[] byteArray0 = new byte[2];
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1336L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, byteArrayBuilder0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4lc2. 684AO(_>x}P", true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "4lc2. 684AO(_>x}P", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 83, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2091, true);
      uTF8JsonGenerator0.writeString("4lc2. 684AO(_>x}P");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeNumber(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a boolean value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`g<K?_/Hri[Nm^u&o\"", true);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)34;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)34;
      byteArray1[5] = (byte)34;
      byteArray1[6] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)34, (ObjectCodec) null, mockFileOutputStream0, byteArray1, (byte)34, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('7');
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escpe efinitions; cstom escape not found for character code 0x", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(3409L);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 1);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("nVRbhkdJFfWz`");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1346, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(3409L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Invalid custom escape definitions; custom escape not found for character code 0x");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        uTF8JsonGenerator0.writeRaw('7');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(56319);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Vpl5f_7T`");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('x');
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escpe efinitions; cstom escape not found for character code 0x", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Invalid custom escpe efinitions; cstom escape not found for character code 0x", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      MockFile mockFile0 = new MockFile("", "Invalid custom escpe efinitions; cstom escape not found for character code 0x");
      MockFileOutputStream mockFileOutputStream2 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-17);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1886), (ObjectCodec) null, mockFileOutputStream2, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('_');
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Current context not an object but ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "c8t:#bYr:lTK]x", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 16, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 33, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("c8t:#bYr:lTK]x");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1.0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 6, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-30);
      byteArray0[8] = (byte) (-40);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 512, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 105, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber("XyHDlTw~[tjv!");
      uTF8JsonGenerator0.writeRaw("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeFieldName("XyHDlTw~[tjv!");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 50, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 50
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('x');
      uTF8JsonGenerator0.writeString("");
      char[] charArray0 = new char[10];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      charArray0[7] = 'x';
      charArray0[5] = 'x';
      uTF8JsonGenerator0.writeString(charArray0, (-2076), (-411));
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 11, (-839));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "|6Z[)_`Z*W");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ALLOW_NUMERIC_LEADING_ZEROS");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(1342);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      tokenFilter2.filterStartObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((float) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 2, 1342);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escpe efinitions; custom escape not found for character code 0x", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      StringReader stringReader0 = new StringReader(",YbK;q.");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2033, false);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (-2474));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" slots -- suspect a DoS attack based on hash collisions.");
      IOContext iOContext2 = new IOContext(bufferRecycler0, "N", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
      IOContext iOContext3 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, (-3073), (ObjectCodec) null, mockPrintStream0, byteArray0, 110, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(".d:{");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2125, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 147, true);
      uTF8JsonGenerator0.writeNumber("Unexpected end-of-String in base64 content");
      uTF8JsonGenerator0.writeRaw(", expecting field name");
      uTF8JsonGenerator0.writeFieldName("mJ^>$FOYph^NqR");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)71;
      byteArray1[3] = (byte)95;
      byteArray1[4] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 0, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('x');
      uTF8JsonGenerator0.writeString("");
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      charArray0[7] = 'x';
      charArray0[8] = 'x';
      uTF8JsonGenerator0.writeString(charArray0, (-2076), (-411));
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 56320;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) 55296;
      doubleArray0[5] = (double) 56319;
      doubleArray0[6] = (double) (byte) (-1);
      doubleArray0[7] = (double) 0;
      uTF8JsonGenerator0.writeArray(doubleArray0, (-187), (-187));
      uTF8JsonGenerator0.writeRaw("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ALLOW_NUMERIC_LEADING_ZEROS");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 16, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 46, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeString("");
      uTF8JsonGenerator1.writeString("N");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 194, (-1998));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3647), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 10, true);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeRaw("");
      String string0 = "YyB3%\\nd*";
      uTF8JsonGenerator0.writeFieldName("YyB3%\nd*");
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeBoolean(false);
      try { 
        uTF8JsonGenerator0._writePPFieldName("Z'F?dI{]?@g/'CEE^");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 44, true);
      uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeRaw("Z37aKs]jK1K^TA");
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((float) (byte) (-87));
      uTF8JsonGenerator0.writeBoolean(true);
      try { 
        uTF8JsonGenerator0._writePPFieldName("ALLOW_COMMENTS");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      StringReader stringReader0 = new StringReader("6iWn{?VRpj");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 70, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((short) (byte)51);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 0, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(109);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZG]k", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 116, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 31, true);
      uTF8JsonGenerator0._verifyPrettyValueWrite("(}SMfpKSPY34+#(3b", 0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      try { 
        uTF8JsonGenerator0.writeNumber(164.70631352513);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ALLOW_NUMERIC_LEADING_ZEROS");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar((byte) (-74));
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '&';
      charArray0[2] = 'r';
      charArray0[3] = 'O';
      charArray0[4] = '}';
      charArray0[5] = 'a';
      charArray0[6] = '`';
      uTF8JsonGenerator1._charBuffer = charArray0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("ALLOW_NUMERIC_LEADING_ZEROS");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)2;
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Unexpected end-of-String in base64 content");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 60, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 808, false);
      uTF8JsonGenerator0.writeNumber("mJ^>$FOYph^NqR");
      uTF8JsonGenerator0.writeRaw("mJ^>$FOYph^NqR");
      uTF8JsonGenerator0.writeFieldName("mJ^>$FOYph^NqR");
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("J.+5N;L2");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-22);
      byteArray0[0] = (byte) (-1);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-594), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 123, true);
      uTF8JsonGenerator0.writeNumber("6iWn{?VRpj");
      uTF8JsonGenerator0.writeRaw("");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((-2.147483648E9));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escpe efinitions; custom escape not found for character code 0x", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      StringReader stringReader0 = new StringReader(",YbK;q.");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2033, false);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (-2474));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "GzHQ^zh!)@]vTBc", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2557, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)19;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1667, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1667
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte byte0 = (byte)112;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 28, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("Invalid custom escape definitions; custom escape not found for character code 0x");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-46);
      byteArray0[3] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 2692, true);
      uTF8JsonGenerator0.writeRaw("start an object");
      uTF8JsonGenerator0.writeRaw("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(1.0);
      uTF8JsonGenerator0.writeRaw("Invalid custom escape definitions; custom escape not found for character code 0x", 0, 3);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockFileOutputStream0.write(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1270), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 112, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(".W}\u0006(wS3&n");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 28, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)112;
      byteArray1[1] = (byte)112;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (byte)112, 2046);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      StringReader stringReader0 = new StringReader("6iWn{?VRpj");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 70, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((short) (byte)51);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("6iWn{?VRpj", 0, 126);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escpe efinitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      StringReader stringReader0 = new StringReader(",YbK;q.");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2033, false);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (-2474));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 984, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 984, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 2);
      uTF8JsonGenerator0.writeRaw("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-3862), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", false);
      StringReader stringReader0 = new StringReader("6iWn{?VRpj");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 70, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((short) (byte)51);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", false);
      StringReader stringReader0 = new StringReader("6iWn{?VRpj");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.close();
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)86);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      String string0 = "6iWn{?VRpj";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-603), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -603
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 98, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-1083L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = '[';
      charArray0[2] = '<';
      charArray0[3] = '[';
      int int0 = 1116;
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeRaw(charArray0, 1116, (-3428));
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-2918.3140795543));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 876, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)6, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-2), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      serializedString0.asQuotedChars();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 57343);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 984, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 984, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 2);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cqgC~D,*4g]8woa", true);
      IOContext iOContext0 = new IOContext(bufferRecycler1, "nI$F e", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1679, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("cqgC~D,*4g]8woa");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-46);
      byteArray0[3] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 2692, true);
      uTF8JsonGenerator0.writeRaw("start an object");
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1261, 923);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 733, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1461, true);
      uTF8JsonGenerator0.writeNumber(",OEfC");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(",OEfC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-765), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55296, false);
      uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeRaw("Invalid custom escape definitions; custom escape not found for character code 0x");
      String string1 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      String string0 = "ZG]k";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZG]k", false);
      byte byte0 = (byte)0;
      int int0 = 11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 11, true);
      try { 
        uTF8JsonGenerator0.writeRaw("Sla;/");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      serializedString0.asQuotedChars();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("b**n`i", false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      mockFileOutputStream0.write(21);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 101, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("b**n`i");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-87);
      byteArray1[1] = (byte) (-87);
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte)8;
      byteArray1[5] = (byte) (-87);
      byteArray1[6] = (byte)2;
      byteArray1[7] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 48, false);
      uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeRaw("Z37aKs]jK1K^TA");
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((float) (byte) (-87));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("n+YwX@=-");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)103;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 808, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber("dnl0?|,gH7JJTD5CHB6");
      uTF8JsonGenerator0.writeRaw("Sla;/");
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("Unexpected end-of-String in base64 content");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      StringReader stringReader0 = new StringReader("6iWn{?VRpj");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6iWn{?VRpj");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "6iWn{?VRpj");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 70, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeString("");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 65599, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Invalid custom escape definitions; custom escape not found for character code 0x", (byte)2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      StringReader stringReader0 = new StringReader("6iWn{?VRpj");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      charsToNameCanonicalizer0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 764, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._verifyPrettyValueWrite("_WV^R~M8xN", (byte)0);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte) (-22);
      IOContext iOContext2 = new IOContext((BufferRecycler) null, (Object) null, false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 500, false);
      mockFileOutputStream1.close();
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-106);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocWriteEncodingBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayInputStream0.mark(16);
      int int0 = 50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 50, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<`glQ^h5l}6,P", false);
      StringReader stringReader0 = new StringReader("<`glQ^h5l}6,P");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("9");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, true);
      filteringParserDelegate0.getCodec();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 49, true);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((float) (byte)48);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("X$(r](vo", 33);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("");
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '';
      charArray0[2] = 'T';
      charArray0[3] = 't';
      charArray0[4] = 'B';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-2084), 127);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-607), false);
      BigDecimal bigDecimal0 = new BigDecimal((-2656));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("J.+5N;L2");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-594), (ObjectCodec) null, mockFileOutputStream1, byteArray0, 123, true);
      uTF8JsonGenerator0.writeNumber("6iWn{?VRpj");
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeFieldName("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) (byte)103);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 56320;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) 55296;
      doubleArray0[5] = (double) 56319;
      doubleArray0[6] = (double) (byte) (-1);
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, (int) (byte)0, 1000000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 56320;
      doubleArray0[3] = (double) (byte) (-1);
      uTF8JsonGenerator0.writeNumber((long) 3);
      doubleArray0[4] = (double) 55296;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 2985, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2985
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('G');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("b**n`i", false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)24;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 101, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 1410, 1410);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1410
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.withEncoding(jsonEncoding0);
      String string0 = ",OEfC";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",OEfC");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 67, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 15, false);
      try { 
        uTF8JsonGenerator0.writeNumber("F]*v.'^d5m/=");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      bufferedInputStream0.skip(0L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 235, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 56320;
      doubleArray0[3] = (double) (byte) (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[4] = (double) 55296;
      doubleArray0[5] = (double) 56319;
      doubleArray0[6] = (double) (byte) (-1);
      doubleArray0[7] = (double) 0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      doubleArray0[8] = (double) (byte)0;
      uTF8JsonGenerator0.writeArray(doubleArray0, (-187), (-187));
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      StringReader stringReader0 = new StringReader("6iWn{?VRpj");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("6iWn{?VRpj");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 84, true);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 56320;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) 55296;
      doubleArray0[5] = (double) 56319;
      doubleArray0[6] = (double) (byte) (-1);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) (byte)0;
      uTF8JsonGenerator0.writeArray(doubleArray0, (-187), (-187));
      uTF8JsonGenerator0.writeRaw("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'J';
      charArray0[0] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[8] = 'w';
      charArray0[7] = 'r';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("VALUE_EMBEDDED_OBJECT", 0, 57343);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z,ni+e_>*OkqrF");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber(" bytes (out of ");
      uTF8JsonGenerator0.writeRaw("mJ^>$FOYph^NqR");
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("Invalid custom escape definitions; custom escape not found for character code 0x");
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",OEfC");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-46);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 48, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1461, true);
      uTF8JsonGenerator0.writeNumber(",OEfC");
      uTF8JsonGenerator0.writeRaw("Can not write a field name, expecting a value");
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("^lAO^,}brBI");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3647), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 10, true);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeFieldName("YyB3%\nd*");
      uTF8JsonGenerator0.writeNumber((float) 3);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      try { 
        uTF8JsonGenerator0.writeFieldName("YyB3%\nd*");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-22);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Unexpected end-of-String in base64 content");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 60, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 808, false);
      uTF8JsonGenerator0.writeNumber("mJ^>$FOYph^NqR");
      uTF8JsonGenerator0.writeRaw("mJ^>$FOYph^NqR");
      uTF8JsonGenerator0.writeFieldName("mJ^>$FOYph^NqR");
      uTF8JsonGenerator0.writeNumber(1.0F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      StringReader stringReader0 = new StringReader("6iWn{?VRpj");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      BigDecimal bigDecimal0 = new BigDecimal(3);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 544, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 764, true);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeFieldName("oKjU$5sVDj/i*");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('d');
      uTF8JsonGenerator0.writeNumber(2579);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("b**n`i", false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)24;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 101, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "scSN?@a", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2096, (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("b**n`i", false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)24;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2438, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)24, true);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but OBJECT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-87);
      IOContext iOContext2 = new IOContext((BufferRecycler) null, (Object) null, false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 500, false);
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[2];
      String string0 = "!EQGudfi";
      SerializedString serializedString0 = new SerializedString("!EQGudfi");
      charsToNameCanonicalizer0.makeChild(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, false);
      String string1 = "~+";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      StringReader stringReader0 = new StringReader("6iWn{?VRpj");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("_WV^R~M8xN");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 764, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._verifyPrettyValueWrite("_WV^R~M8xN", (byte)0);
      BigDecimal bigDecimal0 = new BigDecimal(2);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      String string0 = "ZG]k";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZG]k", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 11, true);
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = '}';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, (-3387));
      SerializedString serializedString0 = new SerializedString(" bytes (out of ");
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      byteArrayOutputStream0.write(byteArray0);
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (int) (byte)0);
      uTF8JsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      bufferedInputStream0.skip(0L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 235, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2352));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 348, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 35, true);
      uTF8JsonGenerator0.writeRaw("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = null;
      try {
        serializedString0 = new SerializedString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Null String illegal for SerializedString
         //
         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-87);
      IOContext iOContext2 = new IOContext((BufferRecycler) null, (Object) null, false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 500, false);
      uTF8JsonGenerator0.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 934, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumberField("~&T", (-3707L));
      uTF8JsonGenerator0.writeRaw("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("E?Vm20~!Cs", 3, 2285);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(65535);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-420), (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1774, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      serializedString0.asQuotedChars();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(65535);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-420), (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 16, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, false);
      JsonParserSequence.createFlattened(filteringParserDelegate0, filteringParserDelegate0);
      TokenFilter tokenFilter2 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter2, false, false);
      filteringParserDelegate1.getCodec();
      filteringParserDelegate1.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 37);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 71, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 6, true);
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)83;
      mockFileOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-202), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 201, true);
      uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ALLOW_NUMERIC_LEADING_ZEROS");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = 'J';
      charArray0[2] = 'i';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, 1);
      SerializedString serializedString0 = new SerializedString("sK{@");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 758, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2872), true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character{code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 62, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      byteArrayOutputStream0.write(byteArray0);
      char[] charArray0 = new char[1];
      char char0 = '!';
      try { 
        uTF8JsonGenerator0.writeNumber(2714L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~&T", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 23, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumberField("~&T", 2147483647L);
      uTF8JsonGenerator0.writeRaw("e}>p");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("~&T", 699, 169);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZG]k", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 11, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("ZG]k", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2352));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(4983);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)112, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-1), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-603), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("6iWn{?VRpj", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 62, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      byteArrayOutputStream0.write(byteArray0);
      char[] charArray0 = new char[1];
      char char0 = '!';
      try { 
        uTF8JsonGenerator0.writeNumber(2714L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#tZED6Q", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-69);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-2270), true);
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = '^';
      charArray0[4] = '!';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, (-2435));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2270
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(4983);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2052), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Invalid custom escape definitions; custom escape not found for character code 0x", (byte) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1355, true);
      uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
      StringWriter stringWriter0 = new StringWriter((byte)0);
      stringWriter0.flush();
      stringWriter0.append((CharSequence) "Invalid custom escape definitions; custom escape not found for character code 0x");
      int int0 = 48;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      StringReader stringReader0 = new StringReader("6iWn{?VRpj");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 70, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((short) (byte)51);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[2];
      String string0 = "!EQGudfi";
      SerializedString serializedString0 = new SerializedString("!EQGudfi");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("b**n`i", false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)24;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 101, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", expecting field name", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 34, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(", expecting field name");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw("rP1(IZ[A");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~&T", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 23, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw("e}>p");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("~&T", 699, 169);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6iWn{?VRpj", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1258, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4604, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(", although was supposed to have one");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1356);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-277), (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3633, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3633, true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but OBJECT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      byteArrayOutputStream0.write(byteArray0);
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 62, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      byteArrayOutputStream0.write(byteArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      try { 
        uTF8JsonGenerator0.writeString("Invalid custom escape definitions; custom escape not found for character code 0x");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null);
      String string0 = "X[R$*";
      uTF8JsonGenerator0._verifyValueWrite("X[R$*");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-109);
      // Undeclared exception!
      try { 
        iOContext0.releaseReadIOBuffer(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2352));
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 33, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 80, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("+Infinity");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2461, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 705, true);
      int int0 = 240;
      // Undeclared exception!
      uTF8JsonGenerator0.writeString((char[]) null, 3, 98);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      assertEquals(52, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeRaw("");
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(99);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-416), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-416), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)2;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2000, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 3, false);
      uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeRaw("Invalid custom escape definitions; custom escape not found for character code 0x");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-2834), (byte)2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 52, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 56320;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) 55296;
      doubleArray0[5] = (double) 56319;
      doubleArray0[6] = (double) (byte) (-1);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) (byte)0;
      uTF8JsonGenerator0.writeArray(doubleArray0, (-187), (-187));
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      int int0 = 2215;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2215);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char char0 = 'W';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      bufferedInputStream0.skip(0L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 235, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.flush();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-122);
      byteArray1[1] = (byte) (-75);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)0;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 3, (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3064, (ObjectCodec) null, objectOutputStream0);
      byteArrayOutputStream0.reset();
      uTF8JsonGenerator0.writeStartObject();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonParser$NumberType");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 97, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 362);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 4194, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      try { 
        uTF8JsonGenerator0.writeNumber("D$Z8n:hlC5kI<-.2");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escpe efinitions; cstom escape not found for character code 0x", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      StringReader stringReader0 = new StringReader(",YbK;q.");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 240, 2033);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1796), (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = '7';
      charArray0[3] = ']';
      charArray0[4] = 'm';
      charArray0[5] = 'F';
      charArray0[6] = ' ';
      mockFileOutputStream0.flush();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 3);
      char char0 = '[';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6000, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-1721));
      uTF8JsonGenerator0.writeRaw((char[]) null, 9, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 2048, 1183);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      SerializedString serializedString0 = new SerializedString("!EQGudfi");
      byte[] byteArray0 = serializedString0.asQuotedUTF8();
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 114, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 114
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = '[';
      charArray0[2] = '<';
      charArray0[3] = '[';
      uTF8JsonGenerator0.writeRaw(charArray0, 1116, (-3428));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1116, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1116
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DR");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2108, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString("rhx<cdA0k");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      SerializedString serializedString0 = new SerializedString("!EQGudfi");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, false);
      String string0 = "~+";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("~+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "Invalid custom escape definitions; custom escape not found for character code 0x", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Invalid custom escape definitions; custom escape not found for character code 0x");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) iOContext1;
      objectArray0[2] = (Object) null;
      int int0 = 2799;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2799, (ObjectCodec) null, mockPrintStream0);
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) bufferedInputStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "Invalid custom escape definitions; custom escape not found for character code 0x";
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "Invalid custom escape definitions; custom escape not found for character code 0x";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Invalid custom escape definitions; custom escape not found for character code 0x", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, printStream0, byteArray0, 3, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('d');
      String string0 = "";
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeString("A@/");
      try { 
        uTF8JsonGenerator0._outputSurrogates(3, 23);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x3, second 0x17
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("ZG]k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-266), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-1), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-2379));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3064, (ObjectCodec) null, objectOutputStream0);
      byteArrayOutputStream0.reset();
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = 'k';
      charArray0[2] = ';';
      charArray0[3] = '5';
      charArray0[4] = '\'';
      charArray0[5] = '{';
      charArray0[6] = ':';
      charArray0[7] = '#';
      charArray0[8] = '%';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, 3);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(99);
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'O';
      charArray0[2] = '/';
      charArray0[4] = 'Q';
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (-1143));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 70, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.JsonGenerator$Feature");
      assertEquals(48, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)112;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)25;
      byteArray1[7] = (byte)25;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-122), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 1, false);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but OBJECT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      byteArrayOutputStream0.write(byteArray0);
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (int) (byte)0);
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw('d');
      uTF8JsonGenerator0.writeString("");
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeString("A@/");
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      int int0 = 99;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ", "qc");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // qc
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)116;
      mockFileOutputStream0.write(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-122);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid custom escape definitions; custom escape not found for character code 0x");
      byteArray1[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65536, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 7, true);
      uTF8JsonGenerator0.writeRaw('<');
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 235, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(91);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 33, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2352));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("write a boolean value");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1774, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber("~+");
      StringWriter stringWriter0 = new StringWriter(1562);
      stringWriter0.append((CharSequence) "~+");
      uTF8JsonGenerator0._outputSurrogates(3, 57343);
      uTF8JsonGenerator0.writeString("");
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "\\(;Eb9A7uT";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(;Eb9A7uT", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2010, (ObjectCodec) null, (OutputStream) null, byteArray0, 82, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-1);
      byteArray0[6] = (byte) (-82);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-82), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -82
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      SerializedString serializedString0 = new SerializedString("!EQGudfi");
      byte[] byteArray0 = serializedString0.asQuotedUTF8();
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("b**n`i", false);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler2, bufferedInputStream0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-452), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      SerializedString serializedString0 = new SerializedString("!EQGudfi");
      serializedString0.asQuotedUTF8();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-109), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertEquals(10, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("b**n`i", false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)24;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 101, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      assertArrayEquals(new byte[] {(byte)34, (byte)32}, byteArray0);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("DP|*>KG{JuR:Q");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 49, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 33, false);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext2.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(128);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2324, false);
      SerializedString serializedString0 = new SerializedString("Ptq3/' 8v");
      uTF8JsonGenerator0.writeBoolean(false);
      assertArrayEquals(new byte[] {(byte)102, (byte)97, (byte)108, (byte)115, (byte)101}, byteArray0);
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 843, true);
      uTF8JsonGenerator0.writeNumber(115);
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)53, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)112;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)25;
      byteArray1[7] = (byte)25;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-122), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 1, false);
      uTF8JsonGenerator0.writeBoolean(true);
      assertArrayEquals(new byte[] {(byte)112, (byte)116, (byte)114, (byte)117, (byte)101, (byte)0, (byte)25, (byte)25}, byteArray1);
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "{\\s,Vr&+Zqp";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{s,Vr&+Zqp");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)25;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 128, true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.getOutputBuffered();
      int int0 = 80;
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, objectOutputStream0);
      byteArrayOutputStream0.reset();
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{s,Vr&+Zqp");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)25;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 128, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.write((-1084));
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.appendThreeBytes((-1));
      mockPrintStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2324, true);
      SerializedString serializedString0 = new SerializedString("Ptq3/' 8v");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      BigInteger bigInteger0 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalidcustom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      SerializedString serializedString0 = new SerializedString("Invalidcustom escape definitions; custom escape not found for character code 0x");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Invalidcustom escape definitions; custom escape not found for character code 0x", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Invalidcustom escape definitions; custom escape not found for character code 0x");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-415), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 898, true);
      uTF8JsonGenerator0.writeBoolean(true);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 934, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("n+YwX@=-");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 808, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((short) (byte)2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'J';
      charArray0[2] = 'X';
      charArray0[3] = 'e';
      charArray0[4] = '<';
      charArray0[5] = 'e';
      charArray0[6] = 'w';
      charArray0[7] = 'r';
      charArray0[8] = '[';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, (-3428));
      SerializedString serializedString0 = new SerializedString("sK{@");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      char char0 = 'O';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant(" bytes (out of ", " bytes (out of ", false, 'O', 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 15)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = ' ';
      charArray0[2] = 'u';
      charArray0[3] = '\'';
      charArray0[4] = 'R';
      charArray0[5] = 'l';
      charArray0[6] = 'h';
      charArray0[7] = '+';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      MockPrintStream mockPrintStream0 = new MockPrintStream("FJ0");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte) (-31);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{s,Vr&+Zqp");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)25;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 128, true);
      uTF8JsonGenerator0.writeBoolean(true);
      assertArrayEquals(new byte[] {(byte)116, (byte)114, (byte)117, (byte)101, (byte) (-125), (byte)0, (byte)0, (byte)25}, byteArray0);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 386, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber("");
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      BigInteger bigInteger0 = BigInteger.ONE;
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(56319);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1440, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 56319, 33, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter2, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-96);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder1, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber("write a boolean value");
      assertArrayEquals(new byte[] {(byte)117, (byte)101, (byte)108}, byteArray0);
      assertEquals(21, byteArrayBuilder1.getCurrentSegmentLength());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'J';
      charArray0[2] = 'X';
      charArray0[3] = 'e';
      charArray0[4] = '<';
      charArray0[5] = 'q';
      charArray0[6] = 'w';
      charArray0[7] = 'r';
      charArray0[8] = '[';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, (-3428));
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      filterOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, false);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 777, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3874), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0._flushBuffer();
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 65535, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid custom escape definitions; custom escape not found for character code 0x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)24;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 709, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      uTF8JsonGenerator0.getOutputTarget();
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#tZED6Q", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-69);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "#tZED6Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "#tZED6Q");
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (-2520), (ObjectCodec) null, printStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(iOContext0).allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = null;
      String string0 = "m6FH#B}n`d\\NJven5$";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m6FH#B}n`dNJven5$");
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 738, (ObjectCodec) null, mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)0;
      byte byte0 = (byte) (-116);
      byteArray0[8] = (byte) (-116);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 677, (ObjectCodec) null, (OutputStream) null, byteArray0, 44, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocConcatBuffer();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1990, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }
}
