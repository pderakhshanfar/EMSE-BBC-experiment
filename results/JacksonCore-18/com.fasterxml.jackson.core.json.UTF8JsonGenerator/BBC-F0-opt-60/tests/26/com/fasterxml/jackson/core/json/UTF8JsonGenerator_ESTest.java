/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:18:48 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)114;
      byte byte0 = (byte)34;
      byteArray0[4] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2155, true);
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short)114);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      minimalPrettyPrinter0.writeEndObject(uTF8JsonGenerator0, 57343);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
      jsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.flush();
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[24];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((long) 3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte) (-72);
      byteArray1[3] = (byte) (-117);
      byteArray1[4] = (byte) (-94);
      byteArray1[5] = (byte) (-8);
      byteArray1[6] = (byte)92;
      byteArray1[7] = (byte)65;
      byteArray1[8] = (byte)71;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 40, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-78);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3087), (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0091';
      charArray0[1] = '\u0091';
      charArray0[2] = '3';
      charArray0[3] = '\u0091';
      charArray0[4] = '\u0091';
      charArray0[5] = 'f';
      uTF8JsonGenerator0.writeRaw(charArray0, 3270, (int) (byte) (-78));
      uTF8JsonGenerator0.writeString(", although was supposed to have one");
      char[] charArray1 = new char[3];
      charArray1[0] = 'f';
      charArray1[1] = '\u0091';
      charArray1[2] = '\u0091';
      uTF8JsonGenerator0.writeString(charArray1, 1, 1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      Locale locale0 = Locale.KOREA;
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-2187), false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("0('l.}_f)", 2, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2187
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[19];
      Locale.getISOCountries();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 10, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (-1576));
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeRaw("2=ck)LAU");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[1] = '\u0091';
      uTF8JsonGenerator0.writeFieldName("!J53gq}.c#E(]i U-W");
      uTF8JsonGenerator0.writeString("!J53gq}.c#E(]i U-W");
      uTF8JsonGenerator0.writeRaw("E1G+)<AILD(");
      uTF8JsonGenerator0.writeRaw('\u0091');
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      Locale.getISOCountries();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)110, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-5348));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      pipedInputStream0.markSupported();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[4];
      uTF8JsonGenerator0._charBuffer = charArray0;
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeRaw('\u0000');
      uTF8JsonGenerator0.writeNumber(1L);
      uTF8JsonGenerator0.writeNumber((-1.0F));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short)97);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      minimalPrettyPrinter0.writeEndObject(uTF8JsonGenerator0, 57343);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(",l]'ABa)V^&C}");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) ",l]'ABa)V^&C}";
      Locale.getISOCountries();
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) byteArrayInputStream0;
      objectArray0[6] = (Object) locale0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-2080));
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeRaw(",l]'ABa)V^&C}");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[10];
      byteArrayOutputStream0.reset();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte byte0 = (byte)7;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("", "com.fasterxml.jackson.core.JsonProcessingException");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an ARRAY but ");
      Locale locale0 = Locale.KOREA;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2097), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)7, true);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (-2097));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.KOREA;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(56320);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator1.writeNumber((-422.0F));
      uTF8JsonGenerator0._outputSurrogates(36, 56320);
      uTF8JsonGenerator1.writeString("Wm.1)[{TQe|d(@ySl");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("lM<4B+Rcv)CR~W");
      Locale locale0 = Locale.ITALY;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)15;
      mockPrintStream0.print(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[9];
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 72, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((short)1000);
      uTF8JsonGenerator0.writeFieldName("sTQP|!35 kJw}\"$%");
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ccg^", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("5", "USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING");
      MockPrintStream mockPrintStream0 = new MockPrintStream("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING");
      Locale locale0 = Locale.KOREA;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-100));
      uTF8JsonGenerator0.writeNumber(1293);
      try { 
        uTF8JsonGenerator0._outputSurrogates((-1782), 14);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xfffff90a, second 0xe
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      bufferRecycler0.allocByteBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short)97);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      minimalPrettyPrinter0.writeArrayValueSeparator(uTF8JsonGenerator0);
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0._verifyPrettyValueWrite(" ", 2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[19];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-25), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0.writeString(charArray0, 2478, 3);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.doubleValue();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.JsonGenerator");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      iOContext0.allocWriteEncodingBuffer(16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeObject("1Q;c53#`$~\")2`71!");
      uTF8JsonGenerator0.writeNumber((short)1422);
      uTF8JsonGenerator0.writeFieldName("sTQP|!35 kJw}\"$%");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-853), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      uTF8JsonGenerator0.writeNumber((float) (-853));
      uTF8JsonGenerator0._outputSurrogates(102, 57343);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeObjectFieldStart("write a null");
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 97, 9);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      bufferRecycler0.allocByteBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short)97);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      uTF8JsonGenerator0.writeNumberField("V;H?@afUBu)(JjK", (long) 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 55296;
      intArray0[1] = 21;
      intArray0[2] = (int) (short)97;
      intArray0[3] = 2;
      intArray0[4] = 56319;
      intArray0[5] = 38;
      intArray0[6] = 3;
      intArray0[7] = 0;
      intArray0[8] = 57343;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeArray(intArray0, 55296, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55296
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 52, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 125, false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("6_jReu,VMF");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeFieldName("6kooH|W<rUpeq]yT");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.close();
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1619, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator1.writeStartObject();
      SerializedString serializedString3 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator1.writeString((SerializableString) serializedString3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[14];
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)122;
      byteArray1[4] = (byte)107;
      byteArray1[5] = (byte) (-5);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 44, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2090.45F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("S", "Current context not an ARRAY but ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an ARRAY but ");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Current context not an ARRAY but ";
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) "S";
      objectArray0[5] = (Object) byteArrayInputStream0;
      objectArray0[6] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Current context not an ARRAY but ", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 2, true);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1111);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1102 bytes (out of 1111)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '\u0091';
      uTF8JsonGenerator0.writeString(charArray0, 1, 3);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)13;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-68), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("Current context not an ARRAY but ", "Current context not an ARRAY but ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an ARRAY but ");
      Locale locale0 = Locale.KOREA;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 32767, (ObjectCodec) null, mockPrintStream0, byteArray0, 32767, false);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 3);
      uTF8JsonGenerator0.writeNumber(55296);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", although was supposed to have one");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      iOContext0.allocBase64Buffer();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "UTF32_BE");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-68);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, true);
      uTF8JsonGenerator0._verifyValueWrite("UTF32_BE");
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeBinary(byteArray0, (int) (byte) (-68), (int) (byte) (-79));
      uTF8JsonGenerator0.writeObjectFieldStart("");
      String string0 = "";
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a null, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      bufferRecycler0.allocByteBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short)97);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator1.writeBinaryField(" ", byteArray0);
      uTF8JsonGenerator0.writeNumber(1215.6F);
      uTF8JsonGenerator1._verifyValueWrite(" ");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("Current context not an ARRAY but ", "Current context not an ARRAY but ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an ARRAY but ");
      Locale locale0 = Locale.KOREA;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 32767, (ObjectCodec) null, mockPrintStream0, byteArray0, 32767, false);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 3);
      uTF8JsonGenerator0.writeNumber(55296);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ByteArrayBuilder.NO_BYTES;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3195, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 9, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString((SerializableString) serializedString1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1042), (ObjectCodec) null, (OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-52);
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte)24;
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, (-2381), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 211, false);
      uTF8JsonGenerator1._verifyPrettyValueWrite("", 1);
      uTF8JsonGenerator2.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      iOContext0.allocBase64Buffer();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 70, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ByteArrayBuilder.NO_BYTES;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1351, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1.writeNumber((short)15);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("Current context not an ARRAY but ", "Current context not an ARRAY but ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an ARRAY but ");
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.format(locale0, "Current context not an ARRAY but ", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 32767, (ObjectCodec) null, mockPrintStream0, byteArray0, 32767, false);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 3);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(55296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short)15);
      String string0 = "rlW4f6}YXu-Xom";
      uTF8JsonGenerator0.writeNumber("rlW4f6}YXu-Xom");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0._verifyValueWrite("rlW4f6}YXu-Xom");
      uTF8JsonGenerator0.writeString(charArray0, 3, 2);
      SerializedString serializedString0 = new SerializedString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1628), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 15, false);
      uTF8JsonGenerator0.writeNumber((short) (-2832));
      char[] charArray0 = iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0.writeString(charArray0, 58, 3402);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("Current context not an ARRAY but ", "Current context not an ARRAY but ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("6[ob}Duv;<E(N3VK");
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.CHINA;
      String string0 = "write a number";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "6[ob}Duv;<E(N3VK";
      objectArray0[1] = (Object) locale1;
      objectArray0[2] = (Object) byteArrayInputStream0;
      objectArray0[3] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale1, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)36, (ObjectCodec) null, printStream0, byteArray0, 97, true);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.read(byteArray0);
      uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (-810));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(69);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.ITALY;
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)15;
      mockPrintStream0.print(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = 'O';
      charArray0[2] = 'C';
      charArray0[3] = 'Z';
      charArray0[4] = 'Y';
      charArray0[5] = 'v';
      charArray0[6] = '.';
      charArray0[7] = 'O';
      charArray0[8] = 'b';
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte byte0 = (byte)7;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byte byte1 = (byte)36;
      byteArray0[1] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = "Current context not an ARRAY but ";
      MockFile mockFile0 = new MockFile("Current context not an ARRAY but ", "Current context not an ARRAY but ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("6[ob}Duv;<E(N3VK");
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.CHINA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "6[ob}Duv;<E(N3VK";
      objectArray0[1] = (Object) locale1;
      objectArray0[2] = (Object) byteArrayInputStream0;
      objectArray0[3] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale1, "write a number", objectArray0);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)36, (ObjectCodec) null, printStream0, byteArray0, 97, true);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (-810));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("");
      char[] charArray0 = new char[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[4] = 'U';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, '\u0000', 57343);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("S", "Current context not an ARRAY but ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(",l]'ABa)V^&C}");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) ",l]'ABa)V^&C}";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "S";
      objectArray0[5] = (Object) byteArrayInputStream0;
      objectArray0[6] = (Object) locale0;
      mockPrintStream0.format(locale0, "Current context not an ARRAY but ", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2);
      uTF8JsonGenerator0.writeNumber(0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-68);
      iOContext0.allocWriteEncodingBuffer();
      byte[] byteArray1 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-68), (ObjectCodec) null, mockPrintStream0, byteArray1, 0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", although was supposed to have one");
      FileSystemHandling.createFolder(evoSuiteFile0);
      char[] charArray0 = new char[1];
      uTF8JsonGenerator0.writeString(charArray0, 3, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1628), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 15, false);
      uTF8JsonGenerator0.writeNumber((short) (-2832));
      uTF8JsonGenerator0.writeNumber("rlW4f6}YXu-Xom");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0.writeString(charArray0, 58, 3402);
      SerializedString serializedString0 = new SerializedString("l7I!IpmEviB=p|h*");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.ITALY;
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)15;
      mockPrintStream0.print(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", although was supposed to have one");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      iOContext0.allocBase64Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF32_BE");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-68);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      uTF8JsonGenerator0._verifyValueWrite("UTF32_BE");
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeBinary(byteArray0, (int) (byte) (-68), (int) (byte) (-79));
      String string0 = "";
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 1183, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-89);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      byteArrayOutputStream0.reset();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2271, 1116);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ".hZQ/hlbm#q4ig%b*7", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, (-3695));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2951, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.ITALY;
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[7];
      MockFile mockFile0 = new MockFile("write a number", "write a nul8l");
      MockPrintStream mockPrintStream1 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale1 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Wm.1)[{TQe|d(@ySl";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "write a number";
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) mockPrintStream1;
      objectArray0[7] = (Object) mockFile0;
      PrintStream printStream0 = mockPrintStream1.format(locale0, "bj", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 12000, (ObjectCodec) null, printStream0, byteArray0, 7, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 2);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 18);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0.writeString(charArray0, 2, 1);
      uTF8JsonGenerator0.writeNumber(64.848746061);
      uTF8JsonGenerator0.writeRaw('');
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      char[] charArray0 = new char[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[0] = ')';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 100, 9);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-127);
      byteArray0[0] = (byte)3;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte)20;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-127), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1181, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 1676);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1589), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1.writeNumber((short)15);
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0._outputSurrogates(102, 57343);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.util.JsonParserDelegate");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1067), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.JsonParserDelegate");
      uTF8JsonGenerator0.writeString("D<4(Mh,~|`k");
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D>~>g}");
      System.setCurrentTimeMillis(654L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "D>~>g}", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1315, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", although was supposed to have one");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      iOContext0.allocBase64Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF32_BE");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-68);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      uTF8JsonGenerator0._verifyValueWrite("UTF32_BE");
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeBinary(byteArray0, (int) (byte) (-68), (int) (byte) (-79));
      uTF8JsonGenerator0.writeObjectFieldStart("");
      uTF8JsonGenerator0.writeNumberField("", (double) (byte)48);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte byte0 = (byte)16;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("Current context not an ARRAY but ", ", although was supposed to have one");
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bufferRecycler0;
      objectArray0[1] = (Object) ", although was supposed to have one";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Current context not an ARRAY but ", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 48, (ObjectCodec) null, printStream0, byteArray0, 1, false);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (int) (byte)7);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 3 bytes (out of 7)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.TEN;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3195), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 46, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      mockFileOutputStream0.release();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte)125);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 124 bytes (out of 125)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream1, 0);
      uTF8JsonGenerator0.writeNumber((double) 2);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 200, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      uTF8JsonGenerator0._verifyValueWrite("HmP'(~0=cu9V<&");
      uTF8JsonGenerator0.writeString("HmP'(~0=cu9V<&");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1773, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0.writeString(charArray0, 2, 17);
      uTF8JsonGenerator0.writeNumber((-1372.69));
      uTF8JsonGenerator0.writeRaw('');
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", although was supposed to have one");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      iOContext0.allocBase64Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF32_BE");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-68);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      uTF8JsonGenerator0._verifyValueWrite("UTF32_BE");
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeBinary(byteArray0, (int) (byte) (-68), (int) (byte) (-79));
      uTF8JsonGenerator0.writeNumberField("", (double) (byte)48);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      System.setCurrentTimeMillis(3407L);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("Wm.1)[{TQe|d(@ySl");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      DefaultPrettyPrinter defaultPrettyPrinter3 = new DefaultPrettyPrinter(defaultPrettyPrinter2, defaultPrettyPrinter2.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter3);
      uTF8JsonGenerator0.getOutputTarget();
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1176, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeFieldName("Wm.1)[{TQe|d(@ySl");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF32_BE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, (OutputStream) null, byteArray0, 31, true);
      System.setCurrentTimeMillis(834L);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("UTF32_BE");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter1);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter2);
      uTF8JsonGenerator0.getOutputTarget();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter2.DEFAULT_ROOT_VALUE_SEPARATOR);
      try { 
        uTF8JsonGenerator0.writeFieldName("UTF32_BE");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileDescriptor0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)13;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55296, false);
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2951, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._verifyPrettyValueWrite(" ", 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler1, (Object) null, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)15;
      byteArray0[4] = (byte)15;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 11, (ObjectCodec) null, pipedOutputStream0, byteArray0, 11, false);
      try { 
        uTF8JsonGenerator0.writeNumber(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      bufferRecycler0.allocByteBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short)15);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      mockFileOutputStream0.release();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)49;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte)112);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 103 bytes (out of 112)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 1 bytes (out of 1)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      File file0 = MockFile.createTempFile("Wm.1)[{TQe|d(@ySl", "=,xLwy^VHiY");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too few bytes available: missing 8 bytes (out of 8)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("^GW^VxU1^m+E|/L");
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      byteArrayOutputStream0.reset();
      String string0 = "";
      uTF8JsonGenerator0.writeNumber("");
      BigDecimal bigDecimal0 = new BigDecimal(2);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((-1373L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      byteArrayOutputStream0.reset();
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((-1373L));
      uTF8JsonGenerator0.writeRaw("");
      System.setCurrentTimeMillis(57343);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-2), 3922);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      bufferRecycler0.allocByteBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short)15);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0._writePPFieldName("~|MG{/N/YXiV{Xis$");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2942, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 10, false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("^GW^VxU1^m+E|/L");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        jsonGenerator0.writeRaw("8");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '\u0091';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 56319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      iOContext0.allocBase64Buffer();
      byteArray0[1] = (byte) (-89);
      int int0 = 115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5603, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 115, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('<');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("G]_1F0=#bur");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)67;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      try { 
        uTF8JsonGenerator0.writeNumber(843L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2000, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "dp7e-a:du{u", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 1459;
      iOContext0.allocWriteEncodingBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 456);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "NE5JxmQA\"<SBM)", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1459, (ObjectCodec) null, printStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.version();
      iOContext1.allocTokenBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('7');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)15;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (-128), true);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2942, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 10, false);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("^GW^VxU1^m+E|/L");
      uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("^GW^VxU1^m+E|/L");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      iOContext0.allocBase64Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", although was supposed to have one");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber((float) 2);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("write a boolean value");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-89);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      byteArrayOutputStream0.reset();
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 2, 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (byte)3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("&Y");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)5;
      byteArray0[0] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = new SerializedString(", expecting field name");
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2942, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("^GW^VxU1^m+E|/L");
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1._writePPFieldName("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocBase64Buffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName("Current context not an object but ");
      String string0 = "-2";
      uTF8JsonGenerator0.writeString("-2");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyValueWrite("1aed?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((short)1427);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeNumber((-1534));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)100;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 29, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("C7nOL4lxw5nO74");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeFieldName("Current context not an object but ");
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      uTF8JsonGenerator0.writeString(charArray0, 2, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocNameCopyBuffer(1703);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 542, (ObjectCodec) null, pipedOutputStream0, byteArray0, 91, true);
      try { 
        uTF8JsonGenerator0.writeRaw("4#OM)S!+Dm");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2295, false);
      byteArrayOutputStream0.reset();
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 785, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-1899), 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[0] = ')';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 100, 9);
      uTF8JsonGenerator0.close();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 100, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1.writeNumber(598.3);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 745, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      String string0 = "";
      uTF8JsonGenerator0.writeFieldName("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-18));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((float) 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((-2246.99030594772));
      uTF8JsonGenerator0.writeNumber((short) (-1204));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((short)1427);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeNumber((-1534));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 6, 4774);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      byteArrayOutputStream0.reset();
      String string0 = "";
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-1373L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.print("Wm.1)[{TQe|d(@ySl");
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Wm.1)[{TQe|d(@ySl", 1, 56319);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1589), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1.writeNumber((short)15);
      uTF8JsonGenerator1.writeNumber(2015.1);
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.appendUnquotedUTF8(byteArray1, 4000);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((long) 9);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw("3^6V?7/L2hs", 57343, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeFieldName("Current context not anobject but ");
      uTF8JsonGenerator0.writeString("h`qoBiV");
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1036), (-2095));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = (-316);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-316), (ObjectCodec) null, pipedOutputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      String string0 = "Wm.1)[{TQe|d(@ySl";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      mockPrintStream0.print("Wm.1)[{TQe|d(@ySl");
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 119, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((short)1813);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      mockPrintStream0.print("Wm.1)[{TQe|d(@ySl");
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2717), (ObjectCodec) null, mockPrintStream0, byteArray0, 8, true);
      SerializedString serializedString0 = new SerializedString("JDHiI");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 4959);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-82);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 55, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)77);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2372, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 0, 54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      mockPrintStream0.print("Wm.1)[{TQe|d(@ySl");
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Wm.1)[{TQe|d(@ySl", 29, 56319);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, filterOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream1, 0);
      uTF8JsonGenerator0.writeNumber((double) 2);
      String string0 = null;
      SerializedString serializedString0 = null;
      try {
        serializedString0 = new SerializedString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Null String illegal for SerializedString
         //
         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[0] = ')';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1589), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1.writeNumber((short)15);
      uTF8JsonGenerator1.writeNumber(2015.1);
      uTF8JsonGenerator0._verifyValueWrite("BIG_DECIMAL");
      uTF8JsonGenerator1.writeString("Qu+vLnt");
      uTF8JsonGenerator0.writeString("Qu+vLnt");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = new SerializedString("rlW4f6}YXu-Xom");
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2176, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1168), true);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 9, false);
      String string0 = "";
      short short0 = (short)15;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (-1820));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF32_BE");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-68);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      uTF8JsonGenerator0._verifyValueWrite("UTF32_BE");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (-17), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte byte0 = (byte) (-89);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 13, false);
      PipedOutputStream pipedOutputStream0 = null;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2697), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0.writeString(charArray0, 1, 2307);
      byteArrayOutputStream0.write(byteArray0, 1, 0);
      uTF8JsonGenerator0.writeRaw(charArray0, 1110, 723);
      uTF8JsonGenerator0.writeFieldName("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeRaw('w');
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 63);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 125, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumberField(", although was supposed to have one", 1212.9986808969684);
      uTF8JsonGenerator0.writeRaw('|');
      System.setCurrentTimeMillis(2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 55296, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      uTF8JsonGenerator0.writeNumber(1.0F);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 45;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1317, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1155, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((-1373L));
      uTF8JsonGenerator0.writeRaw("");
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      String string0 = "";
      uTF8JsonGenerator0.writeFieldName("[+Nt\"3$!T)C");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 18, (ObjectCodec) null, byteArrayOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = null;
      iOContext0.releaseWriteEncodingBuffer((byte[]) null);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("eZI=T4]/:ES>b", 1, 2);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1278, (ObjectCodec) null, filterOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "g_PC";
      MockPrintStream mockPrintStream0 = new MockPrintStream("g_PC");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 290, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      iOContext0.allocWriteEncodingBuffer();
      byte[] byteArray1 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2697), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0.writeString(charArray0, 1, 2307);
      uTF8JsonGenerator0.writeNumber((-749.2483F));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF32_BE");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-68);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      uTF8JsonGenerator0._verifyValueWrite("UTF32_BE");
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeRaw('I');
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2175), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("[+Nt\"3$!T)C");
      uTF8JsonGenerator0.writeString("[+Nt\"3$!T)C");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext1.allocBase64Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 56320, true);
      uTF8JsonGenerator0.writeNumber("UG6pZ#F$");
      try { 
        uTF8JsonGenerator1.writeNumber((short)108);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF32_BE");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2073, (ObjectCodec) null, (OutputStream) null, byteArray0, 31, true);
      uTF8JsonGenerator0._verifyValueWrite("HmP'(~0=cu9V<&");
      uTF8JsonGenerator0.writeString("HmP'(~0=cu9V<&");
      System.setCurrentTimeMillis(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 56, false);
      String string0 = "";
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      uTF8JsonGenerator1.getOutputTarget();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-68);
      iOContext0.allocWriteEncodingBuffer();
      byte[] byteArray1 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-68), (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 611, 0);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF32_BE");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-68);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      uTF8JsonGenerator0._verifyValueWrite("UTF32_BE");
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeBinary(byteArray0, (int) (byte) (-68), (int) (byte) (-89));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 2);
      iOContext0.allocNameCopyBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0._verifyValueWrite("Current context not an object but ");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = new SerializedString(", expecting field name");
      MockFile mockFile0 = new MockFile(", expecting field name");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Object[] objectArray0 = new Object[8];
      uTF8JsonGenerator0.getOutputTarget();
      objectArray0[0] = null;
      objectArray0[1] = (Object) iOContext2;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) iOContext2;
      objectArray0[6] = (Object) iOContext2;
      objectArray0[7] = (Object) iOContext0;
      PrintStream printStream0 = mockPrintStream0.format("9&6}'", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-4689), (ObjectCodec) null, printStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      mockPrintStream0.print("Wm.1)[{TQe|d(@ySl");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2697), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      String string0 = "";
      uTF8JsonGenerator0.writeNumber("");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      uTF8JsonGenerator0.writeString(charArray0, 1, 2307);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", false, 'w', (-1763));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean1 = false;
      boolean boolean2 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)0, false);
      BigDecimal bigDecimal0 = new BigDecimal(55296);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.releaseWriteEncodingBuffer((byte[]) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2042, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("|S%-P2=&");
      char[] charArray0 = new char[2];
      charArray0[1] = '1';
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)38, 0);
      uTF8JsonGenerator0.writeFieldName("|S%-P2=&");
      uTF8JsonGenerator0.writeString("");
      System.setCurrentTimeMillis(450L);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      mockPrintStream0.print("write a number");
      objectArray0[1] = (Object) ", although was supposed to have one";
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)24;
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, 13, true);
      uTF8JsonGenerator0.writeNumber(633.3099F);
      String string0 = "p";
      // Undeclared exception!
      uTF8JsonGenerator0.writeArrayFieldStart("gNY\"S&@6g");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[0] = ')';
      charArray0[1] = 'U';
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 45, 1155);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("blWb");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      pipedOutputStream0.flush();
      iOContext0.withEncoding(jsonEncoding0);
      pipedInputStream0.markSupported();
      pipedInputStream0.connect(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeFieldName("}i?58.\n$28@a@");
      uTF8JsonGenerator0.writeString("}i?58.\n$28@a@");
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = '(';
      charArray0[2] = '7';
      charArray0[3] = '+';
      uTF8JsonGenerator0._charBuffer = charArray0;
      uTF8JsonGenerator0.writeNumber((double) 1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      String string0 = "";
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((short)1427);
      byte[] byteArray1 = new byte[8];
      byteArray1[2] = (byte) (-89);
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte) (-89);
      byteArray1[6] = (byte)7;
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (int) (byte) (-89);
      uTF8JsonGenerator0.writeArray(intArray0, (int) (byte) (-89), (-3));
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((float) 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.releaseWriteEncodingBuffer((byte[]) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2042, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("|S%-P2=&");
      uTF8JsonGenerator0.writeFieldName("");
      SerializedString serializedString0 = new SerializedString("|S%-P2=&");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((-2510.3F));
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-68);
      iOContext0.allocWriteEncodingBuffer();
      byte[] byteArray1 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-68), (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 611, 0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0._verifyValueWrite("FFM");
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeNumber((double) 3);
      try { 
        uTF8JsonGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-214), (ObjectCodec) null, pipedOutputStream0, byteArray0, 99, true);
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-2023), (-71));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3537, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      uTF8JsonGenerator0.writeRaw(charArray0, 114, (int) (byte) (-75));
      byteArrayOutputStream0.flush();
      uTF8JsonGenerator0.writeFieldName("ftw");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeNumber((long) (byte) (-75));
      uTF8JsonGenerator0.getOutputBuffered();
      try { 
        uTF8JsonGenerator0._outputSurrogates((byte) (-75), 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xffffffb5, second 0x1
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.releaseWriteEncodingBuffer((byte[]) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2042, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("");
      char[] charArray0 = new char[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[0] = ')';
      charArray0[1] = 'U';
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 45, 1155);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.divideAndRemainder(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1514, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeArrayFieldStart("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-106);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2347), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeStartObject();
      uTF8JsonGenerator1.close();
      uTF8JsonGenerator0.writeNumber(5201.533793615);
      SerializedString serializedString1 = new SerializedString("![wYXk}G(}jV+6$1lQu");
      try { 
        uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a raw (unencoded) value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream1, byteArray0, 13, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3890), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) (byte)72);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("START_OBJECT");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.releaseWriteEncodingBuffer((byte[]) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2042, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("|S%-P2=&");
      char[] charArray0 = new char[2];
      charArray0[1] = '1';
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)38, 0);
      uTF8JsonGenerator0.writeFieldName("|S%-P2=&");
      uTF8JsonGenerator0.writeString("('true', 'false' or 'null')");
      uTF8JsonGenerator0.writeNumber((double) 2);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 56, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('@');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3890), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeArrayFieldStart("");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      SerializedString serializedString1 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding1);
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 56, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.getOutputTarget();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinaryField("Nsr", (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext1.allocWriteEncodingBuffer();
      int int0 = 21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 192, (ObjectCodec) null, mockPrintStream0, byteArray1, 21, false);
      char char0 = '1';
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 28, (ObjectCodec) null, mockPrintStream0, byteArray0, 51, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[3] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((short)1427);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte) (-89);
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte) (-89);
      byteArray1[6] = (byte)10;
      byteArray1[7] = (byte)48;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 0, 262144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)33;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 8, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-1), 1752, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8StreamJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("}s(%DL(`OdMb+", "7Rx");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)33, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-68);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer();
      byte[] byteArray1 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-68), (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      uTF8JsonGenerator0.writeString(charArray0, 2, (-2787));
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[3] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((short)1427);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte) (-89);
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte) (-89);
      byteArray1[6] = (byte)7;
      byteArray1[7] = (byte)48;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 0, 262144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 125, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumberField(", although was supposed to have one", 1212.9986808969684);
      uTF8JsonGenerator0.writeRaw('|');
      System.setCurrentTimeMillis(2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeRaw(", although was supposed to have one");
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeNumber(1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      printStream0.print(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'y';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 1);
      SerializedString serializedString0 = new SerializedString(", although was supposed to have one");
      serializedString0.appendQuoted(charArray1, 3);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("blWb");
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      IOContext iOContext4 = iOContext0.withEncoding(jsonEncoding1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext4, 56, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      iOContext3.allocReadIOBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumberField((String) null, (double) 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      pipedOutputStream0.flush();
      iOContext0.withEncoding(jsonEncoding0);
      pipedInputStream0.markSupported();
      pipedInputStream0.connect(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeFieldName("}i?58.\n$28@a@");
      uTF8JsonGenerator0.writeString("}i?58.\n$28@a@");
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = '(';
      charArray0[2] = '7';
      charArray0[3] = '+';
      uTF8JsonGenerator0._charBuffer = charArray0;
      uTF8JsonGenerator0.writeNumber((double) 1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.util.MinimalPrettyPrinter");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Wm.1)[{TQe|d(@ySl");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      mockPrintStream0.print("Wm.1)[{TQe|d(@ySl");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      SerializedString serializedString2 = new SerializedString("p");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString2);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((short)15);
      uTF8JsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Q');
      // Undeclared exception!
      try { 
        stringWriter1.write("", 2000, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("");
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = 'U';
      charArray0[2] = 'w';
      charArray0[3] = '\'';
      charArray0[4] = 'Y';
      iOContext0.allocTokenBuffer();
      charArray0[5] = '<';
      uTF8JsonGenerator0.writeString(charArray0, 3, 3);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "WRITE_BIGDECIMAL_AS_PLAIN", false, 'v', 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 25)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer();
      byte[] byteArray1 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[6] = '1';
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((-31.0795F));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (-2701), true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[2] = '';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      uTF8JsonGenerator0.writeString(charArray0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      byte byte1 = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-126);
      uTF8JsonGenerator0.writeBinaryField("=+2|'y|g}7)`ii", byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("uu~nTX%;u<~G");
      mockPrintStream0.println((Object) bufferRecycler0);
      uTF8JsonGenerator0.writeString("uu~nTX%;u<~G");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)48, 2437);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Locale locale0 = Locale.KOREA;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      System.setCurrentTimeMillis(19);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 255, false);
      uTF8JsonGenerator0.writeStartArray();
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArray1, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      File file0 = MockFile.createTempFile("+6\"ZN:+\"", "+6\"ZN:+\"");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 102);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, dataInputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 25, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumberField(", although was supposed to have one", (double) 1);
      uTF8JsonGenerator0.writeRaw('|');
      System.setCurrentTimeMillis(55296);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1432, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeRaw("start an object");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1514, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeArrayFieldStart("");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-106);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2311), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeStartObject();
      uTF8JsonGenerator1.close();
      uTF8JsonGenerator0.writeNumber(5201.533793615);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant(", although was supposed to have one", (String) null, true, 'L', 55296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte byte0 = (byte) (-68);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ", although was supposed to have one", true);
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-2636), false);
      char char0 = '1';
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2636
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)56;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-490), (ObjectCodec) null, pipedOutputStream0, byteArray0, 5, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = 1634;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1634, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeArray((int[]) null, 22, (-2663));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumberField("", (double) 2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber((double) 3);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2144, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 45, 1, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = new char[2];
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.util.MinimalPrettyPrinter");
      uTF8JsonGenerator0.writeRaw(charArray0, 90, (-2437));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 4411);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((short)15);
      uTF8JsonGenerator0.writeNumber((-1044.7539));
      SerializedString serializedString0 = new SerializedString("![wYXk}G(}jV+6$1lQu");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      mockPrintStream0.print(", although was supposed to have one");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)24, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 125, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumberField(", although was supposed to have one", 1212.9986808969684);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", although was supposed to have one");
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2048, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      String string0 = "|S%-P2=&";
      uTF8JsonGenerator0.writeBooleanField("8M", false);
      uTF8JsonGenerator0.writeString("|S%-P2=&");
      char[] charArray0 = new char[2];
      char char0 = '1';
      charArray0[1] = '1';
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)45, 0);
      try { 
        uTF8JsonGenerator0.writeFieldName("|S%-P2=&");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      mockPrintStream0.print(", although was supposed to have one");
      objectArray0[1] = (Object) ", although was supposed to have one";
      objectArray0[2] = (Object) bufferRecycler0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'y';
      charArray0[5] = 'y';
      charArray0[6] = 'y';
      charArray0[7] = 'y';
      uTF8JsonGenerator0.writeString(charArray0, (-864), (-4981));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, sequenceInputStream0, byteArray0, 2112);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      printStream0.print(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'y';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 1);
      SerializedString serializedString0 = new SerializedString(", although was supposed to have one");
      serializedString0.appendQuoted(charArray1, 3);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      String string0 = "blWb";
      SerializedString serializedString1 = new SerializedString("blWb");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      SerializedString serializedString2 = new SerializedString("]gkLZ]\"56L");
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 444, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-68);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream0, byteArray0, 64, false);
      uTF8JsonGenerator0.writeNumber(", although was supposed to have one");
      uTF8JsonGenerator0.writeNumber((short) (byte) (-68));
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 16, 16);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1498), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator1.getCharacterEscapes();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'a';
      iOContext0.allocReadIOBuffer(2);
      charArray0[1] = 'u';
      charArray0[2] = 'y';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 5, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-68);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer();
      byte[] byteArray1 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-68), (ObjectCodec) null, mockPrintStream0, byteArray1, 0, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      uTF8JsonGenerator0.writeString(charArray0, 2, (-2787));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      byte[] byteArray0 = new byte[3];
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      printStream0.println((Object) ", although was supposed to have one");
      uTF8JsonGenerator0.writeString(", although was supposed to have one");
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)34;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (byte)0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, (byte)34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding1);
      MockFile mockFile0 = new MockFile("s", "V6=(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-119);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 536870909);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-49), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("up");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -49
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      mockPrintStream0.print("write a number");
      objectArray0[1] = (Object) ", although was supposed to have one";
      objectArray0[2] = (Object) bufferRecycler0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(633.3099F);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("p");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte byte0 = (byte)48;
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte) (-89), true);
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((short)1427);
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 'Z';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1634, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = "Current context not an object but ";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2312), (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      int int0 = 33;
      uTF8JsonGenerator0._outputTail = 33;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      try { 
        uTF8JsonGenerator0.writeArrayFieldStart("Current context not an object but ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)50;
      String string0 = "";
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      iOContext1.allocBase64Buffer();
      BigInteger bigInteger1 = BigInteger.ONE;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
      char char0 = 'J';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((String) null, "[", false, 'J', (byte) (-128));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 1)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      OutputStream outputStream0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 47;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      int int1 = 121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1509, (ObjectCodec) null, (OutputStream) null, byteArray0, 121, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream(58);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, pipedOutputStream1);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      pipedOutputStream1.close();
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("");
      serializedString1.asQuotedChars();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber(2);
      try { 
        uTF8JsonGenerator0._flushBuffer();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      pipedInputStream0.connect(pipedOutputStream0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      BigDecimal bigDecimal1 = new BigDecimal((double) 55296);
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-77);
      byte byte0 = (byte)102;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)100;
      int int0 = 2363;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2363, false);
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = '';
      charArray0[2] = 'N';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[3] = '';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[3] = (byte) (-89);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((short)1427);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)52, 218);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      byte[] byteArray0 = new byte[3];
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      printStream0.println((Object) ", although was supposed to have one");
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)34;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (byte)0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream(58);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, pipedOutputStream1);
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'G';
      charArray0[2] = '?';
      uTF8JsonGenerator0.writeRaw(charArray0, 35, (-3986));
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName("1");
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber((double) (-3986));
      SerializedString serializedString1 = new SerializedString("write a binary value");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding1);
      MockFile mockFile0 = new MockFile("s", "V6=(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)104;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      mockPrintStream0.print("write a number");
      objectArray0[1] = (Object) ", although was supposed to have one";
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, 13, true);
      uTF8JsonGenerator0.writeNumber(633.3099F);
      SerializedString serializedString0 = new SerializedString("p");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      mockPrintStream0.print("write a number");
      objectArray0[1] = (Object) ", although was supposed to have one";
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      BigDecimal bigDecimal1 = new BigDecimal((double) (byte)2);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 3, (int) (byte)34);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 14, false);
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.asQuotedChars();
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      StringBuilder stringBuilder0 = new StringBuilder("Ur=8p,m3@h$E:=9");
      StringBuilder stringBuilder1 = stringBuilder0.deleteCharAt(1);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringBuilder1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream1;
      objectArray0[4] = (Object) mockPrintStream1;
      mockPrintStream1.format(locale0, "Ur=8p,m3@h$E:=9", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      Object object1 = new Object();
      mockPrintStream1.println(object1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1291), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3631, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte) (-30), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 2);
      int int0 = 58;
      PipedInputStream pipedInputStream0 = new PipedInputStream(58);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-76);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 512, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 2, false);
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 745, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 31, true);
      byteArrayBuilder0.reset();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 47, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      String string0 = "gO/>|ouLN";
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("gO/>|ouLN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding1);
      PipedInputStream pipedInputStream1 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream1.connect(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      charArray0[8] = 'B';
      uTF8JsonGenerator0.writeString(charArray0, (-192), (-1742));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[2];
      charArray0[1] = '[';
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2312), (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0._outputTail = 33;
      uTF8JsonGenerator0.writeString(charArray0, 3, 0);
      uTF8JsonGenerator0.writeNumber((double) (byte)34);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      byte[] byteArray0 = new byte[3];
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      printStream0.println((Object) ", although was supposed to have one");
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (byte)3);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding1);
      PipedInputStream pipedInputStream1 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream1.connect(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeFieldName("rlW4f6}YXu-Xom");
      uTF8JsonGenerator0.writeString("write a binary value");
      uTF8JsonGenerator0.writeNumber((double) 1);
      SerializedString serializedString0 = new SerializedString("rlW4f6}YXu-Xom");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) bufferRecycler0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) ", although was supposed to have one";
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = object0;
      mockPrintStream0.format(locale1, "j]f", objectArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, ", although was supposed to have one", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 427);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      mockPrintStream0.print("write a number");
      objectArray0[1] = (Object) ", although was supposed to have one";
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-18);
      mockPrintStream0.print((double) (byte) (-18));
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1960, true);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0._verifyValueWrite("write a number");
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeRaw('p');
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2048, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      String string0 = "|S%-P2=&";
      uTF8JsonGenerator0.writeString("|S%-P2=&");
      char[] charArray0 = new char[2];
      IOContext iOContext1 = new IOContext(bufferRecycler0, "|S%-P2=&", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)38, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator1.writeString(charArray0, 1, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'R';
      charArray0[2] = '2';
      uTF8JsonGenerator0.writeRaw(charArray0, 57, (-219));
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw('2');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = ", although was supposed to have one";
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte byte0 = (byte) (-89);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      int int0 = (-2062);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2062), (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream(58);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, pipedOutputStream1);
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = 'G';
      charArray0[2] = '?';
      uTF8JsonGenerator0.writeRaw(charArray0, 35, (-3986));
      IOContext iOContext3 = new IOContext(bufferRecycler1, uTF8JsonGenerator0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 192, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeNumber((short) (-1094));
      uTF8JsonGenerator1.writeNumber((short) (-5182));
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = new char[2];
      charArray0[1] = 'R';
      uTF8JsonGenerator0.writeRaw(charArray0, 90, (-2437));
      uTF8JsonGenerator0.writeFieldName("Current context not an object but ");
      uTF8JsonGenerator0.writeString("h`qoBiV");
      uTF8JsonGenerator0.writeNumber((-9.223372036854776E18));
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 55, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeRaw((char[]) null, 2, (-2702));
      uTF8JsonGenerator0.writeFieldName("Current context not an object but ");
      uTF8JsonGenerator0.writeString("Current context not an object but ");
      uTF8JsonGenerator0.writeNumber((double) 2);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      String string0 = null;
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray1, 1, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)3;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (byte)3);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3537, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      uTF8JsonGenerator0.writeRaw(charArray0, 114, (int) (byte) (-75));
      uTF8JsonGenerator0.writeFieldName("ftw");
      uTF8JsonGenerator0.writeString("h`qoBiV");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      uTF8JsonGenerator0.writeBinary(byteArray0, 0, (int) (byte) (-75));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeNumber((long) (byte) (-75));
      uTF8JsonGenerator0.getOutputBuffered();
      try { 
        uTF8JsonGenerator0._outputSurrogates((byte) (-75), 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0xffffffb5, second 0x1
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)45, false);
      uTF8JsonGenerator0.writeRaw((char[]) null, (int) (byte)45, (-561));
      try { 
        uTF8JsonGenerator0.writeFieldName("K>k_yN&");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      pipedInputStream0.connect(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeFieldName("}i?58.\n$28@a@");
      uTF8JsonGenerator0.writeString("}i?58.\n$28@a@");
      uTF8JsonGenerator0.writeNumber((double) 1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 889, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = ',';
      charArray0[5] = 'n';
      charArray0[6] = '>';
      uTF8JsonGenerator0.writeFieldName("}i?58.\n$28@a@");
      uTF8JsonGenerator0.writeString("}i?58.\n$28@a@");
      uTF8JsonGenerator0.writeNumber((double) 1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      uTF8JsonGenerator0.writeString(charArray0, 2, 2);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((-3108.72));
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[2];
      charArray0[1] = '[';
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2312), (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      uTF8JsonGenerator0._outputTail = 33;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString(charArray0, 3, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)51;
      byteArray0[8] = (byte)124;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)3, (-3264));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2312), (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (-1094));
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, dataInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      iOContext1.allocReadIOBuffer(1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1224), (ObjectCodec) null, pipedOutputStream1, byteArrayBuilder0.NO_BYTES, 0, false);
      uTF8JsonGenerator1.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("END_ARRAY", 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 115;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 115, (ObjectCodec) null, (OutputStream) null, byteArray0, (-3264), false);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, (-3986));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3264
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 14, false);
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("TnS9nOf)Bt R");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2349, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 7, 1399, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2730);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 40, false);
      uTF8JsonGenerator0.writeRaw(charArray0, 1833, (-2012));
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName("Current context not an object but ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      mockPrintStream0.print("write a number");
      objectArray0[1] = (Object) ", although was supposed to have one";
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, 13, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(633.3099F);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("p");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocWriteEncodingBuffer(3);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      uTF8JsonGenerator0._verifyPrettyValueWrite("{NGELA3`qSJZpf", (byte)0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((float) (byte) (-33));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2048, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      String string0 = "|S%-P2=&";
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("|S%-P2=&");
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      printStream0.print(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'y';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 1);
      SerializedString serializedString0 = new SerializedString(", although was supposed to have one");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("blWb");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      try { 
        uTF8JsonGenerator0._writePPFieldName("blWb");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, filterOutputStream0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = '>';
      charArray0[3] = 'd';
      charArray0[4] = 'n';
      uTF8JsonGenerator0.writeString(charArray0, 0, 0);
      int int0 = 1489;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-1239), 1489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1239
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-68);
      iOContext0.allocBase64Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-68);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, mockPrintStream0, byteArray1, 23, true);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber(0.0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler1, dataInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 117, false);
      uTF8JsonGenerator0.writeFieldName("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      SerializedString serializedString0 = new SerializedString("e5>n");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 115, false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      IOContext iOContext2 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      IOContext iOContext3 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-58), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-2072), (ObjectCodec) null, pipedOutputStream0, byteArray0, 55296, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'C';
      uTF8JsonGenerator0.writeRaw(charArray0, 4000, 0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(1505.9F);
      uTF8JsonGenerator0.writeNumber(56);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      String string0 = "write a number";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'Q';
      charArray0[2] = '>';
      char[] charArray1 = new char[6];
      charArray1[0] = 'Q';
      charArray1[1] = 'n';
      charArray1[2] = '>';
      charArray1[3] = 'Q';
      charArray1[4] = 'Q';
      charArray1[5] = 'Q';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString(charArray1, 48, 1974);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(58);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, pipedOutputStream1);
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = 'G';
      charArray0[2] = '?';
      uTF8JsonGenerator0.writeRaw(charArray0, 35, (-3986));
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("4?TnSN]}l>n\":", 3664, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      SerializedString serializedString0 = new SerializedString("h`qoBiV");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-75), (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-33);
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("{NGELA3`qSJZpf", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'R';
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an object but ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2312), (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = new char[2];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)97;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte) (-1), 90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 745, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      uTF8JsonGenerator0.writeFieldName("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("h`qoBiV");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)123;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)5, false);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0._verifyValueWrite("') as character #");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 745, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0._verifyValueWrite("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not , expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[19];
      charArray0[0] = '>';
      charArray0[1] = 'C';
      charArray0[3] = '|';
      charArray0[4] = '|';
      uTF8JsonGenerator0.writeRaw('v');
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator1._verifyValueWrite("");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[19];
      charArray0[0] = '>';
      charArray0[1] = 'C';
      charArray0[3] = '|';
      charArray0[4] = '|';
      jsonGenerator0.writeNumberField(", although was supposed to have one", 195.76);
      uTF8JsonGenerator0.writeRaw('v');
      uTF8JsonGenerator0.writeStartArray();
      Base64Variant base64Variant0 = null;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 66, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2048, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("|S%-P2=&");
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = '1';
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)38, 0);
      uTF8JsonGenerator0.writeFieldName("|S%-P2=&");
      uTF8JsonGenerator0.writeString("('true', 'false' or 'null')");
      uTF8JsonGenerator0.writeNumber(1003.0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      int int0 = 115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5603, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 115, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not an object but ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1315, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      char[] charArray0 = new char[19];
      charArray0[0] = '>';
      charArray0[1] = 'C';
      charArray0[3] = '|';
      charArray0[4] = '|';
      uTF8JsonGenerator0.writeRaw('v');
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 66, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 745, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber((-1.0F));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      String string0 = "ftw";
      MockPrintStream mockPrintStream0 = new MockPrintStream("ftw");
      PrintStream printStream0 = mockPrintStream0.append('N');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)1;
      int int0 = 4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0, byteArray0, 4, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("ftw");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 745, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeNumber(4882.867772);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 56, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0._verifyValueWrite("");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocNameCopyBuffer(1703);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 542, (ObjectCodec) null, pipedOutputStream0, byteArray0, 91, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      iOContext0.releaseTokenBuffer((char[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 3781, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3781
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'R';
      uTF8JsonGenerator0.writeRaw(charArray0, 90, (-2437));
      uTF8JsonGenerator0.writeFieldName("Current context not an object but ");
      uTF8JsonGenerator0.writeString("h`qoBiV");
      uTF8JsonGenerator0.writeNumber(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-375), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2437, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-3700), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(1858.47734885896);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3700
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)72, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      iOContext1.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 26);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", 224, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5603, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 115, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((double) 115);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1279), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      int int0 = 4;
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray1, (-1279), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-581), (ObjectCodec) null, (OutputStream) null, byteArray0, 192, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'Q';
      charArray0[2] = '>';
      charArray0[3] = 'N';
      uTF8JsonGenerator0.writeRaw(charArray0, 3, 0);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      
      SerializedString serializedString0 = new SerializedString("write a number");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((float) 3);
      assertEquals(17, uTF8JsonGenerator0.getOutputBuffered());
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding0);
      iOContext1.releaseTokenBuffer((char[]) null);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 46, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(",Q88z9:fO\";1XvfH", (-547));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-89), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2047, (ObjectCodec) null, (OutputStream) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      printStream0.print(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'y';
      charArray1[1] = 'Q';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      charArray1[2] = '>';
      charArray1[3] = 'N';
      uTF8JsonGenerator0.writeRaw(charArray1, 3, 0);
      SerializedString serializedString0 = new SerializedString("write a number");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'C';
      uTF8JsonGenerator0.writeRaw(charArray0, 4000, 0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((double) 1);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1536, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("", (int) (byte)0, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 97, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)0, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'R';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      try { 
        uTF8JsonGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1279), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber("");
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, (OutputStream) null, byteArray0, 11, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'N';
      int int0 = 1017;
      uTF8JsonGenerator0.writeRaw(charArray0, 1017, (-2291));
      SerializedString serializedString0 = new SerializedString("T]J");
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintStream0.format(locale0, "write a number", objectArray0);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1834, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      iOContext0.releaseTokenBuffer((char[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1279), (ObjectCodec) null, (OutputStream) null, byteArray0, 2924, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(",Q88z9:fO\";1XvfH", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "write a number";
      objectArray0[4] = (Object) ", although was supposed to have one";
      mockPrintStream0.format(locale0, "'$FHOLxn^g", objectArray0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 116, true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'C';
      uTF8JsonGenerator0.writeRaw(charArray0, 4000, 0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((-5237.3F));
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.getOutputBuffered();
      try { 
        uTF8JsonGenerator0._outputSurrogates(3, 48);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x3, second 0x30
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'C';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2047, (ObjectCodec) null, (OutputStream) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0._releaseBuffers();
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3537, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      uTF8JsonGenerator0.writeRaw(charArray0, 144, (int) (byte) (-75));
      uTF8JsonGenerator0.writeFieldName("ftw");
      uTF8JsonGenerator0.writeString("h`qoBiV");
      uTF8JsonGenerator0.writeNumber(0.0);
      assertEquals(16, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.close();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = ", although was supposed to have one";
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintStream0.format(locale0, "write a number", objectArray0);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, (OutputStream) null, byteArray0, 98, false);
      iOContext0.constructTextBuffer();
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-849), (ObjectCodec) null, (OutputStream) null, byteArray0, 35, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object1 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeStartObject();
      uTF8JsonGenerator0.writeString("write a number");
      try { 
        uTF8JsonGenerator0._outputSurrogates(1, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incomplete surrogate pair: first char 0x1, second 0x0
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 97, (ObjectCodec) null, (OutputStream) null, byteArray0, 1032, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0._writePPFieldName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'Q';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      charArray0[2] = '>';
      charArray0[3] = 'N';
      uTF8JsonGenerator0.writeRaw(charArray0, 3, 0);
      SerializedString serializedString0 = new SerializedString("write a number");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(32, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2831, (ObjectCodec) null, (OutputStream) null, byteArray0, 101, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      mockPrintStream0.print("write a number");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[6] = 'N';
      charArray0[7] = 'N';
      charArray0[8] = 'N';
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-20);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 44, (ObjectCodec) null, mockPrintStream0, byteArray0, 105, true);
      uTF8JsonGenerator0.writeRaw("write a number");
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 3, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-33), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        uTF8JsonGenerator0.writeString("Unexpected problem: chain of filtered context broken");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a string, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1279), (ObjectCodec) null, (OutputStream) null, byteArray0, 2924, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5603, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 115, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-75);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2048, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      String string0 = "|S%-P2=&";
      uTF8JsonGenerator0.writeString("|S%-P2=&");
      BigInteger bigInteger0 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2106), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)38, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      mockPrintStream0.print("write a number");
      objectArray0[1] = (Object) ", although was supposed to have one";
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1960, true);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0._verifyValueWrite("write a number");
      assertArrayEquals(new byte[] {(byte)32, (byte)117, (byte)108, (byte)108}, byteArray0);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeRaw('p');
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-77);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 4554, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)45, true);
      try { 
        uTF8JsonGenerator0.writeString("qwbQ^");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = ", although was supposed to have one";
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) iOContext0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintStream0.format(locale0, "write a number", objectArray0);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, (OutputStream) null, byteArray0, 98, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3537, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      uTF8JsonGenerator0.writeRaw(charArray0, 144, (int) (byte) (-75));
      uTF8JsonGenerator0.writeString("h`qoBiV");
      assertEquals(9, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2047, (ObjectCodec) null, (OutputStream) null, byteArray0, 35, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)0;
      byteArray0[0] = (byte)102;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)2;
      iOContext1.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.getOutputTarget();
      assertArrayEquals(new byte[] {(byte)102, (byte) (-77), (byte)110, (byte)117, (byte)108, (byte)108, (byte)32}, byteArray0);
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object object1 = new Object();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[0] = '>';
      charArray0[1] = 'N';
      charArray0[2] = '>';
      charArray0[3] = 'y';
      charArray0[4] = 'y';
      uTF8JsonGenerator0.writeRaw(charArray0, 81, 0);
      uTF8JsonGenerator0.writeRaw('v');
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (-849), false);
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = 'Q';
      charArray0[2] = ' ';
      charArray0[3] = 'Y';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, (-1585));
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((String) null, "Can not ", false, '$', (byte) (-33));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 8)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-774), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)115, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("Unexpected problem: chain of filtered context broken");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)0;
      byteArray0[0] = (byte)102;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)2;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray1, (byte)98, true);
      try { 
        uTF8JsonGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)123;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1307), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1043, true);
      char[] charArray0 = new char[9];
      charArray0[4] = 'N';
      charArray0[1] = '>';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = 'N';
      charArray0[8] = 'N';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream(", although was supposed to have one");
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[21];
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintStream0.format(locale0, "write a number", objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-74);
      byteArray0[8] = (byte) (-8);
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-540), (ObjectCodec) null, mockPrintStream0, byteArray0, (-81), false);
      try { 
        uTF8JsonGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an ARRAY but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (-849), false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -849
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-75);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'y';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)0;
      byteArray0[0] = (byte)102;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0._verifyValueWrite("");
      assertArrayEquals(new byte[] {(byte)102, (byte) (-77), (byte)110, (byte)117, (byte)108, (byte)108, (byte)32}, byteArray0);
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      objectArray0[1] = (Object) ", although was supposed to have one";
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.core.json.ReaderBasedJsonParser";
      objectArray0[4] = (Object) ", although was supposed to have one";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 56319, 21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56319
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)124;
      byteArray0[6] = (byte)127;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)123;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      try { 
        uTF8JsonGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      String string0 = "com.fasterxml.jackson.core.JsonPointer";
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.JsonPointer");
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 825, (ObjectCodec) null, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0._verifyValueWrite("");
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1343, (ObjectCodec) null, (OutputStream) null, byteArray0, 500, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-508), (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, (-852), false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -852
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte) (-74);
      byteArray0[8] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte) (-89), true);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeString("Unexpected problem: chain of filtered context broken");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -89
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("j,Q:u;L");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.json.JsonGeneratorImpl", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1375), (ObjectCodec) null, mockFileOutputStream0, (byte[]) null, 1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2061, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = ';';
      charArray0[4] = 'R';
      charArray0[5] = '-';
      charArray0[6] = 'c';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-572), false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-32);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeRaw("Can not ", 2336, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
