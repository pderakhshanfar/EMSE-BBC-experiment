/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:57:13 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-~[,z m| ZT+,]X");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      CSVParser cSVParser1 = cSVFormat0.parse(stringReader0);
      cSVParser1.close();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GJ[`");
      File file0 = MockFile.createTempFile("format", "format", (File) mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
      CSVParser cSVParser0 = CSVParser.parse("CN", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[CN]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('M');
      CSVParser cSVParser0 = CSVParser.parse("reader", cSVFormat0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
      CSVParser cSVParser0 = CSVParser.parse("CN", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-~[,z m| ZT+,]X");
      Character character0 = new Character('\\');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('W', character0, quote0, (Character) null, character0, false, false, "-~[,z m| ZT+,]X", ") invalid parse sequence", stringArray0, true);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Character character0 = new Character('H');
      Character character1 = new Character('c');
      Character character2 = Character.valueOf('H');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('!', character2, quote0, character1, character0, false, false, (String) null, "9", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("c3ubpw3hwg |p", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("~#y[hx#", "~#y[hx#");
      URL uRL0 = file0.toURL();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat(';');
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'charset' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Character character0 = Character.valueOf('X');
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[6];
      CSVFormat cSVFormat0 = new CSVFormat('X', character0, quote0, (Character) null, character0, true, true, "y8Gyi7lAm?AU>TM%/^", "", stringArray0, true);
      // Undeclared exception!
      try { 
        CSVParser.parse("y8Gyi7lAm?AU>TM%/^", cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('X')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVParser.parse("", (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Character character0 = Character.valueOf('w');
      Quote quote0 = Quote.NONE;
      Character character1 = new Character('!');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('b', character0, quote0, character1, character0, true, true, "VUM+]V(3S 6'1Y/\"w", "VUM+]V(3S 6'1Y/\"w", stringArray0, true);
      try { 
        CSVParser.parse("VUM+]V(3S 6'1Y/\"w", cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // EOF whilst processing escape sequence
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("O5;QVxl");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('B');
      Character character0 = Character.valueOf('B');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      mockFile0.createNewFile();
      // Undeclared exception!
      try { 
        CSVParser.parse((File) mockFile0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the delimiter cannot be the same ('B')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0C[q$,;p|b");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("//r'?T]", cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Character character0 = new Character('H');
      Character character1 = new Character('c');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('!', character0, quote0, character1, character0, false, false, (String) null, "9", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("<%/!-", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.close();
      try { 
        cSVParser0.getRecords(linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Quote quote0 = Quote.NONE;
      Character character0 = Character.valueOf('A');
      String[] stringArray0 = new String[5];
      CSVFormat cSVFormat0 = new CSVFormat('r', (Character) null, quote0, character0, character0, false, false, ") invalid parse sequence", "CN", stringArray0, true);
      StringReader stringReader0 = new StringReader(") invalid parse sequence");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start and the escape character cannot be the same ('A')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.Token$Type");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-~[,z m| ZT+,]X");
      Character character0 = new Character('\\');
      Quote quote0 = Quote.NONE;
      stringReader0.close();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('W', character0, quote0, (Character) null, character0, false, false, "-~[,z m| ZT+,]X", ") invalid parse sequence", stringArray0, true);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('M');
      CSVParser cSVParser0 = CSVParser.parse("reader", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
      CSVParser cSVParser0 = CSVParser.parse("-~[,z m| ZT+,]X", cSVFormat0);
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Character character0 = new Character('H');
      Character character1 = new Character('c');
      Character character2 = Character.valueOf('H');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('!', character2, quote0, character1, character0, false, false, (String) null, (String) null, stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('M');
      CSVParser cSVParser0 = CSVParser.parse("reader", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-~[,z m| ZT+,]X");
      Character character0 = new Character('\\');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[1];
      Character character1 = new Character('R');
      CSVFormat cSVFormat0 = new CSVFormat('X', (Character) null, quote0, character1, character0, false, false, ") invalid parse sequence", ") invalid parse sequence", stringArray0, false);
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[-~[,z m| ZT+,], ]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Character character0 = new Character('H');
      Character character1 = new Character('c');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('!', character0, quote0, character1, character0, true, true, (String) null, "9", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("c3ubpw3hwg |p", cSVFormat0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Character character0 = new Character('H');
      Character character1 = new Character('c');
      Character character2 = Character.valueOf('H');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('!', character2, quote0, character1, character0, false, false, (String) null, "9", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("<%/!-", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(2, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Character character0 = new Character('\\');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('W', character0, quote0, (Character) null, character0, false, false, "-~[,z m| ZT+,]X", ") invalid parse sequence", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse(") invalid parse sequence", cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<", cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Character character0 = new Character('H');
      Character character1 = new Character('c');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('!', character0, quote0, character1, character0, true, true, (String) null, "9", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("6", cSVFormat0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFile mockFile0 = new MockFile("VUM+]V(3S 6'1Y/\"w");
      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("_5859iR-RFC", cSVFormat0);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Character character0 = new Character('H');
      Character character1 = new Character('c');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('!', character0, quote0, character1, character0, true, true, (String) null, "9", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("6", cSVFormat0);
      cSVParser0.iterator();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }
}
