/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 13:22:20 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("Ow<=n <}KUg8c_:rX8,");
      stringReader0.close();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/|}6+SnfNYz9+P)_");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "|}6+SnfNYz9+P)_");
      URL uRL1 = MockURL.URL(uRL0, "|}6+SnfNYz9+P)_");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse(uRL1, charset0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      File file0 = MockFile.createTempFile("./b}S'GBVU\"_{|NW]E", "w&~Y$T65(RhBSR`I");
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7:fD%3\"*lhu3/KQ";
      stringArray0[1] = "l*";
      stringArray0[2] = "format";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("7:fD%3\"*lhu3/KQ");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[7:fD%3\"*lhu3/KQ]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("7:fD%3\"*lhu3/KQ");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[7:fD%3\"*lhu3/KQ]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" eof reached before encapsulated token finished");
      Character character0 = new Character('e');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('=');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('e', character0, quote0, character1, (Character) null, false, false, "lmx*d~?7xvh", " eof reached before encapsulated token finished", stringArray0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('S');
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" eof reached before encapsulated token finished");
      Character character0 = new Character('m');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('!');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('m', character0, quote0, character1, (Character) null, false, false, "lmx*d~?7xvh", " eof reached before encapsulated token finished", stringArray0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('8');
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader(") EOF reached before encapsulated token finished");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("EOF whilst processing escape sequence", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'charset' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('V');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('V');
      // Undeclared exception!
      try { 
        CSVParser.parse("$VALUES", cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the delimiter cannot be the same ('V')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Character character0 = new Character('e');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('.');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('e', character0, quote0, character1, (Character) null, false, true, "lmx*d~?7xvh", " eof reached before encapsulated token finished", stringArray0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('S');
      try { 
        CSVParser.parse("e*hht27g%^", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "NIa<*2^`cN");
      File file0 = MockFile.createTempFile("]CVQ)", (String) null, (File) mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
      Character character0 = Character.valueOf('%');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same ('%')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('G', (Character) null, quote0, (Character) null, (Character) null, true, false, "cb`HC`MNi7_b+jY2", "cb`HC`MNi7_b+jY2", stringArray0, true);
      MockFile mockFile0 = new MockFile("%`GF8p6KTJe", "8$f,kp>!m");
      File file0 = MockFile.createTempFile(" EmptyLines:ignored", " EmptyLines:ignored", (File) mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        CSVParser.parse(file0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" eof reached before encapsulated token finished");
      Character character0 = new Character('e');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('=');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('e', character0, quote0, character1, (Character) null, false, false, "lmx*d~?7xvh", " eof reached before encapsulated token finished", stringArray0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('S');
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse(" EmptyLines:ignored", cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = MockFile.createTempFile("MHl/|y\"AW*", "");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      file0.delete();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      try { 
        cSVParser0.getRecords(linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      stringReader0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("%`GF8p6KTJe", "8$f,kp>!m");
      File file0 = MockFile.createTempFile(" EmptyLines:ignored", " EmptyLines:ignored", (File) mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      try { 
        cSVParser0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G&l|uIG\"e]{#Ii");
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G&l|uIG\"e]{#Ii";
      stringArray0[1] = "G&l|uIG\"e]{#Ii";
      CSVFormat cSVFormat0 = new CSVFormat('6', (Character) null, quote0, (Character) null, (Character) null, true, true, "G&l|uIG\"e]{#Ii", "G&l|uIG\"e]{#Ii", stringArray0, true);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The header contains duplicate names: [G&l|uIG\"e]{#Ii, G&l|uIG\"e]{#Ii]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      StringReader stringReader0 = new StringReader("4)(Vh!$OC,Xq+8");
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      stringReader0.close();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("reader");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('.');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVParser cSVParser0 = CSVParser.parse(".W=", cSVFormat1);
      cSVParser0.getRecords();
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("Ow<=n <}KUg8c_:rX8,");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("99Q$0gk,6", cSVFormat0);
      cSVParser0.close();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(line ");
      Character character0 = new Character('>');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('`', character0, quote0, character0, (Character) null, false, false, "lmx*d~?7xvh", "e*hht27g%^", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('V');
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("l*", cSVFormat0);
      HashMap<CSVRecord, CSVRecord> hashMap0 = new HashMap<CSVRecord, CSVRecord>();
      Set<CSVRecord> set0 = hashMap0.keySet();
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((Collection<CSVRecord>) set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse(".W=", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7:fD%3\"*lhu3/KQ";
      stringArray0[1] = "l*";
      stringArray0[2] = "format";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("7:fD%3\"*lhu3/KQ");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(4, map0.size());
      assertNotNull(map0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('G', (Character) null, quote0, (Character) null, (Character) null, true, false, "cb`HC`MNi7_b+jY2", "cb`HC`MNi7_b+jY2", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse(" EmptyLines:ignored", cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("EOF whilst processing escape sequence", cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" eof reached before encapsulated token finished");
      Character character0 = new Character('m');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('!');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('m', character0, quote0, character1, (Character) null, false, false, "lmx*d~?7xvh", " eof reached before encapsulated token finished", stringArray0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('8');
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      cSVParser0.getCurrentLineNumber();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("%`GF8p6KTJe", "8$f,kp>!m");
      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
}
