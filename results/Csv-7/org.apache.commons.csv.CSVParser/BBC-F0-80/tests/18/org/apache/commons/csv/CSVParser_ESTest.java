/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 06:46:30 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("\";+", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "no more csv records available");
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character(')');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('$', (Character) null, quote0, character0, (Character) null, true, true, "The escape character an the delimiter cannot be the same ('", ") VnvaliO parse seunce", stringArray0, false);
      MockFile mockFile0 = new MockFile(") VnvaliO parse seunce");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(") VnvaliO parse seunce");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Unexpected Token type: ");
      CSVParser cSVParser0 = CSVParser.parse((File) mockFile0, cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("format");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.getRecords();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YxhE*JlUhzmgqHZv");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[YxhE*JlUhzmgqHZv]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('n', (Character) null, quote0, (Character) null, (Character) null, false, false, "The escape character and the delimiter cannot be the same ('", "The escape character and the delimiter cannot be the same ('", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("The escape character and the delimiter cannot be the same ('", cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[The escape character a, d the delimiter ca, , ot be the same (']", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Character character0 = new Character('S');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('e');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      CSVFormat cSVFormat0 = new CSVFormat('3', character0, quote0, character1, character1, false, false, "", "", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("Lz,R'agPL", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.getRecords();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('n', (Character) null, quote0, (Character) null, (Character) null, false, false, "The escape character and the delimiter cannot be the same ('", "The escape character and the delimiter cannot be the same ('", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("The escape character and the delimiter cannot be the same ('", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("Zaq5");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('U');
      // Undeclared exception!
      try { 
        CSVParser.parse("Z-Sf*f", cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same ('U')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character('$');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('-', (Character) null, quote0, character0, (Character) null, true, true, "The escape character and the delimiter cannot be the same ('", ") invalid parse sequence", stringArray0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(')');
      try { 
        CSVParser.parse(") invalid parse sequence", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":v}");
      File file0 = MockFile.createTempFile("url", "url", (File) mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('B');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('B');
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('B')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dQ[g", "dQ[g");
      // Undeclared exception!
      try { 
        CSVParser.parse((File) mockFile0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = new Character(')');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('$', (Character) null, quote0, character0, (Character) null, true, true, "The escape character an the delimiter cannot be the same ('", ") VnvaliO parse seunce", stringArray0, false);
      MockFile mockFile0 = new MockFile(") VnvaliO parse seunce");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(") VnvaliO parse seunce");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Unexpected Token type: ");
      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~L=$N9J9YMT");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      stringReader0.close();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("The escape character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("sje/The escpe character an the delimiter cannot be the same ('");
      byte[] byteArray0 = new byte[14];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("sje", "The escpe character an the delimiter cannot be the same ('");
      CSVParser cSVParser0 = CSVParser.parse((File) mockFile0, cSVFormat0);
      try { 
        cSVParser0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVParser");
      Character character0 = Character.valueOf('A');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[9];
      CSVFormat cSVFormat0 = new CSVFormat('A', character0, quote0, character0, character0, false, true, "", "", stringArray0, true);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('A')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R/%Jsh0yT<.>(D");
      stringReader0.close();
      Character character0 = new Character(' ');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('L');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('<', character0, quote0, character1, character1, false, true, "url", "R/%Jsh0yT<.>(D", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('u');
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("eHm8,,y)W#;aX", cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Character character0 = new Character('S');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('e');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      CSVFormat cSVFormat0 = new CSVFormat('3', character0, quote0, character1, character1, false, false, "", "", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('n', (Character) null, quote0, (Character) null, (Character) null, false, false, "The escape character and the delimiter cannot be the same ('", "The escape character and the delimiter cannot be the same ('", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('n', (Character) null, quote0, (Character) null, (Character) null, false, false, "The escape character and the delimiter cannot be the same ('", "The escape character and the delimiter cannot be the same ('", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("The escape character and the delimiter cannot be the same ('", cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("The escape character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Character character0 = new Character('S');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('e');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      CSVFormat cSVFormat0 = new CSVFormat('3', character0, quote0, character1, character1, false, false, "", "", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("Zaq5");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character(')');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('$', (Character) null, quote0, character0, (Character) null, true, true, "The escape character an the delimiter cannot be the same ('", ") VnvaliO parse seunce", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse(") VnvaliO parse seunce", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('~', (Character) null, quote0, (Character) null, (Character) null, false, false, "The escape character and the delimiter cannot be the same ('", "The escape character and the delimiter cannot be the same ('", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("The escape character and the delimiter cannot be the same ('", cSVFormat0);
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Character character0 = new Character('J');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('e');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      CSVFormat cSVFormat0 = new CSVFormat('3', character0, quote0, character1, character1, false, false, "", "", stringArray0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('J');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character(')');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('$', (Character) null, quote0, character0, (Character) null, true, true, "The escape character an the delimiter cannot be the same ('", ") VnvaliO parse seunce", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse(") VnvaliO parse seunce", cSVFormat0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character(')');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('$', (Character) null, quote0, character0, (Character) null, true, true, "The escape character an the delimiter cannot be the same ('", ") VnvaliO parse seunce", stringArray0, false);
      MockFile mockFile0 = new MockFile(") VnvaliO parse seunce");
      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character(')');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('$', (Character) null, quote0, character0, (Character) null, true, true, "The escape character an the delimiter cannot be the same ('", ") VnvaliO parse seunce", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse(") VnvaliO parse seunce", cSVFormat0);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
}
