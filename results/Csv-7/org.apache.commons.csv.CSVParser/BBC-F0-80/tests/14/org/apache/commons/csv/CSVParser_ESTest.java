/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 06:45:58 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("\":^(L +-Rod,", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "evrc<[~5b{:x");
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Character character0 = Character.valueOf('s');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('Z');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "nuelstringh<";
      stringArray0[2] = ", ";
      CSVFormat cSVFormat0 = new CSVFormat('?', character1, quote0, character0, (Character) null, false, false, "Q9XSU,ex'=", "sML8N%>_an74~B<Pj3,", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse(", ", cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[, ]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("2*[zu", cSVFormat0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("Index for header '%s' is %d but CSVRecord only has %d values!", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("evRc<[~5B{:X", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> Escape=<+> QuoteChar=<+> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[]", cSVFormat1);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N4,kGGcd", "N4,kGGcd");
      URL uRL0 = mockFile0.toURL();
      Charset charset0 = Charset.defaultCharset();
      Character character0 = Character.valueOf('E');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('E', character0, quote0, character0, character0, true, false, "N4,kGGcd", "N4,kGGcd", stringArray0, false);
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "evrc<[~5b{:x");
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      Character character0 = Character.valueOf('+');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[9];
      CSVFormat cSVFormat0 = new CSVFormat('\\', character0, quote0, character0, character0, true, true, "evrc<[~5b{:x", "evrc<[~5b{:x", stringArray0, true);
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('+')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Character character0 = new Character('D');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat0 = new CSVFormat('7', character0, quote0, character0, character0, false, true, "[CKQ:6Z^f';)", "", stringArray0, true);
      // Undeclared exception!
      try { 
        CSVParser.parse("[CKQ:6Z^f';)", cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('D')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Character character0 = Character.valueOf('u');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('u', character0, quote0, (Character) null, character0, true, true, ", ", "", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('N');
      try { 
        CSVParser.parse("unexpected token type:", cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = MockFile.createTempFile("@uOc8V?()", "@uOc8V?()");
      Character character0 = new Character('<');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[6];
      CSVFormat cSVFormat0 = new CSVFormat('o', character0, quote0, character0, character0, true, true, "@uOc8V?()", (String) null, stringArray0, true);
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('<')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = new Character('S');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = new Character('K');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('S', (Character) null, quote0, character0, character1, false, false, "6", "6", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('d');
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("6");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "6");
      MockFile mockFile0 = new MockFile("6");
      try { 
        CSVParser.parse((File) mockFile0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('v');
      CSVParser cSVParser0 = CSVParser.parse("K'\"bOI", cSVFormat0);
      cSVParser0.close();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      try { 
        cSVParser0.getRecords(linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = MockFile.createTempFile("Index for header '%s' is %d but CSVRecord only has %d values!", "Index for header '%s' is %d but CSVRecord only has %d values!");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("yttmcB7r^+&,?zG5&I");
      File file0 = MockFile.createTempFile("nk#zb\"", "nk#zb\"", (File) mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      try { 
        cSVParser0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Character character0 = Character.valueOf('7');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat0 = new CSVFormat('7', character0, quote0, character0, character0, false, true, "", (String) null, stringArray0, true);
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('7')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(lfSne7");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("f$it#AVo+QR'6@");
      stringReader0.close();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("sml8n%>_an74~b<pj3,", cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("RecordSeparator=<", cSVFormat0);
      cSVParser0.nextRecord();
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("NullString=<");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('}');
      CSVParser cSVParser0 = CSVParser.parse("}^", cSVFormat1);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}^");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "_HOur~.dN&OV=TVP");
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('}', (Character) null, quote0, (Character) null, (Character) null, false, false, "}^", "}^", stringArray0, true);
      MockFile mockFile0 = new MockFile("}^");
      CSVParser cSVParser0 = CSVParser.parse((File) mockFile0, cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Character character0 = Character.valueOf('u');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('u', character0, quote0, (Character) null, character0, true, true, "", "org.apache.commons.csv.CSVParser$2", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('N');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Character character0 = Character.valueOf('G');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('_', character0, quote0, (Character) null, character0, true, true, (String) null, (String) null, stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("i54bn$NyB\":B~", cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Character character0 = Character.valueOf('u');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('u', character0, quote0, (Character) null, character0, true, true, ", ", "", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('N');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("evRc<[~5B{:X", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Character character0 = new Character('S');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = new Character('K');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('S', (Character) null, quote0, character0, character1, false, false, "6", "6", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('d');
      CSVParser cSVParser0 = CSVParser.parse("5", cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNotNull(map0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Character character0 = Character.valueOf('s');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('Z');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('Q', character1, quote0, character0, character1, false, false, "org.apache.commons.csv.csvparser$2", "org.apache.commons.csv.CSVParser", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("org.apache.commons.csv.CSVParser", cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("}^", cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> Escape=<+> QuoteChar=<+> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[]", cSVFormat0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("}^");
      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("}^", cSVFormat0);
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
}
