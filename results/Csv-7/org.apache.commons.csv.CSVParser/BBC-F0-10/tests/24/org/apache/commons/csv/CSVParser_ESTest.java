/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 07:48:17 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Zb|6v{ZJ s");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      stringReader0.close();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('k');
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "QNKKB");
      CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("HS|SU&,LEe&PQm$", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[HS|SU&, LEe&PQm$]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("e3rtL<UV374N#ir%P", cSVFormat0);
      Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVParser");
      Quote quote0 = Quote.ALL;
      Character character0 = new Character('q');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('S', (Character) null, quote0, character0, (Character) null, false, false, "&OAkQ9_6dB*X", "&OAkQ9_6dB*X", stringArray0, false);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVParser");
      Quote quote0 = Quote.ALL;
      Character character0 = new Character('q');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('S', (Character) null, quote0, character0, (Character) null, false, false, "&OAkQ9_6dB*X", "&OAkQ9_6dB*X", stringArray0, false);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.getRecords();
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("Nsdxnpo9r I", "");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('k');
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Quote quote0 = Quote.ALL;
      Character character0 = new Character('q');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('W', (Character) null, quote0, character0, (Character) null, false, false, "&OAkQ9_6dB*X", "&OAkQ9_6dB*X", stringArray0, false);
      MockFile mockFile0 = new MockFile((File) null, "24WA)t1jjVC");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'charset' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Character character0 = Character.valueOf('3');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[5];
      CSVFormat cSVFormat0 = new CSVFormat('3', character0, quote0, character0, character0, false, true, ")te", "", stringArray0, false);
      // Undeclared exception!
      try { 
        CSVParser.parse("W+vQ", cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('3')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[2] = '9';
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('1', (Character) '{', quote0, (Character) charArray0[2], (Character) charArray0[4], true, true, "{", "{", stringArray0, true);
      try { 
        CSVParser.parse("{", cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("'s1|0x(vo=S4s&J", "'s1|0x(vo=S4s&J");
      Character character0 = new Character('l');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[5];
      CSVFormat cSVFormat0 = new CSVFormat('2', character0, quote0, character0, character0, true, false, "x6dr@FTV;c'5E?g", "'s1|0x(vo=S4s&J", stringArray0, true);
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('l')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Character character0 = new Character('j');
      Quote quote0 = Quote.MINIMAL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/&OAkQ96dB-X0xv[D");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('2', character0, quote0, (Character) null, character0, true, false, "&OAkQ96dB-X", "n$-~LZr@5q`", stringArray0, true);
      File file0 = MockFile.createTempFile("&OAkQ96dB-X", "xv[D");
      try { 
        CSVParser.parse(file0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "^Gd*4om.LW,");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("m4)LPYz&f'3H7N");
      stringReader0.close();
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('k');
      StringReader stringReader0 = new StringReader("Aca>%y=\\9iYv5Eo9");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("/bexZ8#d2381aV` tkp", cSVFormat0);
      cSVParser0.close();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      try { 
        cSVParser0.getRecords(linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("=i+T=T0", cSVFormat0);
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = MockFile.createTempFile("-$TG)Gnfx#m,^:.9*1", "-$TG)Gnfx#m,^:.9*1");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      try { 
        cSVParser0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I>");
      Character character0 = Character.valueOf('P');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat0 = new CSVFormat('/', character0, quote0, character0, character0, false, false, "q2-tmn\"D", "", (String[]) null, false);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('P')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader(") invalid char between encapsulated token and delimiter");
      stringReader0.close();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('k');
      CSVParser cSVParser0 = CSVParser.parse("L|@r0MYL", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords(linkedList0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('H');
      CSVParser cSVParser0 = CSVParser.parse("H5pNXM87vo(v?2\"W", cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Character character0 = new Character('j');
      Quote quote0 = Quote.MINIMAL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/&OAkQ96dB-X0xv[D");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "]");
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('2', character0, quote0, (Character) null, character0, true, false, "&OAkQ96dB-X", "n$-~LZr@5q`", stringArray0, true);
      File file0 = MockFile.createTempFile("&OAkQ96dB-X", "xv[D");
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("HS|SU&,LEe&PQm$", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[HS|SU&, LEe&PQm$]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("=i+T=T0", cSVFormat0);
      cSVParser0.close();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("H5pNXM87vo(v?2\"W", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Character character0 = new Character('j');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('2', character0, quote0, (Character) null, character0, true, false, "&OAkQ96dB-X", "n$-~LZr@5q`", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("n$-~LZr@5q`", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(1, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('k');
      CSVParser cSVParser0 = CSVParser.parse("L|@r0MYL", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVParser");
      Quote quote0 = Quote.ALL;
      Character character0 = new Character('q');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('W', (Character) null, quote0, character0, (Character) null, false, false, "&OAkQ9_6dB*X", "&OAkQ9_6dB*X", stringArray0, false);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Character character0 = new Character('j');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('2', character0, quote0, (Character) null, character0, true, false, "&OAkQ96dB-X", "n$-~LZr@5q`", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("n$-~LZr@5q`", cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Character character0 = new Character('j');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('2', character0, quote0, (Character) null, character0, true, false, "&OAkQ96dB-X", "n$-~LZr@5q`", stringArray0, true);
      File file0 = MockFile.createTempFile("&OAkQ96dB-X", "xv[D");
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVParser");
      Quote quote0 = Quote.ALL;
      Character character0 = new Character('q');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('W', (Character) null, quote0, character0, (Character) null, false, false, "&OAkQ9_6dB*X", "&OAkQ9_6dB*X", stringArray0, false);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('k');
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
}
