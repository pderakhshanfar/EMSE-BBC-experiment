/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 03:54:39 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('(');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVParser cSVParser0 = CSVParser.parse("(startline ", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "zu-g2wt#cs\"");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Character character0 = new Character('m');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('N', character0, quote0, character0, character0, true, true, "zr)dpcY", "Header:", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('(');
      CSVParser cSVParser0 = CSVParser.parse("(startline ", cSVFormat1);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("lGx", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[lGx]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Character character0 = new Character('m');
      String[] stringArray0 = new String[0];
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat0 = new CSVFormat('B', (Character) null, quote0, character0, (Character) null, false, false, "*2z.`{r!]8k_b:@T", "zr)dpcY", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("zr)dpcY", cSVFormat0);
      cSVParser0.iterator();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("=RPqZm@kZH7lu_PG4EP", cSVFormat0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.csv.Token", "7i2RHF@i)", (File) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("De `#");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("?%P[)!}J:3~}c%=b", "?%P[)!}J:3~}c%=b");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "RPNi";
      stringArray0[1] = "Header:";
      stringArray0[2] = "5VLc";
      stringArray0[3] = "org.apache.commons.csv.CSVRecord";
      stringArray0[4] = "h#Mm";
      stringArray0[5] = "";
      stringArray0[7] = "org.apache.commons.csv.CSVParser";
      stringArray0[8] = "s!~9K\"*V?1c9C<Bp!i6";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("RPNi");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(9, map0.size());
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('3');
      CSVParser cSVParser0 = CSVParser.parse("INVALID", cSVFormat0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        CSVParser.parse((URL) null, (Charset) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'url' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[5];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        CSVParser.parse("RecordSeparator=<", cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The header contains duplicate names: [null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[0];
      Character character0 = Character.valueOf('K');
      Character character1 = new Character('v');
      CSVFormat cSVFormat0 = new CSVFormat(']', character0, quote0, character1, (Character) null, true, true, "<header", "<header", stringArray0, true);
      try { 
        CSVParser.parse("KHe3dej", cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[6];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      File file0 = MockFile.createTempFile("=RPqZm@kZH7lu_PG4EP", "+");
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The header contains duplicate names: [null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = new Character('m');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('N', character0, quote0, character0, character0, true, true, "zr)dpcY", "Header:", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('(');
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("(start`ine /(start`ine ");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile((String) null, "(start`ine ");
      MockFile mockFile1 = new MockFile(mockFile0, "(start`ine ");
      try { 
        CSVParser.parse((File) mockFile1, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("Y{KN9UOunO}e`]I[:[", cSVFormat0);
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Character character0 = new Character('m');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('N', character0, quote0, character0, character0, false, false, "zr)dpcY", "Header:", stringArray0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('(');
      CSVParser cSVParser0 = CSVParser.parse("zr)dpcY", cSVFormat1);
      cSVParser0.close();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      try { 
        cSVParser0.getRecords(linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Character character0 = new Character('m');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('N', character0, quote0, character0, character0, false, false, "zr)dpcY", "Header:", stringArray0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('(');
      CSVParser cSVParser0 = CSVParser.parse("zr)dpcY", cSVFormat1);
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("?%P[)!}J:3~}c%=b", "?%P[)!}J:3~}c%=b");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      try { 
        cSVParser0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Character character0 = Character.valueOf('v');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[5];
      CSVFormat cSVFormat0 = new CSVFormat('v', character0, quote0, character0, character0, true, true, "Wi,W.@S8Km", "", stringArray0, true);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('v')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("\"*");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // (startline 1) EOF reached before encapsulated token finished
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RecordSeparator=<");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("AU^.]','c|K:", cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Character character0 = new Character('v');
      Quote quote0 = Quote.NON_NUMERIC;
      Character character1 = new Character('f');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('c', character0, quote0, character1, character0, false, false, "", (String) null, stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("Header:", cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Character character0 = new Character('m');
      Quote quote0 = Quote.NONE;
      Character character1 = new Character('c');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "zr)dpcY";
      CSVFormat cSVFormat0 = new CSVFormat('j', character0, quote0, character1, character0, false, false, "zr)dpcY", "Header:", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("zr)dpcY", cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[zr)dpcY]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\r\n");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Character character0 = new Character('m');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('N', character0, quote0, character0, character0, true, true, "zr)dpcY", "Header:", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('(');
      CSVParser cSVParser0 = CSVParser.parse("(startline ", cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Character character0 = new Character('m');
      String[] stringArray0 = new String[0];
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat0 = new CSVFormat('B', (Character) null, quote0, character0, (Character) null, false, false, "*2z.`{r!]8k_b:@T", "zr)dpcY", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("zr)dpcY", cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Character character0 = new Character('m');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('N', character0, quote0, character0, character0, true, true, "zr)dpcY", "Header:", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('(');
      CSVParser cSVParser0 = CSVParser.parse("(start`ine ", cSVFormat1);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Character character0 = new Character('m');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('N', character0, quote0, character0, character0, true, true, "zr)dpcY", "Header:", stringArray0, true);
      MockFile mockFile0 = new MockFile((String) null, "(start`ine ");
      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Character character0 = new Character('m');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('N', character0, quote0, character0, character0, false, false, "zr)dpcY", "Header:", stringArray0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('(');
      CSVParser cSVParser0 = CSVParser.parse("zr)dpcY", cSVFormat1);
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("(startline ", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
}
