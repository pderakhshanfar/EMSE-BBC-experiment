/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 00:07:35 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aIDnY");
      Character character0 = Character.valueOf('U');
      Character character1 = new Character('G');
      stringReader0.close();
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat0 = new CSVFormat('=', character0, quote0, character1, character0, false, false, "-", "#[)0=91", (String[]) null, false);
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Character character0 = Character.valueOf('q');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('G');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('8', character0, quote0, character1, character0, false, true, "aIDnY", "X", stringArray0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("X/hC[u)Or");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("X", "hC[u)Or");
      CSVParser cSVParser0 = CSVParser.parse((File) mockFile0, cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#a,r2qC|vSG");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[#a,r2qC|vSG]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = MockFile.createTempFile("{Qbb;xF", "{Qbb;xF");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("P-", cSVFormat0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVParser$1", "", (File) mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('G');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('=', character0, quote0, character1, character0, true, false, "aIDnY", "", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Character character0 = Character.valueOf('q');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('G');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('8', character0, quote0, character1, character0, false, true, "aIDnY", "", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Character character0 = Character.valueOf('q');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('G');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('8', character0, quote0, character1, character0, false, false, "aIDnY", "", stringArray0, false);
      StringReader stringReader0 = new StringReader("G-h5v;&y");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVParser.parse("", (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("aidny", "x!\"");
      File file0 = MockFile.createTempFile("out", "out", (File) mockFile0);
      Character character0 = Character.valueOf('/');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[5];
      CSVFormat cSVFormat0 = new CSVFormat('/', character0, quote0, character0, character0, false, true, "{wxN$kq;*'Xo", "aidny", stringArray0, true);
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('/')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVParser$2", "+n%|QHt?PQTst;1g");
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Character character0 = new Character('q');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('G');
      String[] stringArray0 = new String[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = new CSVFormat('8', character0, quote0, character1, character0, false, true, "aIDnY", "X", stringArray0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("X/hC[u)Or");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("X", "hC[u)Or");
      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("P-", cSVFormat0);
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("4Sh", cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("H>)ukw", cSVFormat0);
      cSVParser0.close();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      try { 
        cSVParser0.getRecords(linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringReader stringReader0 = new StringReader("$VALUES");
      stringReader0.close();
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = MockFile.createTempFile("])Srm-#,Y", "])Srm-#,Y");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('*');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      try { 
        cSVParser0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Kj");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf(',');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aIDnY");
      Character character0 = Character.valueOf('U');
      Quote quote0 = Quote.NON_NUMERIC;
      Character character1 = new Character('G');
      stringReader0.close();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('=', character0, quote0, character1, character0, true, false, "aIDnY", "-", stringArray0, false);
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("7V`v]/6l,z", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("yUUl@g!R", cSVFormat0);
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aIDnY");
      Character character0 = Character.valueOf('U');
      Character character1 = new Character('G');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat0 = new CSVFormat('=', character0, quote0, character1, character0, false, false, "-", "#[)0=91", (String[]) null, false);
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("7V`v]/6l,z", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Character character0 = new Character('k');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('_');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('U', character0, quote0, character0, character1, true, false, "", "org.apache.commons.csv.CSVParser$2", stringArray0, true);
      StringReader stringReader0 = new StringReader("f'z}&Q&Q");
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aIDnY");
      Character character0 = Character.valueOf('U');
      Character character1 = new Character('G');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat0 = new CSVFormat('=', character0, quote0, character1, character0, false, false, "-", "#[)0=91", (String[]) null, false);
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aI9nY");
      Character character0 = Character.valueOf('q');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('G');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('8', character0, quote0, character1, character0, false, false, "aI9nY", "", stringArray0, false);
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      Character character0 = Character.valueOf('j');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "aIDnY";
      CSVFormat cSVFormat0 = new CSVFormat(',', character0, quote0, (Character) null, (Character) null, false, false, "&#rdOBhC.i5j", "&#rdOBhC.i5j", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("&#rdOBhC.i5j", cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", cSVFormat0);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('G');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('=', character0, quote0, character1, character0, true, false, "aIDnY", "", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("aIDnY", cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aIDnY");
      Character character0 = Character.valueOf('q');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('G');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('8', character0, quote0, character1, character0, false, false, "aIDnY", "", stringArray0, false);
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.getCurrentLineNumber();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Character character0 = new Character(',');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat0 = new CSVFormat(',', character0, quote0, (Character) null, (Character) null, false, false, "&#rdOBhC.i5j", "&#rdOBhC.i5j", stringArray0, false);
      // Undeclared exception!
      try { 
        CSVParser.parse("&#rdOBhC.i5j", cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Character character0 = Character.valueOf('q');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('8', character0, quote0, character0, character0, false, true, "aIDnY", "X", stringArray0, true);
      MockFile mockFile0 = new MockFile("X", "hC[u)Or");
      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aIDnY");
      Character character0 = Character.valueOf('q');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('G');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('8', character0, quote0, character1, character0, false, false, "aIDnY", "", stringArray0, false);
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Character character0 = new Character(',');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat0 = new CSVFormat(',', character0, quote0, (Character) null, (Character) null, false, false, "&#rdOBhC.i5j", "&#rdOBhC.i5j", stringArray0, false);
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'charset' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
