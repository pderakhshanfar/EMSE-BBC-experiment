* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.csv.CSVParser
* Starting Client-0
* Connecting to master process on port 9741
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-7/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVParser
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 378
* Using seed 2115696666
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 152 / 378
[MASTER] 23:56:33.610 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 23:56:33.610 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 00:01:27.566 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 00:01:49.091 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
Number of times BBC is called for org.apache.commons.csv.CSVParser.nextRecord()Lorg/apache/commons/csv/CSVRecord;: I34 Branch 15 TABLESWITCH L452 Case 4 - true: 346763
Number of times BBC is called for org.apache.commons.csv.CSVParser.nextRecord()Lorg/apache/commons/csv/CSVRecord;: Line 474: 107246
Number of times BBC is called for org.apache.commons.csv.CSVParser.nextRecord()Lorg/apache/commons/csv/CSVRecord;: Line 473: 107246
Number of times BBC is called for org.apache.commons.csv.CSVParser$1.hasNext()Z: I14 Branch 25 IFNONNULL L407 - true: 233408
Number of times BBC is called for org.apache.commons.csv.CSVParser.nextRecord()Lorg/apache/commons/csv/CSVRecord;: Line 472: 107246
Number of times BBC is called for org.apache.commons.csv.CSVParser.addRecordValue()V: I32 Branch 2 IFLE L251 - true: 55
Number of times BBC is called for org.apache.commons.csv.CSVParser.initializeHeader()Ljava/util/Map;: I64 Branch 10 IFNULL L369 - true: 13
Number of times BBC is called for org.apache.commons.csv.CSVParser$1.getNextRecord()Lorg/apache/commons/csv/CSVRecord;: Line 399: 5033
Number of times BBC is called for org.apache.commons.csv.CSVParser$1.getNextRecord()Lorg/apache/commons/csv/CSVRecord;: Line 397: 5033
Number of times BBC is called for org.apache.commons.csv.CSVParser$1.hasNext()Z: I5 Branch 24 IFEQ L404 - false: 294
Number of times BBC is called for org.apache.commons.csv.CSVParser.initializeHeader()Ljava/util/Map;: I51 Branch 9 IFEQ L362 - false: 1347
Number of times BBC is called for org.apache.commons.csv.CSVParser$1.remove()V: root-Branch: 494985
Number of times BBC is called for org.apache.commons.csv.CSVParser.initializeHeader()Ljava/util/Map;: I51 Branch 9 IFEQ L362 - true: 13
Number of times BBC is called for org.apache.commons.csv.CSVParser.initializeHeader()Ljava/util/Map;: I37 Branch 8 IFNULL L358 - true: 13
Number of times BBC is called for org.apache.commons.csv.CSVParser.close()V: I4 Branch 3 IFNULL L262 - true: 279227
Number of times BBC is called for org.apache.commons.csv.CSVParser$1.next()Lorg/apache/commons/csv/CSVRecord;: I5 Branch 27 IFEQ L415 - false: 214094
Number of times BBC is called for org.apache.commons.csv.CSVParser.nextRecord()Lorg/apache/commons/csv/CSVRecord;: I183 Branch 23 IFNONNULL L482 - true: 301364
Number of times BBC is called for org.apache.commons.csv.CSVParser$1.remove()V: Line 433: 494985
Number of times BBC is called for org.apache.commons.csv.CSVParser.nextRecord()Lorg/apache/commons/csv/CSVRecord;: I93 Branch 19 IFNONNULL L467 - true: 193328
Number of times BBC is called for org.apache.commons.csv.CSVParser.nextRecord()Lorg/apache/commons/csv/CSVRecord;: I34 Branch 13 TABLESWITCH L452 Case 2 - true: 11998
Number of times BBC is called for org.apache.commons.csv.CSVParser.initializeHeader()Ljava/util/Map;: I28 Branch 7 IFNE L355 - true: 13
Number of times BBC is called for org.apache.commons.csv.CSVParser.nextRecord()Lorg/apache/commons/csv/CSVRecord;: I93 Branch 19 IFNONNULL L467 - false: 107240
Number of times BBC is called for org.apache.commons.csv.CSVParser.nextRecord()Lorg/apache/commons/csv/CSVRecord;: I34 Branch 17 TABLESWITCH L452 Default-Case - true: 347202
Number of times BBC is called for org.apache.commons.csv.CSVParser$1.next()Lorg/apache/commons/csv/CSVRecord;: I26 Branch 28 IFNONNULL L421 - false: 214108
Number of times BBC is called for org.apache.commons.csv.CSVParser$1.next()Lorg/apache/commons/csv/CSVRecord;: I35 Branch 29 IFNONNULL L424 - true: 214108
Number of times BBC is called for org.apache.commons.csv.CSVParser.getHeaderMap()Ljava/util/Map;: I4 Branch 4 IFNONNULL L288 - true: 6
Number of times BBC is called for org.apache.commons.csv.CSVParser$1.next()Lorg/apache/commons/csv/CSVRecord;: I35 Branch 29 IFNONNULL L424 - false: 214108
Number of times BBC is called for org.apache.commons.csv.CSVParser.nextRecord()Lorg/apache/commons/csv/CSVRecord;: I34 Branch 16 TABLESWITCH L452 Case 5 - true: 107240
Number of times BBC is called in total: 4107716
* Search finished after 601s and 5030 generations, 2308457 statements, best individual has fitness: 79.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 90%
* Total number of goals: 99
* Number of covered goals: 89
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 70
* Number of covered goals: 60
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 81%
* Total number of goals: 68
* Number of covered goals: 55
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 60%
* Total number of goals: 45
* Number of covered goals: 27
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 13
* Number of covered goals: 13
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 13
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 86%
* Total number of goals: 70
* Number of covered goals: 60
* Generated 44 tests with total length 200
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 49%
* Compiling and checking tests
[MASTER] 00:06:31.513 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_23_1627603591482/org/apache/commons/csv/CSVParser_23_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_23_1627603591482/org/apache/commons/csv/CSVParser_23_tmp__ESTest_scaffolding.java]]
[MASTER] 00:06:31.513 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Csv-7/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-7/target/classes
[MASTER] 00:06:31.513 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-7/target/classes
[MASTER] 00:06:31.517 [logback-2] ERROR JUnitAnalyzer - Diagnostic: method getRecords in class org.apache.commons.csv.CSVParser cannot be applied to given types;
  required: T
  found: java.util.Collection<java.lang.String>
  reason: inferred type does not conform to upper bound(s)
    inferred: java.util.Collection<java.lang.String>
    upper bound(s): java.util.Collection<org.apache.commons.csv.CSVRecord>: 31
[MASTER] 00:06:31.517 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Some messages have been simplified; recompile with -Xdiags:verbose to get full output: -1
[MASTER] 00:06:31.518 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_23_1627603591482/org/apache/commons/csv/CSVParser_23_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Jul 30 00:06:31 GMT 2021
4:  */
5: 
6: package org.apache.commons.csv;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.nio.charset.Charset;
12: import java.util.Collection;
13: import java.util.Set;
14: import org.apache.commons.csv.CSVFormat;
15: import org.apache.commons.csv.CSVParser;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class CSVParser_23_tmp__ESTest extends CSVParser_23_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
26:       CSVParser cSVParser0 = CSVParser.parse("$#b>T_b)0*DV9}y0&", cSVFormat0);
27:       Charset charset0 = Charset.defaultCharset();
28:       Set<String> set0 = charset0.aliases();
29:       // Undeclared exception!
30:       try { 
31:         cSVParser0.getRecords((Collection<String>) set0);
32:         fail("Expecting exception: UnsupportedOperationException");
33:       
34:       } catch(UnsupportedOperationException e) {
35:          //
36:          // no message in exception (getMessage() returned null)
37:          //
38:          verifyException("java.util.Collections$UnmodifiableCollection", e);
39:       }
40:   }
41: }
RegularFileObject[/tmp/EvoSuite_23_1627603591482/org/apache/commons/csv/CSVParser_23_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Jul 30 00:06:31 GMT 2021
5:  */
6: 
7: package org.apache.commons.csv;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class CSVParser_23_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.csv.CSVParser"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CSVParser_23_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.apache.commons.csv.CSVFormat",
82:       "org.apache.commons.csv.Quote",
83:       "org.apache.commons.csv.Token",
84:       "org.apache.commons.csv.Lexer",
85:       "org.apache.commons.csv.CSVRecord",
86:       "org.apache.commons.csv.Constants",
87:       "org.apache.commons.csv.CSVParser",
88:       "org.apache.commons.csv.Assertions",
89:       "org.apache.commons.csv.Token$Type",
90:       "org.apache.commons.csv.CSVParser$2",
91:       "org.apache.commons.csv.CSVParser$1",
92:       "org.apache.commons.csv.ExtendedBufferedReader"
93:     );
94:   } 
95: 
96:   private static void resetClasses() {
97:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CSVParser_23_tmp__ESTest_scaffolding.class.getClassLoader()); 
98: 
99:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
100:       "org.apache.commons.csv.CSVParser",
101:       "org.apache.commons.csv.CSVParser$1",
102:       "org.apache.commons.csv.Token$Type",
103:       "org.apache.commons.csv.CSVParser$2",
104:       "org.apache.commons.csv.Constants",
105:       "org.apache.commons.csv.CSVFormat",
106:       "org.apache.commons.csv.CSVPrinter",
107:       "org.apache.commons.csv.Assertions",
108:       "org.apache.commons.csv.Token",
109:       "org.apache.commons.csv.Lexer",
110:       "org.apache.commons.csv.ExtendedBufferedReader",
111:       "org.apache.commons.csv.CSVRecord",
112:       "org.apache.commons.csv.CSVPrinter$1"
113:     );
114:   }
115: }

[MASTER] 00:06:31.518 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
CSVParser cSVParser0 = CSVParser.parse("$#b>T_b)0*DV9}y0&", cSVFormat0);
Charset charset0 = Charset.defaultCharset();
Set<String> set0 = charset0.aliases();
cSVParser0.getRecords((Collection<String>) set0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'CSVParser_ESTest' to results/Csv-7/org.apache.commons.csv.CSVParser/BBC-F0-50/tests/12
* Done!

* Computation finished
