/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 03:44:06 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('V');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVParser cSVParser0 = CSVParser.parse("q?fW e2M&ZNE8>E#_V", cSVFormat1);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVParser0.forEach(consumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: EOF whilst processing escape sequence
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "OXD\"MD}Z");
      CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      File file0 = MockFile.createTempFile("7ZhV+O6]VUS*t<?", ")kd");
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('x', (Character) null, quote0, (Character) null, (Character) null, false, false, "^J$l3T;aFfZ(ksE-", "^J$l3T;aFfZ(ksE-", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("^J$l3T;aFfZ(ksE-", cSVFormat0);
      cSVParser0.iterator();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("O2*4Y");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('l');
      CSVParser cSVParser0 = CSVParser.parse(".", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringReader stringReader0 = new StringReader(".8C`_bxPb-e0BQzz");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('x', (Character) null, quote0, (Character) null, (Character) null, false, true, "in/", "?S&Y)isr", stringArray0, true);
      StringReader stringReader0 = new StringReader("in/");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('x', (Character) null, quote0, (Character) null, (Character) null, false, true, "in/", "?S&Y)isr", stringArray0, true);
      StringReader stringReader0 = new StringReader("in/");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Xn{_");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The comment start character cannot be a line break", "charset");
      URL uRL0 = mockFile0.toURL();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Character character0 = Character.valueOf('u');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[8];
      CSVFormat cSVFormat0 = new CSVFormat('u', character0, quote0, character0, character0, true, true, "vGno@Yk\"3aP9hC", "vGno@Yk\"3aP9hC", stringArray0, true);
      // Undeclared exception!
      try { 
        CSVParser.parse("No quotes mode set but no escape character is set", cSVFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('u')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        CSVParser.parse((String) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'string' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Quote quote0 = Quote.NONE;
      Character character0 = Character.valueOf('@');
      Character character1 = new Character('-');
      CSVFormat cSVFormat0 = new CSVFormat('C', (Character) null, quote0, character0, character1, true, true, "sA0_Es6FQ\"gP*;+m", "sA0_Es6FQ\"gP*;+m", stringArray0, false);
      try { 
        CSVParser.parse("5fm L\"XEQ-", cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // EOF whilst processing escape sequence
         //
         verifyException("org.apache.commons.csv.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("s-vhY!n&::!sJX", "s-vhY!n&::!sJX");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('E');
      // Undeclared exception!
      try { 
        CSVParser.parse(file0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same ('E')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('x', (Character) null, quote0, (Character) null, (Character) null, false, false, "^J$l3T;aFfZ(ksE-", "^J$l3T;aFfZ(ksE-", stringArray0, false);
      File file0 = MockFile.createTempFile("^J$l3T;aFfZ(ksE-", "^J$l3T;aFfZ(ksE-");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/^J$l3T;aFfZ(ksE-0^J$l3T;aFfZ(ksE-");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        CSVParser.parse(file0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L9zUh3)E[hv\"|tq");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
      try { 
        cSVParser0.nextRecord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse(">r58t_8V2}zN|-|", cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringReader stringReader0 = new StringReader(" SkipHeaderRecord:");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      stringReader0.close();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      try { 
        cSVParser0.getRecords(linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('&', (Character) null, quote0, (Character) null, (Character) null, true, true, ":iO!", "?S&Y)isr", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("~@=r", cSVFormat0);
      cSVParser0.close();
      try { 
        cSVParser0.getRecords();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("The comment start character cannot be a line break", "The comment start character cannot be a line break");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        cSVParser0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&o%yB8<&86g~WV<");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('{');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('{');
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same ('{')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eak$AmhZ&dv");
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Quote quote0 = Quote.NON_NUMERIC;
      Character character0 = Character.valueOf('%');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('D', (Character) null, quote0, (Character) null, character0, true, true, "?'-7}67Vnw^J]", "url", stringArray0, true);
      StringReader stringReader0 = new StringReader("')");
      stringReader0.close();
      CSVParser cSVParser0 = null;
      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      File file0 = MockFile.createTempFile("(zH%-H59?>@", "X,]\"S_t<p0RuW3");
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("O2*4Y");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("0F\"HB5.QmP?A(jy>,M");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[0F\"HB5.QmP?A(jy>, M]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringReader stringReader0 = new StringReader("~@=r");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Header:";
      stringArray0[1] = " [";
      stringArray0[2] = "in/";
      stringArray0[3] = "-/,Rrh5)W`&%.B7f";
      stringArray0[4] = "]";
      stringArray0[5] = "VT/'m5$j";
      stringArray0[6] = "D8ijg.S5.Uhy7su1wc";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("T+$Jj(");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[T+$Jj(]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("z9", cSVFormat0);
      HashMap<Object, CSVRecord> hashMap0 = new HashMap<Object, CSVRecord>();
      Collection<CSVRecord> collection0 = hashMap0.values();
      // Undeclared exception!
      try { 
        cSVParser0.getRecords(collection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("%hm\npib", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Quote quote0 = Quote.NONE;
      Character character0 = Character.valueOf('@');
      Character character1 = new Character('2');
      CSVFormat cSVFormat0 = new CSVFormat('m', (Character) null, quote0, character0, character1, true, true, "wS^.,~N[P", "wS^.,~N[P", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("@y)ol*N", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Quote quote0 = Quote.NONE;
      Character character0 = Character.valueOf('@');
      Character character1 = new Character('2');
      CSVFormat cSVFormat0 = new CSVFormat('m', (Character) null, quote0, character0, character1, true, true, "wS^.,~N[P", "wS^.,~N[P", stringArray0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/xK0/~@=r");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "wS^.,~N[P");
      MockFile mockFile0 = new MockFile("/xK0", "~@=r");
      CSVParser cSVParser0 = CSVParser.parse((File) mockFile0, cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("%hm\npib", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(2L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Quote quote0 = Quote.NONE;
      Character character0 = Character.valueOf('@');
      Character character1 = new Character('2');
      CSVFormat cSVFormat0 = new CSVFormat('m', (Character) null, quote0, character0, character1, true, true, "wS^.,~N[P", "wS^.,~N[P", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("@y)ol*N", cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Quote quote0 = Quote.NONE;
      Character character0 = Character.valueOf('@');
      Character character1 = new Character('2');
      CSVFormat cSVFormat0 = new CSVFormat('m', (Character) null, quote0, character0, character1, true, true, "wS^.,~N[P", "wS^.,~N[P", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("@y)ol*N", cSVFormat0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Quote quote0 = Quote.NONE;
      Character character0 = Character.valueOf('@');
      CSVFormat cSVFormat0 = new CSVFormat('m', (Character) null, quote0, character0, character0, true, true, "wS^.,~N[P", "wS^.,~N[P", stringArray0, true);
      MockFile mockFile0 = new MockFile("/xK0", "~@=r");
      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('&', (Character) null, quote0, (Character) null, (Character) null, true, true, ":iO!", "?S&Y)isr", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("~@=r", cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('x', (Character) null, quote0, (Character) null, (Character) null, true, true, "in/", "~@=r", stringArray0, true);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'charset' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
