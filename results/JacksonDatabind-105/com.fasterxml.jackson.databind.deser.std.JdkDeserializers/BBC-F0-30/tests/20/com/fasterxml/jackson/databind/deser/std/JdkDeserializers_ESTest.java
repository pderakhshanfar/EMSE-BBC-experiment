/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 03:49:45 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.deser.std.JdkDeserializers;
import com.fasterxml.jackson.databind.util.AccessPattern;
import java.nio.ByteBuffer;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JdkDeserializers_ESTest extends JdkDeserializers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<ByteBuffer> class0 = ByteBuffer.class;
      JsonDeserializer<?> jsonDeserializer0 = JdkDeserializers.find(class0, "com.fasterxml.jackson.databind.JavaType");
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      JsonDeserializer<?> jsonDeserializer0 = JdkDeserializers.find(class0, "com.fasterxml.jackson.databind.JavaType");
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<StackTraceElement> class0 = StackTraceElement.class;
      JsonDeserializer<?> jsonDeserializer0 = JdkDeserializers.find(class0, "com.fasterxml.jackson.databind.JavaType");
      assertEquals(AccessPattern.ALWAYS_NULL, jsonDeserializer0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      JsonDeserializer<?> jsonDeserializer0 = JdkDeserializers.find(class0, "com.fasterxml.jackson.databind.JavaType");
      assertFalse(jsonDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<String> class0 = String.class;
      JsonDeserializer<?> jsonDeserializer0 = JdkDeserializers.find(class0, "com.fasterxml.jackson.databind.JavaType");
      assertNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<ByteBuffer> class0 = ByteBuffer.class;
      JsonDeserializer<?> jsonDeserializer0 = JdkDeserializers.find(class0, "");
      assertNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JdkDeserializers jdkDeserializers0 = new JdkDeserializers();
  }
}
