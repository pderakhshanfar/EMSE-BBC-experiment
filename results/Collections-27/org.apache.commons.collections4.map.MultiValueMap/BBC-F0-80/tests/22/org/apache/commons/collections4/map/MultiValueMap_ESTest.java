/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:41:05 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ArrayList<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap2 = new MultiValueMap<LinkedList<Integer>, ArrayList<Object>>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap2, (Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ArrayList<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap2 = new MultiValueMap<LinkedList<Integer>, ArrayList<Object>>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap2, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, arrayList0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      multiValueMap0.put(integer0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) null);
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>((Map<Collection<Object>, ? super Collection<Object>>) hashMap0, factory0);
      Collection<Object> collection0 = multiValueMap0.createCollection((-26));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      hashMap0.put((Collection<Integer>) null, (Object) null);
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<String>>) hashMap0);
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(0);
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      hashMap0.put(collection0, multiValueMap1);
      MultiValueMap<Collection<Integer>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<String>>) hashMap0);
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap2);
      // Undeclared exception!
      try { 
        multiValueMap3.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Object object0 = multiValueMap1.put(linkedList1, multiValueMap0);
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap2 = new MultiValueMap<Object, LinkedList<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap2.size(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      MultiValueMap<ArrayList<Object>, LinkedList<LinkedList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<LinkedList>>>) multiValueMap0);
      MultiValueMap<String, MultiValueMap<Integer, Object>> multiValueMap2 = new MultiValueMap<String, MultiValueMap<Integer, Object>>();
      multiValueMap2.map = null;
      // Undeclared exception!
      try { 
        multiValueMap2.removeMapping(multiValueMap1, multiValueMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<ArrayList<Object>> linkedList1 = new LinkedList<ArrayList<Object>>();
      linkedList1.add(arrayList0);
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList0, (Collection<ArrayList<Object>>) linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(multiValueMap0, multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Integer>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      multiValueMap0.putIfAbsent(hashMap1, hashMap0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(hashMap0, multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("09}", arrayList0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, "09}");
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<Object>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(abstractMap_SimpleImmutableEntry0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<Collection<Object>>>) null, (Factory<LinkedList<Collection<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, String>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<LinkedList<Integer>>>) multiValueMap0, (Factory<LinkedList<LinkedList<Integer>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(0, 511.98F);
      hashMap1.put("The prototype must be cloneable via a public clone method", multiValueMap0);
      hashMap0.put(hashMap1, hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<HashMap<Object, Object>, Object> hashMap1 = new HashMap<HashMap<Object, Object>, Object>();
      hashMap1.put(hashMap0, (Object) null);
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Integer>>) hashMap1);
      Integer integer0 = new Integer((-865));
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Object>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(hashMap1, "Z]");
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<String>>();
      Collection<ArrayList<String>> collection0 = multiValueMap0.getCollection("/9*A5EG2");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      linkedList0.add(arrayList0);
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ArrayList<Object>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      multiValueMap0.putAll(linkedList1, (Collection<ArrayList<Object>>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll(linkedList1, (Collection<ArrayList<Object>>) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      int int0 = multiValueMap0.size((Object) "org.apache.commons.collections4.map.MultiValueMap");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      Object object0 = multiValueMap0.put(integer0, integer0);
      int int0 = multiValueMap0.size(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(hashMap0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0, (Object) hashMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Collection<Object>>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer((-61));
      hashMap0.put(integer0, "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Integer>>();
      MapIterator<Object, Object> mapIterator0 = multiValueMap1.mapIterator();
      multiValueMap0.put(multiValueMap1, mapIterator0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap2 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(integer0, integer0);
      multiValueMap0.put(integer0, arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Object>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(hashMap1, arrayList0);
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Integer>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Integer>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      multiValueMap0.putIfAbsent(hashMap1, hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<String>>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      multiValueMap0.putIfAbsent(linkedList0, object0);
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Object
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(hashMap1, arrayList0);
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Integer>>) hashMap0);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      Iterator<Integer> iterator0 = multiValueMap0.iterator((Object) hashMap2);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(1763);
      boolean boolean0 = multiValueMap1.putAll(integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, MultiValueMap<Object, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, MultiValueMap<Object, Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<HashMap>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<ArrayList<HashMap>>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) multiValueMap1;
      MultiValueMap<Integer, String> multiValueMap2 = new MultiValueMap<Integer, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) multiValueMap2, (Object) multiValueMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
