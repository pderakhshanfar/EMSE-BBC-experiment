/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:30:32 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(hashMap0, function0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      multiValueMap0.put((ArrayList<Object>) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(2486);
      assertFalse(collection0.contains(2486));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, ConstantFactory<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ConstantFactory<Collection<String>>>>) multiValueMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent("", arrayList0);
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(arrayList0, biFunction0);
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = new MultiValueMap<ArrayList<Object>, String>((Map<ArrayList<Object>, ? super LinkedList<String>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) "gg)xe28o{ndjTt");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ConstantFactory<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ConstantFactory<String>>>) hashMap0);
      Object object0 = hashMap0.putIfAbsent("}qhZ!z", multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashMap<Collection<String>, Integer> hashMap1 = new HashMap<Collection<String>, Integer>();
      hashMap0.put(arrayList0, hashMap1);
      LinkedList<HashMap<String, Integer>> linkedList0 = new LinkedList<HashMap<String, Integer>>();
      ConstantFactory<LinkedList<HashMap<String, Integer>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Integer>>>(linkedList0);
      MultiValueMap<ArrayList<Integer>, HashMap<String, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<HashMap<String, Integer>>>) hashMap0, (Factory<LinkedList<HashMap<String, Integer>>>) constantFactory0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add((Collection<String>) arrayList1);
      MultiValueMap<Integer, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<Integer, ConstantFactory<Object>>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) multiValueMap1, factory0);
      MultiValueMap<Integer, Collection<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<String>>>) multiValueMap2);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        multiValueMap3.putAll(integer0, (Collection<Collection<String>>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      Integer integer0 = new Integer(0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.putIfAbsent(integer0, multiValueMap0);
      linkedList0.push(integer0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(integer0, (Collection<Integer>) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>(1917);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<String>>) hashMap0, factory0);
      Factory<LinkedList<ArrayList<Object>>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, factory1);
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, "org.apache.commons.collections4.functors.InstantiateFactory");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList0);
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<String>>>) hashMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap0.values();
      ConstantFactory<Collection<Object>> constantFactory1 = new ConstantFactory<Collection<Object>>(collection0);
      HashMap<ArrayList<String>, Object> hashMap1 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = new MultiValueMap<ArrayList<String>, Object>((Map<ArrayList<String>, ? super Collection<Object>>) hashMap1, (Factory<Collection<Object>>) constantFactory1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, "org.apache.commons.collections4.map.MultiValueMap$1$1$1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>((Collection<Object>) null);
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, arrayList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Collection<String>> hashMap0 = new HashMap<String, Collection<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer0 = new Integer(0);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      HashMap<ArrayList<String>, Object> hashMap1 = new HashMap<ArrayList<String>, Object>();
      hashMap1.put(arrayList0, hashMap0);
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
      ConstantFactory<LinkedList<ArrayList<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Integer>>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<ArrayList<Integer>>>) null, (Factory<LinkedList<ArrayList<Integer>>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      MultiValueMap<Collection<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Object>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Collection<String>> hashMap0 = new HashMap<Object, Collection<String>>();
      MultiValueMap<ConstantFactory<String>, AbstractMap.SimpleEntry<Collection<String>, Integer>> multiValueMap0 = new MultiValueMap<ConstantFactory<String>, AbstractMap.SimpleEntry<Collection<String>, Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<LinkedList<Object>, HashMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      Object object0 = new Object();
      hashMap0.put(linkedList0, object0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      hashMap0.put((ArrayList<Integer>) null, (Object) null);
      LinkedList<HashMap<String, Integer>> linkedList0 = new LinkedList<HashMap<String, Integer>>();
      ConstantFactory<LinkedList<HashMap<String, Integer>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Integer>>>(linkedList0);
      MultiValueMap<ArrayList<Integer>, HashMap<String, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<HashMap<String, Integer>>>) hashMap0, (Factory<LinkedList<HashMap<String, Integer>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "org.apache.commons.collections4.map.MultiValueMap$1$1$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      hashMap0.put((ArrayList<Integer>) null, "org.apache.commons.collections4.map.MultiValueMap$1$1$1");
      LinkedList<HashMap<String, Integer>> linkedList0 = new LinkedList<HashMap<String, Integer>>();
      ConstantFactory<LinkedList<HashMap<String, Integer>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Integer>>>(linkedList0);
      MultiValueMap<ArrayList<Integer>, HashMap<String, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<HashMap<String, Integer>>>) hashMap0, (Factory<LinkedList<HashMap<String, Integer>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) constantFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<ArrayList<String>, String>((Map<ArrayList<String>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Object>>) multiValueMap0, factory0);
      MultiValueMap<Collection<String>, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Collection<Object>>>) multiValueMap1);
      Set<Map.Entry<Collection<String>, Object>> set0 = (Set<Map.Entry<Collection<String>, Object>>)multiValueMap2.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>(linkedList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super LinkedList<Collection<Object>>>) hashMap0, (Factory<LinkedList<Collection<Object>>>) constantFactory0);
      Collection<Collection<Object>> collection0 = multiValueMap0.getCollection(constantFactory0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.push(integer0);
      multiValueMap0.putAll(integer0, (Collection<Integer>) linkedList0);
      multiValueMap0.iterator((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      boolean boolean0 = multiValueMap0.putAll("\"Lw", (Collection<Collection<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      LinkedList<HashMap<String, Integer>> linkedList0 = new LinkedList<HashMap<String, Integer>>();
      ConstantFactory<LinkedList<HashMap<String, Integer>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Integer>>>(linkedList0);
      MultiValueMap<ArrayList<Integer>, HashMap<String, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<HashMap<String, Integer>>>) hashMap0, (Factory<LinkedList<HashMap<String, Integer>>>) constantFactory0);
      Integer integer0 = new Integer(0);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<Object>, HashMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(1508);
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      HashMap<Integer, Collection<String>> hashMap0 = new HashMap<Integer, Collection<String>>();
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      Set<String> set0 = multiValueMap1.keySet();
      hashMap0.put(integer0, set0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add((Collection<String>) arrayList1);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<Collection<String>>) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = new Object();
      multiValueMap0.putIfAbsent(arrayList0, object0);
      MultiValueMap<Object, LinkedList<HashMap<Integer, Object>>> multiValueMap1 = new MultiValueMap<Object, LinkedList<HashMap<Integer, Object>>>();
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1);
      multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>(1917);
      hashMap0.put(arrayList0, arrayList0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<String>>) hashMap0, factory0);
      Factory<LinkedList<ArrayList<Object>>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, factory1);
      Object object0 = multiValueMap1.put(arrayList0, "org.apache.commons.collections4.functors.InstantiateFactory");
      assertTrue(arrayList0.contains("org.apache.commons.collections4.functors.InstantiateFactory"));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, arrayList0);
      LinkedList<HashMap<String, Integer>> linkedList0 = new LinkedList<HashMap<String, Integer>>();
      ConstantFactory<LinkedList<HashMap<String, Integer>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Integer>>>(linkedList0);
      MultiValueMap<ArrayList<Integer>, HashMap<String, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<HashMap<String, Integer>>>) hashMap0, (Factory<LinkedList<HashMap<String, Integer>>>) constantFactory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) constantFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, hashMap0, biFunction0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList1, linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<HashMap<Object, Object>>>) multiValueMap0, (Factory<Collection<HashMap<Object, Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, ConstantFactory<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ConstantFactory<Collection<String>>>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent("", arrayList0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(1252);
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<ConstantFactory<Integer>, ArrayList<Collection<String>>> multiValueMap1 = new MultiValueMap<ConstantFactory<Integer>, ArrayList<Collection<String>>>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Collection<Object>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<String>>>) multiValueMap0);
      Iterator<Map.Entry<ArrayList<Object>, ArrayList<String>>> iterator0 = (Iterator<Map.Entry<ArrayList<Object>, ArrayList<String>>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }
}
