/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:38:11 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<String>>();
      boolean boolean0 = multiValueMap1.removeMapping("!#>J{q,[9D ?0H", multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      multiValueMap0.put((HashMap<Object, Integer>) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Integer, Collection<Integer>> multiValueMap0 = new MultiValueMap<Integer, Collection<Integer>>();
      ConstantFactory<LinkedList<Comparable<String>>> constantFactory0 = new ConstantFactory<LinkedList<Comparable<String>>>((LinkedList<Comparable<String>>) null);
      MultiValueMap<Integer, Comparable<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Comparable<String>>>) multiValueMap0, (Factory<LinkedList<Comparable<String>>>) constantFactory0);
      Collection<Comparable<String>> collection0 = multiValueMap1.createCollection(1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, ArrayList<Object>>();
      Collection<ArrayList<Object>> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Collection<Object>, Comparable<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, Comparable<Integer>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, HashMap<Object, Integer>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, HashMap<Object, Integer>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(hashMap0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "#");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<Integer>>) hashMap0);
      Factory<LinkedList<Collection<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super LinkedList<Collection<Integer>>>) multiValueMap0, factory0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<LinkedList<Object>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.put(abstractMap_SimpleEntry1, abstractMap_SimpleEntry1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      hashMap0.put("bvV`s9$=<K+dPUF8d", multiValueMap0);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) hashMap0, (Factory<LinkedList<Integer>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put("bvV`s9$=<K+dPUF8d", constantFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super LinkedList<Integer>>) null, (Factory<LinkedList<Integer>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<LinkedList<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, LinkedList<Object>>();
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap0;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<HashMap<Object, Collection<Object>>, Object> hashMap0 = new HashMap<HashMap<Object, Collection<Object>>, Object>();
      MultiValueMap<HashMap<Object, Collection<Object>>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Collection<Object>>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      HashMap<Object, Collection<Object>> hashMap1 = new HashMap<Object, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap1.put(multiValueMap0, arrayList0);
      multiValueMap0.put(hashMap1, hashMap1);
      HashMap<Comparable<Integer>, Object> hashMap2 = new HashMap<Comparable<Integer>, Object>();
      MultiValueMap<Comparable<Integer>, MultiValueMap<String, Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Comparable<Integer>, ? super Collection<MultiValueMap<String, Collection<Object>>>>) hashMap2);
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>>();
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(1367, 1367);
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(multiValueMap0, linkedList0);
      Collection<Object> collection0 = multiValueMap0.values();
      hashMap0.put((Object) null, collection0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, (Object) null);
      MultiValueMap<Collection<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "The factory must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<LinkedList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, LinkedList<Integer>>();
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      multiValueMap0.put((LinkedList<String>) null, "");
      linkedList0.add((LinkedList<Integer>) null);
      boolean boolean0 = multiValueMap0.putAll((LinkedList<String>) null, (Collection<LinkedList<Integer>>) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>((Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<HashMap<Object, Collection<Object>>, Object> hashMap0 = new HashMap<HashMap<Object, Collection<Object>>, Object>();
      HashMap<Comparable<Integer>, Object> hashMap1 = new HashMap<Comparable<Integer>, Object>();
      MultiValueMap<Comparable<Integer>, MultiValueMap<String, Collection<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Comparable<Integer>, ? super Collection<MultiValueMap<String, Collection<Object>>>>) hashMap1);
      Collection<MultiValueMap<String, Collection<Object>>> collection0 = multiValueMap0.getCollection(hashMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>>) multiValueMap0, factory0);
      Iterator<AbstractMap.SimpleImmutableEntry<Integer, String>> iterator0 = multiValueMap1.iterator((Object) "");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.putAll((LinkedList<String>) null, (Collection<Integer>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>();
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap2.putAll(integer0, (Collection<ArrayList<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      Factory<Collection<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<Object>>>) hashMap0, factory0);
      Integer integer0 = new Integer(512);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      HashMap<LinkedList<Object>, String> hashMap0 = new HashMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, "q4\"T");
      multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(linkedList0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(arrayList0, unaryOperator0);
      multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>>();
      MultiValueMap<LinkedList<Integer>, MultiValueMap<Object, Object>> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, MultiValueMap<Object, Object>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      multiValueMap1.put(linkedList0, integer0);
      multiValueMap1.put(linkedList0, multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(1367, 1367);
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(multiValueMap0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Collection<Object>> hashMap0 = new HashMap<String, Collection<Object>>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.putIfAbsent("I/YDzXkbj$Aq4W\"Wh", hashMap0);
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "#");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      multiValueMap1.put(abstractMap_SimpleEntry1, abstractMap_SimpleEntry1);
      boolean boolean0 = multiValueMap1.removeMapping(abstractMap_SimpleEntry1, abstractMap_SimpleEntry1);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "#");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      multiValueMap0.put(abstractMap_SimpleEntry1, abstractMap_SimpleEntry1);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping(abstractMap_SimpleEntry1, abstractMap_SimpleEntry1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<Integer>>>) hashMap0, (Factory<LinkedList<ArrayList<Integer>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      multiValueMap1.putIfAbsent(multiValueMap0, hashMap0);
      multiValueMap1.iterator((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      boolean boolean0 = linkedList0.addAll(0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      AbstractMap.SimpleImmutableEntry<Object, Collection<Object>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Collection<Object>>(multiValueMap0, linkedList0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      multiValueMap0.putIfAbsent(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>();
      Iterator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>> iterator0 = (Iterator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Comparable<String>, MultiValueMap<Integer, Collection<Object>>> multiValueMap0 = new MultiValueMap<Comparable<String>, MultiValueMap<Integer, Collection<Object>>>();
      LinkedList<ConstantFactory<Object>> linkedList0 = new LinkedList<ConstantFactory<Object>>();
      ConstantFactory<LinkedList<ConstantFactory<Object>>> constantFactory0 = new ConstantFactory<LinkedList<ConstantFactory<Object>>>(linkedList0);
      MultiValueMap<Comparable<String>, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Comparable<String>, ? super LinkedList<ConstantFactory<Object>>>) multiValueMap0, (Factory<LinkedList<ConstantFactory<Object>>>) constantFactory0);
      multiValueMap0.map = (Map<Comparable<String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
