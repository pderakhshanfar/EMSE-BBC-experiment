/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:38:45 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<String>>>) hashMap0);
      Collection<Collection<String>> collection0 = multiValueMap0.createCollection((-1723));
      LinkedList<HashMap<Integer, Object>> linkedList0 = new LinkedList<HashMap<Integer, Object>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(collection0, linkedList0, biFunction0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      Integer integer0 = new Integer(1);
      multiValueMap0.putIfAbsent(integer0, factory0);
      Factory<Collection<Object>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0, factory1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) hashMap0);
      hashMap0.put((Collection<Object>) null, (Object) null);
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<String>, HashMap<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<HashMap<Integer, Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap1;
      arrayList0.add("SgN0\"tm'_#)%ReQC");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<String>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<HashMap<Integer, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, HashMap<Integer, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<HashMap<Integer, Integer>>>) multiValueMap0, factory0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) null, (Factory<Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Integer>>>) multiValueMap0, (Factory<Collection<LinkedList<Integer>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<String>>) multiValueMap0);
      MapIterator<HashMap<Object, Object>, Object> mapIterator0 = multiValueMap0.mapIterator();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(2179, 2179);
      hashMap0.put(multiValueMap0, mapIterator0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(hashMap0, unaryOperator0);
      MultiValueMap<Object, Collection<Object>> multiValueMap2 = new MultiValueMap<Object, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(3978);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<LinkedList, AbstractMap.SimpleEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<LinkedList, AbstractMap.SimpleEntry>>>) multiValueMap0);
      LinkedList<HashMap<Object, String>> linkedList0 = new LinkedList<HashMap<Object, String>>();
      Factory<LinkedList<HashMap<Object, String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, HashMap<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<HashMap<Object, String>>>) multiValueMap1, factory0);
      Integer integer0 = new Integer(949);
      HashMap<AbstractMap.SimpleEntry<Integer, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Factory<Collection<Integer>> factory1 = ConstantFactory.constantFactory((Collection<Integer>) arrayList0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "");
      hashMap0.put(abstractMap_SimpleEntry0, integer0);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Integer> multiValueMap3 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Integer>((Map<AbstractMap.SimpleEntry<Integer, String>, ? super Collection<Integer>>) hashMap0, factory1);
      MultiValueMap<Integer, Collection<Collection<Integer>>> multiValueMap4 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Collection<Integer>>>>) multiValueMap2);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Object object0 = multiValueMap4.getOrDefault((Object) null, arrayList1);
      // Undeclared exception!
      try { 
        multiValueMap3.containsValue(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<HashMap<String, Collection<Integer>>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<String, Collection<Integer>>, AbstractMap.SimpleEntry<Object, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<AbstractMap.SimpleEntry<Object, String>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      multiValueMap0.putAll(arrayList0, (Collection<String>) arrayList0);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<String>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<HashMap<String, Collection<Integer>>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<String, Collection<Integer>>, AbstractMap.SimpleEntry<Object, String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      MultiValueMap<HashMap<String, Collection<Integer>>, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = new MultiValueMap<HashMap<String, Collection<Integer>>, AbstractMap.SimpleEntry<Object, String>>();
      HashMap<String, Collection<Integer>> hashMap0 = new HashMap<String, Collection<Integer>>();
      multiValueMap1.putIfAbsent(hashMap0, hashMap0);
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      multiValueMap0.putAll(arrayList0, (Collection<String>) arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) null);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<Object, String>>();
      HashMap<ArrayList<Object>, String> hashMap0 = new HashMap<ArrayList<Object>, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, "clone");
      multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      multiValueMap0.put(integer0, integer0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<String>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      HashMap<Integer, Collection<Integer>> hashMap0 = new HashMap<Integer, Collection<Integer>>();
      Factory<ArrayList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super ArrayList<Integer>>) hashMap0, factory0);
      Integer integer0 = new Integer((-369));
      hashMap0.put(integer0, arrayList0);
      ArrayList arrayList2 = (ArrayList)multiValueMap0.put(integer0, arrayList1);
      assertEquals(0, arrayList2.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      multiValueMap0.putIfAbsent("Equator must not be null.", hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap1);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<HashMap<Object, String>> linkedList0 = new LinkedList<HashMap<Object, String>>();
      Integer integer0 = new Integer(949);
      HashMap<AbstractMap.SimpleEntry<Integer, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) arrayList0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "org.apache.commons.collections4.iterators.EmptyListIterator");
      hashMap0.put(abstractMap_SimpleEntry0, linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Integer>((Map<AbstractMap.SimpleEntry<Integer, String>, ? super Collection<Integer>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "]#krm9O");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(165);
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      multiValueMap0.putIfAbsent("Equator must not be null.", integer0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping("Equator must not be null.", integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<Integer, LinkedList<Integer>>();
      boolean boolean0 = multiValueMap1.removeMapping(collection0, multiValueMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, "Index cannot be negative: ");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      MultiValueMap<String, Object> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<String, Object>((Map<String, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>(0);
      arrayList0.add("clone");
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.putAll((Object) "clone", (Collection<String>) arrayList0);
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, Integer>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.put(arrayList0, arrayList0);
      multiValueMap0.iterator((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Integer>, EntrySetToMapIteratorAdapter<String, Integer>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, EntrySetToMapIteratorAdapter<String, Integer>>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((Object) factory0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("7^Wy<-y/nw");
      multiValueMap0.putAll(arrayList0, (Collection<String>) arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertEquals(1, arrayList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.getCollection("9z{j");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<String>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = new MultiValueMap<Collection<Integer>, Integer>();
      Iterator<Map.Entry<Collection<Integer>, Integer>> iterator0 = (Iterator<Map.Entry<Collection<Integer>, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, Object>>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>((Collection<Integer>) null);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) constantFactory0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping((Object) null, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
