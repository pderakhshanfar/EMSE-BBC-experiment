/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:31:02 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Factory<LinkedList<AbstractMap.SimpleEntry<String, Integer>>> factory0 = ConstantFactory.constantFactory((LinkedList<AbstractMap.SimpleEntry<String, Integer>>) null);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleEntry<String, Integer>>>) multiValueMap0, factory0);
      Collection<AbstractMap.SimpleEntry<String, Integer>> collection0 = multiValueMap1.createCollection(619);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection((-874));
      assertFalse(collection0.contains((-874)));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1672);
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(integer0, linkedList0);
      MultiValueMap<Integer, MultiValueMap<Object, Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<MultiValueMap<Object, Collection<String>>>>) multiValueMap0);
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , any());
      multiValueMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<HashMap<Object, Object>>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.ExceptionFactory
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1672);
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(integer0, linkedList0);
      MultiValueMap<Integer, MultiValueMap<Object, Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<MultiValueMap<Object, Collection<String>>>>) multiValueMap0);
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(anyInt() , any());
      multiValueMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-1917));
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<ArrayList<String>, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<ArrayList<String>, String>>>) hashMap0);
      multiValueMap0.putIfAbsent((Object) null, hashMap0);
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<HashMap<Object, Object>>>) multiValueMap0);
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, multiValueMap1);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends Collection<Object>, ?>) multiValueMap2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      Factory<Collection<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<String>>>) multiValueMap0, factory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Collection<String>> arrayList1 = new ArrayList<Collection<String>>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList1.add((Collection<String>) arrayList2);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(arrayList0, (Collection<Collection<String>>) arrayList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>((Map<Integer, ? super LinkedList<Object>>) multiValueMap0, factory0);
      Integer integer0 = new Integer((-1));
      MultiValueMap<Integer, Collection<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Integer>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.put(integer0, multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<String>>();
      Factory<LinkedList<HashMap<String, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, HashMap<String, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super LinkedList<HashMap<String, Object>>>) multiValueMap1, factory0);
      Collection<Object> collection0 = multiValueMap2.values();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(collection0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap3.put(linkedList0, multiValueMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, HashMap<Integer, AbstractMap.SimpleEntry>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Integer, AbstractMap.SimpleEntry>>>) hashMap0);
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>((Collection<Object>) null);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) constantFactory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, String>, ? super Collection<LinkedList<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, (Object) null);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.map = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<String>>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) hashMap0);
      multiValueMap0.map = null;
      Integer integer0 = new Integer((-1462));
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(10);
      hashMap0.put(integer0, integer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<Integer, Object>((Map<Integer, ? super LinkedList<Object>>) null, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<AbstractMap.SimpleEntry<Object, Integer>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      multiValueMap0.putIfAbsent(arrayList0, iterator0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, HashMap<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<HashMap<Object, String>>>) multiValueMap1);
      Collection<HashMap<Object, String>> collection0 = multiValueMap2.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = multiValueMap1.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<HashMap<Integer, String>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Integer, String>, Integer>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      multiValueMap0.put(hashMap0, hashMap0);
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap1 = new MultiValueMap<ArrayList<String>, Collection<Object>>();
      int int0 = multiValueMap0.size((Object) multiValueMap1);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<AbstractMap.SimpleEntry<Object, Integer>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      multiValueMap0.putIfAbsent(arrayList0, iterator0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<String>>) multiValueMap1, factory0);
      boolean boolean0 = multiValueMap2.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<AbstractMap.SimpleEntry<Object, Integer>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, iterator0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<String>>) multiValueMap1, factory0);
      boolean boolean0 = multiValueMap2.containsValue((Object) arrayList0, object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      MultiValueMap<ArrayList<String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap1);
      Collection<Object> collection0 = multiValueMap2.values();
      Collection<Object> collection1 = multiValueMap2.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<Collection<String>> arrayList2 = new ArrayList<Collection<String>>();
      arrayList2.add((Collection<String>) arrayList1);
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<String>>();
      multiValueMap0.putAll(arrayList0, (Collection<Collection<String>>) arrayList2);
      Object object0 = multiValueMap0.put(arrayList0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<AbstractMap.SimpleEntry<Object, Integer>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, iterator0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<Object>>) hashMap0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>((String) null, hashMap0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      hashMap0.put(abstractMap_SimpleEntry0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<AbstractMap.SimpleEntry<Object, Integer>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      multiValueMap0.putIfAbsent(arrayList0, iterator0);
      MultiValueMap<ArrayList<String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends ArrayList<String>, ?>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(arrayList0, iterator0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<AbstractMap.SimpleEntry<Object, Integer>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      multiValueMap0.putIfAbsent(arrayList0, iterator0);
      MultiValueMap<ArrayList<String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      Iterator<AbstractMap.SimpleEntry<Object, Integer>> iterator1 = multiValueMap0.iterator((Object) arrayList0);
      boolean boolean0 = multiValueMap1.removeMapping(arrayList0, iterator1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<AbstractMap.SimpleEntry<Object, Integer>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      multiValueMap0.putIfAbsent(arrayList0, iterator0);
      MultiValueMap<ArrayList<String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap1.removeMapping(arrayList0, iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super LinkedList<LinkedList<Object>>>) hashMap0, (Factory<LinkedList<LinkedList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<AbstractMap.SimpleEntry<Object, Integer>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      multiValueMap0.putIfAbsent(arrayList0, iterator0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      boolean boolean0 = multiValueMap1.putAll(arrayList0, collection0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }
}
