/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:36:47 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap1.putIfAbsent("Q,/^G(>", multiValueMap0);
      multiValueMap1.put("Q,/^G(>", linkedList0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("zQz0Iq'N|TK31", (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping("zQz0Iq'N|TK31", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(5443);
      hashMap0.put(integer0, integer0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, Object> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, Object>();
      MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      multiValueMap1.putIfAbsent("org.apache.commons.collections4.iterators.IteratorChain", multiValueMap0);
      MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<Object>>>) multiValueMap1, factory0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MultiValueMap<HashMap<Integer, Integer>, String> multiValueMap1 = new MultiValueMap<HashMap<Integer, Integer>, String>();
      multiValueMap1.putIfAbsent(hashMap0, "F@4V7");
      multiValueMap1.getCollection(multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Comparable<Object>, Object> hashMap0 = new HashMap<Comparable<Object>, Object>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory((LinkedList<String>) null);
      MultiValueMap<Comparable<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Comparable<Object>, ? super LinkedList<String>>) hashMap0, factory0);
      Collection<String> collection0 = multiValueMap0.createCollection((-2));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Collection<Object> collection0 = multiValueMap0.createCollection(0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      MultiValueMap<LinkedList<Object>, ArrayList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Collection<String>>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      MultiValueMap<String, ArrayList<Collection<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Collection<String>>>>) hashMap0);
      hashMap0.put("PrototypeCloneFactory: Clone method must be public", object0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Object
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) "PrototypeCloneFactory: Clone method must be public");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.map = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.putIfAbsent("", (Object) null);
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      MultiValueMap<Comparable<String>, ArrayList<Collection<String>>> multiValueMap2 = new MultiValueMap<Comparable<String>, ArrayList<Collection<String>>>();
      Factory<LinkedList<ArrayList<Collection<String>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Comparable<String>, ArrayList<Collection<String>>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Comparable<String>, ? super LinkedList<ArrayList<Collection<String>>>>) multiValueMap2, factory0);
      // Undeclared exception!
      try { 
        multiValueMap3.putAll((Map<? extends Comparable<String>, ?>) multiValueMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<LinkedList<Integer>> arrayList0 = new ArrayList<LinkedList<Integer>>();
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Object>>) hashMap0, factory0);
      Factory<LinkedList<LinkedList<Integer>>> factory1 = ExceptionFactory.exceptionFactory();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      arrayList0.add(linkedList1);
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<LinkedList<Integer>>>) multiValueMap0, factory1);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(arrayList1, (Collection<LinkedList<Integer>>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put("}T5#aDUwEh2w.g~(h%", multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<HashMap<Object, Collection<String>>, Object> hashMap0 = new HashMap<HashMap<Object, Collection<String>>, Object>();
      HashMap<Object, Collection<String>> hashMap1 = new HashMap<Object, Collection<String>>();
      hashMap0.put(hashMap1, hashMap1);
      MultiValueMap<HashMap<Object, Collection<String>>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Collection<String>>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(hashMap1, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super LinkedList<Integer>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, LinkedList<ArrayList<Integer>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<ArrayList<Integer>>>>) hashMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, Object> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, Object>();
      multiValueMap0.map = (Map<HashMap<Integer, Integer>, Object>) multiValueMap0;
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      MultiValueMap<Object, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, Collection<String>> hashMap0 = new HashMap<Object, Collection<String>>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      Set<Map.Entry<Object, Collection<String>>> set0 = (Set<Map.Entry<Object, Collection<String>>>)hashMap0.entrySet();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      Integer integer0 = new Integer((-883));
      Object object0 = multiValueMap1.put(integer0, set0);
      MultiValueMap<MultiValueMap<Object, String>, LinkedList<Integer>> multiValueMap2 = new MultiValueMap<MultiValueMap<Object, String>, LinkedList<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap2.getCollection(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Collection<String>>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Collection<String>>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      HashMap<HashMap<Integer, Integer>, Object> hashMap0 = new HashMap<HashMap<Integer, Integer>, Object>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      hashMap0.put(hashMap1, multiValueMap0);
      MultiValueMap<HashMap<Integer, Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Integer>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, Object> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, Object>();
      MultiValueMap<HashMap<Integer, Integer>, LinkedList<AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Integer>, ? super Collection<LinkedList<AbstractMap.SimpleImmutableEntry>>>) multiValueMap0);
      multiValueMap0.map = (Map<HashMap<Integer, Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(512);
      hashMap0.put(hashMap1, hashMap1);
      MultiValueMap<HashMap<String, Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      HashMap<HashMap<Integer, Integer>, Object> hashMap0 = new HashMap<HashMap<Integer, Integer>, Object>();
      MultiValueMap<HashMap<Integer, Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Integer>, ? super Collection<String>>) hashMap0);
      Collection<String> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Collection<Object>>();
      Iterator<Map.Entry<LinkedList<Integer>, Collection<Object>>> iterator0 = (Iterator<Map.Entry<LinkedList<Integer>, Collection<Object>>>)multiValueMap0.iterator();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Collection<String>>>>) hashMap0);
      hashMap0.put("PrototypeCloneFactory: Clone method must be public", iterator0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Collection<Integer>> linkedList1 = new LinkedList<Collection<Integer>>();
      linkedList1.add((Collection<Integer>) linkedList0);
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      multiValueMap0.putAll((Object) linkedList1, (Collection<Collection<Integer>>) linkedList1);
      boolean boolean0 = multiValueMap0.putAll((Object) linkedList1, (Collection<Collection<Integer>>) linkedList1);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>();
      boolean boolean0 = multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Object>) null, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.putIfAbsent("zQz0Iq'N|TK31", "zQz0Iq'N|TK31");
      int int0 = multiValueMap0.size((Object) "zQz0Iq'N|TK31");
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("<{S{#", "<{S{#");
      MultiValueMap<String, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "<{S{#", (Object) "<{S{#");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, Object> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put((String) null, (Object) null);
      MultiValueMap<String, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) null, (Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Collection<String>>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Collection<String>>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("ad() not upported forempty Iterator", "ad() not upported forempty Iterator");
      MultiValueMap<Comparable<String>, ArrayList<Collection<String>>> multiValueMap1 = new MultiValueMap<Comparable<String>, ArrayList<Collection<String>>>();
      multiValueMap1.putAll((Map<? extends Comparable<String>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Collection<Integer>> linkedList1 = new LinkedList<Collection<Integer>>();
      linkedList1.add((Collection<Integer>) linkedList0);
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      multiValueMap0.putAll((Object) linkedList1, (Collection<Collection<Integer>>) linkedList1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(10);
      linkedList0.add(integer0);
      LinkedList<Collection<Integer>> linkedList1 = new LinkedList<Collection<Integer>>();
      linkedList1.add((Collection<Integer>) linkedList0);
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      multiValueMap0.putAll((Object) linkedList1, (Collection<Collection<Integer>>) linkedList1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.put(hashMap1, (Object) null);
      MultiValueMap<HashMap<String, Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.putIfAbsent("zQz0Iq'N|TK31", "zQz0Iq'N|TK31");
      multiValueMap0.put("zQz0Iq'N|TK31", "zQz0Iq'N|TK31");
      boolean boolean0 = multiValueMap0.removeMapping("zQz0Iq'N|TK31", "zQz0Iq'N|TK31");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.put("ad() not upported forempty Iterator", "ad() not upported forempty Iterator");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.removeMapping("ad() not upported forempty Iterator", linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, Object> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, Object>();
      MultiValueMap<Object, Collection<String>> multiValueMap1 = new MultiValueMap<Object, Collection<String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap1.putIfAbsent(multiValueMap0, linkedList0);
      multiValueMap1.iterator((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<HashMap<Object, Collection<String>>, Collection<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Collection<String>>, Collection<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap1.putAll(arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Comparable<Integer>, Collection<String>> hashMap0 = new HashMap<Comparable<Integer>, Collection<String>>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Comparable<Integer>, String> multiValueMap0 = new MultiValueMap<Comparable<Integer>, String>((Map<Comparable<Integer>, ? super Collection<String>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Collection<String>>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Collection<String>>>();
      MultiValueMap<Collection<String>, String> multiValueMap1 = new MultiValueMap<Collection<String>, String>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, LinkedList<Collection<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Collection<String>>>>) hashMap0);
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Collection<Object>>();
      Iterator<Map.Entry<LinkedList<Integer>, Collection<Object>>> iterator0 = (Iterator<Map.Entry<LinkedList<Integer>, Collection<Object>>>)multiValueMap0.iterator();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Collection<String>>>>) hashMap0);
      Iterator<ArrayList<Collection<String>>> iterator1 = multiValueMap1.iterator((Object) iterator0);
      assertNotNull(iterator1);
  }
}
