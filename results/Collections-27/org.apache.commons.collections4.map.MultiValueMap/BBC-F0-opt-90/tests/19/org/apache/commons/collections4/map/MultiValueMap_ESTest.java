/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:13:55 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      multiValueMap0.map = null;
      multiValueMap0.map = null;
      multiValueMap0.createCollection(512);
      MultiValueMap<ConstantFactory<String>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<ConstantFactory<String>, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) "org.apache.commons.collections4.map.MultiValueMap");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<MultiValueMap<Integer, Object>, EmptyIterator<String>> multiValueMap1 = new MultiValueMap<MultiValueMap<Integer, Object>, EmptyIterator<String>>();
      multiValueMap1.map = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      multiValueMap0.computeIfAbsent(arrayList0, function1);
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<ExceptionFactory<Object>, Object> hashMap0 = new HashMap<ExceptionFactory<Object>, Object>();
      MultiValueMap<ExceptionFactory<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<Integer>>) hashMap0);
      multiValueMap0.map = (Map<ExceptionFactory<Object>, Object>) hashMap0;
      ExceptionFactory<Object> exceptionFactory0 = (ExceptionFactory<Object>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(exceptionFactory0, biFunction0);
      ExceptionFactory<Object> exceptionFactory1 = (ExceptionFactory<Object>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exceptionFactory1).toString();
      multiValueMap0.putIfAbsent(exceptionFactory1, hashMap0);
      ExceptionFactory<Object> exceptionFactory2 = (ExceptionFactory<Object>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      hashMap0.put(exceptionFactory2, exceptionFactory2);
      int int0 = 1;
      hashMap0.clone();
      multiValueMap0.values();
      ExceptionFactory<Object> exceptionFactory3 = (ExceptionFactory<Object>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      MultiValueMap<Collection<Integer>, Integer> multiValueMap1 = new MultiValueMap<Collection<Integer>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(multiValueMap0.map);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(2);
      MultiValueMap<String, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) hashMap0);
      String string0 = "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory";
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      hashMap0.remove((Object) constantFactory0, (Object) constantFactory0);
      ConstantFactory<Object> constantFactory1 = new ConstantFactory<Object>("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      ConstantFactory<String> constantFactory2 = new ConstantFactory<String>("The collection must not be null");
      ConstantFactory.constantFactory("dr");
      hashMap0.put("The collection must not be null", constantFactory2);
      hashMap0.put("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", constantFactory1);
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add((Collection<String>) linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", (Collection<Collection<String>>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      MultiValueMap<HashMap<String, Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<String>>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("Y-T2+X'CwB!5syaW.&*", "org.apache.commons.collectiors4.map.MultiVaueMap$VauesIterator");
      hashMap0.put(hashMap1, multiValueMap0);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put(hashMap2, object0);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        multiValueMap0.put(hashMap2, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, EmptyIterator<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, EmptyIterator<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      arrayList0.removeIf(predicate0);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      arrayList0.add(integer0);
      LinkedList<EmptyIterator<Integer>> linkedList0 = new LinkedList<EmptyIterator<Integer>>();
      multiValueMap0.putAll(arrayList0, (Collection<EmptyIterator<Integer>>) linkedList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("Hic9\"Oo=R'", factory0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      Map.Entry.comparingByValue();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("Hic9\"Oo=R'");
      multiValueMap1.putIfAbsent(abstractMap_SimpleImmutableEntry1, constantFactory0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super LinkedList<String>>) multiValueMap1, factory0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, HashMap<Object, Integer>> multiValueMap3 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<HashMap<Object, Integer>>>) multiValueMap2);
      multiValueMap3.putAll((Map<? extends AbstractMap.SimpleImmutableEntry<Object, Object>, ?>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap3.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.ConstantFactory
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, Object> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, Object>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      HashMap<String, Collection<Integer>> hashMap2 = new HashMap<String, Collection<Integer>>();
      multiValueMap0.putIfAbsent(hashMap1, hashMap2);
      MultiValueMap<Integer, Collection<Integer>> multiValueMap1 = new MultiValueMap<Integer, Collection<Integer>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0, (Object) multiValueMap1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, ArrayList<Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      ConstantFactory<LinkedList<HashMap<String, Object>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Object>>>((LinkedList<HashMap<String, Object>>) null);
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<HashMap<String, Object>>>) multiValueMap1, (Factory<LinkedList<HashMap<String, Object>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap2.put(constantFactory0, constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<HashMap<Integer, String>, Object> multiValueMap0 = new MultiValueMap<HashMap<Integer, String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("J-YaR.X+G");
      MultiValueMap<Collection<String>, String> multiValueMap1 = new MultiValueMap<Collection<String>, String>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<String>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Collection<String>) arrayList0, (Collection<String>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.iterator((Object) arrayList0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>>();
      Object object0 = multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap1);
      int int0 = multiValueMap2.size(object0);
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, String>();
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      MultiValueMap<HashMap<String, Object>, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<ConstantFactory<Object>>>) hashMap0);
      MultiValueMap<HashMap<String, Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Object>>) multiValueMap1);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MultiValueMap<HashMap<Object, Object>, ArrayList<Object>> multiValueMap3 = new MultiValueMap<HashMap<Object, Object>, ArrayList<Object>>();
      Collection<Object> collection0 = multiValueMap3.values();
      boolean boolean0 = multiValueMap2.putAll(hashMap1, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) multiValueMap1);
      MultiValueMap<Object, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap2);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Integer, Integer>>>) multiValueMap3);
      Object object0 = multiValueMap4.putIfAbsent(multiValueMap3, multiValueMap1);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap4.removeMapping(object0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addFirst("org.apache.commons.collections4.map.AbstractIterableMap");
      multiValueMap1.putIfAbsent(multiValueMap0, linkedList0);
      MultiValueMap<Object, ConstantFactory<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ConstantFactory<Object>>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) multiValueMap0, (Object) multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      multiValueMap0.putIfAbsent(hashMap0, "");
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>>();
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1208);
      hashMap1.replace(integer0, (Object) "", (Object) integer0);
      multiValueMap1.removeMapping(multiValueMap0, hashMap1);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      HashMap<Object, Object> hashMap3 = new HashMap<Object, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, String>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>>();
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      multiValueMap1.removeMapping(multiValueMap0, hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) hashMap2, (Factory<LinkedList<Object>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap2.createCollection(2);
      assertFalse(collection0.contains(2));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Object, String>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Integer>>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) multiValueMap1);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap2.merge(hashMap0, hashMap1, biFunction0);
      multiValueMap2.totalSize();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<Integer>, MultiValueMap<Object, Object>> multiValueMap3 = new MultiValueMap<ArrayList<Integer>, MultiValueMap<Object, Object>>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap4 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) multiValueMap3);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      multiValueMap3.forEach(biConsumer0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      multiValueMap4.putAll(arrayList1, (Collection<String>) arrayList0);
      MultiValueMap<LinkedList<Object>, Collection<Integer>> multiValueMap5 = new MultiValueMap<LinkedList<Object>, Collection<Integer>>();
      boolean boolean0 = multiValueMap5.removeMapping(multiValueMap0, multiValueMap1);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<ConstantFactory<Object>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, HashMap<Object, String>>();
      MultiValueMap<ConstantFactory<Object>, HashMap<MultiValueMap<Integer, Integer>, ArrayList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<HashMap<MultiValueMap<Integer, Integer>, ArrayList<String>>>>) multiValueMap0);
      multiValueMap0.containsValue((Object) multiValueMap1);
      multiValueMap0.map = (Map<ConstantFactory<Object>, Object>) multiValueMap1;
      MultiValueMap<ConstantFactory<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<Object>>();
      multiValueMap0.mapIterator();
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.clone();
      Integer integer0 = new Integer((-1492));
      hashMap0.put((String) null, integer0);
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) hashMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<String, Integer>>>) hashMap0);
      Set<ArrayList<Object>> set0 = multiValueMap1.keySet();
      Factory<Collection<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory((Collection<ArrayList<Object>>) set0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0, factory0);
      Integer integer0 = new Integer(1706);
      // Undeclared exception!
      try { 
        multiValueMap2.put(integer0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      multiValueMap0.putAll((Map<?, ?>) multiValueMap1);
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<ArrayList<String>, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(arrayList0, arrayList0, biFunction0);
      multiValueMap3.map = (Map<ArrayList<String>, Object>) multiValueMap2;
      Integer integer0 = new Integer((-5251));
      multiValueMap3.containsValue((Object) null, (Object) integer0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList1 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      ConstantFactory.constantFactory(linkedList1);
      MultiValueMap<Object, String> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap1, (Factory<LinkedList<String>>) constantFactory0);
      multiValueMap4.clear();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap5 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap5.put("J'%7%x$CGnGit", (Object) null);
      assertEquals(1, multiValueMap5.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Integer>>();
      Integer integer0 = new Integer(2147483645);
      multiValueMap0.iterator((Object) integer0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.clone();
      ArrayList<ArrayList<Integer>> arrayList1 = new ArrayList<ArrayList<Integer>>();
      arrayList1.add(arrayList0);
      multiValueMap0.putAll(linkedList0, (Collection<ArrayList<Integer>>) arrayList1);
      multiValueMap0.remove((Object) arrayList0, (Object) arrayList0);
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      multiValueMap0.containsValue((Object) arrayList2);
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      MultiValueMap<HashMap<Object, String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<String>>) hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap1.put((Object) null, "Collection must not be null.");
      multiValueMap1.put(hashMap1, hashMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) hashMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge((String) null, constantFactory0, biFunction0);
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = new MultiValueMap<Object, Collection<Object>>();
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.computeIfPresent(integer0, biFunction1);
      multiValueMap0.containsValue(object0);
      MultiValueMap<Object, Collection<Object>> multiValueMap2 = new MultiValueMap<Object, Collection<Object>>();
      assertTrue(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      multiValueMap0.putIfAbsent("L6Qo^[[-Y,Y", linkedList0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(0, arrayList0);
      boolean boolean0 = multiValueMap0.putAll("L6Qo^[[-Y,Y", (Collection<ArrayList<String>>) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      multiValueMap0.iterator();
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) multiValueMap1, factory0);
      multiValueMap1.map = (Map<LinkedList<Object>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ConstantFactory<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(arrayList0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = new MultiValueMap<ArrayList<Object>, String>((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap0, (Factory<Collection<String>>) constantFactory0);
      multiValueMap0.containsValue((Object) arrayList0);
      arrayList0.add("");
      multiValueMap0.containsValue((Object) null);
      Collection<String> collection0 = multiValueMap1.createCollection(0);
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      multiValueMap1.putAll((Map<? extends ArrayList<Object>, ?>) multiValueMap0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, MultiValueMap<Integer, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<MultiValueMap<Integer, Object>>>) hashMap0);
      multiValueMap2.iterator((Object) collection0);
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, LinkedList<Collection>> multiValueMap3 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, ? super Collection<LinkedList<Collection>>>) hashMap1);
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      hashMap1.put(abstractMap_SimpleImmutableEntry1, multiValueMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, String> multiValueMap4 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, ? super Collection<String>>) multiValueMap3);
      // Undeclared exception!
      try { 
        multiValueMap4.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Integer integer0 = new Integer(2597);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      multiValueMap1.containsValue((Object) hashMap0);
      multiValueMap1.merge(multiValueMap0, integer0, biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge("", arrayList0, biFunction0);
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap1.containsValue((Object) "");
      MultiValueMap<Object, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) hashMap0);
      multiValueMap2.createCollection(3754);
      multiValueMap2.putAll((Map<?, ?>) multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, ArrayList<Integer>>();
      multiValueMap0.values();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      multiValueMap0.values();
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(arrayList0);
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      multiValueMap0.getOrDefault("org.apache.commons.collections4.iterators.LazyIteratorChain", object0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.iterators.LazyIteratorChain").when(biFunction0).apply(any() , any());
      multiValueMap1.computeIfPresent(linkedList0, biFunction0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap1);
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      multiValueMap0.replaceAll(biFunction1);
      MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap2);
      multiValueMap2.values();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Object, String>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      multiValueMap0.put(hashMap0, "");
      multiValueMap0.put(hashMap0, "");
      Integer integer0 = new Integer(1);
      multiValueMap0.iterator((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.values();
      Integer integer0 = new Integer(0);
      multiValueMap0.put("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", integer0);
      multiValueMap0.values();
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      multiValueMap0.entrySet();
      MultiValueMap<ConstantFactory<Integer>, Object> multiValueMap1 = new MultiValueMap<ConstantFactory<Integer>, Object>();
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ConstantFactory<Integer>, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ConstantFactory<Integer>, ? super LinkedList<Collection<Object>>>) multiValueMap1, factory0);
      MultiValueMap<ConstantFactory<Integer>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<ConstantFactory<Integer>, ? super Collection<Object>>) multiValueMap2);
      Integer integer0 = new Integer((-3));
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      Integer integer1 = new Integer((-3));
      // Undeclared exception!
      try { 
        multiValueMap3.put(constantFactory0, integer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(0, arrayList0);
      boolean boolean0 = multiValueMap0.putAll("L6Qo^[[-Y,Y", (Collection<ArrayList<String>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      multiValueMap1.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Object, String>>();
      Integer integer0 = new Integer(1876);
      multiValueMap0.iterator((Object) integer0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.replaceAll(biFunction0);
      Integer integer1 = new Integer(775);
      boolean boolean0 = multiValueMap0.containsValue((Object) "", (Object) integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("InstantiateFactory: The constructor must exist and be public ", "InstantiateFactory: The constructor must exist and be public ");
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      multiValueMap1.createCollection(33);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer((-1336));
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(integer0, biFunction0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, String>>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      multiValueMap0.put("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", hashMap0);
      Factory<Collection<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) hashMap0, factory0);
      Integer integer0 = new Integer(2);
      multiValueMap1.getOrDefault(integer0, set0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Factory<LinkedList<Integer>> factory1 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) multiValueMap0, factory1);
      multiValueMap2.createCollection(2);
      multiValueMap2.putAll((Map<? extends String, ?>) multiValueMap0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap3 = new MultiValueMap<ArrayList<Object>, String>();
      Factory<LinkedList<Object>> factory2 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap4 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<Object>>) multiValueMap3, factory2);
      Iterator<Map.Entry<ArrayList<Object>, Object>> iterator0 = (Iterator<Map.Entry<ArrayList<Object>, Object>>)multiValueMap4.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      multiValueMap0.putAll((Map<?, ?>) multiValueMap1);
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<ArrayList<String>, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(arrayList0, arrayList0, biFunction0);
      multiValueMap3.map = (Map<ArrayList<String>, Object>) multiValueMap2;
      Integer integer0 = new Integer((-5251));
      multiValueMap3.containsValue((Object) null, (Object) integer0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<Object, String> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap1, (Factory<LinkedList<String>>) constantFactory0);
      multiValueMap4.clear();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.clear();
      Integer integer0 = new Integer(457);
      hashMap0.put(integer0, integer0);
      MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleImmutableEntry>>>) hashMap0);
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, LinkedList<Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(multiValueMap0, multiValueMap0);
      multiValueMap0.put(hashMap0, hashMap0);
      multiValueMap0.iterator();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) hashMap0);
      MultiValueMap<Object, HashMap<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<String, Integer>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      linkedList0.removeIf(predicate3);
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>((Map<Object, ? super LinkedList<Object>>) multiValueMap1, factory0);
      MultiValueMap<String, LinkedList<String>> multiValueMap3 = new MultiValueMap<String, LinkedList<String>>();
      int int0 = multiValueMap3.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(hashMap0, hashMap0, biFunction0);
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.put("org.apache.commons.collections4.FunctorException", arrayList0);
      multiValueMap0.values();
      multiValueMap1.remove((Object) null);
      multiValueMap0.removeMapping((Object) null, (Object) null);
      multiValueMap0.totalSize();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<AbstractMap.SimpleEntry>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Collection<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put((String) null, linkedList0);
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      multiValueMap1.clear();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>> multiValueMap2 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Integer, Integer>>>) multiValueMap2);
      multiValueMap3.removeMapping(constantFactory0, constantFactory0);
      HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, String> multiValueMap4 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, String>, ? super Collection<String>>) hashMap1);
      multiValueMap4.map = (Map<AbstractMap.SimpleImmutableEntry<String, String>, Object>) hashMap1;
      multiValueMap4.iterator();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap5 = new MultiValueMap<Collection<Integer>, Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      multiValueMap5.putAll((Collection<Integer>) linkedList1, (Collection<Integer>) linkedList1);
      HashMap<Collection<Object>, Object> hashMap2 = null;
      try {
        hashMap2 = new HashMap<Collection<Object>, Object>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Collection<Object>, HashMap<String, String>> multiValueMap0 = new MultiValueMap<Collection<Object>, HashMap<String, String>>();
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      multiValueMap0.putIfAbsent((Collection<Object>) null, (Object) null);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<Integer>>) hashMap0, factory0);
      Collection<Object> collection0 = multiValueMap1.values();
      ArrayList<HashMap<String, String>> arrayList0 = new ArrayList<HashMap<String, String>>();
      multiValueMap0.putAll(collection0, (Collection<HashMap<String, String>>) arrayList0);
      Factory<LinkedList<Collection<Object>>> factory1 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<Collection<Object>>>) null, factory1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      Factory<LinkedList<String>> factory0 = null;
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }
}
