/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:18:20 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Object, String>>();
      Set<Map.Entry<Collection<Object>, Object>> set0 = (Set<Map.Entry<Collection<Object>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put("m{^P1(>x^@sS[n~c", arrayList0);
      ArrayList<Collection<Object>> arrayList1 = new ArrayList<Collection<Object>>();
      Factory<Collection<Collection<Object>>> factory0 = ConstantFactory.constantFactory((Collection<Collection<Object>>) arrayList1);
      MultiValueMap<String, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) hashMap0, factory0);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(arrayList0, biFunction0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = new MultiValueMap<Object, LinkedList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.putIfAbsent(multiValueMap0, arrayList0);
      multiValueMap1.getCollection(multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      ConstantFactory<LinkedList<MultiValueMap<Integer, Collection<String>>>> constantFactory0 = new ConstantFactory<LinkedList<MultiValueMap<Integer, Collection<String>>>>((LinkedList<MultiValueMap<Integer, Collection<String>>>) null);
      MultiValueMap<String, MultiValueMap<Integer, Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<MultiValueMap<Integer, Collection<String>>>>) multiValueMap0, (Factory<LinkedList<MultiValueMap<Integer, Collection<String>>>>) constantFactory0);
      Collection<MultiValueMap<Integer, Collection<String>>> collection0 = multiValueMap1.createCollection(735);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Collection<Object> collection0 = multiValueMap0.createCollection((-2589));
      assertFalse(collection0.contains((-2589)));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Object>, String> multiValueMap0 = new MultiValueMap<ExceptionFactory<Object>, String>();
      MultiValueMap<ExceptionFactory<Object>, HashMap<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<HashMap<String, Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<ExceptionFactory<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      hashMap0.put("InstantiateFactory: InstantiationException", multiValueMap0);
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<ConstantFactory<Collection<String>>, Object> hashMap0 = new HashMap<ConstantFactory<Collection<String>>, Object>();
      MultiValueMap<ConstantFactory<Collection<String>>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Collection<String>>, ? super Collection<Object>>) hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(512);
      hashMap1.put(integer0, multiValueMap0);
      hashMap0.put((ConstantFactory<Collection<String>>) null, hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, Collection<String>>> multiValueMap1 = new MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, Collection<String>>>();
      ArrayList<LinkedList<Collection<String>>> arrayList0 = new ArrayList<LinkedList<Collection<String>>>();
      Factory<Collection<LinkedList<Collection<String>>>> factory0 = ConstantFactory.constantFactory((Collection<LinkedList<Collection<String>>>) arrayList0);
      MultiValueMap<Collection<String>, LinkedList<Collection<String>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<Collection<String>>>>) multiValueMap1, factory0);
      Object object0 = multiValueMap2.put((Collection<String>) null, multiValueMap0);
      HashMap<HashMap<Integer, String>, Object> hashMap1 = new HashMap<HashMap<Integer, String>, Object>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      hashMap1.put(hashMap2, object0);
      MultiValueMap<HashMap<Integer, String>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super Collection<Object>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap3.size((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      ArrayList<LinkedList<Integer>> arrayList0 = new ArrayList<LinkedList<Integer>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      hashMap0.put(linkedList0, multiValueMap0);
      Factory<Collection<LinkedList<Integer>>> factory0 = ConstantFactory.constantFactory((Collection<LinkedList<Integer>>) arrayList0);
      MultiValueMap<LinkedList<String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<LinkedList<Integer>>>) hashMap0, factory0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(arrayList0, linkedList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<String>>();
      multiValueMap0.put((LinkedList<String>) null, (Object) null);
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, ArrayList<Object>>> multiValueMap1 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, ArrayList<Object>>>();
      MultiValueMap<Collection<String>, ArrayList<Collection>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ArrayList<Collection>>>) multiValueMap1);
      multiValueMap1.map = (Map<Collection<String>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends Collection<String>, ?>) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("h8EYefpW+>P>]", hashMap0);
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0, factory0);
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      arrayList0.add(abstractMap_SimpleEntry1);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) "9KCTuY7#zp@XRlq", (Collection<AbstractMap.SimpleEntry<Object, Object>>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Collection<String>>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Collection<String>>, ArrayList<String>>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      MultiValueMap<ExceptionFactory<Collection<String>>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Collection<String>>, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<ExceptionFactory<Collection<String>>, Object>) multiValueMap1;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((ExceptionFactory<Collection<String>>) null, (Collection<ArrayList<String>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.put("Cannot instantiate class: ", (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<String>>();
      Factory<Collection<Collection<String>>> factory0 = ConstantFactory.constantFactory((Collection<Collection<String>>) null);
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put((LinkedList<String>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<String>>) null, (Factory<LinkedList<String>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<HashMap<Object, ArrayList<String>>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, MultiValueMap<Object, Collection<String>>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, MultiValueMap<Object, Collection<String>>>();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Integer>>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      multiValueMap2.putIfAbsent(multiValueMap0, multiValueMap1);
      MultiValueMap<Object, ArrayList<String>> multiValueMap3 = new MultiValueMap<Object, ArrayList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap3.iterator((Object) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) "]p.=<)Sme");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<LinkedList<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, LinkedList<String>>();
      MultiValueMap<LinkedList<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashMap<Object, Collection<String>> hashMap1 = new HashMap<Object, Collection<String>>(2147483645, 2147483645);
      hashMap0.put(arrayList0, hashMap1);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(arrayList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      multiValueMap0.put("or.apache.ommons.collectionsQ.map.MultiValueMap$ReflectionFactory", hashMap0);
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<Object, String>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.map = null;
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) "zl\"_4Zl\"$ I//7 h", (Object) "zl\"_4Zl\"$ I//7 h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, HashMap<String, String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, HashMap<String, String>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      multiValueMap0.putIfAbsent(hashMap1, hashMap0);
      ArrayList<HashMap<String, String>> arrayList0 = new ArrayList<HashMap<String, String>>();
      arrayList0.add(hashMap0);
      boolean boolean0 = multiValueMap0.putAll(hashMap1, (Collection<HashMap<String, String>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<AbstractMap.SimpleEntry<Object, Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Integer>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Collection<Integer> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Collection<String>>>>) hashMap1);
      Iterator<ArrayList<Collection<String>>> iterator0 = multiValueMap1.iterator((Object) collection0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.put("2$", "2$");
      multiValueMap0.iterator((Object) "2$");
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      hashMap0.put("", (Object) null);
      multiValueMap0.putAll((Map<? extends String, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.put("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      int int0 = multiValueMap0.size((Object) "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.put("", "");
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "", (Object) factory0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<HashMap<Collection<String>, Collection<String>>, Object> hashMap0 = new HashMap<HashMap<Collection<String>, Collection<String>>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<HashMap<Collection<String>, Collection<String>>, Object> multiValueMap0 = new MultiValueMap<HashMap<Collection<String>, Collection<String>>, Object>((Map<HashMap<Collection<String>, Collection<String>>, ? super LinkedList<Object>>) hashMap0, factory0);
      MultiValueMap<Integer, LinkedList<String>> multiValueMap1 = new MultiValueMap<Integer, LinkedList<String>>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Collection, HashMap>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Collection, HashMap>>>) multiValueMap1);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap2, (Object) linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.put("or.apache.ommons.collectionsQ.map.MultiValueMap$ReflectionFactory", "or.apache.ommons.collectionsQ.map.MultiValueMap$ReflectionFactory");
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "or.apache.ommons.collectionsQ.map.MultiValueMap$ReflectionFactory", (Object) "or.apache.ommons.collectionsQ.map.MultiValueMap$ReflectionFactory");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, ArrayList<Object>>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, ArrayList<Object>>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<String>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap2 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap2.merge(linkedList0, multiValueMap0, biFunction0);
      multiValueMap2.put(linkedList0, multiValueMap1);
      assertEquals(1, multiValueMap2.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<String>>();
      multiValueMap0.put((LinkedList<String>) null, (Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      multiValueMap0.put(linkedList1, linkedList1);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(2514);
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Collection<String>, Collection<String>>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Collection<String>, Collection<String>>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, (Object) null);
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, ArrayList<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, ArrayList<Object>>>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends Collection<String>, ?>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Collection<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<Object>>) multiValueMap1, (Factory<LinkedList<Object>>) constantFactory0);
      boolean boolean0 = multiValueMap2.removeMapping(arrayList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Collection<String>, Collection<String>>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Collection<String>, Collection<String>>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      Object object0 = new Object();
      multiValueMap0.putIfAbsent(arrayList0, object0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Collection<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      boolean boolean0 = multiValueMap2.removeMapping(linkedList0, multiValueMap1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Object>, String> multiValueMap0 = new MultiValueMap<ExceptionFactory<Object>, String>();
      MultiValueMap<ExceptionFactory<Object>, HashMap<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<HashMap<String, Integer>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Collection<String>, Collection<String>>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Collection<String>, Collection<String>>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, (Object) null);
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, ArrayList<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, ArrayList<Object>>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Collection<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<Object>>) multiValueMap1, (Factory<LinkedList<Object>>) constantFactory0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap2.removeMapping(arrayList0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Collection<String>>>) multiValueMap0, (Factory<LinkedList<Collection<String>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.put("or.apache.ommons.collectionsQ.map.MultiValueMap$ReflectionFactory", "or.apache.ommons.collectionsQ.map.MultiValueMap$ReflectionFactory");
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0, factory0);
      Factory<Collection<String>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap1, factory1);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) linkedList0);
      MultiValueMap<Collection<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<String>>) hashMap0, factory0);
      hashMap0.put(linkedList0, (Object) null);
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Collection<Integer>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((ArrayList<Integer>) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      multiValueMap0.putAll(linkedList0, (Collection<Integer>) linkedList1);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, String>>();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap1).when(biFunction0).apply(any() , any());
      multiValueMap2.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap2.put(linkedList0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, Collection<String>>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, Collection<String>>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      Iterator<Map.Entry<LinkedList<String>, String>> iterator0 = (Iterator<Map.Entry<LinkedList<String>, String>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
