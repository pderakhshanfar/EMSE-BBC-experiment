/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:53:48 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.put("-09:[F;+:02L", (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      multiValueMap0.getCollection(linkedList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) hashMap0);
      Collection<AbstractMap.SimpleEntry<String, String>> collection0 = multiValueMap0.createCollection((-2492));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object>((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) constantFactory0);
      multiValueMap0.map = (Map<AbstractMap.SimpleEntry<String, String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      multiValueMap0.put("&ccrb", "&ccrb");
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<ConstantFactory<String>, String> multiValueMap0 = new MultiValueMap<ConstantFactory<String>, String>();
      MultiValueMap<ConstantFactory<String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<ConstantFactory<String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(linkedList0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.putIfAbsent("e(g.apache.commons.coHlections4.-ap.MultCValueMap$Values", "e(g.apache.commons.coHlections4.-ap.MultCValueMap$Values");
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = new MultiValueMap<Object, LinkedList<String>>();
      MultiValueMap<Object, LinkedList<ConstantFactory<String>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<ConstantFactory<String>>>>) multiValueMap1);
      multiValueMap1.map = (Map<Object, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>>();
      MultiValueMap<ArrayList<Integer>, ArrayList<ArrayList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<ArrayList<ArrayList<String>>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Integer>, Object>) multiValueMap1;
      MultiValueMap<ArrayList<Integer>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("8");
      // Undeclared exception!
      try { 
        multiValueMap2.putAll(arrayList0, (Collection<String>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("$%w9?]\"gE\"MPV3a8}");
      HashMap<ArrayList<Integer>, Collection<String>> hashMap0 = new HashMap<ArrayList<Integer>, Collection<String>>();
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) null);
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) hashMap0, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, Collection<String>>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Collection<String>>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Collection<String>>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Collection<String>>, ? super Collection<AbstractMap.SimpleEntry<Integer, String>>>) hashMap0);
      AbstractMap.SimpleImmutableEntry<String, Collection<String>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Collection<String>>("mA", (Collection<String>) null);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      ArrayList<AbstractMap.SimpleEntry<Integer, String>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Integer, String>>();
      arrayList0.add((AbstractMap.SimpleEntry<Integer, String>) null);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(abstractMap_SimpleImmutableEntry0, (Collection<AbstractMap.SimpleEntry<Integer, String>>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleImmutableEntry cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, ExceptionFactory<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, ExceptionFactory<Integer>>();
      HashMap<MultiValueMap<Integer, String>, Object> hashMap0 = new HashMap<MultiValueMap<Integer, String>, Object>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap1);
      Integer integer0 = new Integer((-1490));
      hashMap0.put(multiValueMap1, integer0);
      LinkedList<ConstantFactory<Integer>> linkedList0 = new LinkedList<ConstantFactory<Integer>>();
      Factory<Collection<ConstantFactory<Integer>>> factory0 = ConstantFactory.constantFactory((Collection<ConstantFactory<Integer>>) linkedList0);
      MultiValueMap<MultiValueMap<Integer, String>, ConstantFactory<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<MultiValueMap<Integer, String>, ? super Collection<ConstantFactory<Integer>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.put(multiValueMap1, multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      MultiValueMap<Collection<String>, Collection<AbstractMap.SimpleEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Collection<AbstractMap.SimpleEntry>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<Collection<String>>>) multiValueMap1, (Factory<LinkedList<Collection<String>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, ExceptionFactory<Object>> multiValueMap0 = new MultiValueMap<String, ExceptionFactory<Object>>();
      MultiValueMap<String, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ConstantFactory<Object>>();
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap0;
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(constantFactory0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ConstantFactory<Object>>();
      multiValueMap0.map = null;
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object>((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) constantFactory0);
      multiValueMap0.map = (Map<AbstractMap.SimpleEntry<String, String>, Object>) multiValueMap1;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
      multiValueMap0.map = null;
      MultiValueMap<Collection<String>, ExceptionFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ExceptionFactory<String>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent(arrayList0, multiValueMap1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Pv.@852BX");
      boolean boolean0 = multiValueMap1.putAll(arrayList0, (Collection<String>) linkedList0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Collection<String> collection0 = multiValueMap0.getCollection(linkedList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) multiValueMap0);
      Set<Map.Entry<ArrayList<Integer>, Object>> set0 = (Set<Map.Entry<ArrayList<Integer>, Object>>)multiValueMap1.entrySet();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Collection<String>, Object>> multiValueMap2 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Collection<String>, Object>>();
      Iterator<AbstractMap.SimpleImmutableEntry<Collection<String>, Object>> iterator0 = multiValueMap2.iterator((Object) set0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<String, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<HashMap<String, String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0);
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<ArrayList<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) constantFactory0);
      multiValueMap1.putIfAbsent(arrayList0, multiValueMap0);
      int int0 = multiValueMap1.size((Object) arrayList1);
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ExceptionFactory<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ExceptionFactory<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer0 = new Integer(2900);
      AbstractMap.SimpleImmutableEntry<Collection<String>, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Collection<String>, Integer>(arrayList0, integer0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      hashMap0.put(abstractMap_SimpleEntry0, "");
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends AbstractMap.SimpleEntry<Object, Object>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("$``IVh& fF30LPZw");
      multiValueMap1.putAll(arrayList0, (Collection<String>) linkedList0);
      multiValueMap1.replace(arrayList0, (Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) multiValueMap0);
      Set<Map.Entry<ArrayList<Integer>, Object>> set0 = (Set<Map.Entry<ArrayList<Integer>, Object>>)multiValueMap1.entrySet();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("$``IVh& fF30LPZw");
      multiValueMap1.putAll(arrayList0, (Collection<String>) linkedList0);
      boolean boolean0 = multiValueMap1.containsValue((Object) set0);
      assertEquals(1, set0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) "Y~mQbs^ko");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      multiValueMap1.putAll(arrayList0, (Collection<String>) linkedList0);
      multiValueMap0.putAll((Map<? extends ArrayList<Integer>, ?>) multiValueMap1);
      MultiValueMap<ArrayList<Integer>, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      boolean boolean0 = multiValueMap2.removeMapping(arrayList0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) multiValueMap0);
      Set<Map.Entry<ArrayList<Integer>, Object>> set0 = (Set<Map.Entry<ArrayList<Integer>, Object>>)multiValueMap1.entrySet();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("$``IVh& fF30LPZw");
      multiValueMap1.putAll(arrayList0, (Collection<String>) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = multiValueMap1.removeMapping(linkedList1, set0);
      assertEquals(1, set0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      multiValueMap1.putAll(arrayList0, (Collection<String>) linkedList0);
      MultiValueMap<ArrayList<Integer>, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      boolean boolean0 = multiValueMap2.removeMapping(arrayList0, linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) multiValueMap1);
      multiValueMap2.put("?=4`kqzL", multiValueMap0);
      MultiValueMap<String, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap1);
      int int0 = multiValueMap3.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-1));
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      ConstantFactory<ArrayList<LinkedList<Object>>> constantFactory0 = new ConstantFactory<ArrayList<LinkedList<Object>>>(arrayList0);
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super ArrayList<LinkedList<Object>>>) multiValueMap0, (Factory<ArrayList<LinkedList<Object>>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<ConstantFactory<String>, String> multiValueMap0 = new MultiValueMap<ConstantFactory<String>, String>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
      MultiValueMap<Collection<String>, ExceptionFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ExceptionFactory<String>>>) multiValueMap0);
      multiValueMap1.clear();
      assertEquals(0, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      Iterator<Map.Entry<String, String>> iterator0 = (Iterator<Map.Entry<String, String>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }
}
