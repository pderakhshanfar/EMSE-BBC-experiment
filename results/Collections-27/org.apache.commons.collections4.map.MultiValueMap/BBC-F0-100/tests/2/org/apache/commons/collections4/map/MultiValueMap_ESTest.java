/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:16:04 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) hashMap0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap1.computeIfPresent((Integer) null, biFunction0);
      Integer integer0 = new Integer((-1652));
      hashMap0.put(integer0, object0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<AbstractMap.SimpleEntry<Integer, Object>>>) multiValueMap1);
      Integer integer0 = new Integer(0);
      MultiValueMap<ArrayList<Integer>, String> multiValueMap3 = new MultiValueMap<ArrayList<Integer>, String>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(integer0, "1]hFQSn,!");
      hashMap0.put(abstractMap_SimpleImmutableEntry0, multiValueMap1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap3.merge((ArrayList<Integer>) null, multiValueMap2, biFunction0);
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap4 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap3);
      int int0 = multiValueMap4.totalSize();
      assertFalse(multiValueMap3.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Integer>>();
      multiValueMap0.put((Object) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Object>>) null, (Factory<Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      Factory<Collection<LinkedList<String>>> factory0 = ConstantFactory.constantFactory((Collection<LinkedList<String>>) null);
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection((Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, String>();
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Object>>) multiValueMap0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap1.put(hashMap0, multiValueMap0);
      MultiValueMap<HashMap<Object, Object>, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<ArrayList<String>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap1, (Object) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put(":3AD1huv9{r9:5@", arrayList0);
      ArrayList<Collection<String>> arrayList1 = new ArrayList<Collection<String>>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList1.add((Collection<String>) arrayList2);
      MultiValueMap<String, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) hashMap0);
      boolean boolean0 = multiValueMap0.putAll(":3AD1huv9{r9:5@", (Collection<Collection<String>>) arrayList1);
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap1.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(0);
      Collection<Object> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add((Collection<String>) arrayList1);
      boolean boolean0 = multiValueMap0.putAll("org.apache.commons.collections4.iterators.EmptyOrderedMapIterator", (Collection<Collection<String>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<String, String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<AbstractMap.SimpleImmutableEntry<String, String>> arrayList1 = new ArrayList<AbstractMap.SimpleImmutableEntry<String, String>>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<AbstractMap.SimpleImmutableEntry<String, String>>) arrayList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(0, 1.0F);
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<String>>) hashMap0);
      boolean boolean0 = multiValueMap0.putAll(hashMap1, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      int int0 = multiValueMap0.size((Object) arrayList1);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Integer integer0 = new Integer((-1));
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(integer0, unaryOperator0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap0.putAll((Map<?, ?>) multiValueMap1);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, String>();
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("InstantiateFactory: The constructor must exist and be public ", integer0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(abstractMap_SimpleEntry0, integer0, biFunction0);
      multiValueMap0.put(abstractMap_SimpleEntry0, "");
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<AbstractMap.SimpleEntry<Integer, Object>>>) multiValueMap1);
      MultiValueMap<ArrayList<Integer>, String> multiValueMap3 = new MultiValueMap<ArrayList<Integer>, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap3.merge((ArrayList<Integer>) null, multiValueMap2, biFunction0);
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap4 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap3);
      int int0 = multiValueMap4.totalSize();
      assertEquals(1, multiValueMap3.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      multiValueMap1.put(hashMap0, hashMap0);
      multiValueMap1.iterator((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<HashMap<String, Integer>, String> multiValueMap0 = new MultiValueMap<HashMap<String, Integer>, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, "org.apache.commons.collections4.iterators.EmptyOrderedMapIterator");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) hashMap0);
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<Integer>>();
      Iterator<Map.Entry<ArrayList<String>, Collection<Integer>>> iterator0 = (Iterator<Map.Entry<ArrayList<String>, Collection<Integer>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
