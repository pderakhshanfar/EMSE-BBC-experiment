/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:32:28 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<LinkedList<ConstantFactory<Object>>, Object> hashMap0 = new HashMap<LinkedList<ConstantFactory<Object>>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<ConstantFactory<Object>> linkedList0 = new LinkedList<ConstantFactory<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      hashMap0.put(linkedList0, linkedList1);
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) arrayList0);
      MultiValueMap<LinkedList<ConstantFactory<Object>>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<ConstantFactory<Object>>, ArrayList<Integer>>((Map<LinkedList<ConstantFactory<Object>>, ? super Collection<Integer>>) hashMap0, factory0);
      multiValueMap0.putAll((Map<? extends LinkedList<ConstantFactory<Object>>, ?>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, linkedList1);
      assertEquals(0, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      Integer integer0 = new Integer(2615);
      multiValueMap0.putIfAbsent("Iterator ms no be null", integer0);
      MultiValueMap<String, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping("Iterator ms no be null", "%L{u)]Z\"Bl$ww?~ ");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(3170);
      multiValueMap0.put(linkedList0, integer0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<LinkedList<ArrayList<String>>, Object> hashMap0 = new HashMap<LinkedList<ArrayList<String>>, Object>();
      MultiValueMap<LinkedList<ArrayList<String>>, AbstractMap.SimpleEntry<HashMap<Integer, String>, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<ArrayList<String>>, ? super Collection<AbstractMap.SimpleEntry<HashMap<Integer, String>, Integer>>>) hashMap0);
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      hashMap0.put(linkedList0, linkedList0);
      Class<Object> class0 = Object.class;
      MultiValueMap<LinkedList<ArrayList<String>>, LinkedList<HashMap>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<ArrayList<String>>, ? super LinkedList<LinkedList<HashMap>>>) multiValueMap0, (Class<LinkedList<LinkedList<HashMap>>>) class0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("7", "7", biFunction0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, LinkedList<Integer>> multiValueMap3 = new MultiValueMap<String, LinkedList<Integer>>((Map<String, ? super Collection<Object>>) multiValueMap2, factory0);
      multiValueMap3.getCollection("7");
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<LinkedList<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<LinkedList<String>>>>) hashMap0);
      Collection<LinkedList<LinkedList<String>>> collection0 = multiValueMap0.createCollection(1883);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Integer, Object>>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ConstantFactory<LinkedList<ArrayList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Object>>>(linkedList0);
      MultiValueMap<LinkedList<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, (Factory<LinkedList<ArrayList<Object>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(collection0, collection0, biFunction0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      multiValueMap0.replaceAll(biFunction1);
      MultiValueMap<Collection<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(hashMap0);
      hashMap0.put(constantFactory0, constantFactory0);
      MultiValueMap<Object, LinkedList<LinkedList<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<LinkedList<String>>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.ConstantFactory
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) hashMap0);
      Integer integer0 = new Integer(1264);
      hashMap0.put(integer0, multiValueMap0);
      MultiValueMap<Integer, Collection<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Collection<String>>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      Object object0 = multiValueMap1.put("%L{u)]Z\"Bl$ww?~ ", multiValueMap0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap2 = new MultiValueMap<LinkedList<Object>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.size(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      multiValueMap0.map = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        multiValueMap0.size(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) hashMap0);
      hashMap0.put("org.apache.commons.collections4.iterators.EmptyMapIterator", multiValueMap0);
      LinkedList<AbstractMap.SimpleEntry<Integer, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Integer, String>>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, Object> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends HashMap<String, Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(2615);
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, integer0);
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<String>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>();
      linkedList0.add((AbstractMap.SimpleImmutableEntry<Integer, String>) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<String, ConstantFactory<String>>((Map<String, ? super ArrayList<Object>>) hashMap0, factory0);
      ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>>(linkedList0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>>) multiValueMap0, (Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((String) null, (Collection<AbstractMap.SimpleImmutableEntry<Integer, String>>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>();
      linkedList0.add((AbstractMap.SimpleImmutableEntry<Integer, String>) null);
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = new MultiValueMap<Object, ArrayList<String>>();
      LinkedList<MultiValueMap<String, Object>> linkedList1 = new LinkedList<MultiValueMap<String, Object>>();
      ConstantFactory<LinkedList<MultiValueMap<String, Object>>> constantFactory0 = new ConstantFactory<LinkedList<MultiValueMap<String, Object>>>(linkedList1);
      MultiValueMap<Object, MultiValueMap<String, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<MultiValueMap<String, Object>>>) multiValueMap1, (Factory<LinkedList<MultiValueMap<String, Object>>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap2.values();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory(collection0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap3 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>((Map<String, ? super Collection<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap3.putAll((String) null, (Collection<AbstractMap.SimpleImmutableEntry<Integer, String>>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>();
      linkedList0.addFirst((AbstractMap.SimpleImmutableEntry<Integer, String>) null);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MultiValueMap<String, ArrayList<AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<AbstractMap.SimpleImmutableEntry>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll("", (Collection<AbstractMap.SimpleImmutableEntry<Integer, String>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Integer, String>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Integer, String>>();
      arrayList0.add((AbstractMap.SimpleImmutableEntry<Integer, String>) null);
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll("ywBkynBRs>3K", (Collection<AbstractMap.SimpleImmutableEntry<Integer, String>>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<String, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Object, Object>>>) multiValueMap0);
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, String> multiValueMap2 = new MultiValueMap<String, String>((Map<String, ? super LinkedList<String>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.put("w][T}>", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<ArrayList<Collection<String>>, Object> hashMap0 = new HashMap<ArrayList<Collection<String>>, Object>(5);
      MultiValueMap<Collection<String>, ArrayList<Collection<String>>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<Collection<String>>>();
      Set<Collection<String>> set0 = multiValueMap0.keySet();
      ConstantFactory<Collection<Collection<String>>> constantFactory0 = new ConstantFactory<Collection<Collection<String>>>(set0);
      MultiValueMap<ArrayList<Collection<String>>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<String>>, ? super Collection<Collection<String>>>) hashMap0, (Factory<Collection<Collection<String>>>) constantFactory0);
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<AbstractMap.SimpleEntry<Integer, Integer>>>) hashMap0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(arrayList0, "org.apache.commons.collections4.iterators.EmptyMapIterator");
      hashMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry0);
      arrayList0.add((Object) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(abstractMap_SimpleImmutableEntry0, "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(2147483645);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>((Map<Object, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<ArrayList<Integer>, Object> hashMap1 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Object>>) hashMap1);
      // Undeclared exception!
      multiValueMap0.put(arrayList0, multiValueMap1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "uo<ym^=`*'Z");
      HashMap<AbstractMap.SimpleEntry<Integer, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, Object>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>((Collection<String>) null);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, String>, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(abstractMap_SimpleEntry0, "uo<ym^=`*'Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "kq<hy]O");
      HashMap<AbstractMap.SimpleEntry<Integer, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, Object>();
      hashMap0.put(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, ArrayList<AbstractMap.SimpleEntry>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, String>, ? super Collection<ArrayList<AbstractMap.SimpleEntry>>>) hashMap0);
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, String> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, String>((Map<AbstractMap.SimpleEntry<Integer, String>, ? super Collection<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleEntry cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Object>>) null, (Factory<Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      linkedList0.add(object0);
      MultiValueMap<Comparable<String>, Collection<Object>> multiValueMap1 = new MultiValueMap<Comparable<String>, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("294", "294");
      MultiValueMap<String, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) "294");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      MultiValueMap<String, ArrayList<AbstractMap.SimpleEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<AbstractMap.SimpleEntry>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super ArrayList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) multiValueMap0);
      multiValueMap0.putIfAbsent(linkedList1, linkedList1);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList1, (Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(linkedList1, linkedList1);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) "3~c!D|*u|f");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>();
      Integer integer0 = new Integer((-2372));
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, (String) null);
      linkedList0.add(abstractMap_SimpleImmutableEntry0);
      multiValueMap0.putAll((String) null, (Collection<AbstractMap.SimpleImmutableEntry<Integer, String>>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll((String) null, (Collection<AbstractMap.SimpleImmutableEntry<Integer, String>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>(0);
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry, Object>>>) hashMap0);
      MultiValueMap<LinkedList<String>, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<HashMap<Object, Object>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap1.putAll(linkedList0, (Collection<HashMap<Object, Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<MultiValueMap<Object, Object>, Object> hashMap0 = new HashMap<MultiValueMap<Object, Object>, Object>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) hashMap1);
      int int0 = multiValueMap0.size((Object) hashMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(660);
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, " a2IR)=\"sW*s3");
      LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>();
      linkedList0.add(abstractMap_SimpleImmutableEntry0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      multiValueMap0.putAll("<jfUXGA1T3", (Collection<AbstractMap.SimpleImmutableEntry<Integer, String>>) linkedList0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) "<jfUXGA1T3");
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(multiValueMap0, "+-$>!/");
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) abstractMap_SimpleEntry0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList1, (Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>();
      Integer integer0 = new Integer((-2372));
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, (String) null);
      linkedList0.add(abstractMap_SimpleImmutableEntry0);
      multiValueMap0.putAll((String) null, (Collection<AbstractMap.SimpleImmutableEntry<Integer, String>>) linkedList0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      MultiValueMap<String, LinkedList<Object>> multiValueMap2 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<String, HashMap<Integer, Integer>> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Integer, Integer>>>) multiValueMap2);
      multiValueMap3.putAll((Map<? extends String, ?>) multiValueMap1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, String>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "kq<hy]O");
      multiValueMap0.put(abstractMap_SimpleEntry0, integer0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, String>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "kq<hy]O");
      multiValueMap0.put(abstractMap_SimpleEntry0, (Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("7", "7", biFunction0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      multiValueMap2.replace("7", (Object) null);
      MultiValueMap<String, Collection<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap1);
      boolean boolean0 = multiValueMap3.removeMapping("7", "7");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<ArrayList<Integer>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, LinkedList<Object>>();
      MultiValueMap<Object, String> multiValueMap2 = new MultiValueMap<Object, String>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap2, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0, (Factory<Collection<ArrayList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Integer, Object>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge((LinkedList<String>) null, multiValueMap0, biFunction0);
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ConstantFactory<LinkedList<ArrayList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Object>>>(linkedList0);
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<ArrayList<Object>>>) multiValueMap1, (Factory<LinkedList<ArrayList<Object>>>) constantFactory0);
      int int0 = multiValueMap2.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) hashMap0);
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll((Object) arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap1.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      ConstantFactory<Collection<ArrayList<String>>> constantFactory0 = new ConstantFactory<Collection<ArrayList<String>>>((Collection<ArrayList<String>>) null);
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<String>>>) hashMap0, (Factory<Collection<ArrayList<String>>>) constantFactory0);
      Collection<ArrayList<String>> collection0 = multiValueMap0.createCollection((-3375));
      assertNull(collection0);
  }
}
