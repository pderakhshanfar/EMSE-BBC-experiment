/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:16:49 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<String>>();
      Set<Map.Entry<Collection<Object>, Object>> set0 = (Set<Map.Entry<Collection<Object>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, arrayList0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>((Map<LinkedList<Object>, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(linkedList1, unaryOperator0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.put(integer0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      MultiValueMap<LinkedList<Integer>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ArrayList<String>>>) multiValueMap0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      multiValueMap1.getCollection(linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      Collection<LinkedList<String>> collection0 = multiValueMap1.createCollection(1);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll("N={R1];$", (Collection<Object>) linkedList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = new MultiValueMap<Object, LinkedList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.put(arrayList0, multiValueMap0);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(multiValueMap0, multiValueMap0);
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0, factory0);
      MultiValueMap<String, Object> multiValueMap2 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>((Map<Object, ? super LinkedList<Object>>) hashMap0, factory0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = multiValueMap0.putIfAbsent(linkedList0, arrayList0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(object0, multiValueMap0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>((Map<Object, ? super LinkedList<Object>>) hashMap0, factory0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      linkedList0.add((Object) factory0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll("", (Collection<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, HashMap<ArrayList<Object>, ExceptionFactory<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<ArrayList<Object>, ExceptionFactory<Integer>>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((String) null, (Collection<Object>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Collection<String>, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Collection<String>, String>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<HashMap<ArrayList<Integer>, MultiValueMap<Collection<String>, Integer>>>>) multiValueMap0, (Factory<Collection<HashMap<ArrayList<Integer>, MultiValueMap<Collection<String>, Integer>>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((String) null, (Collection<Object>) linkedList0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection((-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((String) null, (Collection<Object>) linkedList0);
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = new MultiValueMap<Collection<Object>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) linkedList0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) hashMap0);
      Collection<ArrayList<Integer>> collection0 = multiValueMap0.getCollection((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<ExceptionFactory<Integer>, Object> hashMap0 = new HashMap<ExceptionFactory<Integer>, Object>();
      Factory<LinkedList<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      ExceptionFactory<Integer> exceptionFactory0 = (ExceptionFactory<Integer>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      hashMap0.put(exceptionFactory0, factory0);
      MultiValueMap<ExceptionFactory<Integer>, Collection<String>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Integer>, Collection<String>>((Map<ExceptionFactory<Integer>, ? super LinkedList<Collection<String>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.ExceptionFactory
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      MultiValueMap<Object, Collection<ArrayList<String>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<ArrayList<String>>>>) multiValueMap1);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap3 = new MultiValueMap<Object, ArrayList<Object>>();
      Iterator<ArrayList<Object>> iterator0 = multiValueMap3.iterator((Object) multiValueMap2);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent("org.apache.commons.collections4.map.MultiValueMap$1$1$1", linkedList0);
      linkedList0.add((Object) "org.apache.commons.collections4.map.MultiValueMap$1$1$1");
      boolean boolean0 = multiValueMap0.putAll("org.apache.commons.collections4.map.MultiValueMap$1$1$1", (Collection<Object>) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap1.putAll((Object) arrayList0, (Collection<Collection<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = new MultiValueMap<Object, ArrayList<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap1.putIfAbsent(multiValueMap0, arrayList0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) arrayList1);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = new MultiValueMap<Object, ArrayList<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap1.putIfAbsent(multiValueMap0, arrayList0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.totalSize();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<MultiValueMap<Object, String>, Collection<String>> multiValueMap1 = new MultiValueMap<MultiValueMap<Object, String>, Collection<String>>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", multiValueMap1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(abstractMap_SimpleEntry0, arrayList0);
      multiValueMap0.putAll((Map<? extends AbstractMap.SimpleEntry<String, Object>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, arrayList0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>((Map<Object, ? super LinkedList<Object>>) hashMap0, factory0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, "");
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = multiValueMap0.put(arrayList0, linkedList0);
      multiValueMap0.put(arrayList0, linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping(object0, arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<String>, Integer>();
      Integer integer0 = new Integer(35);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.put(arrayList0, multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(arrayList0, integer0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, String>>();
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, String> multiValueMap2 = new MultiValueMap<String, String>();
      boolean boolean0 = multiValueMap2.removeMapping(multiValueMap0, multiValueMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = multiValueMap0.put(arrayList0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping(object0, arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      Integer integer0 = new Integer(0);
      multiValueMap1.putIfAbsent(integer0, integer0);
      Collection<Object> collection0 = multiValueMap1.values();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = arrayList0.containsAll(collection0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, linkedList0);
      Factory<LinkedList<MultiValueMap<Collection<String>, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, MultiValueMap<Collection<String>, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<MultiValueMap<Collection<String>, String>>>) hashMap0, factory0);
      MultiValueMap<Collection<String>, HashMap<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<HashMap<Object, Integer>>>) multiValueMap0);
      Iterator<HashMap<Object, Integer>> iterator0 = multiValueMap1.iterator((Object) linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Collection<String>, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<String>, Object>, Integer>();
      Iterator<Map.Entry<AbstractMap.SimpleEntry<Collection<String>, Object>, Integer>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleEntry<Collection<String>, Object>, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap2 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, String>>();
      boolean boolean0 = multiValueMap2.containsValue((Object) multiValueMap1, (Object) "Ot");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<MultiValueMap<Collection<String>, String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<MultiValueMap<Collection<String>, String>, LinkedList<Integer>>();
      Factory<LinkedList<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<MultiValueMap<Collection<String>, String>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<MultiValueMap<Collection<String>, String>, ? super LinkedList<ArrayList<Integer>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<MultiValueMap<Collection<String>, String>, Object>) multiValueMap1;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
