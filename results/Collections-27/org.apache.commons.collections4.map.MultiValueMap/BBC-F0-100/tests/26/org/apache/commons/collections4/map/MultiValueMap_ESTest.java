/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:35:32 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      multiValueMap0.putIfAbsent("v", linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping("v", linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      Set<Map.Entry<AbstractMap.SimpleEntry<String, Object>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<String, Object>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(integer0, linkedList0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) hashMap0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Integer>>) hashMap0);
      Collection<Integer> collection0 = multiValueMap0.createCollection(1673);
      assertFalse(collection0.contains(1673));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Object>, AbstractMap.SimpleImmutableEntry<Collection<Object>, String>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Object>, AbstractMap.SimpleImmutableEntry<Collection<Object>, String>>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Integer, Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Object>, ? super LinkedList<LinkedList<String>>>) multiValueMap0, factory0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-8154));
      hashMap0.put(integer0, multiValueMap1);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      multiValueMap0.put(hashMap0, hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) linkedList0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      MultiValueMap multiValueMap2 = (MultiValueMap)multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      MultiValueMap multiValueMap3 = (MultiValueMap)multiValueMap2.put((Object) null, multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.put((String) null, (Object) null);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      Integer integer0 = new Integer(1401);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping((Object) null, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      MultiValueMap<Integer, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Integer>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1452);
      hashMap0.put(integer0, "T&");
      MultiValueMap<Integer, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      arrayList0.add(arrayList1);
      MultiValueMap<Collection<Object>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, HashMap<String, Object>>();
      Factory<LinkedList<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<ArrayList<Integer>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Collection<Object>) linkedList0, (Collection<ArrayList<Integer>>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      LinkedList<AbstractMap.SimpleEntry<Object, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, Integer>>();
      Integer integer0 = new Integer((-2105376123));
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(linkedList0, integer0);
      linkedList0.add(abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) linkedList0, (Collection<AbstractMap.SimpleEntry<Object, Integer>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) null, (Factory<Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      Object object0 = multiValueMap0.put((String) null, multiValueMap1);
      MultiValueMap<String, Object> multiValueMap2 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.iterator(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      hashMap0.put("", multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      hashMap0.put("", multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("<g:h'}9gVJ`0", "<g:h'}9gVJ`0");
      MultiValueMap<String, LinkedList<LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<LinkedList>>>) hashMap0);
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<String>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection("<g:h'}9gVJ`0");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      MultiValueMap<String, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) arrayList0, (Object) "org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>(linkedList0);
      hashMap1.put("Cannot instantiate class: ", (Object) null);
      MultiValueMap<String, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<Object>>>) hashMap1, (Factory<LinkedList<Collection<Object>>>) constantFactory0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Collection<String> collection0 = multiValueMap0.getCollection("");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Iterator<String> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      multiValueMap0.putIfAbsent(linkedList0, object0);
      ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      arrayList0.add(arrayList1);
      boolean boolean0 = multiValueMap0.putAll((Collection<Object>) linkedList0, (Collection<ArrayList<Integer>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      Integer integer0 = new Integer(1075);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<Object>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<String>>();
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<String>>>) multiValueMap0);
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<Object>>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.putAll((LinkedList<Object>) null, (Collection<Collection<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      int int0 = multiValueMap0.size((Object) multiValueMap1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.put("mi@t,e:Z|&JI8>[(", "mi@t,e:Z|&JI8>[(");
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) "mi@t,e:Z|&JI8>[(");
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.put("org.apache.commons.collections4.iterators.EmptyOrderedIterator", "org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) "org.apache.commons.collections4.iterators.EmptyOrderedIterator", (Object) hashMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-2));
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.put("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter");
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) "org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", (Object) "org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<ArrayList<Integer>> arrayList1 = new ArrayList<ArrayList<Integer>>();
      arrayList1.add(arrayList0);
      MultiValueMap<LinkedList<String>, HashMap<String, Integer>> multiValueMap1 = new MultiValueMap<LinkedList<String>, HashMap<String, Integer>>();
      Collection<Object> collection0 = multiValueMap1.values();
      multiValueMap0.putAll(collection0, (Collection<ArrayList<Integer>>) arrayList1);
      MultiValueMap<Object, Collection<String>> multiValueMap2 = new MultiValueMap<Object, Collection<String>>();
      multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, multiValueMap2.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.put((String) null, (Object) null);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.put("mi@t,e:Z|&JI8>[(", "mi@t,e:Z|&JI8>[(");
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.put((String) null, (Object) null);
      multiValueMap0.put((String) null, (Object) null);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping((Object) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      boolean boolean0 = multiValueMap0.removeMapping("/", "/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      MultiValueMap<LinkedList<String>, Integer> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<LinkedList<String>, Integer>((Map<LinkedList<String>, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleEntry<Object, Collection<Object>>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer((-2146574850));
      multiValueMap1.putIfAbsent(linkedList0, integer0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      boolean boolean0 = linkedList0.addAll(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent("", arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping("", "");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleEntry<Object, Collection<Object>>>>) multiValueMap0);
      Iterator<Map.Entry<LinkedList<String>, AbstractMap.SimpleEntry<Object, Collection<Object>>>> iterator0 = (Iterator<Map.Entry<LinkedList<String>, AbstractMap.SimpleEntry<Object, Collection<Object>>>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }
}
