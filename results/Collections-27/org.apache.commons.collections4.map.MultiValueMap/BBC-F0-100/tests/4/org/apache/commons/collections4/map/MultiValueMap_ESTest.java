/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:32:26 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      hashMap0.put(arrayList1, arrayList2);
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) hashMap0, factory0);
      ArrayList arrayList3 = (ArrayList)multiValueMap0.put(arrayList1, arrayList0);
      assertEquals(0, arrayList3.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) null);
      HashMap<HashMap<String, String>, Collection<Object>> hashMap0 = new HashMap<HashMap<String, String>, Collection<Object>>();
      MultiValueMap<HashMap<String, String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, String>, ? super Collection<Object>>) hashMap0, factory0);
      Collection<Object> collection0 = multiValueMap0.createCollection((-1));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      Collection<ArrayList<String>> collection0 = multiValueMap0.createCollection(4337);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<ConstantFactory<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<ArrayList<ConstantFactory<Object>>>>) multiValueMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<Object>>) multiValueMap1);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(multiValueMap1, "$p^=`F4N`,");
      multiValueMap2.putIfAbsent(abstractMap_SimpleImmutableEntry0, "$p^=`F4N`,");
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-2));
      multiValueMap0.putIfAbsent(integer0, integer0);
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Collection<Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, LinkedList<Collection<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Collection<Object>>>>) hashMap0);
      hashMap0.put("/  }Mb3]Y:,et61R<s", multiValueMap0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<Object>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<LinkedList<ArrayList<Collection<Object>>>> factory0 = ConstantFactory.constantFactory((LinkedList<ArrayList<Collection<Object>>>) null);
      MultiValueMap<Object, ArrayList<Collection<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<Collection<Object>>>>) hashMap0, factory0);
      Factory<LinkedList<Integer>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) multiValueMap0, factory1);
      hashMap0.put(multiValueMap1, "org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      MultiValueMap<ExceptionFactory<Integer>, ArrayList<Collection<Object>>> multiValueMap1 = new MultiValueMap<ExceptionFactory<Integer>, ArrayList<Collection<Object>>>();
      multiValueMap0.map = null;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer((-2));
      hashMap0.put(arrayList0, integer0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(linkedList0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<String, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<String, ArrayList<Collection<Object>>>();
      multiValueMap0.put((String) null, (Object) null);
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1);
      multiValueMap1.map = (Map<Object, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<String, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<String, ArrayList<Collection<Object>>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>(684, 684);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, "OIk[;S/d)_HWsPZ>X");
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      arrayList0.add((Collection<Integer>) linkedList0);
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      Factory<LinkedList<Collection<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Collection<Integer>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Object) factory0, (Collection<Collection<Integer>>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ConstantFactory<Integer>, ConstantFactory<Integer>> multiValueMap0 = new MultiValueMap<ConstantFactory<Integer>, ConstantFactory<Integer>>();
      MultiValueMap<ConstantFactory<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Integer>, ? super Collection<Integer>>) multiValueMap0);
      Integer integer0 = new Integer((-1));
      multiValueMap0.map = (Map<ConstantFactory<Integer>, Object>) multiValueMap1;
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(constantFactory0, (Collection<Integer>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      arrayList0.add((Collection<Integer>) linkedList0);
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) arrayList0, (Collection<Collection<Integer>>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<String, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<String, ArrayList<Collection<Object>>>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      ConstantFactory<ArrayList<LinkedList<Object>>> constantFactory0 = new ConstantFactory<ArrayList<LinkedList<Object>>>(arrayList0);
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<LinkedList<Object>>>) multiValueMap0, (Factory<ArrayList<LinkedList<Object>>>) constantFactory0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.put((String) null, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0);
      HashMap<LinkedList<String>, Object> hashMap1 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) hashMap1);
      hashMap1.put(linkedList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<HashMap<String, String>, ? super Collection<Object>>) null, (Factory<Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<String>>>) hashMap0, (Factory<Collection<LinkedList<String>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<AbstractMap.SimpleImmutableEntry, Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(multiValueMap0);
      Integer integer0 = new Integer((-2));
      hashMap0.put(integer0, (Object) null);
      Factory<Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ConstantFactory<Collection<Object>>, Collection<Object>> multiValueMap0 = new MultiValueMap<ConstantFactory<Collection<Object>>, Collection<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<ArrayList<String>, Collection<Object>> hashMap0 = new HashMap<ArrayList<String>, Collection<Object>>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      multiValueMap0.putIfAbsent((ArrayList<String>) null, hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0, (Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      hashMap0.put(factory0, (Object) null);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<LinkedList<String>, LinkedList<Collection<Object>>> multiValueMap0 = new MultiValueMap<LinkedList<String>, LinkedList<Collection<Object>>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<HashMap<Integer, String>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<Integer, String>, HashMap<Object, String>>();
      multiValueMap0.put((HashMap<Integer, String>) null, (Object) null);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<HashMap<Integer, String>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<Integer, String>, HashMap<Object, String>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<String, ArrayList<Collection<Object>>>();
      Iterator<ArrayList<Collection<Object>>> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      arrayList0.add((Collection<Integer>) linkedList0);
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      multiValueMap0.putAll((Object) arrayList0, (Collection<Collection<Integer>>) arrayList0);
      boolean boolean0 = multiValueMap0.putAll((Object) arrayList0, (Collection<Collection<Integer>>) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) hashMap0);
      boolean boolean0 = multiValueMap0.putAll((Collection<Object>) linkedList0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = new MultiValueMap<Integer, Collection<Object>>();
      int int0 = multiValueMap1.size((Object) collection0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ConstantFactory<Object>>();
      MultiValueMap<ArrayList<Collection<Object>>, ArrayList<String>> multiValueMap1 = new MultiValueMap<ArrayList<Collection<Object>>, ArrayList<String>>();
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      multiValueMap1.put(arrayList0, multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<ArrayList<Collection<Object>>, String> multiValueMap2 = new MultiValueMap<ArrayList<Collection<Object>>, String>((Map<ArrayList<Collection<Object>>, ? super LinkedList<String>>) multiValueMap1, (Factory<LinkedList<String>>) constantFactory0);
      int int0 = multiValueMap2.size((Object) arrayList0);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.collections4.CollectionUtils", (Object) "org.apache.commons.collections4.CollectionUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      arrayList0.add((Collection<Integer>) linkedList0);
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      multiValueMap0.putAll((Object) arrayList0, (Collection<Collection<Integer>>) arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, HashMap<String, String>> multiValueMap0 = new MultiValueMap<String, HashMap<String, String>>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      multiValueMap1.putAll((Map<? extends String, ?>) hashMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) hashMap0);
      multiValueMap0.put(hashMap0, "org.apache.commons.collections4.map.AbstractIterableMap");
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.collections4.map.AbstractIterableMap");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, arrayList1);
      Factory<Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(arrayList0, "");
      Factory<Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, HashMap<String, String>> multiValueMap0 = new MultiValueMap<String, HashMap<String, String>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap2 = new MultiValueMap<ArrayList<Object>, String>();
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<String>>>) multiValueMap2);
      MultiValueMap<ArrayList<Object>, HashMap<AbstractMap.SimpleEntry, HashMap>> multiValueMap4 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<HashMap<AbstractMap.SimpleEntry, HashMap>>>) multiValueMap3);
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap5 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap5.removeMapping(multiValueMap1, multiValueMap4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("The prototype must be cloneable via a public clone method");
      Object object0 = multiValueMap0.putIfAbsent("The prototype must be cloneable via a public clone method", constantFactory0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping("The prototype must be cloneable via a public clone method", object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Integer integer0 = new Integer((-2264));
      multiValueMap0.putIfAbsent(integer0, integer0);
      HashMap<ArrayList<String>, Collection<Object>> hashMap0 = new HashMap<ArrayList<String>, Collection<Object>>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap1.putAll(arrayList0, collection0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      MultiValueMap<HashMap<String, Object>, ArrayList<LinkedList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<ArrayList<LinkedList>>>) hashMap0);
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>>) multiValueMap1);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.put(hashMap1, multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      HashMap<ArrayList<String>, Collection<Object>> hashMap0 = new HashMap<ArrayList<String>, Collection<Object>>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap1.putAll(arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<String, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<String, ArrayList<Collection<Object>>>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      Iterator<Map.Entry<Collection<Object>, Collection<Object>>> iterator0 = (Iterator<Map.Entry<Collection<Object>, Collection<Object>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
