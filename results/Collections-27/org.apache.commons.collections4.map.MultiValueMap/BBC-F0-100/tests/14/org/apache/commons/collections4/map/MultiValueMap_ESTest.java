/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:33:35 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("RWtHo<:lN>.;1u-5uf", (String) null);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(1359);
      multiValueMap0.put(integer0, "^y#a\"1cw=k!4.U/");
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(416);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) multiValueMap0, factory0);
      multiValueMap1.put(integer0, (Object) null);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent("Thd factomyMmust not be null", function0);
      multiValueMap0.getCollection("Thd factomyMmust not be null");
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ConstantFactory<ArrayList<Object>> constantFactory0 = new ConstantFactory<ArrayList<Object>>(arrayList0);
      MultiValueMap<Collection<String>, Object> multiValueMap1 = new MultiValueMap<Collection<String>, Object>((Map<Collection<String>, ? super ArrayList<Object>>) multiValueMap0, (Factory<ArrayList<Object>>) constantFactory0);
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      hashMap0.put((AbstractMap.SimpleImmutableEntry<Object, Object>) null, (Object) null);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<HashMap<String, String>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = new MultiValueMap<HashMap<String, String>, AbstractMap.SimpleEntry<String, Integer>>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ConstantFactory<LinkedList<ArrayList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Object>>>(linkedList0);
      MultiValueMap<HashMap<String, String>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, String>, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, (Factory<LinkedList<ArrayList<Object>>>) constantFactory0);
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      hashMap0.put((AbstractMap.SimpleImmutableEntry<Object, Object>) null, multiValueMap1);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<Integer>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<Integer>>) multiValueMap2);
      // Undeclared exception!
      try { 
        multiValueMap3.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>> linkedList1 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedList0, multiValueMap0);
      linkedList1.add(abstractMap_SimpleImmutableEntry0);
      multiValueMap0.putAll(linkedList0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>) linkedList1);
      MultiValueMap<LinkedList<Collection<String>>, Collection<Object>> multiValueMap1 = new MultiValueMap<LinkedList<Collection<String>>, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Object, Collection<String>> hashMap1 = new HashMap<Object, Collection<String>>();
      hashMap0.put(arrayList0, hashMap1);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) arrayList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Factory<ArrayList<LinkedList<Collection<String>>>> factory0 = ConstantFactory.constantFactory((ArrayList<LinkedList<Collection<String>>>) null);
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      hashMap0.put((Collection<String>) null, "org.apache.commons.collections4.map.MultiValueMap$1$1$1");
      MultiValueMap<Collection<String>, ConstantFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ConstantFactory<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping((Object) null, factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      HashMap<LinkedList<Collection<String>>, Object> hashMap0 = new HashMap<LinkedList<Collection<String>>, Object>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      hashMap0.put(linkedList0, set0);
      MultiValueMap<LinkedList<Collection<String>>, ExceptionFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<String>>, ? super Collection<ExceptionFactory<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends LinkedList<Collection<String>>, ?>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("The factory must not be null", ".%91E");
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedList0, linkedList0);
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>> linkedList1 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      linkedList1.add(abstractMap_SimpleImmutableEntry0);
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(linkedList0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>) linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>> linkedList1 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<LinkedList<String>, Collection<LinkedList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<LinkedList>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(multiValueMap0, linkedList1);
      linkedList1.add(abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("Sy=;O", hashMap0);
      Factory<ArrayList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<Integer>>) hashMap0, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll("Sy=;O", (Collection<Integer>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(integer0, factory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, arrayList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(integer0, factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<String>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) multiValueMap0, (Factory<Collection<Collection<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Integer, Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>> linkedList1 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(multiValueMap0, linkedList0);
      linkedList1.add(abstractMap_SimpleImmutableEntry0);
      multiValueMap0.putAll(linkedList0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>) linkedList1);
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, ConstantFactory<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ConstantFactory<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ConstantFactory<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>> linkedList1 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedList0, multiValueMap0);
      linkedList1.add(abstractMap_SimpleImmutableEntry0);
      multiValueMap0.putAll(linkedList0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>) linkedList1);
      MultiValueMap<LinkedList<String>, HashMap<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<HashMap<String, String>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Factory<LinkedList<Collection<ArrayList<Integer>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Collection<ArrayList<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<ArrayList<Integer>>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>> linkedList1 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedList0, multiValueMap0);
      linkedList1.add(abstractMap_SimpleImmutableEntry0);
      multiValueMap0.putAll(linkedList0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>) linkedList1);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<AbstractMap.SimpleEntry, Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<HashMap<AbstractMap.SimpleEntry, Integer>>>) multiValueMap1);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super LinkedList<Object>>) multiValueMap2, factory0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String> multiValueMap4 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<String>>) multiValueMap3);
      // Undeclared exception!
      try { 
        multiValueMap4.containsValue((Object) abstractMap_SimpleImmutableEntry0, (Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Function<Object, Object> function0 = Function.identity();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      hashMap0.put("org.apache.commons.collections4.map.MultiValueMap$Values", multiValueMap0);
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      ConstantFactory<ArrayList<Collection<String>>> constantFactory0 = new ConstantFactory<ArrayList<Collection<String>>>(arrayList0);
      MultiValueMap<String, Collection<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<Collection<String>>>) multiValueMap1, (Factory<ArrayList<Collection<String>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) function0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("8|Qwb!>xeT", "8|Qwb!>xeT");
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>(linkedList0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) hashMap0, (Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>> linkedList1 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      multiValueMap0.put(linkedList0, linkedList1);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedList0, multiValueMap0);
      linkedList1.add(abstractMap_SimpleImmutableEntry0);
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>) linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      Collection<Collection<String>> collection0 = multiValueMap0.getCollection("Thd factomyMmust not be null");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = new MultiValueMap<String, LinkedList<String>>();
      Iterator<LinkedList<String>> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("->=aT^5MZb*L}j", "->=aT^5MZb*L}j");
      multiValueMap0.iterator((Object) "->=aT^5MZb*L}j");
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, HashMap<String, String>> multiValueMap0 = new MultiValueMap<String, HashMap<String, String>>();
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap1.put("%n", linkedList0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "%n", (Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      Integer integer0 = new Integer((-2));
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, HashMap<String, String>> multiValueMap0 = new MultiValueMap<String, HashMap<String, String>>();
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      HashMap<ExceptionFactory<String>, Object> hashMap0 = new HashMap<ExceptionFactory<String>, Object>();
      multiValueMap1.put(":S_ev~lnd&></@~f", hashMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) ":S_ev~lnd&></@~f", (Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<String>>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<ArrayList<Object>, HashMap<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<HashMap<Integer, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("->=aT^5MZb*L}j", "->=aT^5MZb*L}j");
      MultiValueMap<String, LinkedList<AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<AbstractMap.SimpleImmutableEntry>>>) multiValueMap0);
      multiValueMap0.putAll((Map<? extends String, ?>) multiValueMap1);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Function<Object, Object> function0 = Function.identity();
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      multiValueMap0.computeIfAbsent("The factory must not be null", function0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "->=aT^5MZb*L}j");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, ArrayList<HashMap<Object, Integer>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<ArrayList<HashMap<Object, Integer>>>>) hashMap0);
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Object>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Object, String> multiValueMap2 = new MultiValueMap<Object, String>();
      Integer integer0 = new Integer((-2));
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap2.merge(constantFactory0, arrayList1, biFunction0);
      Collection<Object> collection0 = multiValueMap2.values();
      boolean boolean0 = multiValueMap1.putAll(arrayList0, collection0);
      assertEquals(1, multiValueMap2.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, ArrayList<HashMap<Object, Integer>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<ArrayList<HashMap<Object, Integer>>>>) hashMap0);
      hashMap0.put((ArrayList<Integer>) null, (Object) null);
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Object>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(arrayList0, collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("org.apache.commons.collections4.map.MultiValueMap", "org.apache.commons.collections4.map.MultiValueMap");
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleImmutableEntry0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent("Thd factomyMmust not be null", function0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "Thd factomyMmust not be null");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ConstantFactory<String>>();
      Iterator<Map.Entry<LinkedList<Integer>, ConstantFactory<String>>> iterator0 = (Iterator<Map.Entry<LinkedList<Integer>, ConstantFactory<String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
