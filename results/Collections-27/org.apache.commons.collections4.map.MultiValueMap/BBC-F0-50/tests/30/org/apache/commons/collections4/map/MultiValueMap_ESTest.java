/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:19:55 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<ArrayList<Object>, Collection<Object>> hashMap0 = new HashMap<ArrayList<Object>, Collection<Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      hashMap0.put(arrayList1, arrayList1);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<ArrayList<Object>, Collection<Object>> hashMap0 = new HashMap<ArrayList<Object>, Collection<Object>>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap0.put(hashMap0, hashMap0);
      assertFalse(multiValueMap0.isEmpty());
      
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      MultiValueMap<Collection<Object>, LinkedList<Integer>> multiValueMap2 = new MultiValueMap<Collection<Object>, LinkedList<Integer>>();
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ArrayList<Object>>>) multiValueMap2);
      MultiValueMap<Collection<Object>, MultiValueMap<String, Collection<Object>>> multiValueMap4 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<MultiValueMap<String, Collection<Object>>>>) multiValueMap3);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      Factory<LinkedList<Collection<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap5 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Collection<Object>>>) multiValueMap4, factory0);
      boolean boolean0 = multiValueMap0.removeMapping(multiValueMap1, multiValueMap5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>((Map<Object, ? super Collection<String>>) hashMap0, factory0);
      multiValueMap0.put(object0, multiValueMap1);
      boolean boolean0 = multiValueMap0.removeMapping(object0, "");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      Integer integer0 = new Integer(1);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(integer0, arrayList0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, int0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("u[DNl`2", (Object) null);
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      Factory<LinkedList<AbstractMap.SimpleEntry<Integer, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<Integer, Object>>>) multiValueMap0, factory0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<String>>>) hashMap0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Collection<Object> collection0 = multiValueMap1.getCollection(linkedList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      Collection<AbstractMap.SimpleImmutableEntry<Object, String>> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ArrayList<ConstantFactory<Integer>> arrayList0 = new ArrayList<ConstantFactory<Integer>>();
      ConstantFactory<ArrayList<ConstantFactory<Integer>>> constantFactory0 = new ConstantFactory<ArrayList<ConstantFactory<Integer>>>(arrayList0);
      MultiValueMap<Integer, ConstantFactory<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super ArrayList<ConstantFactory<Integer>>>) hashMap0, (Factory<ArrayList<ConstantFactory<Integer>>>) constantFactory0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Object, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(arrayList0);
      multiValueMap0.put(arrayList0, linkedList0);
      arrayList0.add(")1c5Nj<<D;Twr_B3A");
      MultiValueMap<Collection<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1773);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", integer0);
      MultiValueMap<String, HashMap<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<String, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = multiValueMap0.put(hashMap0, hashMap0);
      HashMap<ArrayList<String>, Object> hashMap1 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap1.put(arrayList0, object0);
      MultiValueMap<ArrayList<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) hashMap1);
      MultiValueMap<ArrayList<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, LinkedList<Collection<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Collection<Object>>>>) hashMap0);
      Integer integer0 = new Integer(1882);
      ArrayList<Object> arrayList0 = new ArrayList<Object>(1882);
      arrayList0.add((Object) hashMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer0, arrayList0, biFunction0);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Collection<Object>>();
      multiValueMap0.map = null;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.map = null;
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(multiValueMap1, multiValueMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) hashMap0);
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      Integer integer0 = new Integer(3481);
      hashMap0.put(integer0, set0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends Integer, ?>) multiValueMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>((Collection<Object>) null);
      Object object0 = hashMap0.put(multiValueMap0, constantFactory0);
      multiValueMap0.put(hashMap0, object0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Collection<Object>>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Collection<Object>>, Object>();
      Integer integer0 = new Integer((-537));
      AbstractMap.SimpleEntry<Integer, Collection<Object>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Collection<Object>>(integer0, linkedList0);
      AbstractMap.SimpleImmutableEntry<Integer, Collection<Object>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Collection<Object>>(abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(abstractMap_SimpleImmutableEntry0, (Collection<Object>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      linkedList0.add((Object) arrayList0);
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<Object>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Collection<Object>>>) hashMap0);
      MultiValueMap<LinkedList<Integer>, HashMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<HashMap<Object, String>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      hashMap0.put(linkedList1, factory0);
      ArrayList<HashMap<Object, String>> arrayList0 = new ArrayList<HashMap<Object, String>>();
      arrayList0.add((HashMap<Object, String>) null);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(linkedList1, (Collection<HashMap<Object, String>>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      multiValueMap0.put(linkedList0, hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(hashMap0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, ArrayList<Integer>>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, ArrayList<Integer>>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap1 = new MultiValueMap<LinkedList<Object>, ArrayList<String>>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>((LinkedList<String>) null);
      MultiValueMap<LinkedList<Object>, String> multiValueMap2 = new MultiValueMap<LinkedList<Object>, String>((Map<LinkedList<Object>, ? super LinkedList<String>>) multiValueMap1, (Factory<LinkedList<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap2.put(linkedList0, multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<ConstantFactory<Object>, Object> hashMap0 = new HashMap<ConstantFactory<Object>, Object>();
      ArrayList<LinkedList<Integer>> arrayList0 = new ArrayList<LinkedList<Integer>>();
      Factory<ArrayList<LinkedList<Integer>>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<ConstantFactory<Object>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super ArrayList<LinkedList<Integer>>>) hashMap0, factory0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(hashMap1);
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      hashMap0.put(constantFactory0, hashMap2);
      Integer integer0 = new Integer(2118);
      // Undeclared exception!
      try { 
        multiValueMap0.put(constantFactory0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Factory<Collection<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Integer>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Integer> multiValueMap2 = new MultiValueMap<Integer, Integer>((Map<Integer, ? super LinkedList<Integer>>) multiValueMap1, factory0);
      multiValueMap1.map = (Map<Integer, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) "Ke?~-1[(|yqmRiP'D$");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>();
      multiValueMap0.map = null;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = new MultiValueMap<LinkedList<String>, Object>((Map<LinkedList<String>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(483);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<String, ArrayList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, ArrayList>>>) multiValueMap0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>(linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) arrayList0, (Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(329);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      Integer integer0 = new Integer((-1302));
      hashMap0.put(integer0, constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      multiValueMap0.put((Object) null, (Object) null);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      multiValueMap0.putAll((ArrayList<String>) null, (Collection<Integer>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll((ArrayList<String>) null, (Collection<Integer>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Collection<Integer> collection0 = multiValueMap0.getCollection((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<ArrayList<Integer>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, ArrayList<Integer>>();
      Factory<LinkedList<ConstantFactory<Collection<Object>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Integer>, ConstantFactory<Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<ConstantFactory<Collection<Object>>>>) multiValueMap0, factory0);
      Factory<LinkedList<Object>> factory1 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap2 = new MultiValueMap<ArrayList<Integer>, Object>((Map<ArrayList<Integer>, ? super LinkedList<Object>>) multiValueMap1, factory1);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll(arrayList0, (Collection<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<LinkedList, AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<LinkedList, AbstractMap.SimpleImmutableEntry>>>) multiValueMap0);
      MultiValueMap<Integer, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.putAll(integer0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap0.put(hashMap0, hashMap0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      int int0 = multiValueMap0.size((Object) multiValueMap1);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      linkedList0.add((Object) arrayList0);
      HashMap<ArrayList<Object>, Collection<Object>> hashMap0 = new HashMap<ArrayList<Object>, Collection<Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      hashMap0.put(arrayList1, linkedList0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer0 = new Integer((-2));
      multiValueMap0.putIfAbsent(arrayList0, integer0);
      multiValueMap0.putAll((Map<? extends ArrayList<String>, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, ArrayList<Integer>>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, ArrayList<Integer>>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      Integer integer0 = new Integer(1);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(integer0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1651);
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      multiValueMap1.put(integer0, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) hashMap0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = multiValueMap0.put(hashMap0, hashMap0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap0.put(multiValueMap1, "OLzF,\"@ojF.>s-");
      boolean boolean0 = multiValueMap0.removeMapping(object0, hashMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      boolean boolean0 = multiValueMap0.removeMapping(multiValueMap1, multiValueMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Object>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0, (Factory<Collection<ArrayList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, arrayList0);
      multiValueMap0.iterator((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap1.putAll(arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) multiValueMap0);
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) null);
      MultiValueMap<String, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap1, factory0);
      Collection<String> collection0 = multiValueMap2.createCollection(333);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<String>>>) hashMap0);
      Iterator<Map.Entry<ArrayList<Object>, Collection<String>>> iterator0 = (Iterator<Map.Entry<ArrayList<Object>, Collection<String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>(1);
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<Collection<Object>>>) hashMap0);
      int int0 = multiValueMap0.size((Object) hashMap0);
      assertEquals(0, int0);
  }
}
