/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:14:19 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Comparable<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Comparable<Object>>>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<HashMap<Object, Integer>> linkedList0 = new LinkedList<HashMap<Object, Integer>>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) multiValueMap0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(arrayList0, hashMap0, biFunction0);
      multiValueMap1.getCollection(linkedList0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, Collection<String>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, Collection<String>>();
      Collection<Collection<String>> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<MultiValueMap<Integer, Object>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = new MultiValueMap<MultiValueMap<Integer, Object>, AbstractMap.SimpleEntry<String, Integer>>();
      MultiValueMap<MultiValueMap<Integer, Object>, LinkedList<MultiValueMap<String, Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<MultiValueMap<Integer, Object>, ? super Collection<LinkedList<MultiValueMap<String, Object>>>>) multiValueMap0);
      multiValueMap0.map = (Map<MultiValueMap<Integer, Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(hashMap0, "6Dv92{{WY@h0g");
      hashMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<Collection<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.util.AbstractMap$SimpleImmutableEntry
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MultiValueMap<String, LinkedList<Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Collection<Object>>>>) hashMap1);
      Collection<Object> collection0 = multiValueMap1.values();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory(collection0);
      multiValueMap0.map = null;
      MultiValueMap<Integer, Object> multiValueMap2 = new MultiValueMap<Integer, Object>((Map<Integer, ? super Collection<Object>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) multiValueMap2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("org.apache.commons.collections4.iterators.EmptyOrderedMapIterator", multiValueMap0);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      MultiValueMap<HashMap<Object, Object>, ConstantFactory<Collection<Object>>> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, ConstantFactory<Collection<Object>>>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Collection<Object>> arrayList1 = new ArrayList<Collection<Object>>();
      arrayList1.add((Collection<Object>) arrayList0);
      MultiValueMap<Collection<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, Collection<Object>>();
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Integer>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<Collection<Object>>>) multiValueMap0, factory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Collection<Integer>) linkedList0, (Collection<Collection<Object>>) arrayList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      Integer integer0 = new Integer(763);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(integer0, (Collection<Object>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-1));
      hashMap0.put((Integer) null, integer0);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      arrayList0.add((Collection<Object>) null);
      Factory<ArrayList<Collection<Object>>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super ArrayList<Collection<Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Integer) null, (Collection<Collection<Object>>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<Object>>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Collection<Object>>, Integer>();
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add((Collection<Object>) arrayList1);
      arrayList1.add((Object) arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Integer>>();
      multiValueMap0.map = null;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<ArrayList<Collection<Object>>, Object> hashMap1 = new HashMap<ArrayList<Collection<Object>>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList0);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      hashMap1.put(arrayList0, hashMap0);
      MultiValueMap<ArrayList<Collection<Object>>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Object>>, ? super Collection<String>>) hashMap1, (Factory<Collection<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Comparable<String>, ? super Collection<String>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<ArrayList<String>, Collection<Object>>, ? super Collection<ArrayList<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(arrayList0, linkedList0);
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      multiValueMap0.put(arrayList0, linkedList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Collection<Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) arrayList0);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Integer>>();
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap0;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0, (Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Integer>>();
      multiValueMap0.map = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0, (Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      hashMap0.put((LinkedList<String>) null, (Object) null);
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) hashMap0);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Integer, Object>>> comparator0 = Map.Entry.comparingByKey();
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      hashMap0.put((LinkedList<String>) null, comparator0);
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Map$Entry$$Lambda$99/1221641051 cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      multiValueMap0.putIfAbsent("^S#ZIDO5j/Benf\"*", (Object) null);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<HashMap<Object, Integer>> linkedList0 = new LinkedList<HashMap<Object, Integer>>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) multiValueMap0);
      Collection<Integer> collection0 = multiValueMap1.getCollection(linkedList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Collection<Object>> arrayList1 = new ArrayList<Collection<Object>>();
      MultiValueMap<Collection<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList1.add((Collection<Object>) linkedList0);
      multiValueMap0.putIfAbsent(arrayList0, arrayList1);
      boolean boolean0 = multiValueMap0.putAll((Collection<Integer>) arrayList0, (Collection<Collection<Object>>) arrayList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<AbstractMap.SimpleEntry<String, String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      int int0 = multiValueMap0.size(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, "");
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList1, (Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, Comparable<Object>> multiValueMap0 = new MultiValueMap<String, Comparable<Object>>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(512, 512);
      HashMap<ArrayList<String>, Object> hashMap1 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) hashMap1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap1.put(arrayList0, hashMap0);
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<String>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends ArrayList<String>, ?>) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, Collection<Object>> hashMap0 = new HashMap<String, Collection<Object>>();
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      LinkedList<ConstantFactory<String>> linkedList0 = new LinkedList<ConstantFactory<String>>();
      ConstantFactory<LinkedList<ConstantFactory<String>>> constantFactory0 = new ConstantFactory<LinkedList<ConstantFactory<String>>>(linkedList0);
      MultiValueMap<Object, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ConstantFactory<String>>>) multiValueMap0, (Factory<LinkedList<ConstantFactory<String>>>) constantFactory0);
      Set<Object> set0 = multiValueMap1.keySet();
      hashMap0.put("wghKA[T", set0);
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      Integer integer0 = new Integer(3777);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      MultiValueMap<HashMap<Integer, Collection<Object>>, HashMap<Integer, Collection<Object>>> multiValueMap1 = new MultiValueMap<HashMap<Integer, Collection<Object>>, HashMap<Integer, Collection<Object>>>();
      MultiValueMap<HashMap<Integer, Collection<Object>>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Collection<Object>>, ? super Collection<LinkedList<Object>>>) multiValueMap1);
      boolean boolean0 = multiValueMap0.removeMapping(multiValueMap2, multiValueMap2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<String>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<ArrayList<String>>>) multiValueMap0, (Factory<LinkedList<ArrayList<String>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, arrayList0);
      multiValueMap0.iterator((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Comparable<Integer>, Object> hashMap0 = new HashMap<Comparable<Integer>, Object>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory((LinkedList<Integer>) null);
      MultiValueMap<Comparable<Integer>, Integer> multiValueMap0 = new MultiValueMap<Comparable<Integer>, Integer>((Map<Comparable<Integer>, ? super LinkedList<Integer>>) hashMap0, factory0);
      Collection<Integer> collection0 = multiValueMap0.createCollection(1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Integer>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<MultiValueMap<Object, String>, AbstractMap.SimpleEntry<Object, Collection<Object>>> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, String>, AbstractMap.SimpleEntry<Object, Collection<Object>>>();
      MultiValueMap<MultiValueMap<Object, String>, Comparable<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<MultiValueMap<Object, String>, ? super Collection<Comparable<String>>>) multiValueMap0);
      Iterator<Map.Entry<MultiValueMap<Object, String>, Comparable<String>>> iterator0 = (Iterator<Map.Entry<MultiValueMap<Object, String>, Comparable<String>>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(linkedList0, hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0);
      assertEquals(1, hashMap0.size());
      assertTrue(boolean0);
  }
}
