/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:14:18 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Integer>>>) hashMap0);
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Object>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap1.put(linkedList0, multiValueMap0.map);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Object>>();
      multiValueMap1.putAll((Map<?, ?>) hashMap1);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<Collection<Object>>>) multiValueMap1);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>("A:3@zs)8", "A:3@zs)8");
      multiValueMap2.putIfAbsent(abstractMap_SimpleImmutableEntry0, "A:3@zs)8");
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<String>> multiValueMap3 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<String>>();
      multiValueMap3.putAll((Map<? extends AbstractMap.SimpleImmutableEntry<Object, String>, ?>) multiValueMap2);
      int int0 = multiValueMap3.totalSize();
      assertFalse(multiValueMap3.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(linkedList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<Integer>>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Integer>>, Collection<Object>>();
      MultiValueMap<LinkedList<Collection<Integer>>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<Integer>>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>((Collection<Integer>) null);
      MultiValueMap<LinkedList<Collection<Integer>>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<Integer>>, ? super Collection<Integer>>) multiValueMap1, (Factory<Collection<Integer>>) constantFactory0);
      Collection<Integer> collection0 = multiValueMap2.createCollection(512);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, String>>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) multiValueMap0);
      Collection<Integer> collection0 = multiValueMap1.createCollection(372);
      assertFalse(collection0.contains(372));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(multiValueMap0, "");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.putIfAbsent(abstractMap_SimpleImmutableEntry0, linkedList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<String>>();
      multiValueMap1.map = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>("", "");
      multiValueMap0.putIfAbsent((AbstractMap.SimpleImmutableEntry<Object, String>) null, abstractMap_SimpleImmutableEntry0);
      Factory<LinkedList<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super LinkedList<Collection<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.util.AbstractMap$SimpleImmutableEntry
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<ExceptionFactory<String>, AbstractMap.SimpleImmutableEntry<String, Collection<Integer>>> multiValueMap1 = new MultiValueMap<ExceptionFactory<String>, AbstractMap.SimpleImmutableEntry<String, Collection<Integer>>>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<ConstantFactory<Integer>, Object> hashMap0 = new HashMap<ConstantFactory<Integer>, Object>();
      Integer integer0 = new Integer((-1322));
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      hashMap0.put(constantFactory0, integer0);
      MultiValueMap<ConstantFactory<Integer>, MultiValueMap<Integer, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Integer>, ? super Collection<MultiValueMap<Integer, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) constantFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Collection<Object>, HashMap<HashMap, ArrayList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<HashMap<HashMap, ArrayList<String>>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap1;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(arrayList0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("InstantiateFactory: Constructor threw an exception");
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>(0, 1.0F);
      MultiValueMap<ArrayList<Object>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Integer>>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, constantFactory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(linkedList0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<String, HashMap<String, String>> multiValueMap0 = new MultiValueMap<String, HashMap<String, String>>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1365));
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll("NwMc>ZUsH)6GxA!*ul", (Collection<Integer>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(arrayList0, (Collection<Object>) arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<Object>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Integer, ConstantFactory<Collection<Integer>>> multiValueMap0 = new MultiValueMap<Integer, ConstantFactory<Collection<Integer>>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(multiValueMap0);
      MultiValueMap<Integer, ExceptionFactory<Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ExceptionFactory<Collection<Integer>>>>) hashMap0);
      MultiValueMap<Integer, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap1);
      Integer integer0 = new Integer((-769));
      hashMap0.put(integer0, multiValueMap1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      // Undeclared exception!
      try { 
        multiValueMap2.putAll(integer0, (Collection<String>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, "Cannot instantiate class: ");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      multiValueMap0.map = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      hashMap0.put(linkedList0, "");
      MultiValueMap<Collection<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Integer, Integer>>>) multiValueMap0, (Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Integer, Integer>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Integer, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<Integer, ConstantFactory<Object>>();
      MultiValueMap<Integer, MultiValueMap<Object, Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<MultiValueMap<Object, Collection<Integer>>>>) multiValueMap0);
      Integer integer0 = new Integer(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap1);
      multiValueMap0.putIfAbsent(integer0, linkedList0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) multiValueMap1);
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Collection<Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Collection<Integer>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super Collection<Integer>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ConstantFactory<ArrayList<Object>> constantFactory0 = new ConstantFactory<ArrayList<Object>>(arrayList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> multiValueMap4 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super ArrayList<Object>>) multiValueMap3, (Factory<ArrayList<Object>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap4.iterator((Object) multiValueMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = new MultiValueMap<LinkedList<String>, Object>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put((Integer) null, integer0);
      multiValueMap1.map = (Map<Integer, Object>) hashMap0;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Integer>, String>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Integer>, String>, String>();
      Collection<String> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<ArrayList<String>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(1625);
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(integer0, integer0, biFunction0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.iterator(object0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Integer>, String>, String> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Integer>, String>, String>();
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2801);
      linkedList0.add(integer0);
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.putIfAbsent("6(=x]??[9P&.CoK", (Object) null);
      boolean boolean0 = multiValueMap0.putAll("6(=x]??[9P&.CoK", (Collection<Integer>) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.putAll(arrayList0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<LinkedList<Integer>> arrayList1 = new ArrayList<LinkedList<Integer>>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      multiValueMap0.put(arrayList0, arrayList1);
      MultiValueMap<ArrayList<Object>, Collection<Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Collection<Integer>>>>) multiValueMap0);
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      int int0 = multiValueMap1.size((Object) arrayList2);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer((-882));
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer0, integer0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<String>>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(hashMap0, multiValueMap0, biFunction0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) "");
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("o4DFT[J\"n^;\"q}", "o4DFT[J\"n^;\"q}");
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<String>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<Collection<Object>>>) multiValueMap1);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(multiValueMap1, "A:3@zs)8");
      multiValueMap2.putIfAbsent(abstractMap_SimpleImmutableEntry0, multiValueMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<String>> multiValueMap3 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<String>>();
      // Undeclared exception!
      try { 
        multiValueMap3.putAll((Map<? extends AbstractMap.SimpleImmutableEntry<Object, String>, ?>) multiValueMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<ArrayList<Object>>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<ArrayList<Object>>>();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends ArrayList<Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<String, String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      Integer integer0 = new Integer((-2109));
      multiValueMap0.put(linkedList0, integer0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap1.put(linkedList0, "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(1675);
      Object object0 = multiValueMap0.put(linkedList0, integer0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<Object, HashMap<Object, String>> multiValueMap1 = new MultiValueMap<Object, HashMap<Object, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(collection0);
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<String>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, linkedList1, biFunction0);
      assertEquals(1, multiValueMap0.size());
      
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = new MultiValueMap<Object, Collection<Integer>>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Object object0 = multiValueMap1.getOrDefault(linkedList0, arrayList1);
      boolean boolean0 = multiValueMap0.removeMapping(object0, arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<String>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      Iterator<Map.Entry<ArrayList<String>, Object>> iterator0 = (Iterator<Map.Entry<ArrayList<String>, Object>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
