/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:20:04 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, HashMap<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<HashMap<String, String>>>) hashMap0);
      Set<Map.Entry<ArrayList<String>, Object>> set0 = (Set<Map.Entry<ArrayList<String>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      Collection<Collection<String>> collection0 = multiValueMap0.createCollection((-343));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      Integer integer0 = new Integer((-403));
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("ei9ck[j2k~\tT", integer0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0, "org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry1);
      hashMap0.put(abstractMap_SimpleEntry1, integer0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Iterator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>> iterator0 = (Iterator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>>)multiValueMap0.iterator();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      hashMap0.put(iterator0, "1_>IeH");
      Factory<LinkedList<ArrayList<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<String>>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>>();
      MultiValueMap<String, HashMap<String, Object>> multiValueMap1 = new MultiValueMap<String, HashMap<String, Object>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, integer0);
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, multiValueMap0);
      multiValueMap0.put(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, ArrayList<String>>();
      MultiValueMap<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<AbstractMap.SimpleEntry<Integer, Integer>>>) multiValueMap0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      Integer integer0 = new Integer(0);
      hashMap0.put(arrayList0, integer0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(hashMap0, multiValueMap0, biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends HashMap<Object, Integer>, ?>) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Collection<Object>>();
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
      multiValueMap0.map = (Map<AbstractMap.SimpleEntry<String, String>, Object>) hashMap0;
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("Rj{8h^FtM*8", "Rj{8h^FtM*8");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry1);
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "Rj{8h^FtM*8");
      hashMap0.put(abstractMap_SimpleEntry0, abstractMap_SimpleImmutableEntry2);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends AbstractMap.SimpleEntry<String, String>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleImmutableEntry cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Integer, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      ArrayList<MultiValueMap<Object, String>> arrayList0 = new ArrayList<MultiValueMap<Object, String>>();
      Factory<Collection<MultiValueMap<Object, String>>> factory0 = ConstantFactory.constantFactory((Collection<MultiValueMap<Object, String>>) arrayList0);
      MultiValueMap<HashMap<Object, Integer>, MultiValueMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<MultiValueMap<Object, String>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<HashMap<Object, Integer>, Object>) multiValueMap1;
      LinkedList<AbstractMap.SimpleEntry<Integer, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>();
      linkedList0.add((AbstractMap.SimpleEntry<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(hashMap0, (Collection<AbstractMap.SimpleEntry<Integer, Integer>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      LinkedList<AbstractMap.SimpleEntry<Integer, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>();
      linkedList0.add((AbstractMap.SimpleEntry<Integer, Integer>) null);
      MultiValueMap<HashMap<Object, Integer>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, String>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory((LinkedList<Object>) null);
      MultiValueMap<HashMap<Object, Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      MultiValueMap<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<AbstractMap.SimpleEntry<Integer, Integer>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll(hashMap0, (Collection<AbstractMap.SimpleEntry<Integer, Integer>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("PrototypeCloneFactory: The clone method must exist and be public ");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(arrayList0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("PrototypeCloneFactory: The clone method must exist and be public ", "PrototypeCloneFactory: The clone method must exist and be public ");
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll("PrototypeCloneFactory: The clone method must exist and be public ", (Collection<String>) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MultiValueMap<HashMap<Object, String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, LinkedList<String>>();
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.putIfAbsent(hashMap0, "'");
      hashMap0.put(multiValueMap1, "`bU6[0L2=$zxDj+");
      // Undeclared exception!
      try { 
        multiValueMap1.put(hashMap0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Factory<Collection<HashMap<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<Object, String>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap1, (Factory<Collection<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(multiValueMap0);
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) hashMap0;
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, LinkedList<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<String>>>) hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap0.put("", hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, LinkedList<Integer>>();
      MultiValueMap<HashMap<Integer, Integer>, LinkedList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Integer>, ? super Collection<LinkedList<Collection<String>>>>) multiValueMap0);
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Integer, Integer>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Integer>, ? super LinkedList<String>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.createCollection(512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap0, multiValueMap0);
      multiValueMap0.putIfAbsent(abstractMap_SimpleEntry0, "");
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>>();
      multiValueMap0.map = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ConstantFactory<LinkedList<ArrayList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Object>>>(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      hashMap0.put(linkedList1, constantFactory0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<Object>>>) hashMap0, (Factory<LinkedList<ArrayList<Object>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, ArrayList<String>>();
      MultiValueMap<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<AbstractMap.SimpleEntry<Integer, Integer>>>) multiValueMap0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      multiValueMap1.putIfAbsent(hashMap0, "o.wNvtO#U3H5");
      LinkedList<AbstractMap.SimpleEntry<Integer, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>();
      Integer integer0 = new Integer((-4842));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      linkedList0.addFirst(abstractMap_SimpleEntry0);
      boolean boolean0 = multiValueMap1.putAll(hashMap0, (Collection<AbstractMap.SimpleEntry<Integer, Integer>>) linkedList0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Collection<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Collection<Integer>>();
      Integer integer0 = new Integer(2301);
      Collection<Collection<Integer>> collection0 = multiValueMap0.getCollection(integer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>>();
      Iterator<Collection<Integer>> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(hashMap1, (Object) null);
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("8Hq#&");
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList0);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0, (Factory<Collection<String>>) constantFactory0);
      boolean boolean0 = multiValueMap1.putAll("Map must not be null.", (Collection<String>) linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, String>();
      Integer integer0 = new Integer((-1995));
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>(")e_)Zw(r=U{09[/|t%", integer0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleImmutableEntry1, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, linkedList0);
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<Object, HashMap<String, Integer>> multiValueMap1 = new MultiValueMap<Object, HashMap<String, Integer>>();
      multiValueMap1.put(multiValueMap0, (Object) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) arrayList0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", (Object) factory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Object> multiValueMap0 = new MultiValueMap<Collection<Integer>, Object>();
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, ",4?dT");
      multiValueMap0.putAll((Map<? extends Collection<Integer>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, ArrayList<String>>();
      MultiValueMap<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<AbstractMap.SimpleEntry<Integer, Integer>>>) multiValueMap0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(hashMap0, multiValueMap0, biFunction0);
      multiValueMap1.putAll((Map<? extends HashMap<Object, Integer>, ?>) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Object>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, multiValueMap1);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleEntry0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(abstractMap_SimpleEntry1, unaryOperator0);
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>>();
      Integer integer0 = new Integer(1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, arrayList0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, Object>();
      multiValueMap0.putIfAbsent((HashMap<Object, String>) null, (Object) null);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "Y4B$A5 8JJ>K33TXK~@");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      multiValueMap0.replace((HashMap<Object, String>) null, (Object) abstractMap_SimpleEntry1);
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, Object>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>("vH3Ea}u])s MYuUS", integer0);
      multiValueMap0.put(hashMap0, abstractMap_SimpleImmutableEntry0);
      boolean boolean0 = multiValueMap0.removeMapping(hashMap0, arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, LinkedList<String>>();
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<Object>>) multiValueMap0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      boolean boolean0 = multiValueMap1.removeMapping(hashMap0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap1 = new MultiValueMap<HashMap<Object, String>, Object>();
      Object object0 = multiValueMap1.putIfAbsent((HashMap<Object, String>) null, multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      
      boolean boolean0 = multiValueMap1.removeMapping((Object) null, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Object>((Map<LinkedList<Integer>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      Integer integer0 = new Integer(1402);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap1.computeIfAbsent(integer0, unaryOperator0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<Integer>>) multiValueMap0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap0, multiValueMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(abstractMap_SimpleEntry0, "Yh", biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap1.putAll(arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, Integer>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, Integer>>();
      multiValueMap0.put((Object) null, (Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>>();
      MultiValueMap<String, HashMap<String, Object>> multiValueMap1 = new MultiValueMap<String, HashMap<String, Object>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<LinkedList<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, LinkedList<Object>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }
}
