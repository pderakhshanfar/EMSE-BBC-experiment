/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:16:56 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      MultiValueMap<ArrayList<Object>, HashMap<LinkedList, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<HashMap<LinkedList, Object>>>) multiValueMap0);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<LinkedList, LinkedList>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<LinkedList, LinkedList>>>) multiValueMap1);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap2);
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap3.containsValue((Object) "", (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      HashMap<AbstractMap.SimpleEntry<Integer, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Integer>, Object>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) factory0);
      hashMap0.put(abstractMap_SimpleEntry1, arrayList0);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Integer>, ? super Collection<ArrayList<String>>>) hashMap0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      multiValueMap0.put("Cannot instantiate class: ", (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap1.createCollection(0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, "");
      Integer integer0 = new Integer((-2011));
      linkedList0.add((Object) integer0);
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(multiValueMap0, "Ne[L");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      multiValueMap0.putAll(abstractMap_SimpleImmutableEntry0, (Collection<Integer>) linkedList0);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) hashMap0, factory0);
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<ConstantFactory<String>, Object> multiValueMap1 = new MultiValueMap<ConstantFactory<String>, Object>();
      MultiValueMap<ConstantFactory<String>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<LinkedList<Object>>>) multiValueMap1);
      multiValueMap2.map = (Map<ConstantFactory<String>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap2.removeMapping((Object) null, multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory((LinkedList<Integer>) null);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) multiValueMap1, factory0);
      Object object0 = new Object();
      multiValueMap1.putIfAbsent(object0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.put(multiValueMap1, "$'~<+lhYd|?Kdy");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ConstantFactory<LinkedList<ArrayList<String>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<String>>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, String>, ? super LinkedList<ArrayList<String>>>) null, (Factory<LinkedList<ArrayList<String>>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) null, (Collection<Object>) arrayList0);
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<String>, Integer>();
      MultiValueMap<ArrayList<String>, LinkedList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<String>>>) multiValueMap1);
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<Object>>>) multiValueMap2);
      // Undeclared exception!
      try { 
        multiValueMap3.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Integer, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<Integer, ConstantFactory<String>>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, HashMap<Object, Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<String, HashMap<Object, Integer>>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Collection<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "M+M;5}#r!%#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) arrayList0);
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<Object>>) hashMap0, factory0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      Collection<ArrayList<Object>> collection0 = multiValueMap0.getCollection(abstractMap_SimpleEntry0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<String, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<String, Object>>();
      Integer integer0 = new Integer(2093);
      Iterator<HashMap<String, Object>> iterator0 = multiValueMap0.iterator((Object) integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>("VF%A<Y?m", "VF%A<Y?m");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1926));
      linkedList0.add(integer0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      multiValueMap0.putAll(abstractMap_SimpleImmutableEntry0, (Collection<Integer>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleImmutableEntry0, (Collection<Integer>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      LinkedList<AbstractMap.SimpleImmutableEntry<Integer, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      boolean boolean0 = multiValueMap1.putAll((Object) multiValueMap0, (Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<String>>();
      boolean boolean0 = multiValueMap0.putAll((ArrayList<Object>) null, (Collection<Collection<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<ConstantFactory<Object>, AbstractMap.SimpleEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<AbstractMap.SimpleEntry<ConstantFactory<Object>, AbstractMap.SimpleEntry>>>) hashMap0);
      Integer integer0 = new Integer(1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(multiValueMap1, integer0, biFunction0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      int int0 = multiValueMap0.size((Object) hashMap1);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<String, Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, "", biFunction0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, String>, ? super Collection<ArrayList<String>>>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping("", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, "", biFunction0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, "");
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, String>>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(collection0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Iterator<Map.Entry<Object, Integer>> iterator0 = (Iterator<Map.Entry<Object, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      MultiValueMap<String, HashMap<Collection, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Collection, Integer>>>) multiValueMap0);
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap1);
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>((Collection<Integer>) null);
      MultiValueMap<String, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap2, (Factory<Collection<Integer>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap3.put("iterator", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }
}
