/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:15:10 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.getCollection(arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>((LinkedList<Integer>) null);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) constantFactory0);
      Collection<Integer> collection0 = multiValueMap1.createCollection((-1297));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, Integer>>();
      Collection<AbstractMap.SimpleEntry<Object, Integer>> collection0 = multiValueMap0.createCollection((-750));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, "");
      Integer integer0 = new Integer((-2011));
      linkedList0.add((Object) integer0);
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(multiValueMap0, "Class to instantiate must not be nul");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1641);
      linkedList0.add(integer0);
      multiValueMap0.putAll(abstractMap_SimpleImmutableEntry0, (Collection<Integer>) linkedList0);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      hashMap0.put("org.apache.commons.collections4.iterators.EmptyIterator", multiValueMap0);
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      hashMap0.put(linkedList0, hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(linkedList0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, ? super Collection<String>>) hashMap0);
      Integer integer0 = new Integer(1784);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends AbstractMap.SimpleImmutableEntry<Integer, Integer>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<String, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<Integer, Object>>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap1.put("II", multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(multiValueMap0, "II");
      // Undeclared exception!
      try { 
        multiValueMap2.putAll(abstractMap_SimpleImmutableEntry0, (Collection<Integer>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<String, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<Integer, Object>>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.put("IV", multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = hashMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      Factory<Collection<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory((Collection<ArrayList<Object>>) arrayList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) null, (Collection<Object>) arrayList0);
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<String>, Integer>();
      MultiValueMap<ArrayList<String>, LinkedList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<String>>>) multiValueMap1);
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<Object>>>) multiValueMap2);
      // Undeclared exception!
      try { 
        multiValueMap3.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(arrayList0, linkedList0);
      Object object0 = hashMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.iterator(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Collection<Object>, HashMap<Collection<Object>, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, HashMap<Collection<Object>, Object>>();
      MultiValueMap<Collection<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(multiValueMap0, "Class to instantiate must not be nul");
      Integer integer0 = new Integer(2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      multiValueMap0.putAll(abstractMap_SimpleImmutableEntry0, (Collection<Integer>) linkedList0);
      MultiValueMap<MultiValueMap<String, Object>, Integer> multiValueMap1 = new MultiValueMap<MultiValueMap<String, Object>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("LD");
      ConstantFactory<Object> constantFactory1 = new ConstantFactory<Object>(constantFactory0);
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory2 = new ConstantFactory<LinkedList<String>>(linkedList0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, constantFactory1);
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>((Map<ArrayList<String>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory2);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(100);
      HashMap<String, Collection<Object>> hashMap0 = new HashMap<String, Collection<Object>>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge((AbstractMap.SimpleImmutableEntry<Object, String>) null, multiValueMap1, biFunction0);
      linkedList0.add(integer0);
      boolean boolean0 = multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<Object, String>) null, (Collection<Integer>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Collection<String> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, Object>>();
      Integer integer0 = new Integer(1544);
      Iterator<AbstractMap.SimpleEntry<String, Object>> iterator0 = multiValueMap0.iterator((Object) integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<Integer, Object>>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap1.put("II", multiValueMap0);
      MultiValueMap<Object, String> multiValueMap2 = new MultiValueMap<Object, String>();
      multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
      multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, multiValueMap2.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      boolean boolean0 = multiValueMap0.putAll((Object) multiValueMap1, (Collection<LinkedList<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      int int0 = multiValueMap0.size((Object) "Class to instantiate must not be null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) null, (Collection<Object>) arrayList0);
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      multiValueMap0.put((String) null, (Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      Integer integer0 = new Integer(1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, arrayList0);
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      HashMap<Collection<Object>, Object> hashMap1 = new HashMap<Collection<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap1.put(linkedList0, hashMap0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList1);
      MultiValueMap<Collection<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) hashMap1, (Factory<Collection<String>>) constantFactory0);
      MultiValueMap<Collection<Object>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ArrayList<String>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<Integer, Object>>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = new MultiValueMap<String, ArrayList<Object>>();
      multiValueMap1.put("IV", multiValueMap0);
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap2 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      MultiValueMap<Object, String> multiValueMap3 = new MultiValueMap<Object, String>();
      multiValueMap3.putAll((Map<?, ?>) multiValueMap1);
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>((LinkedList<Integer>) null);
      MultiValueMap<Object, Integer> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) multiValueMap3, (Factory<LinkedList<Integer>>) constantFactory0);
      assertFalse(multiValueMap3.isEmpty());
      
      boolean boolean0 = multiValueMap4.removeMapping("IV", multiValueMap2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<Integer, Object>>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap1.put("IV", multiValueMap0);
      multiValueMap1.replace("IV", (Object) multiValueMap0);
      MultiValueMap<Object, String> multiValueMap2 = new MultiValueMap<Object, String>();
      multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>((LinkedList<Integer>) null);
      MultiValueMap<Object, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) multiValueMap2, (Factory<LinkedList<Integer>>) constantFactory0);
      boolean boolean0 = multiValueMap3.removeMapping("IV", multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Collection<Object>, Collection<Object>> hashMap0 = new HashMap<Collection<Object>, Collection<Object>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      multiValueMap0.put((String) null, (Object) null);
      Integer integer0 = new Integer((-3));
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null, (Object) constantFactory0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, LinkedList<ConstantFactory<Integer>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<ConstantFactory<Integer>>>>) hashMap0);
      hashMap0.put((LinkedList<Integer>) null, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>(0);
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) hashMap0);
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<Integer, Object>>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap1.put("IV", multiValueMap0);
      MultiValueMap<Object, String> multiValueMap2 = new MultiValueMap<Object, String>();
      multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>((LinkedList<Integer>) null);
      MultiValueMap<Object, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) multiValueMap2, (Factory<LinkedList<Integer>>) constantFactory0);
      boolean boolean0 = multiValueMap3.removeMapping("IV", multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }
}
