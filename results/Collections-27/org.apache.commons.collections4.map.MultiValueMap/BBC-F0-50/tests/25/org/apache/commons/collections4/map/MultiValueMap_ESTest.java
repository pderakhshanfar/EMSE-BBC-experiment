/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:17:13 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.put(arrayList0, multiValueMap0);
      Factory<Collection<AbstractMap.SimpleImmutableEntry<String, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap1, factory0);
      multiValueMap2.putAll((Map<? extends ArrayList<String>, ?>) multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Object>, String> multiValueMap0 = new MultiValueMap<ExceptionFactory<Object>, String>();
      MultiValueMap<ExceptionFactory<Object>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>((Collection<String>) null);
      MultiValueMap<ExceptionFactory<Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<String>>) multiValueMap1, (Factory<Collection<String>>) constantFactory0);
      Collection<String> collection0 = multiValueMap2.createCollection(69);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) hashMap0);
      Collection<LinkedList<Object>> collection0 = multiValueMap0.createCollection((-210));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.putIfAbsent("", "");
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-565));
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) linkedList0);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Integer integer0 = new Integer((-1071));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, LinkedList<AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<AbstractMap.SimpleImmutableEntry>>>) multiValueMap0);
      MultiValueMap<Integer, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) multiValueMap0, factory0);
      HashMap<MultiValueMap<Integer, Object>, Object> hashMap0 = new HashMap<MultiValueMap<Integer, Object>, Object>();
      hashMap0.put(multiValueMap2, integer0);
      MultiValueMap<MultiValueMap<Integer, Object>, ArrayList<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<MultiValueMap<Integer, Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap3.removeMapping(multiValueMap1, multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      MultiValueMap<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Collection>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Collection>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll("&!O\"4w'=CZ%V", (Collection<LinkedList<Object>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, ConstantFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ConstantFactory<Object>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer0 = new Integer(0);
      hashMap0.put(arrayList0, integer0);
      MultiValueMap<Collection<String>, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ConstantFactory<String>>>) multiValueMap0);
      ArrayList<ConstantFactory<String>> arrayList1 = new ArrayList<ConstantFactory<String>>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      arrayList1.add(constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Collection<String>) arrayList0, (Collection<ConstantFactory<String>>) arrayList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.put((Object) null, multiValueMap0.map);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(3031);
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, HashMap<MultiValueMap<Integer, Object>, ExceptionFactory<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<MultiValueMap<Integer, Object>, ExceptionFactory<Object>>>>) multiValueMap0);
      Factory<ArrayList<String>> factory0 = ConstantFactory.constantFactory((ArrayList<String>) null);
      MultiValueMap<Integer, String> multiValueMap2 = new MultiValueMap<Integer, String>((Map<Integer, ? super ArrayList<String>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.put(integer0, multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      MultiValueMap<Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>, AbstractMap.SimpleImmutableEntry<LinkedList<Object>, LinkedList<Integer>>> multiValueMap0 = new MultiValueMap<Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>, AbstractMap.SimpleImmutableEntry<LinkedList<Object>, LinkedList<Integer>>>();
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<String>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap0;
      Integer integer0 = new Integer(2570);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, Object> hashMap0 = new HashMap<HashMap<Integer, Object>, Object>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Integer, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Object>, ? super Collection<Object>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(572);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<HashMap<Integer, Object>, Object> multiValueMap0 = new MultiValueMap<HashMap<Integer, Object>, Object>();
      Integer integer0 = new Integer((-3372));
      hashMap0.put(integer0, multiValueMap0);
      Object object0 = multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue(object0, (Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      multiValueMap0.map = null;
      MultiValueMap<HashMap<Integer, Object>, Object> multiValueMap1 = new MultiValueMap<HashMap<Integer, Object>, Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      Integer integer0 = new Integer(674);
      multiValueMap0.putIfAbsent((String) null, integer0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashMap<ConstantFactory<Object>, Object> hashMap0 = new HashMap<ConstantFactory<Object>, Object>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(arrayList0);
      hashMap0.put(constantFactory0, "-R.");
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList1 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      Factory<Collection<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ConstantFactory.constantFactory((Collection<AbstractMap.SimpleEntry<Object, Object>>) arrayList1);
      MultiValueMap<ConstantFactory<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      boolean boolean0 = multiValueMap0.putAll("&!O\"4w'=CZ%V", (Collection<LinkedList<Object>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      multiValueMap0.put((String) null, "-68R. ");
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.putAll((String) null, (Collection<LinkedList<Object>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      boolean boolean0 = multiValueMap0.putAll("org.apache.commons.collections4.map.MultiValueMap$1$1$1", (Collection<LinkedList<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.put(arrayList0, multiValueMap0);
      Factory<Collection<AbstractMap.SimpleImmutableEntry<String, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap1, factory0);
      int int0 = multiValueMap2.size((Object) arrayList0);
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<HashMap<Integer, Object>, Object> multiValueMap1 = new MultiValueMap<HashMap<Integer, Object>, Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      multiValueMap1.putIfAbsent(hashMap0, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(587);
      HashMap<HashMap<Integer, Object>, Object> hashMap0 = new HashMap<HashMap<Integer, Object>, Object>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Integer, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Object>, ? super Collection<Object>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<HashMap<Integer, Object>, Object> multiValueMap1 = new MultiValueMap<HashMap<Integer, Object>, Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-2147483644));
      multiValueMap1.putIfAbsent(hashMap0, integer0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) hashMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(260);
      hashMap0.putIfAbsent(integer0, multiValueMap0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      MultiValueMap<ArrayList<String>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<ArrayList<String>, LinkedList<Object>>();
      MultiValueMap<ArrayList<String>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) multiValueMap1);
      multiValueMap0.put((ArrayList<String>) null, (Object) null);
      Factory<Collection<AbstractMap.SimpleImmutableEntry<String, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap2, factory0);
      // Undeclared exception!
      try { 
        multiValueMap3.putAll((Map<? extends ArrayList<String>, ?>) multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(1229);
      multiValueMap0.put(integer0, (Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.put((String) null, "-68R. ");
      multiValueMap0.put((String) null, arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      Integer integer0 = new Integer(2664);
      multiValueMap0.put((String) null, integer0);
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.put((String) null, arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0, (Factory<Collection<ArrayList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      multiValueMap1.put("'HF[bnKcH+6 eTRuob", multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      multiValueMap0.put((String) null, "-R.");
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.iterator((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1);
      MultiValueMap<Integer, Integer> multiValueMap3 = new MultiValueMap<Integer, Integer>();
      Collection<Object> collection0 = multiValueMap3.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll((Object) multiValueMap2, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      Integer integer0 = new Integer(674);
      multiValueMap0.putIfAbsent((String) null, integer0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      Iterator<Map.Entry<String, ArrayList<Integer>>> iterator0 = (Iterator<Map.Entry<String, ArrayList<Integer>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, String>, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      ConstantFactory<Collection<ArrayList<Object>>> constantFactory0 = new ConstantFactory<Collection<ArrayList<Object>>>(arrayList0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0, (Factory<Collection<ArrayList<Object>>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }
}
