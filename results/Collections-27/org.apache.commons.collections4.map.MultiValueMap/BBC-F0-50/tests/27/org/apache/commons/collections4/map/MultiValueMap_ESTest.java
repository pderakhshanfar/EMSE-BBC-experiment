/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:20:24 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap1.put(multiValueMap0, hashMap0);
      multiValueMap1.getCollection(hashMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Collection<Object> collection0 = multiValueMap0.createCollection((-2660));
      assertFalse(collection0.contains((-2660)));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Integer>>) multiValueMap1);
      LinkedList<LinkedList<Object>> linkedList1 = new LinkedList<LinkedList<Object>>();
      ConstantFactory<LinkedList<LinkedList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<Object>>>(linkedList1);
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<LinkedList<Object>>>) multiValueMap2, (Factory<LinkedList<LinkedList<Object>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap3.removeMapping(linkedList0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      ConstantFactory<Collection<LinkedList<Object>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Object>>>(linkedList0);
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0, (Factory<Collection<LinkedList<Object>>>) constantFactory0);
      hashMap0.put((LinkedList<Integer>) null, constantFactory0);
      ConstantFactory<String> constantFactory1 = new ConstantFactory<String>("");
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping((Object) null, constantFactory1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>>();
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap1, factory0);
      Integer integer0 = new Integer(10);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Object) integer0, (Collection<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(arrayList0, integer0);
      arrayList0.add((Object) abstractMap_SimpleEntry0);
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Object>> arrayList1 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      arrayList1.add(abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(abstractMap_SimpleEntry0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>) arrayList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Collection<Object>>>();
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<HashMap<String, Object>, Collection<Object>> multiValueMap1 = new MultiValueMap<HashMap<String, Object>, Collection<Object>>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(collection0);
      MultiValueMap<HashMap<String, Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Object>>) multiValueMap1, (Factory<Collection<Object>>) constantFactory0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.put(hashMap0, linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<ArrayList<Object>>) null);
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.put((LinkedList<Integer>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) hashMap0);
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>(arrayList0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      hashMap0.put(arrayList1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList1, constantFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) null, (Factory<LinkedList<String>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<String>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = new MultiValueMap<String, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) linkedList0, (Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) null);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Object> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Object>((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super Collection<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      Object object0 = multiValueMap0.putIfAbsent((AbstractMap.SimpleEntry<Object, String>) null, integer0);
      arrayList0.add((Integer) object0);
      boolean boolean0 = multiValueMap0.putAll((AbstractMap.SimpleEntry<Object, String>) null, (Collection<Integer>) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Integer>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Integer>, ? super Collection<LinkedList<String>>>) hashMap0);
      Collection<LinkedList<String>> collection0 = multiValueMap0.getCollection("UEtks");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Factory<Collection<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0, factory0);
      Iterator<ArrayList<String>> iterator0 = multiValueMap1.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.putAll((LinkedList<Object>) null, (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent("p1L>1txUJpd2QhP-Jt", arrayList0);
      int int0 = multiValueMap0.size((Object) "p1L>1txUJpd2QhP-Jt");
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      ConstantFactory<Collection<LinkedList<Object>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Object>>>(linkedList0);
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      multiValueMap0.put((LinkedList<Integer>) null, linkedList0);
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0, (Factory<Collection<LinkedList<Object>>>) constantFactory0);
      Object object0 = new Object();
      boolean boolean0 = multiValueMap1.containsValue((Object) null, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) hashMap0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      ConstantFactory<Collection<LinkedList<Object>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Object>>>(linkedList0);
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      multiValueMap0.put((LinkedList<Integer>) null, linkedList0);
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0, (Factory<Collection<LinkedList<Object>>>) constantFactory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) null, (Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(arrayList0, function0);
      multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<String, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      multiValueMap0.put("g*? r", "g*? r");
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap1.merge("g*? r", multiValueMap0, biFunction0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("g*? r", arrayList0, biFunction1);
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap1);
      multiValueMap2.putAll((Map<? extends String, ?>) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent("p1L>1txUJpd2QhP-Jt", arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      ConstantFactory<Collection<LinkedList<Object>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Object>>>(linkedList0);
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      multiValueMap0.put((LinkedList<Integer>) null, linkedList0);
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0, (Factory<Collection<LinkedList<Object>>>) constantFactory0);
      ConstantFactory<String> constantFactory1 = new ConstantFactory<String>("6 p{");
      boolean boolean0 = multiValueMap1.containsValue((Object) constantFactory1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put((Object) null, multiValueMap0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>((Integer) null);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) constantFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      ConstantFactory<Collection<LinkedList<Object>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Object>>>(linkedList0);
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      multiValueMap1.put((LinkedList<Integer>) null, linkedList0);
      multiValueMap1.put((LinkedList<Integer>) null, multiValueMap0);
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) hashMap0, (Factory<Collection<LinkedList<Object>>>) constantFactory0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<String>> multiValueMap3 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<String>>();
      boolean boolean0 = multiValueMap2.removeMapping((Object) null, multiValueMap3);
      assertEquals(1, hashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      ConstantFactory<Collection<LinkedList<Object>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Object>>>(linkedList0);
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      multiValueMap1.put((LinkedList<Integer>) null, multiValueMap0);
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) hashMap0, (Factory<Collection<LinkedList<Object>>>) constantFactory0);
      assertFalse(hashMap0.isEmpty());
      
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<String>> multiValueMap3 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<String>>();
      boolean boolean0 = multiValueMap2.removeMapping((Object) null, multiValueMap3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, linkedList0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, "3az*eTDGMy'd|Jd:0");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) hashMap0, (Factory<Collection<Collection<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "I?FH 5N\"L]tDE0P");
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<Object>>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = new MultiValueMap<Object, ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.put(multiValueMap0, arrayList0);
      multiValueMap1.iterator((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Factory<Collection<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0, factory0);
      multiValueMap1.clear();
      assertEquals(0, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Iterator<Map.Entry<String, Integer>> iterator0 = (Iterator<Map.Entry<String, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>();
      Factory<LinkedList<HashMap<String, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<String, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, String>, ? super LinkedList<HashMap<String, Integer>>>) hashMap0, factory0);
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, (String) null);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }
}
