/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:06:15 GMT 2020
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Object> hashMap0 = new HashMap<HashMap<Integer, String>, Object>();
      MultiValueMap<HashMap<Integer, String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super Collection<Object>>) hashMap0);
      Integer integer0 = new Integer(1);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, (Object) null);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) hashMap0, factory0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      Collection<Collection<Object>> collection0 = multiValueMap0.createCollection((-1));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList0.add(linkedList0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MultiValueMap<HashMap<Object, String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, AbstractMap.SimpleEntry<Object, Object>>();
      Factory<Collection<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Object, String>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<LinkedList<Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(hashMap0, (Collection<LinkedList<Object>>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.put("xr.k-{Q(dr+_[%", "xr.k-{Q(dr+_[%");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Comparable<Object>>>) null, (Factory<LinkedList<Comparable<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.map = (Map<Object, Object>) multiValueMap0;
      MultiValueMap<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap1 = new MultiValueMap<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Collection<Collection<String>>, Object> hashMap0 = new HashMap<Collection<Collection<String>>, Object>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      hashMap0.put(arrayList0, (Object) null);
      MultiValueMap<Collection<Collection<String>>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Collection<String>>, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Collection<String>, Integer> multiValueMap0 = new MultiValueMap<Collection<String>, Integer>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      HashMap<Collection<Collection<String>>, Object> hashMap0 = new HashMap<Collection<Collection<String>>, Object>();
      hashMap0.put(linkedList0, multiValueMap0);
      MultiValueMap<Collection<Collection<String>>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Collection<String>>, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, LinkedList<Object>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      multiValueMap0.put(hashMap0, "org.apache.commons.collections4.map.MultiValueMap$Values");
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<String>>, Collection<String>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<String>>, Collection<String>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Object> hashMap0 = new HashMap<HashMap<Integer, String>, Object>();
      MultiValueMap<HashMap<Integer, String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super Collection<Object>>) hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      hashMap0.putIfAbsent(hashMap1, arrayList1);
      Integer integer0 = new Integer(1);
      arrayList0.add((Object) integer0);
      boolean boolean0 = multiValueMap0.putAll(hashMap1, (Collection<Object>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      Iterator<LinkedList<Integer>> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, LinkedList<Object>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      boolean boolean0 = multiValueMap0.putAll(hashMap0, (Collection<LinkedList<Object>>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, LinkedList<Object>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      boolean boolean0 = multiValueMap0.putAll(hashMap0, (Collection<LinkedList<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<HashMap<Integer, Collection<String>>, String> multiValueMap1 = new MultiValueMap<HashMap<Integer, Collection<String>>, String>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Collection<Collection<String>>, Object> hashMap0 = new HashMap<Collection<Collection<String>>, Object>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      hashMap0.put(linkedList0, arrayList0);
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("=m#~CO@n2]1ekWIOL").when(biFunction0).apply(any() , any());
      multiValueMap0.compute("=m#~CO@n2]1ekWIOL", biFunction0);
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) multiValueMap0);
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Comparable<String>, Object> multiValueMap0 = new MultiValueMap<Comparable<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put("java.util.HashMap@0000000005", (Object) null);
      multiValueMap0.put("java.util.HashMap@0000000005", linkedList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      multiValueMap0.putIfAbsent(arrayList0, integer0);
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Integer, String>>();
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      multiValueMap0.putIfAbsent(arrayList0, integer0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Collection<String>> biFunction0 = (BiFunction<Object, Object, Collection<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(arrayList0, biFunction0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      multiValueMap0.iterator((Object) arrayList1);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      HashMap<Collection<Collection<String>>, Object> hashMap1 = new HashMap<Collection<Collection<String>>, Object>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      hashMap1.put(arrayList0, collection0);
      MultiValueMap<Collection<Collection<String>>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Collection<String>>, ? super Collection<Collection<String>>>) hashMap1);
      Integer integer0 = new Integer((-1));
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.getCollection(hashMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Comparable<Object>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<Comparable<Object>, HashMap<Integer, Object>>();
      Iterator<Map.Entry<Comparable<Object>, HashMap<Integer, Object>>> iterator0 = (Iterator<Map.Entry<Comparable<Object>, HashMap<Integer, Object>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap0);
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }
}
