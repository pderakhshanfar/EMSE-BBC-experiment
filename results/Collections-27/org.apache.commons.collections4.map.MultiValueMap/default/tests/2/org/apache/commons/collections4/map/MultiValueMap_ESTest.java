/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 02:38:28 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", arrayList0, biFunction0);
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      multiValueMap1.put("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", object0);
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(60);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, String>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("@KM%%GG", factory0);
      multiValueMap0.put(abstractMap_SimpleEntry0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      Collection<HashMap<Object, Object>> collection0 = multiValueMap0.createCollection((-2));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<Integer, LinkedList<String>> multiValueMap1 = new MultiValueMap<Integer, LinkedList<String>>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<LinkedList, Collection>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<LinkedList, Collection>>>) multiValueMap1);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<ArrayList<Object>, Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<ArrayList<Object>, Object>>>) multiValueMap2);
      multiValueMap1.map = (Map<Integer, Object>) multiValueMap2;
      MultiValueMap<Integer, String> multiValueMap4 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap3);
      MultiValueMap<Integer, MultiValueMap<Integer, Object>> multiValueMap5 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<MultiValueMap<Integer, Object>>>) multiValueMap4);
      // Undeclared exception!
      try { 
        multiValueMap5.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry, String>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(linkedList0, multiValueMap0, biFunction0);
      MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>>();
      Integer integer0 = new Integer(1432);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      multiValueMap0.map = null;
      MultiValueMap<LinkedList<Integer>, String> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, String>();
      Integer integer0 = new Integer(2836);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.map = (Map<Object, Object>) multiValueMap0;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        multiValueMap0.put(hashMap0, object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      hashMap0.put(linkedList0, multiValueMap0);
      MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<AbstractMap.SimpleEntry<Object, Integer>>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<String>>) null, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<LinkedList<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, Integer>();
      MultiValueMap<HashMap<String, Object>, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<HashMap<Object, Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<HashMap<String, Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) "E]:m[ ");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Collection<String>, Integer> multiValueMap0 = new MultiValueMap<Collection<String>, Integer>();
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Collection<String>, Integer> multiValueMap0 = new MultiValueMap<Collection<String>, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Object>();
      multiValueMap0.map = null;
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = new MultiValueMap<Object, LinkedList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      hashMap0.put((ArrayList<Object>) null, (Object) null);
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      ConstantFactory<ArrayList<Collection<String>>> constantFactory0 = new ConstantFactory<ArrayList<Collection<String>>>(arrayList0);
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super ArrayList<Collection<String>>>) hashMap0, (Factory<ArrayList<Collection<String>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      Integer integer0 = new Integer((-1));
      hashMap0.put((ArrayList<Object>) null, integer0);
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      ConstantFactory<ArrayList<Collection<String>>> constantFactory0 = new ConstantFactory<ArrayList<Collection<String>>>(arrayList0);
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super ArrayList<Collection<String>>>) hashMap0, (Factory<ArrayList<Collection<String>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-2));
      arrayList0.add(integer0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>(arrayList0);
      hashMap0.put("", arrayList0);
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0, (Factory<Collection<Integer>>) constantFactory0);
      boolean boolean0 = multiValueMap0.putAll("", (Collection<Integer>) arrayList0);
      assertEquals(2, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      boolean boolean0 = multiValueMap0.putAll("N2?;Km*=kq\u0002yA", (Collection<Integer>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      Set<Map.Entry<ArrayList<Object>, Object>> set0 = (Set<Map.Entry<ArrayList<Object>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      Iterator<Integer> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      boolean boolean0 = multiValueMap0.putAll("org.apache.commons.collections4.map.MultiValueMap", (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Object>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<String>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>>();
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ArrayList<String>>>) multiValueMap0);
      multiValueMap1.totalSize();
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, HashMap<Object, String>>();
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>(multiValueMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      hashMap0.put(hashMap1, "org.apache.commons.collections4.functors.PrototypeFactory");
      multiValueMap0.putAll((Map<? extends HashMap<Object, Object>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      hashMap0.put(arrayList1, arrayList0);
      MultiValueMap<ArrayList<Object>, LinkedList<AbstractMap.SimpleEntry>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<AbstractMap.SimpleEntry>>>) hashMap0);
      MultiValueMap<ArrayList<Object>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      MultiValueMap multiValueMap3 = (MultiValueMap)multiValueMap2.put(arrayList1, multiValueMap1);
      assertFalse(multiValueMap3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("2GC<`7S", arrayList1, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", arrayList0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(linkedList0, biFunction0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      boolean boolean0 = multiValueMap0.removeMapping("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(linkedList0, biFunction0);
      assertEquals(1, multiValueMap0.size());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<Object>>) hashMap0, (Factory<ArrayList<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Factory<ArrayList<Object>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<String, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Integer, String>>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<Object>>) multiValueMap0, factory0);
      multiValueMap1.put("kD>H%vG", "kD>H%vG");
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      MultiValueMap<MultiValueMap<String, Object>, Object> multiValueMap1 = new MultiValueMap<MultiValueMap<String, Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll((MultiValueMap<String, Object>) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, HashMap<Integer, String>>();
      Iterator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, HashMap<Integer, String>>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, HashMap<Integer, String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
