/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 02:48:22 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>>();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      MultiValueMap<String, Object> multiValueMap2 = new MultiValueMap<String, Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap2, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Collection<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Collection<String>>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, String>();
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<String, HashMap>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, HashMap>>>) multiValueMap1);
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap2);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap0).when(biFunction0).apply(any() , any());
      multiValueMap3.compute(arrayList0, biFunction0);
      int int0 = multiValueMap3.totalSize();
      assertFalse(multiValueMap3.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>> collection0 = multiValueMap0.createCollection((-1878));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.map = null;
      MultiValueMap<String, Comparable<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Comparable<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>();
      Collection<Object> collection0 = multiValueMap1.values();
      multiValueMap0.putIfAbsent(collection0, "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Collection<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<ArrayList<Object>, Collection<ArrayList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<ArrayList<String>>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(arrayList0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, HashMap<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<HashMap<Object, Integer>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends AbstractMap.SimpleEntry<String, Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, integer0);
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(multiValueMap0);
      Factory<Collection<String>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap1, factory1);
      MultiValueMap<Object, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<?, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-789));
      Collection<Object> collection0 = multiValueMap0.values();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(arrayList0, unaryOperator0);
      arrayList0.add(integer0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Object) integer0, collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Collection<Integer>, Collection<Integer>> hashMap0 = new HashMap<Collection<Integer>, Collection<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) arrayList0);
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0, (Factory<Collection<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<Object>>();
      multiValueMap0.map = null;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Comparable, LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Comparable, LinkedList>>>) hashMap0);
      MultiValueMap<String, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      HashMap<LinkedList<Collection<Integer>>, Object> hashMap0 = new HashMap<LinkedList<Collection<Integer>>, Object>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      hashMap0.put(linkedList0, arrayList0);
      MultiValueMap<LinkedList<Collection<Integer>>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<Integer>>, ? super Collection<Collection<String>>>) hashMap0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      arrayList0.add((AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      boolean boolean0 = multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<String>>>) hashMap0, factory0);
      Collection<LinkedList<String>> collection0 = multiValueMap0.getCollection("|97C82#@Ut!1/z}G)A9");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Iterator<String> iterator0 = multiValueMap0.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = new MultiValueMap<Collection<Integer>, Integer>();
      boolean boolean0 = multiValueMap0.putAll((Collection<Integer>) null, (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = multiValueMap0.computeIfAbsent(arrayList0, unaryOperator0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      int int0 = multiValueMap1.size(object0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<LinkedList<String>>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, hashMap0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, Collection<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("'3]H=DQlimAFmg6i4x%", "");
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<String>>) hashMap0);
      multiValueMap0.put(abstractMap_SimpleEntry0, "");
      multiValueMap0.putAll((Map<? extends AbstractMap.SimpleEntry<String, String>, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, String>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("#bw7?V", "#bw7?V");
      multiValueMap0.put(abstractMap_SimpleEntry0, "#bw7?V");
      multiValueMap0.putAll((Map<? extends AbstractMap.SimpleEntry<String, String>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      multiValueMap0.put((Collection<Object>) null, "org.apache.commons.collections4.map.MultiValueMap");
      multiValueMap0.put((Collection<Object>) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<LinkedList<Collection<Integer>>, Object> hashMap0 = new HashMap<LinkedList<Collection<Integer>>, Object>();
      MultiValueMap<LinkedList<Collection<Integer>>, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Integer>>, ConstantFactory<String>>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      multiValueMap0.put(linkedList0, hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<LinkedList<Collection<Integer>>, Object> hashMap0 = new HashMap<LinkedList<Collection<Integer>>, Object>();
      MultiValueMap<LinkedList<Collection<Integer>>, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Integer>>, ConstantFactory<String>>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      multiValueMap0.put(linkedList0, hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      arrayList0.add((AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      arrayList0.add((AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      arrayList0.add((AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      Object object0 = new Object();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<Object>>();
      MapIterator<LinkedList<Object>, Object> mapIterator0 = multiValueMap0.mapIterator();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Comparable, LinkedList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Comparable, LinkedList>>>) hashMap0);
      MultiValueMap<String, Collection<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.removeMapping(mapIterator0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      arrayList0.add((AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      assertEquals(1, arrayList0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Integer integer0 = new Integer((-789));
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.putAll((Object) integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Iterator<Map.Entry<Object, String>> iterator0 = (Iterator<Map.Entry<Object, String>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Object> hashMap0 = new HashMap<HashMap<Integer, String>, Object>();
      MultiValueMap<HashMap<Integer, String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super Collection<Integer>>) hashMap0);
      Set<Map.Entry<HashMap<Integer, String>, Object>> set0 = (Set<Map.Entry<HashMap<Integer, String>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }
}
