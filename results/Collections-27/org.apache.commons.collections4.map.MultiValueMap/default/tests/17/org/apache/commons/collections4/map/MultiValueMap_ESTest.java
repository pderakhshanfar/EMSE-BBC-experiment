/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 02:47:09 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MapIterator<Object, Object> mapIterator0 = multiValueMap0.mapIterator();
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory((LinkedList<String>) null);
      MultiValueMap<LinkedList<Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<String>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap2.containsValue((Object) mapIterator0, (Object) multiValueMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<LinkedList<Integer>, Collection<Object>> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, Collection<Object>>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(multiValueMap1, function0);
      multiValueMap0.put(multiValueMap1, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(multiValueMap0, arrayList0);
      multiValueMap0.putIfAbsent(abstractMap_SimpleImmutableEntry0, arrayList0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      ConstantFactory<Collection<ArrayList<Object>>> constantFactory0 = new ConstantFactory<Collection<ArrayList<Object>>>((Collection<ArrayList<Object>>) null);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0, (Factory<Collection<ArrayList<Object>>>) constantFactory0);
      Collection<ArrayList<Object>> collection0 = multiValueMap1.createCollection((-769));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      Integer integer0 = new Integer(19);
      Object object0 = multiValueMap1.putIfAbsent(integer0, multiValueMap0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap2 = new MultiValueMap<ArrayList<Object>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.size(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      HashMap<LinkedList<Integer>, Object> hashMap1 = new HashMap<LinkedList<Integer>, Object>(932);
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<AbstractMap.SimpleEntry<String, Object>>>) hashMap1);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      MultiValueMap<Object, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) hashMap2);
      Integer integer0 = new Integer(932);
      hashMap2.put(hashMap1, integer0);
      // Undeclared exception!
      try { 
        multiValueMap2.removeMapping(multiValueMap1, multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap1.put(multiValueMap0, multiValueMap0);
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap2 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<Object, String> multiValueMap3 = new MultiValueMap<Object, String>((Map<Object, ? super LinkedList<String>>) multiValueMap2, factory0);
      // Undeclared exception!
      try { 
        multiValueMap3.putAll((Map<?, ?>) multiValueMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      LinkedList<AbstractMap.SimpleEntry<Object, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, Object>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0, factory0);
      multiValueMap1.put(linkedList0, multiValueMap0);
      MultiValueMap<Object, String> multiValueMap2 = new MultiValueMap<Object, String>();
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<?, ?>) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<HashMap<Object, Integer>> linkedList0 = new LinkedList<HashMap<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      linkedList0.add(hashMap0);
      HashMap<LinkedList<String>, Object> hashMap1 = new HashMap<LinkedList<String>, Object>();
      Factory<Collection<HashMap<Object, Integer>>> factory0 = ConstantFactory.constantFactory((Collection<HashMap<Object, Integer>>) null);
      MultiValueMap<LinkedList<String>, HashMap<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<HashMap<Object, Integer>>>) hashMap1, factory0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList1, (Collection<HashMap<Object, Integer>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(linkedList0, "");
      arrayList0.add("8+ErWE~0");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList0, (Collection<String>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.put(multiValueMap0, "+X:TAu>An?CZS/D{5'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, HashMap<Integer, Integer>> multiValueMap0 = new MultiValueMap<Object, HashMap<Integer, Integer>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<AbstractMap.SimpleEntry<Object, Object>>) null);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0, factory0);
      Integer integer0 = new Integer((-505));
      // Undeclared exception!
      try { 
        multiValueMap1.put((Object) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(arrayList1, integer0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList1, arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Factory<ArrayList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<ArrayList<Integer>, ArrayList>, ? super ArrayList<Integer>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) hashMap0, (Factory<Collection<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      Integer integer0 = new Integer(19);
      Object object0 = multiValueMap1.putIfAbsent(integer0, multiValueMap0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap2 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap2.iterator(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      hashMap0.put((String) null, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "org.apache.commons.collections4.iterators.EmptyIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(4);
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      hashMap0.put(integer0, multiValueMap0);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Integer>>();
      ArrayList<HashMap<Object, Integer>> arrayList0 = new ArrayList<HashMap<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      arrayList0.add(hashMap0);
      Factory<Collection<HashMap<Object, Integer>>> factory0 = ConstantFactory.constantFactory((Collection<HashMap<Object, Integer>>) arrayList0);
      MultiValueMap<LinkedList<String>, HashMap<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<HashMap<Object, Integer>>>) multiValueMap0, factory0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap1.putAll(linkedList0, (Collection<HashMap<Object, Integer>>) arrayList0);
      assertEquals(2, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      Set<Map.Entry<ArrayList<Object>, Object>> set0 = (Set<Map.Entry<ArrayList<Object>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      Object object0 = multiValueMap1.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, String> multiValueMap2 = new MultiValueMap<Object, String>();
      multiValueMap2.getCollection(object0);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      Integer integer0 = new Integer(0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      hashMap0.put(linkedList0, integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap1.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      MultiValueMap<Object, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap2);
      multiValueMap3.putAll((Map<?, ?>) multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.putAll((Collection<Object>) linkedList0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      int int0 = multiValueMap0.size((Object) arrayList1);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      Object object0 = multiValueMap1.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, String> multiValueMap2 = new MultiValueMap<Object, String>();
      multiValueMap2.putAll((Map<?, ?>) multiValueMap1);
      multiValueMap2.getCollection(object0);
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, multiValueMap2.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap1.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap1.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = new MultiValueMap<Object, Collection<Object>>();
      multiValueMap1.putIfAbsent(multiValueMap0, hashMap0);
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, factory0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      boolean boolean0 = multiValueMap0.removeMapping(hashMap0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = multiValueMap0.putIfAbsent(hashMap0, arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping(hashMap0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap1.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      MultiValueMap<Object, ExceptionFactory<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ExceptionFactory<Object>>>) multiValueMap2);
      int int0 = multiValueMap3.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      Object object0 = multiValueMap0.put(multiValueMap0, multiValueMap0);
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>>();
      Iterator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>> iterator0 = (Iterator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
