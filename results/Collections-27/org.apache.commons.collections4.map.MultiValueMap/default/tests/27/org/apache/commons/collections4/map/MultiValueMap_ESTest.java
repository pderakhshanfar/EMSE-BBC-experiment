/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:36:03 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      multiValueMap0.putIfAbsent(hashMap0, integer0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("uUn^OT2-;m").when(biFunction0).apply(any() , any());
      multiValueMap0.compute(hashMap0, biFunction0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap1.put(hashMap0, hashMap0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>>();
      multiValueMap0.putAll((Map<?, ?>) hashMap1);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Integer integer0 = new Integer(220);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(integer0, linkedList0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      ConstantFactory<Collection<Collection<Collection<String>>>> constantFactory0 = new ConstantFactory<Collection<Collection<Collection<String>>>>((Collection<Collection<Collection<String>>>) null);
      MultiValueMap<Collection<String>, Collection<Collection<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Collection<Collection<String>>>>) hashMap0, (Factory<Collection<Collection<Collection<String>>>>) constantFactory0);
      Collection<Collection<Collection<String>>> collection0 = multiValueMap0.createCollection(3);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Object, ArrayList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, ArrayList<String>>>>) multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      hashMap0.put((Collection<String>) null, (Object) null);
      MultiValueMap<Collection<String>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<Integer>>) multiValueMap1, (Factory<LinkedList<Integer>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<String> iterator0 = arrayList0.iterator();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Integer>>) hashMap0);
      MultiValueMap<LinkedList<String>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<String>>>) multiValueMap0);
      hashMap0.put(linkedList0, iterator0);
      Factory<LinkedList<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<ArrayList<Integer>>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList$Itr cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) hashMap0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, multiValueMap0);
      MultiValueMap<Object, Collection<String>> multiValueMap1 = new MultiValueMap<Object, Collection<String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0.map);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) arrayList0);
      arrayList0.add(linkedList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(linkedList0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap1.put(hashMap0, hashMap0);
      ConstantFactory<LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>>((LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>) null);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>>) hashMap1, (Factory<LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) hashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) arrayList0);
      arrayList0.add(linkedList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) arrayList0, (Collection<LinkedList<Object>>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Comparable<Object>, Object> hashMap0 = new HashMap<Comparable<Object>, Object>();
      HashMap<LinkedList<String>, Object> hashMap1 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<Object>>>) hashMap1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap1.put(linkedList0, hashMap0);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      arrayList0.add((Collection<Object>) linkedList1);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList0, (Collection<Collection<Object>>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(arrayList0);
      arrayList0.add(linkedList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerFirst(arrayList0);
      arrayList0.add(linkedList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, HashMap<String, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, HashMap<String, Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, MultiValueMap<Integer, Object>> multiValueMap0 = new MultiValueMap<String, MultiValueMap<Integer, Object>>();
      MultiValueMap<String, LinkedList<MultiValueMap<Object, Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<MultiValueMap<Object, Object>>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Factory<ArrayList<Integer>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super ArrayList<Integer>>) multiValueMap0, factory0);
      Factory<LinkedList<Collection<String>>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Collection<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Collection<String>>>) multiValueMap1, factory1);
      // Undeclared exception!
      try { 
        multiValueMap2.createCollection(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      arrayList0.add(linkedList0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(arrayList1, arrayList0, biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue(object0, (Object) arrayList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(1);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(integer0, (Object) null);
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList0.add(linkedList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      boolean boolean0 = multiValueMap0.putAll((Object) arrayList0, (Collection<LinkedList<Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      boolean boolean0 = multiValueMap0.putAll((Object) arrayList0, (Collection<LinkedList<Object>>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      Collection<Collection<Object>> collection0 = multiValueMap0.getCollection((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      MultiValueMap<LinkedList<String>, String> multiValueMap1 = new MultiValueMap<LinkedList<String>, String>();
      Iterator<String> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<LinkedList<Object>> arrayList1 = new ArrayList<LinkedList<Object>>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList1.add(linkedList0);
      multiValueMap0.put(arrayList0, arrayList1);
      boolean boolean0 = multiValueMap0.putAll((Object) arrayList0, (Collection<LinkedList<Object>>) arrayList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      boolean boolean0 = multiValueMap0.putAll((Object) "Cannot instantiate class: ", (Collection<LinkedList<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, String>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(arrayList0, unaryOperator0);
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>>();
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, LinkedList<Integer>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Collection<String>> arrayList1 = new ArrayList<Collection<String>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(arrayList0, arrayList1, biFunction0);
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList1, (Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Integer>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList1, "", biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) "");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Collection<String>>();
      multiValueMap1.putAll((Map<? extends ArrayList<Object>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<String>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<Object>>();
      multiValueMap1.putIfAbsent((Integer) null, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      multiValueMap0.putIfAbsent((Integer) null, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, ArrayList<String>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(hashMap0, arrayList0, biFunction0);
      boolean boolean0 = multiValueMap0.removeMapping(hashMap0, hashMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>>();
      MultiValueMap<HashMap<Object, Integer>, ArrayList<String>> multiValueMap1 = new MultiValueMap<HashMap<Object, Integer>, ArrayList<String>>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>>();
      MultiValueMap<HashMap<Object, Integer>, ArrayList<String>> multiValueMap1 = new MultiValueMap<HashMap<Object, Integer>, ArrayList<String>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(hashMap0, multiValueMap0, biFunction0);
      assertFalse(multiValueMap1.isEmpty());
      
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<String>>>) multiValueMap0, (Factory<LinkedList<LinkedList<String>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<Object>>();
      multiValueMap1.putIfAbsent((Integer) null, multiValueMap0);
      MultiValueMap<Integer, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap1);
      int int0 = multiValueMap2.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap0, factory0);
      hashMap0.put(factory0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(collection0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection((-805));
      assertFalse(collection0.contains((-805)));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Integer>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Integer>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      Iterator<Map.Entry<Integer, Collection<String>>> iterator0 = (Iterator<Map.Entry<Integer, Collection<String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<LinkedList>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Factory<ArrayList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super ArrayList<ArrayList<Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }
}
