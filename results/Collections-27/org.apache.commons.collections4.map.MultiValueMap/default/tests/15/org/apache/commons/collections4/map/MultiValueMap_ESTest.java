/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:07:08 GMT 2020
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(10);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Integer>>();
      LinkedList<HashMap<Object, String>> linkedList0 = new LinkedList<HashMap<Object, String>>();
      Factory<LinkedList<HashMap<Object, String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, HashMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<HashMap<Object, String>>>) multiValueMap0, factory0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<String, String>>>) multiValueMap1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap2.merge(integer0, arrayList0, biFunction0);
      MultiValueMap<Integer, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      int int0 = multiValueMap3.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      multiValueMap0.put((String) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      Function<Object, Object> function0 = Function.identity();
      multiValueMap1.computeIfAbsent("|x<B", function0);
      LinkedList<AbstractMap.SimpleEntry<Object, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, Object>>();
      ConstantFactory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>>(linkedList0);
      MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap1, (Factory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) constantFactory0);
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Collection<LinkedList<String>> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, "Y>q");
      multiValueMap0.map = (Map<LinkedList<String>, Object>) hashMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(hashMap0, hashMap0);
      hashMap0.put(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(multiValueMap0, function0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-1543));
      hashMap0.put(integer0, "");
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<AbstractMap.SimpleImmutableEntry<String, String>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<String, String>>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      arrayList0.add(abstractMap_SimpleImmutableEntry0);
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      hashMap0.put(arrayList1, abstractMap_SimpleImmutableEntry0);
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList1, (Collection<AbstractMap.SimpleImmutableEntry<String, String>>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleImmutableEntry cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Factory<Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, AbstractMap.SimpleEntry<String, String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection((-144));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<String, String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<AbstractMap.SimpleImmutableEntry<String, String>> arrayList1 = new ArrayList<AbstractMap.SimpleImmutableEntry<String, String>>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("IteratorChain cannot be chaqged after rhe first use of a method from the Iterator interface", "IteratorChain cannot be chaqged after rhe first use of a method from the Iterator interface");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(arrayList0, unaryOperator0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      arrayList1.add(abstractMap_SimpleImmutableEntry0);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<AbstractMap.SimpleImmutableEntry<String, String>>) arrayList1);
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<String, String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<AbstractMap.SimpleImmutableEntry<String, String>> arrayList1 = new ArrayList<AbstractMap.SimpleImmutableEntry<String, String>>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("IteratorChain cannot be chaqged after rhe first use of a method from the Iterator interface", "IteratorChain cannot be chaqged after rhe first use of a method from the Iterator interface");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      arrayList1.add(abstractMap_SimpleImmutableEntry0);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<AbstractMap.SimpleImmutableEntry<String, String>>) arrayList1);
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<MultiValueMap<String, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<MultiValueMap<String, Object>, AbstractMap.SimpleEntry<Object, String>>();
      Collection<AbstractMap.SimpleEntry<Object, String>> collection0 = multiValueMap0.getCollection("org.apache.commons.collections4.map.MultiValueMap$Values");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Object, MultiValueMap<Object, String>> multiValueMap0 = new MultiValueMap<Object, MultiValueMap<Object, String>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Iterator<MultiValueMap<Object, String>> iterator0 = multiValueMap0.iterator((Object) hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      Integer integer0 = new Integer(0);
      multiValueMap0.putIfAbsent(integer0, integer0);
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<String, String>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<String, String>>();
      Integer integer0 = new Integer((-2986));
      multiValueMap0.putIfAbsent(integer0, arrayList0);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      MultiValueMap<Collection<Object>, String> multiValueMap1 = new MultiValueMap<Collection<Object>, String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put((String) null, integer0);
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Function<Object, Object> function0 = Function.identity();
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<String, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) multiValueMap1, (Factory<LinkedList<String>>) constantFactory0);
      multiValueMap2.computeIfAbsent("org.apache.commons.collections4.iterators.EmptyOrderedIterator", function0);
      multiValueMap2.put("org.apache.commons.collections4.iterators.EmptyOrderedIterator", multiValueMap1);
      assertFalse(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      Integer integer0 = new Integer(0);
      multiValueMap0.putIfAbsent(integer0, integer0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<String, String>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<String, String>>();
      Integer integer0 = new Integer((-2986));
      multiValueMap0.putIfAbsent(integer0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<MultiValueMap<String, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<MultiValueMap<String, Object>, AbstractMap.SimpleEntry<Object, String>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", multiValueMap0);
      MultiValueMap<String, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<String, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<LinkedList<ArrayList<Integer>>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<LinkedList<ArrayList<Integer>>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<ArrayList<Integer>>, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<String, String> multiValueMap2 = new MultiValueMap<String, String>();
      multiValueMap0.put((Integer) null, multiValueMap2);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(collection0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Iterator<Map.Entry<Object, Integer>> iterator0 = (Iterator<Map.Entry<Object, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
