/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 02:49:32 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, HashMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) null, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, LinkedList<String>>();
      HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<String, Object> multiValueMap2 = new MultiValueMap<String, Object>();
      Collection<Object> collection0 = multiValueMap2.values();
      hashMap0.put(multiValueMap0, collection0);
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) linkedList0);
      MultiValueMap<Object, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1, factory0);
      multiValueMap3.putAll((Map<?, ?>) hashMap0);
      assertFalse(multiValueMap3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, arrayList0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, String>();
      Collection<String> collection0 = multiValueMap0.createCollection(2);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Integer, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Integer, Object>>(0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, hashMap0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry1);
      arrayList0.add(abstractMap_SimpleImmutableEntry0);
      hashMap0.put(arrayList1, arrayList0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, HashMap<Collection<Object>, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, HashMap<Collection<Object>, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>();
      Object object0 = multiValueMap1.getOrDefault(multiValueMap0, multiValueMap0);
      multiValueMap0.putIfAbsent("The factory must not be null", object0);
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap2 = new MultiValueMap<ArrayList<Object>, LinkedList<String>>();
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap2.removeMapping(multiValueMap0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap1;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("{M");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<String>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.map = null;
      arrayList0.add(":SOUVCy0,4pH!ises[");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<String>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.put("", "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<LinkedList<Object>> arrayList1 = new ArrayList<LinkedList<Object>>();
      Factory<ArrayList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory(arrayList1);
      hashMap0.put(arrayList0, factory0);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super ArrayList<LinkedList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Collection<ArrayList<String>>> linkedList0 = new LinkedList<Collection<ArrayList<String>>>();
      Factory<LinkedList<Collection<ArrayList<String>>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Collection<ArrayList<String>>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0.map);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      MultiValueMap<Integer, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) hashMap0);
      Set<Map.Entry<ArrayList<Object>, Object>> set0 = (Set<Map.Entry<ArrayList<Object>, Object>>)hashMap0.entrySet();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, hashMap0);
      HashMap<HashMap<Object, Collection<Object>>, Object> hashMap1 = new HashMap<HashMap<Object, Collection<Object>>, Object>();
      MultiValueMap<HashMap<Object, Collection<Object>>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Collection<Object>>, ? super Collection<String>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(set0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, LinkedList<AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<AbstractMap.SimpleImmutableEntry>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      Integer integer0 = new Integer(2);
      multiValueMap0.put(integer0, integer0);
      BiFunction<Integer, Object, Object> biFunction0 = (BiFunction<Integer, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , any());
      multiValueMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = new MultiValueMap<Integer, Collection<Object>>();
      Integer integer0 = new Integer(2);
      multiValueMap1.put(integer0, multiValueMap0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) hashMap0, factory0);
      Collection<String> collection0 = multiValueMap0.getCollection((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, Collection<Object>>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, Collection<Object>>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Iterator<AbstractMap.SimpleEntry<Object, Collection<Object>>> iterator0 = multiValueMap0.iterator((Object) linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, (Object) null);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      multiValueMap0.iterator((Object) arrayList1);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.putAll((Object) arrayList0, (Collection<Integer>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = new MultiValueMap<Integer, Collection<Object>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      Integer integer0 = new Integer(2);
      multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.putIfAbsent(arrayList0, "org.apache.commons.collections4.map.MultiValueMap$ValuesIterator");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<String>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      Integer integer0 = new Integer(2);
      multiValueMap0.put(integer0, integer0);
      multiValueMap0.put(integer0, integer0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(hashMap0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      Integer integer0 = new Integer(2);
      Object object0 = multiValueMap0.put(integer0, integer0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      multiValueMap0.put(arrayList1, arrayList1);
      Integer integer0 = new Integer(1149);
      arrayList0.add(integer0);
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      multiValueMap0.putAll((Object) arrayList2, (Collection<Integer>) arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      boolean boolean0 = multiValueMap1.removeMapping(arrayList2, integer0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1149);
      arrayList0.add(integer0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Integer>) arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      boolean boolean0 = multiValueMap1.removeMapping(arrayList0, integer0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      Integer integer0 = new Integer(1149);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      boolean boolean0 = multiValueMap1.removeMapping(arrayList1, integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.put("-", "-");
      MultiValueMap<String, ArrayList<Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Collection<Object>>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(collection0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      Iterator<Map.Entry<Integer, ArrayList<Integer>>> iterator0 = (Iterator<Map.Entry<Integer, ArrayList<Integer>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Collection<Object>, String>, ? super Collection<Collection<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }
}
