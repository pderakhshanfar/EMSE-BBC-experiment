/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:09:33 GMT 2020
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Collection<Object>, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>>) multiValueMap1, factory0);
      MultiValueMap<Integer, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap2);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap3.containsValue((Object) factory0, (Object) linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      multiValueMap0.put((String) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, HashMap<String, Object>>();
      Collection<HashMap<String, Object>> collection0 = multiValueMap0.createCollection((-3));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      hashMap0.put(arrayList0, "%xoCiROg4%p><");
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<String>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("s*jf9r");
      hashMap0.put((Collection<Object>) null, constantFactory0);
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<String>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) hashMap0);
      hashMap0.put((Object) null, multiValueMap1);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Collection<Object>, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>>) multiValueMap1, factory0);
      MultiValueMap<Integer, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap2);
      Integer integer0 = new Integer(0);
      multiValueMap2.put(integer0, linkedList0);
      MultiValueMap<ConstantFactory<String>, Object> multiValueMap4 = new MultiValueMap<ConstantFactory<String>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap4.iterator((Object) multiValueMap3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Set<Object> set0 = hashMap0.keySet();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = new MultiValueMap<Object, Collection<Object>>();
      multiValueMap1.put(set0, set0);
      hashMap0.put(multiValueMap1, multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>>();
      MultiValueMap<Object, MultiValueMap<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<Integer, Object>>>) multiValueMap0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.createCollection((-3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, Collection<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      arrayList0.add((Collection<Object>) null);
      boolean boolean0 = multiValueMap0.putAll(hashMap0, (Collection<Collection<Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      Object object0 = new Object();
      Collection<Object> collection0 = multiValueMap0.getCollection(object0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Iterator<LinkedList<Object>> iterator0 = multiValueMap1.iterator((Object) "");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, Collection<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      arrayList0.add((Collection<Object>) null);
      boolean boolean0 = multiValueMap0.putAll(hashMap0, (Collection<Collection<Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, Collection<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      boolean boolean0 = multiValueMap0.putAll(hashMap0, (Collection<Collection<Object>>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<HashMap<Collection<Object>, Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<HashMap<Collection<Object>, Object>, Collection<Object>>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      boolean boolean0 = multiValueMap0.putAll(hashMap0, (Collection<Collection<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      int int0 = multiValueMap0.size((Object) collection0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      int int0 = multiValueMap0.size((Object) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>(962);
      Integer integer0 = new Integer(962);
      hashMap0.put(integer0, "org.apache.commons.collections4.functors.InstantiateFactory");
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Collection<Object>, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>>) multiValueMap1, factory0);
      MultiValueMap<Integer, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap2);
      Integer integer0 = new Integer(0);
      multiValueMap2.put(integer0, linkedList0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) multiValueMap3);
      assertFalse(multiValueMap3.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Collection<Object>, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>>) multiValueMap1, factory0);
      MultiValueMap<Integer, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap2);
      Integer integer0 = new Integer(0);
      multiValueMap2.put(integer0, linkedList0);
      LinkedList<LinkedList<String>> linkedList1 = new LinkedList<LinkedList<String>>();
      Factory<Collection<LinkedList<String>>> factory1 = ConstantFactory.constantFactory((Collection<LinkedList<String>>) linkedList1);
      BiFunction<Integer, Object, Object> biFunction0 = (BiFunction<Integer, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap3).when(biFunction0).apply(anyInt() , any());
      multiValueMap3.compute(integer0, biFunction0);
      MultiValueMap<Integer, LinkedList<String>> multiValueMap4 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<String>>>) multiValueMap3, factory1);
      boolean boolean0 = multiValueMap4.containsValue((Object) multiValueMap2);
      assertEquals(1, multiValueMap3.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Collection<Object>, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Object>>>) multiValueMap1, factory0);
      MultiValueMap<Integer, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap2);
      Integer integer0 = new Integer(0);
      multiValueMap2.put(integer0, linkedList0);
      LinkedList<LinkedList<String>> linkedList1 = new LinkedList<LinkedList<String>>();
      Factory<Collection<LinkedList<String>>> factory1 = ConstantFactory.constantFactory((Collection<LinkedList<String>>) linkedList1);
      MultiValueMap<Integer, LinkedList<String>> multiValueMap4 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<String>>>) multiValueMap3, factory1);
      boolean boolean0 = multiValueMap4.containsValue((Object) multiValueMap2);
      assertEquals(1, multiValueMap3.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, HashMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super Collection<HashMap<Object, String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping((Object) null, "b@$7-`6i9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>(962);
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) multiValueMap0);
      Integer integer0 = new Integer(2575);
      multiValueMap1.put(integer0, hashMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put((Integer) null, (Object) null);
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String>();
      Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Integer, String>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Iterator<Map.Entry<String, Object>> iterator0 = (Iterator<Map.Entry<String, Object>>)multiValueMap0.iterator();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, iterator0);
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<String>>) hashMap0, factory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(multiValueMap0, linkedList0);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleImmutableEntry<String, Integer>>>) hashMap0, (Factory<LinkedList<AbstractMap.SimpleImmutableEntry<String, Integer>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }
}
