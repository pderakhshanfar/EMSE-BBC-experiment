/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:30:05 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, arrayList1);
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Integer>>();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap1.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super Collection<String>>) hashMap0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, LinkedList<Object>>();
      Collection<LinkedList<Object>> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Integer>>();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("");
      multiValueMap1.putAll((Object) multiValueMap0, (Collection<String>) linkedList0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>((Map<Object, ? super LinkedList<Object>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      Integer integer0 = new Integer(10);
      multiValueMap0.putIfAbsent(integer0, (Object) null);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Integer>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("");
      multiValueMap1.putAll((Object) multiValueMap0, (Collection<String>) linkedList0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>((Map<Object, ? super LinkedList<Object>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      Integer integer0 = new Integer(10);
      multiValueMap0.putIfAbsent(integer0, (Object) null);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Object>>();
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap0, multiValueMap0);
      arrayList0.add(abstractMap_SimpleEntry0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      multiValueMap0.putAll(arrayList1, (Collection<AbstractMap.SimpleEntry<Object, Object>>) arrayList0);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) abstractMap_SimpleEntry0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList1 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(arrayList1, arrayList0);
      arrayList1.add(abstractMap_SimpleEntry0);
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(abstractMap_SimpleEntry0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList1 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(arrayList1, arrayList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, (Object) null);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      Integer integer0 = new Integer((-2));
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("O]'0#wJly:Rqd(E", integer0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
      arrayList0.add(abstractMap_SimpleEntry1);
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0, factory0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList1, (Collection<AbstractMap.SimpleEntry<Object, Object>>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      MultiValueMap<MultiValueMap<Integer, String>, ConstantFactory<Object>> multiValueMap1 = new MultiValueMap<MultiValueMap<Integer, String>, ConstantFactory<Object>>();
      MultiValueMap<MultiValueMap<Integer, String>, AbstractMap.SimpleEntry<ExceptionFactory<String>, LinkedList>> multiValueMap2 = MultiValueMap.multiValueMap((Map<MultiValueMap<Integer, String>, ? super Collection<AbstractMap.SimpleEntry<ExceptionFactory<String>, LinkedList>>>) multiValueMap1);
      multiValueMap1.map = (Map<MultiValueMap<Integer, String>, Object>) multiValueMap2;
      Collection<Object> collection0 = multiValueMap1.values();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) hashMap0, collection0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Object>, ? super Collection<Object>>) hashMap0);
      HashMap<LinkedList<Object>, Object> hashMap1 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) hashMap1);
      Factory<Collection<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<Object>>>) multiValueMap1, factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.put(linkedList0, multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<String>>();
      MultiValueMap<Object, ExceptionFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ExceptionFactory<String>>>) hashMap0);
      Object object0 = multiValueMap0.getOrDefault(hashMap1, multiValueMap1);
      hashMap0.put(hashMap1, object0);
      MultiValueMap<HashMap<Object, Object>, LinkedList<String>> multiValueMap2 = new MultiValueMap<HashMap<Object, Object>, LinkedList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap2.put(hashMap0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      MultiValueMap<HashMap<Object, Integer>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>((LinkedList<Object>) null);
      MultiValueMap<HashMap<Object, Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(hashMap1, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Object>>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap0, multiValueMap0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<HashMap<Object, Object>, Object> hashMap1 = new HashMap<HashMap<Object, Object>, Object>();
      hashMap1.put(hashMap0, abstractMap_SimpleEntry0);
      MultiValueMap<HashMap<Object, Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<LinkedList<String>>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap1.put(hashMap0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleEntry cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) null, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, HashMap<String, String>> multiValueMap0 = new MultiValueMap<String, HashMap<String, String>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<MultiValueMap<Object, String>, Object> hashMap0 = new HashMap<MultiValueMap<Object, String>, Object>();
      MultiValueMap<MultiValueMap<Object, String>, MultiValueMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<MultiValueMap<Object, String>, ? super Collection<MultiValueMap<Object, Object>>>) hashMap0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap0.putIfAbsent(multiValueMap1, hashMap0);
      MultiValueMap<ArrayList<Object>, MultiValueMap<Object, String>> multiValueMap2 = new MultiValueMap<ArrayList<Object>, MultiValueMap<Object, String>>();
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put((AbstractMap.SimpleEntry<String, Object>) null, arrayList0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put((AbstractMap.SimpleEntry<String, Object>) null, arrayList0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Integer integer0 = new Integer((-1603));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, AbstractMap.SimpleEntry<String, String>>();
      MultiValueMap<HashMap<Object, String>, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<ConstantFactory<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<HashMap<Object, String>, Object>) multiValueMap1;
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap2 = new MultiValueMap<ArrayList<Object>, LinkedList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, "org.apache.commons.collections4.functors.PrototypeFactory");
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "org.apache.commons.collections4.functors.PrototypeFactory");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) hashMap0, factory0);
      MultiValueMap<String, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.putAll("fb", (Collection<Collection<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Object>>();
      Iterator<LinkedList<Object>> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(arrayList0, function0);
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList1 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(multiValueMap0, "Mv");
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
      arrayList1.add(abstractMap_SimpleEntry1);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<AbstractMap.SimpleEntry<Object, Object>>) arrayList1);
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      hashMap0.put((String) null, multiValueMap0);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) multiValueMap1, factory0);
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      multiValueMap2.replaceAll(biFunction0);
      multiValueMap2.putAll((Map<? extends String, ?>) multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, AbstractMap.SimpleEntry<String, String>>();
      int int0 = multiValueMap0.size((Object) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>>();
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add((Collection<Object>) arrayList1);
      multiValueMap0.putAll((AbstractMap.SimpleImmutableEntry<Object, String>) null, (Collection<Collection<Object>>) arrayList0);
      int int0 = multiValueMap0.size((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) "", (Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      HashMap<LinkedList<Object>, Collection<Object>> hashMap1 = new HashMap<LinkedList<Object>, Collection<Object>>();
      hashMap1.put(linkedList0, linkedList0);
      multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) hashMap1);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      hashMap0.put((String) null, multiValueMap0);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<? extends String, ?>) multiValueMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, AbstractMap.SimpleEntry<Integer, Object>>();
      MultiValueMap<HashMap<Object, String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends HashMap<Object, String>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, arrayList0);
      arrayList0.add((Integer) null);
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      multiValueMap0.put(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      boolean boolean0 = multiValueMap0.removeMapping(object0, constantFactory0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<MultiValueMap<Object, String>, Object> hashMap0 = new HashMap<MultiValueMap<Object, String>, Object>();
      MultiValueMap<MultiValueMap<Object, String>, MultiValueMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<MultiValueMap<Object, String>, ? super Collection<MultiValueMap<Object, Object>>>) hashMap0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap0.putIfAbsent(multiValueMap1, hashMap0);
      MultiValueMap<MultiValueMap<Object, String>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<MultiValueMap<Object, String>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      int int0 = multiValueMap2.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      MultiValueMap<MultiValueMap<Integer, String>, ConstantFactory<Object>> multiValueMap1 = new MultiValueMap<MultiValueMap<Integer, String>, ConstantFactory<Object>>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((Object) hashMap0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Iterator<Map.Entry<Object, Object>> iterator0 = (Iterator<Map.Entry<Object, Object>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<LinkedList<Object>>) null);
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      Collection<LinkedList<Object>> collection0 = multiValueMap0.createCollection((-1969));
      assertNull(collection0);
  }
}
