/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:30:24 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      multiValueMap0.put(linkedList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(957);
      multiValueMap0.put("", hashMap0);
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0, factory0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Object object0 = multiValueMap0.putIfAbsent(multiValueMap0, multiValueMap0);
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.size(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, String>, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, AbstractMap.SimpleEntry<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.putIfAbsent(multiValueMap0, multiValueMap0);
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.getCollection(multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Object object0 = multiValueMap0.putIfAbsent(multiValueMap0, multiValueMap0);
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      MultiValueMap<String, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap1);
      Integer integer0 = new Integer(2);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue(object0, (Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<HashMap<Object, Integer>, MultiValueMap<Object, Object>> multiValueMap1 = new MultiValueMap<HashMap<Object, Integer>, MultiValueMap<Object, Object>>();
      multiValueMap0.map = null;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<Object>>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Object>>, AbstractMap.SimpleEntry<String, Integer>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, MultiValueMap<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<String, Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put(hashMap1, multiValueMap0);
      MultiValueMap<HashMap<Object, Integer>, MultiValueMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<MultiValueMap<Object, Object>>>) hashMap0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("h0[QmD}");
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) constantFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("", "", biFunction0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("rF:");
      multiValueMap0.putAll("rF:", (Collection<String>) arrayList0);
      boolean boolean0 = multiValueMap0.putAll("rF:", (Collection<String>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, Object> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<Integer, Object>((Map<Integer, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      Collection<ArrayList<Object>> collection0 = multiValueMap2.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<Collection<Collection<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Integer>>>) hashMap0, factory0);
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(arrayList0);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0, (Factory<Collection<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll("", (Collection<String>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<String, String>>();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap1.putAll(arrayList0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, Object>();
      Integer integer0 = new Integer(0);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(0);
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      hashMap0.put((String) null, "");
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      int int0 = multiValueMap0.size((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      MultiValueMap<HashMap<Object, Integer>, MultiValueMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<MultiValueMap<Object, Object>>>) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(hashMap1);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(hashMap1, constantFactory0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap1, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      MultiValueMap<HashMap<Object, Integer>, MultiValueMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<MultiValueMap<Object, Object>>>) hashMap0);
      Integer integer0 = new Integer((-2706));
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Object>>();
      MultiValueMap<HashMap<Object, Integer>, MultiValueMap<Object, Object>> multiValueMap1 = new MultiValueMap<HashMap<Object, Integer>, MultiValueMap<Object, Object>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(hashMap0, multiValueMap0, biFunction0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.put("r7:", arrayList0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Object> multiValueMap2 = new MultiValueMap<String, Object>((Map<String, ? super LinkedList<Object>>) multiValueMap0, factory0);
      multiValueMap2.putAll((Map<? extends String, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, AbstractMap.SimpleEntry<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry>>>) multiValueMap0);
      multiValueMap0.putAll((Map<? extends String, ?>) multiValueMap1);
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, Object>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer(0);
      multiValueMap0.putIfAbsent(hashMap0, integer0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(hashMap0, arrayList0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, Integer>();
      boolean boolean0 = multiValueMap1.removeMapping("rF:", multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, LinkedList<ArrayList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<ArrayList>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap1, (Factory<Collection<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Integer integer0 = new Integer(1);
      multiValueMap0.putIfAbsent(integer0, "ByuD");
      Collection<Object> collection0 = multiValueMap0.values();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(collection0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.iterator((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Object>>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(multiValueMap0, "The factory must not be null");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      multiValueMap0.putIfAbsent(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap0, factory0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap1);
      multiValueMap2.clear();
      assertEquals(0, multiValueMap2.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Iterator<Map.Entry<String, String>> iterator0 = (Iterator<Map.Entry<String, String>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll("", (Collection<String>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
