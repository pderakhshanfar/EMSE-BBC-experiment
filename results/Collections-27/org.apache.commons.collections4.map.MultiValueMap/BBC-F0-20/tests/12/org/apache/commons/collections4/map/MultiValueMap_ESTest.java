/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:31:13 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.putAll((Map<? extends String, ?>) multiValueMap1);
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Object, Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Object, Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      multiValueMap0.putIfAbsent(linkedList0, hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<String, Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(linkedList0);
      Integer integer0 = new Integer(512);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<String>>>>) multiValueMap0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap2.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) "hO:\";c:*b-");
      hashMap0.put("hO:\";c:*b-", arrayList0);
      MultiValueMap<String, HashMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, constantFactory0, biFunction0);
      MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<String>>) multiValueMap1, (Factory<LinkedList<String>>) constantFactory0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<ArrayList<String>, Collection<String>> hashMap0 = new HashMap<ArrayList<String>, Collection<String>>();
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) null);
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) hashMap0, factory0);
      Collection<String> collection0 = multiValueMap0.createCollection(1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, ArrayList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Collection<String>>>>) multiValueMap0);
      Integer integer0 = new Integer((-3538));
      multiValueMap0.put(multiValueMap1, integer0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Object, Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(linkedList0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap0;
      linkedList0.add("");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Integer) null, (Collection<String>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.map = null;
      linkedList0.add("");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Integer) null, (Collection<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>((Map<Object, ? super LinkedList<Object>>) multiValueMap0, factory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.put((Object) null, arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<ArrayList<String>>>) hashMap0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("org.apache.commons.collections4.map.MultiValueMap$Values", "org.apache.commons.collections4.map.MultiValueMap$Values");
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleEntry1, "org.apache.commons.collections4.map.MultiValueMap$Values");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(abstractMap_SimpleEntry1, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super LinkedList<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ArrayList<ArrayList>>>) null, (Class<Collection<ArrayList<ArrayList>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Integer, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<Integer, ConstantFactory<Object>>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<MultiValueMap<Object, String>, String> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, String>, String>();
      multiValueMap0.map = (Map<MultiValueMap<Object, String>, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Collection<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<ArrayList<Object>, Collection<String>> hashMap0 = new HashMap<ArrayList<Object>, Collection<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      hashMap0.put(arrayList0, arrayList1);
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
      multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(512);
      MultiValueMap<ArrayList<Object>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      hashMap0.put(arrayList0, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer((-2021161078));
      Object object0 = multiValueMap0.put(integer0, integer0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("v</");
      boolean boolean0 = multiValueMap0.putAll((Integer) object0, (Collection<String>) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Object, Object>>();
      MultiValueMap<Integer, Object> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<Integer, Object>((Map<Integer, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Collection<Object> collection0 = multiValueMap0.getCollection("1}QPQ!<U4m,");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>();
      Iterator<AbstractMap.SimpleEntry<String, Object>> iterator0 = multiValueMap0.iterator((Object) "F6dODDDc~>vg'/qvR");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.put("1}QPQ!<U4m,", (Object) null);
      multiValueMap0.iterator((Object) "1}QPQ!<U4m,");
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(10);
      Collection<String> collection0 = multiValueMap0.createCollection(10);
      boolean boolean0 = multiValueMap0.putAll(integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer((-1173));
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<ConstantFactory<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ConstantFactory<String>, ArrayList<String>>();
      MultiValueMap<Collection<String>, Object> multiValueMap1 = new MultiValueMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.put(arrayList0, multiValueMap0);
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<String, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) multiValueMap1);
      LinkedList<LinkedList<Collection<String>>> linkedList0 = new LinkedList<LinkedList<Collection<String>>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap2.containsValue((Object) linkedList1, (Object) linkedList0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<LinkedList<String>, ArrayList<String>> multiValueMap1 = new MultiValueMap<LinkedList<String>, ArrayList<String>>();
      MultiValueMap<LinkedList<String>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<String>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) multiValueMap1, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(linkedList0, arrayList0);
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) multiValueMap0);
      LinkedList<LinkedList<Collection<String>>> linkedList1 = new LinkedList<LinkedList<Collection<String>>>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) linkedList2, (Object) linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Object, Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      hashMap0.put((ArrayList<Object>) null, "V?Wh&kh?XB+R");
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends Collection<String>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.put("1}QPQ!<U4m,", (Object) null);
      multiValueMap0.put("1}QPQ!<U4m,", "1}QPQ!<U4m,");
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.put(arrayList0, (Object) null);
      boolean boolean0 = multiValueMap1.containsValue((Object) null);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Integer, String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap1.put(arrayList0, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) hashMap0, (Factory<Collection<LinkedList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("<");
      Integer integer0 = new Integer((-2662));
      multiValueMap0.putAll(integer0, (Collection<String>) linkedList0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = arrayList0.addAll(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(527);
      multiValueMap0.put(integer0, integer0);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<MultiValueMap<Object, String>, String> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, String>, String>();
      Iterator<Map.Entry<MultiValueMap<Object, String>, String>> iterator0 = (Iterator<Map.Entry<MultiValueMap<Object, String>, String>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
