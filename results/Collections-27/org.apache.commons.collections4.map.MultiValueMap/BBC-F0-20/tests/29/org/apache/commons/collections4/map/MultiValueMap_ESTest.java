/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:40:59 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList1);
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0, factory0);
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object>();
      ArrayList<Collection<Object>> arrayList1 = new ArrayList<Collection<Object>>();
      multiValueMap0.put((AbstractMap.SimpleEntry<String, String>) null, arrayList1);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<String, String>>();
      Set<Map.Entry<LinkedList<Integer>, Object>> set0 = (Set<Map.Entry<LinkedList<Integer>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Collection<String> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, LinkedList<Collection>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Collection>>>) multiValueMap0);
      MultiValueMap<String, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Integer>>>) multiValueMap1);
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", function0);
      MultiValueMap<String, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap2);
      // Undeclared exception!
      try { 
        multiValueMap3.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.map = null;
      Factory<LinkedList<LinkedList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<LinkedList<Integer>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put(arrayList0, arrayList0);
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Integer>, Object>) multiValueMap1;
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList0, (Collection<Integer>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super Collection<Integer>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", factory0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry1);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap1);
      hashMap1.put("", integer0);
      Collection<Object> collection0 = multiValueMap2.values();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(abstractMap_SimpleImmutableEntry0, collection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<Object>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, biFunction0);
      ArrayList<LinkedList<Object>> arrayList1 = new ArrayList<LinkedList<Object>>();
      arrayList1.add((LinkedList<Object>) null);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<LinkedList<Object>>) arrayList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.shaded.org.mockito.codegen.BiFunction$MockitoMock$1492771427 cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Integer, String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<String, Integer>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<String>>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) multiValueMap0);
      Factory<Collection<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<LinkedList<Object>>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.createCollection((-1058));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, LinkedList<ArrayList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<ArrayList>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      MultiValueMap<Collection<Object>, Integer> multiValueMap2 = new MultiValueMap<Collection<Object>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<ArrayList<Object>, Integer> hashMap0 = new HashMap<ArrayList<Object>, Integer>();
      HashMap<ArrayList<Object>, Object> hashMap1 = new HashMap<ArrayList<Object>, Object>(hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap1.put(arrayList0, (Object) null);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0, factory0);
      MultiValueMap<HashMap<String, String>, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = new MultiValueMap<HashMap<String, String>, AbstractMap.SimpleEntry<String, Object>>();
      Integer integer0 = new Integer(0);
      hashMap0.put(arrayList0, integer0);
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap1 = new MultiValueMap<Collection<String>, Collection<Integer>>();
      Collection<Collection<Integer>> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<LinkedList<String>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      multiValueMap0.putAll(linkedList0, (Collection<Integer>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<Integer>) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.putAll((Collection<Object>) null, (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
      int int0 = multiValueMap0.size((Object) "PrototypeCloneFactory: The clone method must exist and be public ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, linkedList0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put(hashMap1, hashMap1);
      Factory<ArrayList<LinkedList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Object, String>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super ArrayList<LinkedList<Integer>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends HashMap<Object, String>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object>();
      multiValueMap0.put((AbstractMap.SimpleEntry<String, String>) null, (Object) null);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Collection<Object>, Collection<Object>>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Collection<Object>, Collection<Object>>>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) null, (Object) arrayList0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      hashMap0.computeIfAbsent(arrayList0, unaryOperator0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) unaryOperator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object>();
      multiValueMap0.put((AbstractMap.SimpleEntry<String, String>) null, (Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object>();
      multiValueMap0.put((AbstractMap.SimpleEntry<String, String>) null, (Object) null);
      multiValueMap0.put((AbstractMap.SimpleEntry<String, String>) null, (Object) null);
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object>();
      multiValueMap0.put((AbstractMap.SimpleEntry<String, String>) null, (Object) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, hashMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      AbstractMap.SimpleEntry<String, Collection<Object>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Collection<Object>>("org.apache.commons.collections4.iterators.IteratorChain", linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      multiValueMap0.put("org.apache.commons.collections4.iterators.IteratorChain", "org.apache.commons.collections4.iterators.IteratorChain");
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = hashMap0.computeIfAbsent(arrayList0, unaryOperator0);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<String, Integer>>>) hashMap0);
      Iterator<AbstractMap.SimpleEntry<String, Integer>> iterator0 = multiValueMap0.iterator(object0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<ExceptionFactory<Object>, MultiValueMap<Object, String>> multiValueMap1 = new MultiValueMap<ExceptionFactory<Object>, MultiValueMap<Object, String>>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((String) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<String>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, Integer>();
      Iterator<Map.Entry<HashMap<Object, Object>, Integer>> iterator0 = (Iterator<Map.Entry<HashMap<Object, Object>, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Collection<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<String>>();
      Factory<ArrayList<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super ArrayList<ArrayList<Integer>>>) multiValueMap0, factory0);
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<Object>>>) multiValueMap1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<LinkedList<Object>> arrayList1 = new ArrayList<LinkedList<Object>>();
      arrayList1.add((LinkedList<Object>) null);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Collection<String>) arrayList0, (Collection<LinkedList<Object>>) arrayList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }
}
