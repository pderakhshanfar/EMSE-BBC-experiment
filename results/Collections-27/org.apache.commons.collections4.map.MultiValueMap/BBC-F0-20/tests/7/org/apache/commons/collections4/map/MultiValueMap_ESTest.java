/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:30:17 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      Factory<LinkedList<Collection<Integer>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      MultiValueMap<Collection<Integer>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<Collection<Integer>>>) hashMap0, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent(arrayList0, factory0);
      LinkedList<Collection<Integer>> linkedList1 = new LinkedList<Collection<Integer>>(linkedList0);
      boolean boolean0 = multiValueMap0.putAll((Collection<Integer>) arrayList0, (Collection<Collection<Integer>>) linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<Object>, MultiValueMap<Object, Object>> multiValueMap1 = new MultiValueMap<LinkedList<Object>, MultiValueMap<Object, Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(linkedList0, linkedList0, biFunction0);
      multiValueMap1.put(linkedList0, multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(2800);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(arrayList0, unaryOperator0);
      assertEquals(1, multiValueMap0.size());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList1, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap0);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      Collection<LinkedList<Integer>> collection0 = multiValueMap0.createCollection(1132);
      MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>>();
      multiValueMap1.put("</v=vO", collection0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Integer>>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap1.put(arrayList0, (Object) null);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("coll mustnot be null.");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      multiValueMap0.putAll((Object) hashMap0, (Collection<String>) arrayList0);
      Factory<LinkedList<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<Integer>>>) multiValueMap0, factory0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap1);
      MultiValueMap<Integer, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap2);
      multiValueMap1.getCollection(multiValueMap3);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) hashMap0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      hashMap0.put(multiValueMap0, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-748));
      hashMap0.put((Object) null, integer0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(3723);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put("", integer0);
      LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<String>>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<String>>>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<String>>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<String>>>>) hashMap0, factory0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Object>>>) multiValueMap1);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        multiValueMap2.size((Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<String, AbstractMap.SimpleEntry<HashMap, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<HashMap, String>>>) multiValueMap0);
      Factory<LinkedList<Collection<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Collection<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<Integer>>>) multiValueMap1, factory0);
      MultiValueMap<Collection<Object>, String> multiValueMap3 = new MultiValueMap<Collection<Object>, String>();
      MultiValueMap<Collection<Object>, Integer> multiValueMap4 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) multiValueMap3);
      multiValueMap3.map = (Map<Collection<Object>, Object>) multiValueMap4;
      // Undeclared exception!
      try { 
        multiValueMap3.removeMapping("", multiValueMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, multiValueMap1);
      Integer integer0 = new Integer((-1));
      multiValueMap1.putIfAbsent(integer0, object0);
      arrayList0.add("");
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Object) multiValueMap0, (Collection<String>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ConstantFactory<ArrayList<Object>> constantFactory0 = new ConstantFactory<ArrayList<Object>>(arrayList0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>((Map<ArrayList<Object>, ? super ArrayList<Object>>) hashMap0, (Factory<ArrayList<Object>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Factory<Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>> factory0 = ConstantFactory.constantFactory((Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>) null);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<ArrayList<String>, String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Object, Object>>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(355);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap1 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, String>>();
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<String>>>) multiValueMap1);
      multiValueMap2.put(arrayList0, multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap1, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap0);
      Object object0 = hashMap0.put((Object) null, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, multiValueMap0);
      MultiValueMap<Collection<Object>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ArrayList<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super Collection<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Factory<LinkedList<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<Integer>>>) multiValueMap0, factory0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      MultiValueMap<Integer, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap2);
      Collection<ArrayList<Integer>> collection0 = multiValueMap1.getCollection(multiValueMap3);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      Iterator<String> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      boolean boolean0 = multiValueMap0.putAll((Object) arrayList0, (Collection<String>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      int int0 = multiValueMap0.size((Object) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      LinkedList<ConstantFactory<Object>> linkedList0 = new LinkedList<ConstantFactory<Object>>();
      ConstantFactory<LinkedList<ConstantFactory<Object>>> constantFactory0 = new ConstantFactory<LinkedList<ConstantFactory<Object>>>(linkedList0);
      MultiValueMap<ArrayList<Object>, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<ConstantFactory<Object>>>) multiValueMap0, (Factory<LinkedList<ConstantFactory<Object>>>) constantFactory0);
      int int0 = multiValueMap1.size((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Object>>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap2.containsValue(object0, (Object) multiValueMap1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<String>>();
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(1653);
      MultiValueMap<ConstantFactory<Object>, Object> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, Object>();
      HashMap<ConstantFactory<Object>, Integer> hashMap0 = new HashMap<ConstantFactory<Object>, Integer>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(hashMap1);
      hashMap0.put(constantFactory0, integer0);
      multiValueMap0.putAll((Map<? extends ConstantFactory<Object>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      multiValueMap1.put((ArrayList<Object>) null, "org.apache.commons.collections4.map.MultiValueMap$1$1");
      MultiValueMap<ArrayList<Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap1);
      multiValueMap2.putAll((Map<? extends ArrayList<Object>, ?>) multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      Collection<Object> collection0 = multiValueMap0.createCollection((-2));
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) collection0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(arrayList0, unaryOperator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, ":(<V&E=u=");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      boolean boolean0 = multiValueMap0.removeMapping("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>();
      multiValueMap1.putAll((Map<? extends AbstractMap.SimpleImmutableEntry<Object, Object>, ?>) multiValueMap0);
      assertEquals(0, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<String>>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<String>>>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<String>>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleImmutableEntry<ArrayList<String>, ArrayList<String>>>>) hashMap0, factory0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap1.clear();
      assertEquals(0, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Object>>) hashMap0);
      Iterator<Map.Entry<LinkedList<Integer>, Object>> iterator0 = (Iterator<Map.Entry<LinkedList<Integer>, Object>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
