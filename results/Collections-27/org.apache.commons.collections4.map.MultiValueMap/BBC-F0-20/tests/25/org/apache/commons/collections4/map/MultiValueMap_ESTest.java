/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:40:48 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Object>, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Object>, Object>, LinkedList<Object>>();
      MultiValueMap<Collection<String>, String> multiValueMap1 = new MultiValueMap<Collection<String>, String>();
      multiValueMap1.put((Collection<String>) null, multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Object, String>, HashMap<String, Integer>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, HashMap<String, Integer>>();
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      multiValueMap0.putIfAbsent((HashMap<Object, String>) null, factory0);
      Factory<Collection<LinkedList<String>>> factory1 = ConstantFactory.constantFactory((Collection<LinkedList<String>>) linkedList0);
      MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<LinkedList<String>>>) multiValueMap0, factory1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, (Object) null);
      multiValueMap0.getCollection(linkedList0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Collection<Object> collection0 = multiValueMap0.createCollection(2);
      assertFalse(collection0.contains(2));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(multiValueMap0, multiValueMap0, biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, LinkedList<Object>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Function<Object, Object> function0 = Function.identity();
      Object object0 = multiValueMap0.computeIfAbsent(hashMap0, function0);
      Collection<Object> collection0 = multiValueMap0.values();
      HashMap<Collection<Object>, Object> hashMap1 = new HashMap<Collection<Object>, Object>();
      hashMap1.put(collection0, object0);
      MultiValueMap<Collection<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) hashMap1);
      MultiValueMap<Collection<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<String>>>) hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge((Integer) null, hashMap0, biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<HashMap<Integer, ArrayList<String>>, Object> hashMap0 = new HashMap<HashMap<Integer, ArrayList<String>>, Object>();
      HashMap<Integer, ArrayList<String>> hashMap1 = new HashMap<Integer, ArrayList<String>>();
      hashMap0.put(hashMap1, "K_=d4k/5sMc)k");
      MultiValueMap<HashMap<Integer, ArrayList<String>>, MultiValueMap<Integer, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Integer, ArrayList<String>>, ? super Collection<MultiValueMap<Integer, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends HashMap<Integer, ArrayList<String>>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, Object>>();
      ArrayList<HashMap<String, Object>> arrayList0 = new ArrayList<HashMap<String, Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("2C>/u)mr", arrayList0);
      arrayList0.add(hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) arrayList0, (Collection<HashMap<String, Object>>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<HashMap<Integer, String>, HashMap<Collection<Object>, String>> multiValueMap0 = new MultiValueMap<HashMap<Integer, String>, HashMap<Collection<Object>, String>>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ConstantFactory.constantFactory((LinkedList<ArrayList<String>>) null);
      MultiValueMap<HashMap<Integer, String>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      linkedList0.add((ArrayList<String>) null);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(hashMap0, (Collection<ArrayList<String>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Object, Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<Object>>) hashMap0, factory0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(hashMap1, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<HashMap, LinkedList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<HashMap, LinkedList>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap1;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      HashMap<LinkedList<String>, Integer> hashMap0 = new HashMap<LinkedList<String>, Integer>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge((LinkedList<String>) null, hashMap0, biFunction0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>((LinkedList<String>) null);
      MultiValueMap<Integer, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) multiValueMap1, (Factory<LinkedList<String>>) constantFactory0);
      Integer integer0 = new Integer((-3603));
      // Undeclared exception!
      try { 
        multiValueMap2.put(integer0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, String>>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, "68JWSJ?#V#/.");
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<HashMap, LinkedList>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>();
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(multiValueMap0, linkedList0);
      HashMap<Integer, Collection<Object>> hashMap1 = new HashMap<Integer, Collection<Object>>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      multiValueMap0.map = (Map<String, Object>) hashMap0;
      hashMap0.put("}Ob", "}Ob");
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) "}Ob");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<MultiValueMap<String, Collection<Object>>, ArrayList<String>> multiValueMap0 = new MultiValueMap<MultiValueMap<String, Collection<Object>>, ArrayList<String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<MultiValueMap<String, Collection<Object>>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<MultiValueMap<String, Collection<Object>>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      multiValueMap0.map = (Map<MultiValueMap<String, Collection<Object>>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<EmptyIterator<Object>, Collection<Object>> hashMap0 = new HashMap<EmptyIterator<Object>, Collection<Object>>();
      MultiValueMap<EmptyIterator<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<EmptyIterator<Object>, ? super Collection<Object>>) hashMap0);
      EmptyIterator<Object> emptyIterator0 = (EmptyIterator<Object>) mock(EmptyIterator.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) hashMap0);
      hashMap0.put(emptyIterator0, linkedList0);
      LinkedList<Collection<Object>> linkedList1 = new LinkedList<Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0, (Object) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      multiValueMap0.map = null;
      MultiValueMap<Object, MultiValueMap<Integer, Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<Integer, Collection<Object>>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(512);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      Object object0 = hashMap0.compute((String) null, biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<HashMap<Integer, String>, HashMap<Collection<Object>, String>> multiValueMap0 = new MultiValueMap<HashMap<Integer, String>, HashMap<Collection<Object>, String>>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<HashMap<Integer, String>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      linkedList0.add((ArrayList<String>) null);
      multiValueMap1.putAll(hashMap0, (Collection<ArrayList<String>>) linkedList0);
      boolean boolean0 = multiValueMap1.putAll(hashMap0, (Collection<ArrayList<String>>) linkedList0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>>();
      Integer integer0 = new Integer(30);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = multiValueMap0.computeIfAbsent(integer0, unaryOperator0);
      multiValueMap0.replace((Integer) object0, (Object) "");
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Integer>>>) hashMap0);
      Collection<AbstractMap.SimpleEntry<Object, Integer>> collection0 = multiValueMap0.getCollection(hashMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ConstantFactory<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, ArrayList<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<ArrayList<String>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.put("", "org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter");
      multiValueMap0.iterator((Object) "");
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<AbstractMap.SimpleEntry<Object, Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ArrayList<Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      MultiValueMap<HashMap<Integer, Integer>, Collection<String>> multiValueMap1 = new MultiValueMap<HashMap<Integer, Integer>, Collection<String>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(hashMap0, hashMap0, biFunction0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) arrayList0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) "", (Object) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, String>, AbstractMap.SimpleEntry<Integer, Object>>();
      MultiValueMap<HashMap<Integer, Integer>, Collection<String>> multiValueMap1 = new MultiValueMap<HashMap<Integer, Integer>, Collection<String>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap1.merge(hashMap0, multiValueMap0, biFunction0);
      boolean boolean0 = multiValueMap1.containsValue(object0, (Object) hashMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      HashMap<LinkedList<String>, Integer> hashMap0 = new HashMap<LinkedList<String>, Integer>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge((LinkedList<String>) null, hashMap0, biFunction0);
      multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      Integer integer0 = new Integer(1240);
      HashMap<LinkedList<String>, Integer> hashMap0 = new HashMap<LinkedList<String>, Integer>();
      hashMap0.put((LinkedList<String>) null, integer0);
      multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) hashMap0);
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends LinkedList<String>, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge((LinkedList<String>) null, "", biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      HashMap<LinkedList<String>, Integer> hashMap0 = new HashMap<LinkedList<String>, Integer>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge((LinkedList<String>) null, hashMap0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(arrayList0);
      linkedList0.add(arrayList0);
      MultiValueMap<HashMap<Integer, String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<Integer, String>, ArrayList<String>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      multiValueMap0.putAll(hashMap0, (Collection<ArrayList<String>>) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(hashMap0, linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<HashMap<Integer, String>, HashMap<Collection<Object>, String>> multiValueMap0 = new MultiValueMap<HashMap<Integer, String>, HashMap<Collection<Object>, String>>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<HashMap<Integer, String>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      linkedList0.add((ArrayList<String>) null);
      multiValueMap1.putAll(hashMap0, (Collection<ArrayList<String>>) linkedList0);
      boolean boolean0 = multiValueMap1.removeMapping(hashMap0, hashMap0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<HashMap<Integer, String>, HashMap<Collection<Object>, String>> multiValueMap0 = new MultiValueMap<HashMap<Integer, String>, HashMap<Collection<Object>, String>>();
      Integer integer0 = new Integer((-2554));
      boolean boolean0 = multiValueMap0.removeMapping(integer0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(arrayList0);
      MultiValueMap<HashMap<Integer, String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<Integer, String>, ArrayList<String>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      multiValueMap0.putAll(hashMap0, (Collection<ArrayList<String>>) linkedList0);
      assertEquals(1, linkedList0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(hashMap0, linkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<LinkedList<Integer>>>) multiValueMap0, (Factory<LinkedList<LinkedList<Integer>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      Integer integer0 = new Integer(1240);
      HashMap<LinkedList<String>, Integer> hashMap0 = new HashMap<LinkedList<String>, Integer>();
      hashMap0.put((LinkedList<String>) null, integer0);
      multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) hashMap0);
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(collection0, linkedList0);
      MultiValueMap<Collection<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) hashMap0);
      MultiValueMap<Collection<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) multiValueMap1);
      int int0 = multiValueMap2.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Object, HashMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<Object, String>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((Object) arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<ConstantFactory<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, ArrayList<String>>();
      Set<Map.Entry<ConstantFactory<Object>, Object>> set0 = (Set<Map.Entry<ConstantFactory<Object>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<HashMap<String, Object>> arrayList0 = new ArrayList<HashMap<String, Object>>();
      arrayList0.add(hashMap0);
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = new MultiValueMap<Object, ArrayList<String>>();
      Factory<LinkedList<HashMap<String, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<HashMap<String, Object>>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Object) multiValueMap0, (Collection<HashMap<String, Object>>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Integer>>();
      Iterator<Map.Entry<Collection<Object>, LinkedList<Integer>>> iterator0 = (Iterator<Map.Entry<Collection<Object>, LinkedList<Integer>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<ArrayList<Object>> arrayList1 = new ArrayList<ArrayList<Object>>();
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      hashMap0.put(arrayList0, multiValueMap0);
      arrayList1.add(arrayList2);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<ArrayList<Object>>) arrayList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }
}
