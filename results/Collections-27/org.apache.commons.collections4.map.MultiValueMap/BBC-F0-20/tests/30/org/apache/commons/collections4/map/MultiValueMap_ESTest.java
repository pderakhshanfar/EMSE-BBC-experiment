/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:41:05 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>(0);
      MultiValueMap<ArrayList<Object>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap1.computeIfAbsent(linkedList0, unaryOperator0);
      multiValueMap0.getCollection(linkedList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, ArrayList<Object>>();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Object>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.createCollection(3316);
      assertFalse(collection0.contains(3316));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap1);
      hashMap1.put((String) null, hashMap0);
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>();
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap1.put(multiValueMap0, (Integer) null);
      multiValueMap0.put(hashMap0, hashMap1);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<Object>>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.size((Object) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(arrayList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      Integer integer0 = new Integer((-2671));
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      hashMap0.put(integer0, arrayList1);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap1);
      MultiValueMap<String, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap1);
      MultiValueMap<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, ArrayList<Object>>> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, ArrayList<Object>>>>) multiValueMap2);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap1.put((String) null, hashMap0);
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, Object> multiValueMap4 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) multiValueMap1, factory0);
      ConstantFactory<Object> constantFactory1 = new ConstantFactory<Object>(hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap4.removeMapping(multiValueMap3, constantFactory1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<Object>, HashMap<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<HashMap<String, Object>>>) hashMap0);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.put("h.>#vt8Qs3=6Cf'vq;", "h.>#vt8Qs3=6Cf'vq;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Factory<Collection<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<LinkedList<Integer>>>) hashMap0, (Factory<LinkedList<LinkedList<Integer>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Integer>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = new MultiValueMap<ArrayList<Object>, String>((Map<ArrayList<Object>, ? super LinkedList<String>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Object, Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<LinkedList<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection((-1333));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      hashMap0.put((Collection<Object>) null, (Object) null);
      MultiValueMap<Collection<Object>, HashMap<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<HashMap<String, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      hashMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<Collection<Object>, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<HashMap<String, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>((Map<ArrayList<Integer>, ? super LinkedList<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      ConstantFactory<LinkedList<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<Integer>>>(linkedList0);
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<LinkedList<Integer>>>) hashMap0, (Factory<LinkedList<LinkedList<Integer>>>) constantFactory0);
      Collection<LinkedList<Integer>> collection0 = multiValueMap0.getCollection(constantFactory0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, Object>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Iterator<HashMap<String, Object>> iterator0 = multiValueMap0.iterator((Object) hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, Object>();
      multiValueMap1.putAll(linkedList0, (Collection<Object>) arrayList0);
      boolean boolean0 = multiValueMap1.putAll(linkedList0, (Collection<Object>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, Object>>();
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<AbstractMap.SimpleEntry<Object, Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, ArrayList<Object>>();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Object>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, ArrayList<Object>>();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Object>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      int int0 = multiValueMap1.size(object0);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap1.computeIfAbsent(linkedList0, unaryOperator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0, (Object) linkedList0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) null, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.computeIfAbsent(linkedList0, unaryOperator0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) linkedList1);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", "");
      multiValueMap1.putAll((Map<? extends String, ?>) hashMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.computeIfAbsent(linkedList0, unaryOperator0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Object>>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, HashMap<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<HashMap<String, Object>>>) hashMap0);
      multiValueMap0.put(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<Object>, HashMap<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<HashMap<String, Object>>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, HashMap<Object, Object>>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      boolean boolean0 = multiValueMap0.removeMapping(hashMap1, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<LinkedList<Object>, String> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<LinkedList<Object>, String>((Map<LinkedList<Object>, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap1 = new MultiValueMap<Object, HashMap<String, Object>>();
      multiValueMap1.putIfAbsent(multiValueMap0, arrayList0);
      multiValueMap1.iterator((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, Integer>();
      MultiValueMap<HashMap<String, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Object>>) multiValueMap0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, MultiValueMap<Object, Object>> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, MultiValueMap<Object, Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<LinkedList<String>>>) multiValueMap2);
      Collection<Object> collection0 = multiValueMap3.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll(hashMap0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Object, Integer>>();
      Iterator<Map.Entry<Integer, HashMap<Object, Integer>>> iterator0 = (Iterator<Map.Entry<Integer, HashMap<Object, Integer>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, ConstantFactory<Collection<Object>>> multiValueMap0 = new MultiValueMap<Integer, ConstantFactory<Collection<Object>>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(multiValueMap0);
      Factory<Collection<HashMap<String, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, HashMap<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<String, Integer>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put((Integer) null, factory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }
}
