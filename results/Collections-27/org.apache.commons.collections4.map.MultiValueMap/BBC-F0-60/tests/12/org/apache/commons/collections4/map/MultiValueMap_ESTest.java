/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:32:16 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Collection<Collection>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Collection>>>) multiValueMap0);
      MultiValueMap<ArrayList<Object>, HashMap<String, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<HashMap<String, String>>>) multiValueMap1);
      Set<Map.Entry<ArrayList<Object>, Object>> set0 = (Set<Map.Entry<ArrayList<Object>, Object>>)multiValueMap2.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Collection<Object> collection0 = multiValueMap0.createCollection(2);
      assertFalse(collection0.contains(2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<String>>>) multiValueMap0, factory0);
      MultiValueMap<String, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.put("H#=??8q(7e2", "H#=??8q(7e2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(27);
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>((Collection<String>) null);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0, (Factory<Collection<String>>) constantFactory0);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(integer0, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Integer>>) null, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0, (Factory<Collection<ArrayList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Object>, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<String>>>) multiValueMap0);
      Integer integer0 = new Integer(778);
      multiValueMap1.put(integer0, multiValueMap0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap2 = new MultiValueMap<ArrayList<Object>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super Collection<String>>) hashMap0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "ExceptionFactory invoked");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, multiValueMap1);
      MultiValueMap<Integer, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap2);
      // Undeclared exception!
      try { 
        multiValueMap3.containsValue((Object) hashMap0, (Object) "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      hashMap0.put("_8", "_8");
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<String>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<ArrayList<Collection<Object>>, Object> hashMap0 = new HashMap<ArrayList<Collection<Object>>, Object>();
      MultiValueMap<ArrayList<Collection<Object>>, ArrayList<Collection<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Object>>, ? super Collection<ArrayList<Collection<Object>>>>) hashMap0);
      MultiValueMap<ArrayList<Collection<Object>>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Object>>, ? super Collection<AbstractMap.SimpleImmutableEntry<Integer, Integer>>>) multiValueMap0);
      Collection<AbstractMap.SimpleImmutableEntry<Integer, Integer>> collection0 = multiValueMap1.getCollection("org.apache.commons.collections4.collection.AbstractCollectionDecorator");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      Iterator<String> iterator0 = multiValueMap0.iterator((Object) multiValueMap1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.put(arrayList0, (Object) null);
      linkedList0.add((Integer) null);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Integer>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, LinkedList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Integer>, ? super Collection<String>>) multiValueMap0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("q1`SA(@D^]12B/Eu", (Integer) null);
      boolean boolean0 = multiValueMap1.putAll(abstractMap_SimpleEntry0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      multiValueMap1.put("org.apache.commons.collections4.collection.AbstractCollectionDecorator", multiValueMap0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      int int0 = multiValueMap2.size((Object) "org.apache.commons.collections4.collection.AbstractCollectionDecorator");
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) multiValueMap0);
      MultiValueMap<String, String> multiValueMap2 = new MultiValueMap<String, String>();
      multiValueMap2.put("xN:#u-hAy\"*<X", multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) "xN:#u-hAy\"*<X", (Object) null);
      assertEquals(1, multiValueMap2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      Object object0 = multiValueMap1.put("xN:#u-hAy\"*<X", multiValueMap0);
      MultiValueMap<String, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) "xN:#u-hAy\"*<X", object0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(10);
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put(integer0, "nA");
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent("InstantiateFactory: InstantiationException", function0);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap2 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Object>>();
      multiValueMap2.putAll((Map<? extends String, ?>) multiValueMap1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      Object object0 = multiValueMap1.put("xN:#u-hAy\"*<X", multiValueMap0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue(object0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      multiValueMap1.put("org.apache.commons.collections4.collection.AbstractCollectionDecorator", multiValueMap0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) null);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Unsupported object type: ");
      multiValueMap0.putAll((Integer) null, (Collection<String>) linkedList0);
      multiValueMap0.put((Integer) null, "y/-U\"BrFb@Jj(p^v");
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, "y/-U\"BrFb@Jj(p^v");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      multiValueMap0.put((Integer) null, "y/-U\"BrFb@Jj(p^v");
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, "y/-U\"BrFb@Jj(p^v");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      MultiValueMap<Integer, String> multiValueMap2 = new MultiValueMap<Integer, String>();
      boolean boolean0 = multiValueMap2.removeMapping("xN:#u-hAy\"*<X", multiValueMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      ArrayList<LinkedList<Integer>> arrayList0 = new ArrayList<LinkedList<Integer>>();
      ConstantFactory<ArrayList<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<ArrayList<LinkedList<Integer>>>(arrayList0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.putIfAbsent(linkedList0, constantFactory0);
      MultiValueMap<LinkedList<Integer>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super ArrayList<LinkedList<Integer>>>) multiValueMap0, (Factory<ArrayList<LinkedList<Integer>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.ConstantFactory
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(0);
      Object object0 = multiValueMap0.put(integer0, integer0);
      multiValueMap0.iterator(object0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(2482);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll(integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Unsupported object type: ");
      multiValueMap0.putAll((Integer) null, (Collection<String>) linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, "y/-U\"BrFb@Jj(p^v");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<String>>();
      int int0 = multiValueMap0.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.clear();
      assertEquals(0, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      Iterator<Map.Entry<Object, Object>> iterator0 = (Iterator<Map.Entry<Object, Object>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<String>>();
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
