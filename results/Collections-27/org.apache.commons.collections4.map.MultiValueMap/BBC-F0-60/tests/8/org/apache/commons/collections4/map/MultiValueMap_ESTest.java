/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:31:24 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = new MultiValueMap<LinkedList<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = multiValueMap1.putIfAbsent(linkedList0, multiValueMap0);
      multiValueMap1.put(linkedList0, object0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<String>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<String>>();
      MultiValueMap<Collection<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<String>>) multiValueMap0);
      Set<Map.Entry<Collection<String>, Object>> set0 = (Set<Map.Entry<Collection<String>, Object>>)multiValueMap1.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super LinkedList<Object>>) hashMap0, factory0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      multiValueMap0.putIfAbsent(hashMap1, (Object) null);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      hashMap0.put((Collection<Object>) null, (Object) null);
      MultiValueMap<Collection<Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Collection<String>>>) hashMap0);
      ConstantFactory<LinkedList<Collection<String>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<String>>>((LinkedList<Collection<String>>) null);
      MultiValueMap<Collection<Object>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Collection<String>>>) multiValueMap0, (Factory<LinkedList<Collection<String>>>) constantFactory0);
      assertTrue(multiValueMap1.equals((Object)multiValueMap0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, HashMap<String, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, HashMap<String, Integer>>();
      multiValueMap0.map = null;
      MultiValueMap<LinkedList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<Collection<Object>, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<AbstractMap.SimpleEntry<Collection<Object>, Object>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(multiValueMap0);
      multiValueMap0.putAll(arrayList0, (Collection<Object>) linkedList0);
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = new MultiValueMap<Collection<Object>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(arrayList0);
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(arrayList0, (Collection<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, HashMap<Collection<Object>, AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Collection<Object>, AbstractMap.SimpleImmutableEntry>>>) hashMap0);
      MultiValueMap<LinkedList<Object>, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<Integer>>>) multiValueMap1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, multiValueMap1);
      Object object0 = multiValueMap2.get(linkedList0);
      arrayList0.add(object0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<Object>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<Collection<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.put("2FiE).cgo\"}p#HLb,x", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<Object>>) null, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<HashMap<Integer, Integer>, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Collection<String>>>) hashMap0);
      hashMap0.put(arrayList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, hashMap0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>();
      MultiValueMap<Integer, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap1);
      MultiValueMap<Integer, HashMap<Object, Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Object, Object>>>) multiValueMap2);
      // Undeclared exception!
      try { 
        multiValueMap3.containsValue((Object) multiValueMap0, (Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      hashMap0.put((Collection<Object>) null, (Object) null);
      MultiValueMap<Collection<Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Collection<String>>>) hashMap0);
      hashMap0.put(arrayList0, "org.apache.commons.collections4.map.MultiValueMap");
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Collection<Object>>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Collection<Object>>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(0);
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, ArrayList<Object>>();
      Collection<ArrayList<Object>> collection1 = multiValueMap1.getCollection(collection0);
      assertNull(collection1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<Integer> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Collection<String>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = new MultiValueMap<Object, Collection<Object>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap1.putIfAbsent(hashMap0, arrayList0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, String>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1863);
      hashMap0.put("", integer0);
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = new MultiValueMap<LinkedList<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap1.putIfAbsent(linkedList0, multiValueMap0);
      multiValueMap1.putAll((Map<? extends LinkedList<Object>, ?>) multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Collection<String>>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      boolean boolean0 = multiValueMap0.removeMapping("ExceptionFactory invoked", multiValueMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<String>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap0, (Factory<LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, hashMap0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
      multiValueMap1.iterator((Object) arrayList0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      boolean boolean0 = multiValueMap1.putAll((Object) hashMap0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      Iterator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>> iterator0 = (Iterator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
