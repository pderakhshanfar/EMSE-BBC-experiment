/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:33:42 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, Integer>();
      Set<Map.Entry<HashMap<Object, Object>, Object>> set0 = (Set<Map.Entry<HashMap<Object, Object>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, String>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(3);
      Integer integer0 = new Integer(3);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer0, collection0, biFunction0);
      int int0 = multiValueMap0.size((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<HashMap<Integer, String>, String> multiValueMap0 = new MultiValueMap<HashMap<Integer, String>, String>();
      MultiValueMap<HashMap<Integer, String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super Collection<Integer>>) multiValueMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      multiValueMap0.putAll(hashMap1, (Collection<String>) arrayList0);
      multiValueMap1.getCollection(hashMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<Collection<AbstractMap.SimpleImmutableEntry<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      hashMap0.put(factory0, factory0);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.ExceptionFactory
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<ArrayList<String>, HashMap<Object, Collection<Object>>> multiValueMap0 = new MultiValueMap<ArrayList<String>, HashMap<Object, Collection<Object>>>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<ArrayList<Integer>, Collection<Object>> hashMap0 = new HashMap<ArrayList<Integer>, Collection<Object>>();
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<ArrayList, HashMap>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<AbstractMap.SimpleImmutableEntry<ArrayList, HashMap>>>) multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.putIfAbsent(linkedList0, multiValueMap1);
      MultiValueMap<LinkedList<Integer>, ArrayList<Integer>> multiValueMap2 = new MultiValueMap<LinkedList<Integer>, ArrayList<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap2.removeMapping(multiValueMap0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Collection<Object>> linkedList1 = new LinkedList<Collection<Object>>();
      linkedList0.add((Object) linkedList1);
      linkedList1.push(linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<Object>) linkedList0, (Collection<Collection<Object>>) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      ArrayList<ArrayList<Object>> arrayList1 = new ArrayList<ArrayList<Object>>();
      arrayList1.add(arrayList0);
      HashMap<AbstractMap.SimpleEntry<Integer, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Integer>, Object>();
      ConstantFactory<LinkedList<ArrayList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Object>>>((LinkedList<ArrayList<Object>>) null);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Integer>, ? super LinkedList<ArrayList<Object>>>) hashMap0, (Factory<LinkedList<ArrayList<Object>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(abstractMap_SimpleEntry0, (Collection<ArrayList<Object>>) arrayList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<ArrayList<String>>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<ArrayList<String>>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1, factory0);
      Integer integer0 = new Integer(1068);
      // Undeclared exception!
      try { 
        multiValueMap2.put(integer0, multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) null, (Factory<Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Integer>, ? super Collection<Collection<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<LinkedList<LinkedList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<Integer>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection((-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      hashMap0.put((Object) null, constantFactory0);
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("/o#{wa+", "/o#{wa+");
      MultiValueMap<String, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "/o#{wa+");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>>) multiValueMap0);
      Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<ArrayList<String>>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<ArrayList<String>>>();
      MultiValueMap<LinkedList<String>, Integer> multiValueMap1 = new MultiValueMap<LinkedList<String>, Integer>();
      Iterator<Integer> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ConstantFactory<Collection<Object>>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ConstantFactory<Collection<Object>>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<ConstantFactory<Collection<Object>>> linkedList0 = new LinkedList<ConstantFactory<Collection<Object>>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList1);
      linkedList0.add(constantFactory0);
      multiValueMap0.putAll(arrayList0, (Collection<ConstantFactory<Collection<Object>>>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<ConstantFactory<Collection<Object>>>) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) hashMap0);
      Set<Object> set0 = multiValueMap1.keySet();
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<Object>) set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, ArrayList<Object>>();
      Integer integer0 = new Integer(647);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleEntry0, (Collection<ArrayList<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
      HashMap<ArrayList<Integer>, Collection<Object>> hashMap0 = new HashMap<ArrayList<Integer>, Collection<Object>>();
      Object object0 = multiValueMap0.getOrDefault(hashMap0, hashMap0);
      int int0 = multiValueMap0.size(object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      Integer integer0 = new Integer(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put((Object) null, arrayList0);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null, (Object) constantFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Collection<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Collection<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, "");
      MultiValueMap<LinkedList<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ArrayList<String>>();
      multiValueMap0.putAll((Map<? extends LinkedList<Integer>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute((ArrayList<Integer>) null, biFunction0);
      MultiValueMap<ArrayList<Integer>, LinkedList<AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<LinkedList<AbstractMap.SimpleImmutableEntry>>>) multiValueMap0);
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap1);
      MultiValueMap<Object, Object> multiValueMap3 = new MultiValueMap<Object, Object>();
      multiValueMap3.putAll((Map<?, ?>) multiValueMap2);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(multiValueMap3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Collection<Object>, MultiValueMap<Collection<Object>, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, MultiValueMap<Collection<Object>, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      hashMap0.put(collection0, collection0);
      MultiValueMap<Collection<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.put(collection0, "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<ArrayList<String>>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<ArrayList<String>>>();
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Collection<String>, ArrayList<Object>>();
      multiValueMap1.put((Collection<String>) null, multiValueMap0);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>(linkedList0);
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(arrayList0, function0);
      Integer integer0 = new Integer(2147483645);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, Integer>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap1.computeIfAbsent(multiValueMap0, function0);
      assertEquals(1, multiValueMap1.size());
      
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Object> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<Object, Object>((Map<Object, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Integer, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<String>>>) multiValueMap0);
      Integer integer0 = new Integer(0);
      multiValueMap1.put(integer0, multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<ConstantFactory<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, Collection<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(collection0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<ArrayList<String>>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<ArrayList<String>>>();
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Collection<String>, ArrayList<Object>>();
      multiValueMap1.put((Collection<String>) null, multiValueMap0);
      multiValueMap1.iterator((Object) null);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<ArrayList<String>, HashMap<Object, Collection<Object>>> multiValueMap0 = new MultiValueMap<ArrayList<String>, HashMap<Object, Collection<Object>>>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.clear();
      assertEquals(0, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Iterator<Map.Entry<Integer, Integer>> iterator0 = (Iterator<Map.Entry<Integer, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<ArrayList<String>>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<ArrayList<String>>>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      MultiValueMap<LinkedList<String>, Integer> multiValueMap2 = new MultiValueMap<LinkedList<String>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
