/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:34:10 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Integer>>();
      MultiValueMap<LinkedList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) multiValueMap1);
      multiValueMap0.put((LinkedList<Object>) null, multiValueMap2);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory((LinkedList<String>) null);
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) hashMap0, factory0);
      Collection<String> collection0 = multiValueMap0.createCollection(0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, Integer>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>(arrayList0);
      Factory<Collection<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory((Collection<ArrayList<Object>>) linkedList0);
      MultiValueMap<HashMap<String, Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0, factory0);
      Collection<ArrayList<Object>> collection0 = multiValueMap1.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, "");
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      hashMap0.put((Object) null, "");
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put("U^KI\"9 )!", arrayList0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, "U^KI\"9 )!");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(arrayList0);
      hashMap0.put(arrayList0, arrayList0);
      Object object0 = hashMap0.put(arrayList0, constantFactory0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>>();
      arrayList0.add(object0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Integer>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Integer>, ? super Collection<String>>) hashMap0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("Iterator contains no elements", (Integer) null);
      hashMap0.put(abstractMap_SimpleEntry0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends AbstractMap.SimpleEntry<String, Integer>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-578));
      ArrayList<HashMap<String, Integer>> arrayList0 = new ArrayList<HashMap<String, Integer>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      arrayList0.add(hashMap0);
      HashMap<Integer, Collection<String>> hashMap1 = new HashMap<Integer, Collection<String>>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory((LinkedList<String>) null);
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) hashMap1, factory0);
      Factory<LinkedList<HashMap<String, Integer>>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, HashMap<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<HashMap<String, Integer>>>) multiValueMap0, factory1);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(integer0, (Collection<HashMap<String, Integer>>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<LinkedList<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, LinkedList<Object>>();
      MultiValueMap<LinkedList<String>, MultiValueMap<Integer, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<MultiValueMap<Integer, Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      linkedList0.add((LinkedList<Object>) null);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((LinkedList<String>) null, (Collection<LinkedList<Object>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Object, Integer>>>) multiValueMap0);
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1);
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, HashMap<Object, Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("PM%j", "PM%j");
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry1);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, multiValueMap2);
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      linkedList0.add(hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap3.putAll(abstractMap_SimpleImmutableEntry0, (Collection<HashMap<Object, Object>>) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put("U^KI\"9 )!", arrayList0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) null, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, ? super Collection<LinkedList<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<String>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<String>>();
      Factory<ArrayList<AbstractMap.SimpleEntry<Object, ArrayList<String>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, ArrayList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super ArrayList<AbstractMap.SimpleEntry<Object, ArrayList<String>>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Integer integer0 = new Integer(37);
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(multiValueMap0, integer0);
      linkedList0.addLast(abstractMap_SimpleImmutableEntry0);
      multiValueMap0.putAll(integer0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<Collection<String>, Object>, AbstractMap.SimpleImmutableEntry<String, Collection<String>>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<String>, Object>, AbstractMap.SimpleImmutableEntry<String, Collection<String>>>();
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Integer>>();
      MultiValueMap<LinkedList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) multiValueMap1);
      MultiValueMap<Object, Object> multiValueMap3 = new MultiValueMap<Object, Object>();
      multiValueMap0.put((LinkedList<Object>) null, multiValueMap2);
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>((Collection<Integer>) null);
      MultiValueMap<Object, Integer> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap3, (Factory<Collection<Integer>>) constantFactory0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap4.containsValue((Object) multiValueMap1, (Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Integer integer0 = new Integer(35);
      Object object0 = multiValueMap0.put(integer0, integer0);
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(multiValueMap0, integer0);
      linkedList0.addLast(abstractMap_SimpleImmutableEntry0);
      boolean boolean0 = multiValueMap0.putAll((Integer) object0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      MultiValueMap<AbstractMap.SimpleEntry<Collection<String>, Object>, AbstractMap.SimpleImmutableEntry<String, Collection<String>>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<String>, Object>, AbstractMap.SimpleImmutableEntry<String, Collection<String>>>();
      Collection<AbstractMap.SimpleImmutableEntry<String, Collection<String>>> collection0 = multiValueMap0.getCollection(linkedList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      Iterator<Collection<Object>> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) null, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      int int0 = multiValueMap0.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(3);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, integer0, biFunction0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList1, (Object) arrayList1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(3);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, integer0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put("U^KI\"9 )!", arrayList0);
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) hashMap0, factory0);
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<ArrayList<Object>, HashMap<String, Integer>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, HashMap<String, Integer>>();
      Object object0 = new Object();
      multiValueMap1.putIfAbsent((ArrayList<Object>) null, object0);
      multiValueMap1.put((ArrayList<Object>) null, multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put("U^KI\"9 )!", arrayList0);
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put("U^KI\"9 )!", arrayList0);
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, (Object) null);
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "_IYkC`M0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>>();
      Object object0 = new Object();
      boolean boolean0 = multiValueMap0.removeMapping(object0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>>();
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Object, Integer>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll("", collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<String>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<String>>();
      Iterator<Map.Entry<Collection<String>, Collection<String>>> iterator0 = (Iterator<Map.Entry<Collection<String>, Collection<String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Collection<String>>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Collection<String>>>();
      MultiValueMap<Integer, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
