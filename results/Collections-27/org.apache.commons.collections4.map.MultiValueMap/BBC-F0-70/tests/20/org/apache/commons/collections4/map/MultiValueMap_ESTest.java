/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:41:43 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Integer>>();
      MultiValueMap<Collection<Object>, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ConstantFactory<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Object>, HashMap<String, Integer>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Object>, HashMap<String, Integer>>();
      ExceptionFactory<Object> exceptionFactory0 = (ExceptionFactory<Object>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commonscolections4.map.MultiVueMap", "org.apache.commonscolections4.map.MultiVueMap", (String) null, (String) null, (String) null).when(exceptionFactory0).toString();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(exceptionFactory0, exceptionFactory0, biFunction0);
      MultiValueMap<ExceptionFactory<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<Object>>) multiValueMap0);
      MultiValueMap<ExceptionFactory<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<Integer>>) multiValueMap1);
      Collection<Object> collection0 = multiValueMap2.values();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((ExceptionFactory<Object>) null, collection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.ExceptionFactory$MockitoMock$1904097797
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ConstantFactory<Object>, ExceptionFactory<Object>> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, ExceptionFactory<Object>>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ConstantFactory<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super LinkedList<String>>) multiValueMap0, factory0);
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, multiValueMap2);
      MultiValueMap<LinkedList<Object>, ExceptionFactory<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ExceptionFactory<Object>>>) multiValueMap2);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      multiValueMap0.values();
      LinkedList<Object> linkedList2 = new LinkedList<Object>(linkedList1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap2.compute(linkedList2, biFunction0);
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      Object object0 = null;
      multiValueMap3.size((Object) linkedList0);
      int int0 = 2733;
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(2733);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.keySet();
      hashMap0.put(linkedList0, hashMap1);
      MultiValueMap<LinkedList<Object>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) multiValueMap0);
      hashMap1.put((Object) null, "");
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("Can extract singleton only when collection size == 1");
      multiValueMap0.remove((Object) constantFactory0, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Integer integer0 = new Integer((-4569));
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, String>>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap1);
      Collection<Object> collection0 = multiValueMap2.values();
      multiValueMap0.putAll((Object) integer0, collection0);
      multiValueMap0.mapIterator();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Function.identity();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap1.computeIfAbsent(hashMap0, function0);
      multiValueMap1.containsValue((Object) hashMap0, (Object) "org.apache.commons.collectio's4.functors.InstantiateFactory");
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<Object>> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<Object>>();
      MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<Collection<String>>>) multiValueMap2);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter");
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<LinkedList<String>> arrayList1 = new ArrayList<LinkedList<String>>();
      assertEquals(0, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>();
      ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>((LinkedList<Collection<Object>>) null);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, ? super LinkedList<Collection<Object>>>) hashMap0, (Factory<LinkedList<Collection<Object>>>) constantFactory0);
      ConstantFactory.constantFactory((Object) constantFactory0);
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer0);
      Map.Entry.comparingByKey();
      // Undeclared exception!
      try { 
        multiValueMap0.put(abstractMap_SimpleImmutableEntry0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Object>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      multiValueMap0.forEach(biConsumer0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = new MultiValueMap<Object, LinkedList<String>>();
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add(linkedList0);
      multiValueMap1.putAll((Object) multiValueMap0, (Collection<LinkedList<String>>) arrayList0);
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) multiValueMap1);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap2.merge((Object) null, multiValueMap0, biFunction0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap1);
      multiValueMap3.putAll((Object) null, (Collection<LinkedList<String>>) arrayList0);
      MultiValueMap<Object, Integer> multiValueMap4 = new MultiValueMap<Object, Integer>();
      assertEquals(0, multiValueMap4.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      MultiValueMap<ExceptionFactory<Object>, HashMap<String, Integer>> multiValueMap1 = new MultiValueMap<ExceptionFactory<Object>, HashMap<String, Integer>>();
      ExceptionFactory<Object> exceptionFactory0 = (ExceptionFactory<Object>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.map.MultiValueMap", "org.apache.commons.collections4.map.MultiValueMap", "org.apache.commons.collections4.map.MultiValueMap", "_/?7kFt%PG9^<kU&").when(exceptionFactory0).toString();
      ExceptionFactory<Object> exceptionFactory1 = (ExceptionFactory<Object>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      multiValueMap1.replace(exceptionFactory1, (Object) "tq)q1S{b{D/M4/e", (Object) exceptionFactory1);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap1.merge(exceptionFactory0, exceptionFactory0, biFunction0);
      multiValueMap1.iterator();
      multiValueMap1.mapIterator();
      multiValueMap1.containsValue((Object) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer0 = new Integer(2147483645);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put("_/?7kFt%PG9^<kU&", "_/?7kFt%PG9^<kU&");
      arrayList0.remove((Object) hashMap0);
      MultiValueMap<ExceptionFactory<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<Object>>) multiValueMap1);
      MultiValueMap<ExceptionFactory<Object>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<Object>>) multiValueMap2);
      multiValueMap3.removeMapping(object0, "org.apache.commons.collections4.map.MultiValueMap");
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<MultiValueMap<Object, String>, ? super LinkedList<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      MultiValueMap<ExceptionFactory<Object>, HashMap<String, Integer>> multiValueMap1 = new MultiValueMap<ExceptionFactory<Object>, HashMap<String, Integer>>();
      ExceptionFactory<Object> exceptionFactory0 = (ExceptionFactory<Object>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(exceptionFactory0).toString();
      ExceptionFactory<Object> exceptionFactory1 = (ExceptionFactory<Object>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      multiValueMap1.replace(exceptionFactory1, (Object) "tq)q1S{b{D/M4/e", (Object) exceptionFactory1);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap1.merge(exceptionFactory0, exceptionFactory0, biFunction0);
      multiValueMap1.iterator();
      multiValueMap1.mapIterator();
      multiValueMap1.containsValue((Object) multiValueMap0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, String> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ExceptionFactory<Object> exceptionFactory2 = (ExceptionFactory<Object>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exceptionFactory2).toString();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap1.computeIfAbsent(exceptionFactory2, function0);
      Integer integer0 = new Integer(510);
      arrayList0.remove((Object) "tq)q1S{b{D/M4/e");
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(arrayList0, integer0);
      multiValueMap2.putAll(abstractMap_SimpleEntry0, (Collection<String>) arrayList0);
      MultiValueMap<ExceptionFactory<Object>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<Object>>) multiValueMap1);
      multiValueMap3.removeMapping(object0, object0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<MultiValueMap<Object, String>, ? super LinkedList<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer((-2256));
      hashMap0.put(integer0, "The factory must not be null");
      hashMap0.put(integer0, "qPW,U8h");
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      Factory<LinkedList<MultiValueMap<String, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, MultiValueMap<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<MultiValueMap<String, String>>>) multiValueMap0, factory0);
      multiValueMap1.removeMapping(integer0, integer0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) null, (Factory<Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<Object, Integer>>();
      MultiValueMap<ArrayList<Object>, HashMap<ExceptionFactory<Object>, ExceptionFactory<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<HashMap<ExceptionFactory<Object>, ExceptionFactory<Integer>>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<Object>>) multiValueMap1, (Factory<LinkedList<Object>>) constantFactory0);
      ArrayList<Object> arrayList0 = null;
      multiValueMap2.put((ArrayList<Object>) null, linkedList0);
      MultiValueMap<Object, Object> multiValueMap3 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap3);
      Factory<ArrayList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap5 = new MultiValueMap<Object, String>((Map<Object, ? super ArrayList<String>>) multiValueMap4, factory0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      multiValueMap5.mapIterator();
      multiValueMap1.putAll((Map<? extends ArrayList<Object>, ?>) multiValueMap0);
      multiValueMap5.getOrDefault(hashMap0, hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap5.putAll((Map<?, ?>) multiValueMap2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, LinkedList<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ConstantFactory<LinkedList<ArrayList<String>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<String>>>(linkedList0);
      ConstantFactory.constantFactory((ArrayList<Integer>) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(arrayList0);
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<String>>>) hashMap0, (Factory<LinkedList<ArrayList<String>>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap0.values();
      ConstantFactory.constantFactory((ArrayList<Integer>) null);
      Function<Object, Object> function0 = Function.identity();
      Function.identity();
      multiValueMap1.computeIfAbsent("", function0);
      ConstantFactory.constantFactory((ArrayList<Integer>) null);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.replaceAll(biFunction0);
      multiValueMap0.containsValue((Object) "\",N-bn``kYrM5pr!ls");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("\",N-bn``kYrM5pr!ls");
      multiValueMap1.containsValue((Object) arrayList1, (Object) linkedList0);
      MultiValueMap<String, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      multiValueMap2.putAll("\",N-bn``kYrM5pr!ls", (Collection<Integer>) null);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<LinkedList, AbstractMap.SimpleEntry>> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<LinkedList, AbstractMap.SimpleEntry>>>) multiValueMap2);
      multiValueMap2.putAll((Map<? extends String, ?>) multiValueMap3);
      Integer integer0 = new Integer(2036);
      HashMap<LinkedList<Integer>, Object> hashMap1 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap4 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<Object, Object>>();
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      multiValueMap4.removeMapping(integer0, hashMap2);
      ConstantFactory<Collection<Object>> constantFactory1 = new ConstantFactory<Collection<Object>>(collection0);
      MultiValueMap<String, Object> multiValueMap5 = new MultiValueMap<String, Object>((Map<String, ? super Collection<Object>>) multiValueMap1, (Factory<Collection<Object>>) constantFactory1);
      // Undeclared exception!
      try { 
        multiValueMap5.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<LinkedList<String>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, HashMap<Object, String>>();
      ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add(linkedList0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      multiValueMap1.putAll((Object) hashMap0, (Collection<LinkedList<String>>) arrayList0);
      MultiValueMap<Object, Integer> multiValueMap2 = new MultiValueMap<Object, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Object) hashMap0, (Collection<LinkedList<String>>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>(hashMap0);
      MultiValueMap<Integer, MultiValueMap<Object, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<MultiValueMap<Object, String>>>) hashMap1);
      hashMap0.entrySet();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap2 = new MultiValueMap<ArrayList<Object>, Object>((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap1, (Factory<Collection<Object>>) constantFactory0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap2);
      multiValueMap0.containsValue((Object) multiValueMap3);
      Integer integer0 = new Integer(757);
      hashMap1.put(integer0, multiValueMap0);
      hashMap0.keySet();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap1, hashMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add(linkedList0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(linkedList0, integer0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Object) arrayList1, (Collection<LinkedList<String>>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<LinkedList<String>> arrayList1 = new ArrayList<LinkedList<String>>();
      arrayList1.add(linkedList0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(arrayList0, arrayList1);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      multiValueMap1.putAll((Object) arrayList0, (Collection<LinkedList<String>>) arrayList1);
      MultiValueMap<Object, Integer> multiValueMap2 = new MultiValueMap<Object, Integer>();
      multiValueMap2.clear();
      assertTrue(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      MultiValueMap<LinkedList<String>, LinkedList<String>> multiValueMap1 = new MultiValueMap<LinkedList<String>, LinkedList<String>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<Object, Object>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList1, "PrototypeCloneFactory: The clone method must exist and be public ");
      HashMap<HashMap<Integer, Object>, Object> hashMap0 = new HashMap<HashMap<Integer, Object>, Object>();
      MultiValueMap<HashMap<Integer, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Object>, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      ArrayList<AbstractMap.SimpleEntry<Object, String>> arrayList2 = new ArrayList<AbstractMap.SimpleEntry<Object, String>>();
      boolean boolean1 = multiValueMap1.putAll(hashMap1, (Collection<AbstractMap.SimpleEntry<Object, String>>) arrayList2);
      assertTrue(boolean1 == boolean0);
      
      HashMap<Collection<String>, Object> hashMap2 = new HashMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<String>>) hashMap2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap2.putIfAbsent(arrayList1, linkedList0);
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<AbstractMap.SimpleEntry<Integer, String>>>) multiValueMap2);
      int int0 = multiValueMap3.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Object>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      multiValueMap0.forEach(biConsumer0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = new MultiValueMap<Object, LinkedList<String>>();
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add(linkedList0);
      multiValueMap1.putAll((Object) multiValueMap0, (Collection<LinkedList<String>>) arrayList0);
      multiValueMap1.forEach(biConsumer1);
      multiValueMap1.values();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap2 = new MultiValueMap<Collection<Integer>, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Collection<Object> collection0 = multiValueMap2.values();
      multiValueMap2.replaceAll(biFunction0);
      multiValueMap2.iterator((Object) multiValueMap0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<LinkedList<Integer>> linkedList1 = new LinkedList<LinkedList<Integer>>();
      ConstantFactory<Collection<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Integer>>>(linkedList1);
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Integer>>>) hashMap0, (Factory<Collection<LinkedList<Integer>>>) constantFactory0);
      multiValueMap3.containsValue((Object) linkedList1, (Object) collection0);
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<Object, Object>>>) multiValueMap1);
      multiValueMap4.iterator((Object) hashMap0);
      assertEquals(1, multiValueMap1.size());
      
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<Object>> multiValueMap5 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap5.containsValue((Object) arrayList1, (Object) linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, LinkedList<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ConstantFactory<LinkedList<ArrayList<String>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<String>>>(linkedList0);
      ArrayList<Integer> arrayList0 = null;
      ConstantFactory.constantFactory((ArrayList<Integer>) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      linkedList0.add(arrayList1);
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<String>>>) hashMap0, (Factory<LinkedList<ArrayList<String>>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap0.values();
      ConstantFactory.constantFactory((ArrayList<Integer>) null);
      String string0 = "";
      Function<Object, Object> function0 = Function.identity();
      Function.identity();
      hashMap0.keySet();
      multiValueMap1.computeIfAbsent("", function0);
      String string1 = "\",N-bn``kYrM5pr!ls";
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>("\",N-bn``kYrM5pr!ls", "\",N-bn``kYrM5pr!ls");
      multiValueMap0.put(abstractMap_SimpleImmutableEntry0, collection0);
      ConstantFactory.constantFactory((ArrayList<Integer>) null);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "\",N-bn``kYrM5pr!ls");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<Integer, Object>>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap1.computeIfAbsent(hashMap0, function0);
      Factory<LinkedList<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<Integer>>>) multiValueMap1, factory0);
      boolean boolean0 = multiValueMap2.containsValue((Object) hashMap0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      Factory<LinkedList<Collection<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<Object>>>) hashMap0, factory0);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      multiValueMap1.putAll("The factory must not be null", (Collection<Collection<Object>>) arrayList0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      LinkedList<LinkedList<String>> linkedList1 = new LinkedList<LinkedList<String>>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList1);
      MultiValueMap<String, LinkedList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<String>>>) hashMap1, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      multiValueMap2.size((Object) constantFactory0);
      HashMap<LinkedList<Object>, Object> hashMap2 = new HashMap<LinkedList<Object>, Object>();
      Factory<LinkedList<HashMap<Object, String>>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, HashMap<Object, String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<HashMap<Object, String>>>) hashMap2, factory1);
      multiValueMap3.putAll((Map<? extends LinkedList<Object>, ?>) hashMap2);
      assertEquals(0, multiValueMap3.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Object>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      multiValueMap0.forEach(biConsumer0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = new MultiValueMap<Object, LinkedList<String>>();
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add(linkedList0);
      multiValueMap1.putAll((Object) multiValueMap0, (Collection<LinkedList<String>>) arrayList0);
      multiValueMap1.forEach(biConsumer1);
      multiValueMap1.values();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap2 = new MultiValueMap<Collection<Integer>, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap2.replaceAll(biFunction0);
      Iterator<Integer> iterator0 = multiValueMap2.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) multiValueMap0);
      Object object0 = multiValueMap1.put(multiValueMap0, multiValueMap0);
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>) null);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>>) hashMap0, factory0);
      multiValueMap2.clear();
      // Undeclared exception!
      try { 
        multiValueMap2.getCollection(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ConstantFactory.constantFactory(arrayList0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      linkedList0.add(arrayList1);
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      LinkedList<ArrayList<String>> linkedList1 = new LinkedList<ArrayList<String>>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ConstantFactory.constantFactory(linkedList1);
      MultiValueMap<String, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<String>>>) multiValueMap1, factory0);
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      ConstantFactory.constantFactory(arrayList2);
      Function<Object, Object> function0 = Function.identity();
      Function.identity();
      multiValueMap2.computeIfAbsent("The comparator must not be null", function0);
      ConstantFactory.constantFactory(arrayList0);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      MultiValueMap<String, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap1);
      multiValueMap1.putAll("", (Collection<Integer>) arrayList0);
      MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<LinkedList, AbstractMap.SimpleEntry>>>) multiValueMap3);
      multiValueMap3.putAll((Map<? extends String, ?>) multiValueMap2);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Collection<String>> multiValueMap4 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Collection<String>>();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap5 = new MultiValueMap<Collection<Integer>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap5.replaceAll((BiFunction<? super Collection<Integer>, ? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      MultiValueMap<Collection<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) multiValueMap1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.iterator();
      arrayList0.trimToSize();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap2.put(arrayList0, ",aiEQqB&");
      multiValueMap0.totalSize();
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, HashMap<Integer, String>> multiValueMap3 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, HashMap<Integer, String>>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap4 = new MultiValueMap<ArrayList<String>, Object>();
      MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) multiValueMap4);
      Collection<Object> collection0 = multiValueMap3.values();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      multiValueMap0.replace(collection0, (Object) ",aiEQqB&", (Object) hashMap0);
      MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Integer>>) multiValueMap4, (Factory<LinkedList<Integer>>) constantFactory0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap3.size((Object) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.size((Object) arrayList0);
      ArrayList<AbstractMap.SimpleEntry<String, Object>> arrayList1 = new ArrayList<AbstractMap.SimpleEntry<String, Object>>();
      arrayList1.listIterator();
      boolean boolean0 = multiValueMap0.putAll("", (Collection<AbstractMap.SimpleEntry<String, Object>>) arrayList1);
      assertFalse(boolean0);
      
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, AbstractMap.SimpleEntry<String, String>>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Integer>, ? super LinkedList<String>>) multiValueMap1, factory0);
      multiValueMap2.iterator((Object) "");
      MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Collection, ArrayList<Object>>>>) multiValueMap0);
      MultiValueMap<Object, String> multiValueMap3 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, String>> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Integer, String>>>) multiValueMap3);
      int int0 = multiValueMap4.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Integer>>>) hashMap0);
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      multiValueMap0.putAll("", (Collection<Collection<Integer>>) arrayList0);
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<Object, Object>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      multiValueMap1.removeMapping(arrayList1, "PrototypeCloneFactory: The clone method must exist and be public ");
      MultiValueMap<Object, Integer> multiValueMap2 = new MultiValueMap<Object, Integer>();
      multiValueMap2.clear();
      assertTrue(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      ConstantFactory.constantFactory((Object) null);
      linkedList0.clear();
      ConstantFactory.constantFactory((Object) linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) null, (Factory<LinkedList<Object>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      int int0 = (-2558);
      multiValueMap0.createCollection((-2558));
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<Object>>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<String>>) multiValueMap0, factory0);
      Set<Map.Entry<ArrayList<String>, Object>> set0 = (Set<Map.Entry<ArrayList<String>, Object>>)multiValueMap1.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ConstantFactory<LinkedList<ArrayList<String>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<String>>>(linkedList0);
      ConstantFactory.constantFactory((ArrayList<Integer>) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(arrayList0);
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<String>>>) hashMap0, (Factory<LinkedList<ArrayList<String>>>) constantFactory0);
      ConstantFactory.constantFactory((ArrayList<Integer>) null);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<Integer>>>) multiValueMap0, (Factory<LinkedList<LinkedList<Integer>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap1.values();
      MultiValueMap<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Object>, String> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Object>, String>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Object>, ? super LinkedList<ArrayList<Integer>>>) multiValueMap2, (Factory<LinkedList<ArrayList<Integer>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<Integer, Object>>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap1.computeIfAbsent(hashMap0, function0);
      multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<Object>> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Collection<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<Collection<String>>>) multiValueMap2);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("E", "");
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap3.put(abstractMap_SimpleEntry1, arrayList0);
      assertEquals(1, multiValueMap3.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<Integer, Object>>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      MultiValueMap<Object, ExceptionFactory<Integer>> multiValueMap2 = new MultiValueMap<Object, ExceptionFactory<Integer>>();
      multiValueMap1.map = (Map<Object, Object>) multiValueMap2;
      multiValueMap1.computeIfAbsent(hashMap0, function0);
      multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<Object>> multiValueMap3 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Collection<String>> multiValueMap4 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<Collection<String>>>) multiValueMap3);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("E", "");
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap4.put(abstractMap_SimpleEntry1, arrayList0);
      assertEquals(1, multiValueMap4.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = new MultiValueMap<LinkedList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(arrayList0);
      Integer integer0 = new Integer(4);
      multiValueMap1.put(linkedList0, integer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      multiValueMap1.put(linkedList1, multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Integer>();
      Integer integer0 = new Integer(921);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("a*0i nMmbGwb=(6csU/", integer0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      Integer integer1 = abstractMap_SimpleEntry1.setValue(integer0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Map.Entry.comparingByKey();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      multiValueMap0.iterator((Object) abstractMap_SimpleEntry1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      arrayList0.forEach(consumer0);
      multiValueMap0.put(abstractMap_SimpleEntry1, arrayList0);
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, Object>();
      multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) hashMap0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      hashMap0.put(arrayList1, integer1);
      hashMap0.put(arrayList1, integer0);
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) multiValueMap2);
      multiValueMap3.getCollection("a*0i nMmbGwb=(6csU/");
      MultiValueMap<Collection<Object>, String> multiValueMap4 = new MultiValueMap<Collection<Object>, String>();
      MultiValueMap<Collection<Object>, Object> multiValueMap5 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) multiValueMap4);
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, String> multiValueMap6 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<String>>) multiValueMap5, factory0);
      Iterator<Map.Entry<Collection<Object>, String>> iterator0 = (Iterator<Map.Entry<Collection<Object>, String>>)multiValueMap6.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>();
      MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap1, factory0);
      multiValueMap2.clear();
      MultiValueMap<Object, String> multiValueMap3 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory1 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, String> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) multiValueMap3, factory1);
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap5 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Integer>>>) multiValueMap4);
      multiValueMap5.clear();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Integer>, ? super Collection<LinkedList<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }
}
