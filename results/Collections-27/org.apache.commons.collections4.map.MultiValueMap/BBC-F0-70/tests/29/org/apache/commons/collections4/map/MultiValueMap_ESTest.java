/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:41:48 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, Collection<String>> multiValueMap1 = new MultiValueMap<String, Collection<String>>();
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, String>();
      Set<Map.Entry<HashMap<Object, String>, Object>> set0 = (Set<Map.Entry<HashMap<Object, String>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      Integer integer0 = new Integer(2);
      multiValueMap0.putIfAbsent((Collection<String>) null, integer0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<String>>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<String>>, Collection<String>>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      multiValueMap0.put(arrayList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      Collection<Object> collection0 = multiValueMap0.createCollection((-1));
      assertFalse(collection0.contains((-1)));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Object object0 = multiValueMap0.putIfAbsent("", multiValueMap0);
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.size(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, Object>((Map<LinkedList<Integer>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) constantFactory0);
      multiValueMap0.map = (Map<LinkedList<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      LinkedList<HashMap<Object, Collection<String>>> linkedList0 = new LinkedList<HashMap<Object, Collection<String>>>();
      Factory<Collection<HashMap<Object, Collection<String>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, HashMap<Object, Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<Object, Collection<String>>>>) multiValueMap0, factory0);
      HashMap<Object, Collection<String>> hashMap0 = new HashMap<Object, Collection<String>>();
      linkedList0.add(hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Object) "4JwHXQ}?KE", (Collection<HashMap<Object, Collection<String>>>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, MultiValueMap<Object, String>> multiValueMap0 = new MultiValueMap<String, MultiValueMap<Object, String>>();
      Set<String> set0 = multiValueMap0.keySet();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(set0);
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      linkedList0.add("gpA1Q&2,\"6bsd");
      HashMap<Integer, Collection<String>> hashMap0 = new HashMap<Integer, Collection<String>>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      Integer integer0 = new Integer((-1855));
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(integer0, (Collection<String>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Collection<String>>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Collection<String>>>();
      LinkedList<HashMap<Object, Collection<String>>> linkedList0 = new LinkedList<HashMap<Object, Collection<String>>>();
      HashMap<Object, Collection<String>> hashMap0 = new HashMap<Object, Collection<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(linkedList0, arrayList0);
      linkedList0.add(hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) linkedList0, (Collection<HashMap<Object, Collection<String>>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.putIfAbsent("n:L@7:D", multiValueMap0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap0, linkedList0);
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(abstractMap_SimpleEntry0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      multiValueMap0.map = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ArrayList<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, MultiValueMap<String, String>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, MultiValueMap<String, String>>();
      multiValueMap0.map = null;
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<Object>>) multiValueMap1, (Factory<LinkedList<Object>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) multiValueMap2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<HashMap<String, String>, HashMap<String, Integer>> multiValueMap0 = new MultiValueMap<HashMap<String, String>, HashMap<String, Integer>>();
      MultiValueMap<HashMap<String, String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, String>, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<HashMap<String, String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, Object>>)hashMap0.entrySet();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<LinkedList<Object>>>) hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge((AbstractMap.SimpleEntry<Object, Object>) null, set0, biFunction0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      multiValueMap0.map = null;
      Integer integer0 = new Integer(2170);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>((Map<Object, ? super Collection<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap multiValueMap1 = (MultiValueMap)multiValueMap0.putIfAbsent("", multiValueMap0);
      ArrayList arrayList0 = (ArrayList)multiValueMap1.get("");
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Collection<String>>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Collection<String>>>();
      LinkedList<HashMap<Object, Collection<String>>> linkedList0 = new LinkedList<HashMap<Object, Collection<String>>>();
      HashMap<Object, Collection<String>> hashMap0 = new HashMap<Object, Collection<String>>();
      linkedList0.add(hashMap0);
      multiValueMap0.putAll((Object) linkedList0, (Collection<HashMap<Object, Collection<String>>>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll((Object) linkedList0, (Collection<HashMap<Object, Collection<String>>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      Integer integer0 = new Integer(2170);
      Collection<Integer> collection0 = multiValueMap0.getCollection(integer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, "", biFunction0);
      multiValueMap0.iterator((Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.putAll(linkedList0, (Collection<AbstractMap.SimpleEntry<Integer, Integer>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<Integer>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Collection<String>>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Collection<String>>>();
      LinkedList<HashMap<Object, Collection<String>>> linkedList0 = new LinkedList<HashMap<Object, Collection<String>>>();
      HashMap<Object, Collection<String>> hashMap0 = new HashMap<Object, Collection<String>>();
      linkedList0.add(hashMap0);
      multiValueMap0.putAll((Object) linkedList0, (Collection<HashMap<Object, Collection<String>>>) linkedList0);
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.putIfAbsent("", multiValueMap0);
      Integer integer0 = new Integer((-2453));
      boolean boolean0 = multiValueMap0.containsValue((Object) "", (Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) linkedList0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      hashMap0.put("", "");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(linkedList0, hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(linkedList0, arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.putIfAbsent("", (Object) null);
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, factory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<LinkedList<Object>, Collection<String>> hashMap0 = new HashMap<LinkedList<Object>, Collection<String>>();
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>((Map<LinkedList<Object>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Integer>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap1);
      Integer integer0 = new Integer((-852));
      boolean boolean0 = multiValueMap1.putAll(integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.putIfAbsent("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", (Object) "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, String>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      Iterator<Map.Entry<Collection<String>, Object>> iterator0 = (Iterator<Map.Entry<Collection<String>, Object>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
