/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:31:42 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<Object>>>) multiValueMap0, factory0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) multiValueMap1);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, HashMap<Object, Integer>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, HashMap<Object, Integer>>();
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Collection<Integer>, Object>, ? super Collection<String>>) multiValueMap1);
      Integer integer0 = new Integer(1598);
      multiValueMap2.putIfAbsent((AbstractMap.SimpleEntry<Collection<Integer>, Object>) null, multiValueMap0);
      multiValueMap2.replace((AbstractMap.SimpleEntry<Collection<Integer>, Object>) null, (Object) integer0);
      assertFalse(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      multiValueMap0.putAll("*Qin0V\"4[y/'", (Collection<String>) arrayList0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      Collection<AbstractMap.SimpleImmutableEntry<Integer, String>> collection0 = multiValueMap0.createCollection(1893);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      multiValueMap0.put(integer0, hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, (Object) null);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<String>>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends LinkedList<Integer>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = new MultiValueMap<Object, Collection<Integer>>();
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap1.map = null;
      arrayList0.add((Collection<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Object) multiValueMap0, (Collection<Collection<Integer>>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(integer0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<Object>>();
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<ArrayList<String>, AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<AbstractMap.SimpleEntry<ArrayList<String>, AbstractMap.SimpleImmutableEntry>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection("zroT");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<ConstantFactory<Integer>, Object> multiValueMap0 = new MultiValueMap<ConstantFactory<Integer>, Object>();
      HashMap<Collection<Integer>, Collection<Integer>> hashMap0 = new HashMap<Collection<Integer>, Collection<Integer>>();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) hashMap0);
      MultiValueMap<Collection<Integer>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      multiValueMap1.map = (Map<Collection<Integer>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Object>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      hashMap0.put(linkedList1, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer0 = new Integer(0);
      multiValueMap0.putIfAbsent("*Qin0V\"4[y/'", integer0);
      arrayList0.add((String) null);
      boolean boolean0 = multiValueMap0.putAll("*Qin0V\"4[y/'", (Collection<String>) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, String> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<String, String>((Map<String, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      Set<Map.Entry<Collection<String>, Object>> set0 = (Set<Map.Entry<Collection<String>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<Object>>();
      Collection<LinkedList<Object>> collection0 = multiValueMap0.getCollection("zroT");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, HashMap<Object, Integer>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, HashMap<Object, Integer>>();
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Integer>, Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Collection<Integer>, Object>, ? super Collection<String>>) multiValueMap1);
      Iterator<String> iterator0 = multiValueMap2.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      multiValueMap0.putAll("*Qin0V\"4[y/'", (Collection<String>) arrayList0);
      Factory<Collection<Collection<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Integer>>>) multiValueMap0, factory0);
      multiValueMap1.iterator((Object) "*Qin0V\"4[y/'");
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<String>) linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>>();
      boolean boolean0 = multiValueMap0.putAll((Integer) null, (Collection<AbstractMap.SimpleEntry<String, Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Integer integer0 = new Integer(1);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      linkedList0.add((Collection<Integer>) null);
      multiValueMap0.putAll((String) null, (Collection<Collection<Integer>>) linkedList0);
      LinkedList<HashMap<String, Object>> linkedList1 = new LinkedList<HashMap<String, Object>>();
      ConstantFactory<LinkedList<HashMap<String, Object>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Object>>>(linkedList1);
      MultiValueMap<String, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<HashMap<String, Object>>>) multiValueMap0, (Factory<LinkedList<HashMap<String, Object>>>) constantFactory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) factory0, (Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      linkedList0.add((Collection<Integer>) null);
      multiValueMap0.putAll(",XMs#G{lk", (Collection<Collection<Integer>>) linkedList0);
      Factory<LinkedList<HashMap<String, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<HashMap<String, Object>>>) multiValueMap0, factory0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap1.containsValue((Object) ",XMs#G{lk", (Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, "v0*|Ug");
      multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Object, Collection<Integer>> hashMap0 = new HashMap<Object, Collection<Integer>>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, arrayList0);
      multiValueMap0.replace((Object) arrayList0, (Object) arrayList0, (Object) arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      linkedList0.add((Collection<Integer>) null);
      multiValueMap0.putAll((String) null, (Collection<Collection<Integer>>) linkedList0);
      ArrayList<AbstractMap.SimpleEntry<Object, String>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, String>>();
      Factory<Collection<AbstractMap.SimpleEntry<Object, String>>> factory0 = ConstantFactory.constantFactory((Collection<AbstractMap.SimpleEntry<Object, String>>) arrayList0);
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      linkedList0.add((Collection<Integer>) null);
      multiValueMap0.putAll("InstantiateFactory: Constructor threw an exception", (Collection<Collection<Integer>>) linkedList0);
      ArrayList<AbstractMap.SimpleEntry<Object, String>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, String>>();
      Factory<Collection<AbstractMap.SimpleEntry<Object, String>>> factory0 = ConstantFactory.constantFactory((Collection<AbstractMap.SimpleEntry<Object, String>>) arrayList0);
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) factory0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(multiValueMap0, integer0);
      MultiValueMap<Object, Collection<AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<AbstractMap.SimpleImmutableEntry>>>) hashMap0);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) "pK,~j.:>:oYxh%keA*");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, Collection<ArrayList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<ArrayList<String>>>>) multiValueMap0);
      MultiValueMap<String, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap1);
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ArrayList<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<String>>>) multiValueMap2, factory0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap3, (Factory<Collection<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      multiValueMap0.putIfAbsent(" fMXke", " fMXke");
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      boolean boolean0 = arrayList0.addAll(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      multiValueMap0.putAll("*Qin0V\"4[y/'", (Collection<String>) arrayList0);
      Factory<Collection<Collection<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Integer>>>) multiValueMap0, factory0);
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, Collection<ArrayList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<ArrayList<String>>>>) multiValueMap0);
      multiValueMap1.clear();
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Iterator<Map.Entry<String, String>> iterator0 = (Iterator<Map.Entry<String, String>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }
}
