/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:31:00 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.function.Predicate;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Comparable<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Comparable<Integer>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, ArrayList<Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Integer>, ? super Collection<ArrayList<Collection<Object>>>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer0 = new Integer(0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      hashMap0.put(arrayList0, predicate0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>((Map<ArrayList<String>, ? super LinkedList<Object>>) hashMap0, factory0);
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<String>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$135/1333819293 cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<LinkedList<Object>> arrayList1 = new ArrayList<LinkedList<Object>>();
      ConstantFactory<ArrayList<LinkedList<Object>>> constantFactory0 = new ConstantFactory<ArrayList<LinkedList<Object>>>(arrayList1);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super ArrayList<LinkedList<Object>>>) multiValueMap0, (Factory<ArrayList<LinkedList<Object>>>) constantFactory0);
      multiValueMap1.put(arrayList0, multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<LinkedList<String>>>) hashMap0, factory0);
      MultiValueMap<Collection<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Integer>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1));
      arrayList1.add(integer0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Collection<String>) arrayList0, (Collection<Integer>) arrayList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, LinkedList<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, LinkedList<Object>>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      linkedList0.add((Collection<Object>) arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<Collection<Object>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Factory<ArrayList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super ArrayList<LinkedList<Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Integer integer0 = new Integer(5);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.putIfAbsent(multiValueMap1, integer0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(multiValueMap0, "@/k?nJc");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<String, LinkedList>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.put(multiValueMap0, "@/k?nJc");
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>((Collection<Integer>) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(arrayList0, constantFactory0);
      MultiValueMap<Object, ArrayList<ArrayList<Integer>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<ArrayList<Integer>>>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<String, MultiValueMap<String, String>> multiValueMap0 = new MultiValueMap<String, MultiValueMap<String, String>>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<Object>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0, (Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>(0);
      ArrayList<String> arrayList0 = new ArrayList<String>(0);
      hashMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<Object>>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) linkedList0, (Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      MultiValueMap<String, HashMap<Integer, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Integer, String>>>) multiValueMap1);
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(1);
      hashMap0.put(arrayList0, multiValueMap2);
      MultiValueMap<ArrayList<Integer>, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap3.containsValue((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<String, Object>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, ArrayList<Object>>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add(arrayList1);
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleImmutableEntry0, (Collection<ArrayList<Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Collection<String> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      Iterator<LinkedList<Integer>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(arrayList0, linkedList0);
      LinkedList<Collection<Object>> linkedList1 = new LinkedList<Collection<Object>>();
      linkedList1.add((Collection<Object>) arrayList0);
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.putAll(arrayList0, (Collection<Collection<Object>>) linkedList1);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Collection<Object>>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap0, multiValueMap0);
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleEntry0, (Collection<Collection<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      Factory<Collection<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) hashMap0, factory0);
      multiValueMap0.put(arrayList0, multiValueMap1);
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<Object>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.offer(linkedList1);
      hashMap0.put(arrayList0, linkedList0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList2, (Object) linkedList2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) null, (Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<Object>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(arrayList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<String, Object>>>) multiValueMap0);
      multiValueMap1.putIfAbsent("@/k?nJc", "VpZ^rM");
      MultiValueMap<String, Object> multiValueMap2 = new MultiValueMap<String, Object>();
      multiValueMap2.putAll((Map<? extends String, ?>) multiValueMap1);
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, multiValueMap2.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<String, HashMap<String, Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent("5/&`!;b", arrayList0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<String, Object>>>) multiValueMap0);
      multiValueMap1.putIfAbsent("@/k?nJc", "VpZ^rM");
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      hashMap0.put(linkedList1, (Object) null);
      ConstantFactory<ArrayList<Integer>> constantFactory0 = new ConstantFactory<ArrayList<Integer>>(arrayList0);
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super ArrayList<Integer>>) hashMap0, (Factory<ArrayList<Integer>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(arrayList0, linkedList0);
      multiValueMap0.put(arrayList0, linkedList0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList1, linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, "i'");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      boolean boolean0 = multiValueMap0.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(arrayList0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList1, linkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Comparable<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Comparable<Object>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      Integer integer0 = new Integer((-488));
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(integer0, function0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Integer integer0 = new Integer(5);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<String, Integer>>>) hashMap0);
      Iterator<Map.Entry<ArrayList<Object>, AbstractMap.SimpleEntry<String, Integer>>> iterator0 = (Iterator<Map.Entry<ArrayList<Object>, AbstractMap.SimpleEntry<String, Integer>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
