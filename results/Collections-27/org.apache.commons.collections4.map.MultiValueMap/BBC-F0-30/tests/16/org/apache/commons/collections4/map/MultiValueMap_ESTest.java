/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:36:57 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      ConstantFactory<LinkedList<HashMap<Object, Object>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<Object, Object>>>(linkedList0);
      MultiValueMap<Collection<Integer>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, HashMap<Object, Object>>((Map<Collection<Integer>, ? super LinkedList<HashMap<Object, Object>>>) hashMap0, (Factory<LinkedList<HashMap<Object, Object>>>) constantFactory0);
      MultiValueMap<Collection<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Object>>) hashMap0);
      multiValueMap1.putAll((Map<? extends Collection<Integer>, ?>) multiValueMap0);
      assertEquals(0, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.put("&`seN", "");
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer(220);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.putAll(linkedList1, (Collection<Integer>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, Object>();
      MultiValueMap<Integer, Collection<Integer>> multiValueMap1 = new MultiValueMap<Integer, Collection<Integer>>();
      MultiValueMap<Integer, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap1);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap3 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      Object object0 = multiValueMap3.getOrDefault((Object) null, multiValueMap0);
      Collection<Integer> collection0 = multiValueMap2.getCollection(object0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, Collection<Integer>> multiValueMap0 = new MultiValueMap<Integer, Collection<Integer>>();
      Collection<Collection<Integer>> collection0 = multiValueMap0.createCollection((-113));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, ExceptionFactory<String>> multiValueMap0 = new MultiValueMap<String, ExceptionFactory<String>>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      MultiValueMap<HashMap<Object, Integer>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      multiValueMap1.put(hashMap1, multiValueMap0);
      multiValueMap1.putAll((Map<? extends HashMap<Object, Integer>, ?>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Integer, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<AbstractMap.SimpleEntry<Integer, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Integer, String>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Integer, String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<AbstractMap.SimpleEntry<Integer, String>>>) multiValueMap0, factory0);
      Object object0 = multiValueMap1.putIfAbsent(arrayList0, linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(object0, factory0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = new MultiValueMap<Collection<Integer>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.map = (Map<Collection<Integer>, Object>) multiValueMap0;
      arrayList0.add("Equator must not be null.");
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<Integer>) arrayList1, (Collection<String>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      MultiValueMap<HashMap<Object, Integer>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put(hashMap1, "$WJ:06;G,pA^Fbwj=");
      // Undeclared exception!
      try { 
        multiValueMap1.put(hashMap1, multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ExceptionFactory<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ExceptionFactory<String>>();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, ExceptionFactory<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<AbstractMap.SimpleEntry<String, ExceptionFactory<String>>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap1;
      Integer integer0 = new Integer(10);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<LinkedList<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, LinkedList<String>>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = new MultiValueMap<Integer, Collection<Object>>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<ArrayList<String>>>) multiValueMap1, factory0);
      multiValueMap1.map = (Map<Integer, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = new MultiValueMap<Collection<Integer>, String>();
      multiValueMap0.map = null;
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      MultiValueMap<HashMap<Object, Integer>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put(hashMap1, "rl pk4'");
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Integer>, Object> multiValueMap0 = new MultiValueMap<ExceptionFactory<Integer>, Object>();
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put((String) null, hashMap0);
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("r(z-4!");
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>((LinkedList<String>) null);
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<Integer>) arrayList1, (Collection<String>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) null);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.putAll((Object) hashMap0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<Object>>>) hashMap0);
      int int0 = multiValueMap1.size((Object) set0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("InstantiateFactory: Constructor must be public").when(biFunction0).apply(anyString() , any());
      multiValueMap0.compute("InstantiateFactory: Constructor must be public", biFunction0);
      int int0 = multiValueMap0.size((Object) "InstantiateFactory: Constructor must be public");
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = new MultiValueMap<Collection<Integer>, String>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = new MultiValueMap<Collection<Integer>, String>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = new MultiValueMap<Collection<Integer>, String>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      multiValueMap1.putIfAbsent((Object) null, (Object) null);
      boolean boolean0 = multiValueMap1.containsValue((Object) null, (Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(linkedList0, integer0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = new MultiValueMap<Collection<Integer>, String>();
      MultiValueMap<Collection<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Object>>) multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap1.computeIfAbsent(linkedList0, unaryOperator0);
      multiValueMap1.putAll((Map<? extends Collection<Integer>, ?>) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = new MultiValueMap<Collection<Integer>, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<Integer>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.put((String) null, (Object) null);
      multiValueMap0.put((String) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<String>>();
      Integer integer0 = new Integer((-1));
      multiValueMap1.putIfAbsent(integer0, integer0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      MultiValueMap<HashMap<Object, Integer>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<ArrayList<Object>>>) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      multiValueMap1.put(hashMap1, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Integer, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      multiValueMap0.putIfAbsent(arrayList0, object0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      boolean boolean0 = multiValueMap0.removeMapping("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Integer, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      Integer integer0 = new Integer((-1));
      multiValueMap0.putIfAbsent(integer0, integer0);
      LinkedList<AbstractMap.SimpleEntry<String, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<String, Object>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<String, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleEntry<String, Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer((-1661));
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<ExceptionFactory<Object>, MultiValueMap<String, Object>> multiValueMap1 = new MultiValueMap<ExceptionFactory<Object>, MultiValueMap<String, Object>>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      Iterator<Map.Entry<Collection<String>, Object>> iterator0 = (Iterator<Map.Entry<Collection<String>, Object>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
