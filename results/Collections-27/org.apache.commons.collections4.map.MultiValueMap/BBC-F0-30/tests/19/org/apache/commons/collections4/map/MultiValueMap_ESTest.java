/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:39:18 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>();
      Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
      multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<LinkedList<Object>>) linkedList0);
      MultiValueMap<Collection<String>, Comparable<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Comparable<Integer>>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends Collection<String>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Integer, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap1);
      Integer integer0 = new Integer(1);
      multiValueMap2.put(integer0, multiValueMap0);
      int int0 = multiValueMap2.totalSize();
      assertEquals(1, multiValueMap2.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      multiValueMap0.put("S/mHWh:3RWP", (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<String>>();
      MultiValueMap<HashMap<String, Object>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<HashMap<String, Object>, LinkedList<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<Integer, String> multiValueMap2 = new MultiValueMap<Integer, String>();
      multiValueMap1.putIfAbsent(hashMap0, multiValueMap2);
      multiValueMap1.getCollection(multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<Object>>();
      Collection<LinkedList<Object>> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      multiValueMap1.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Comparable<Integer>, Comparable<Object>> multiValueMap2 = new MultiValueMap<Comparable<Integer>, Comparable<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap2.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap1.put("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", hashMap0);
      MultiValueMap<Object, Collection<ArrayList<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<ArrayList<Object>>>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      Integer integer0 = new Integer(3303);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(integer0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      Factory<Collection<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<String>>>) multiValueMap0, factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-2515));
      hashMap0.put(linkedList0, integer0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends Collection<Object>, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      arrayList0.add((Collection<String>) linkedList0);
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
      Factory<Collection<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(linkedList0, (Collection<Collection<String>>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>>();
      LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>();
      MultiValueMap<Object, MultiValueMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<Object, String>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      linkedList0.offer((AbstractMap.SimpleImmutableEntry<String, Object>) null);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) "", (Collection<AbstractMap.SimpleImmutableEntry<String, Object>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      arrayList0.add((Collection<String>) linkedList0);
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      ConstantFactory<LinkedList<Collection<String>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<String>>>((LinkedList<Collection<String>>) null);
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Collection<String>>>) multiValueMap0, (Factory<LinkedList<Collection<String>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(linkedList0, (Collection<Collection<String>>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.put("]l`/M2", multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      Iterator<Map.Entry<ArrayList<Object>, Object>> iterator0 = (Iterator<Map.Entry<ArrayList<Object>, Object>>)multiValueMap0.iterator();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<Object>>();
      Integer integer0 = new Integer(0);
      Factory<LinkedList<Collection<String>>> factory0 = ConstantFactory.constantFactory((LinkedList<Collection<String>>) null);
      MultiValueMap<Integer, Collection<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Collection<String>>>) multiValueMap1, factory0);
      MultiValueMap<Integer, LinkedList<ArrayList<Integer>>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<ArrayList<Integer>>>>) multiValueMap2);
      multiValueMap2.map = (Map<Integer, Object>) multiValueMap3;
      // Undeclared exception!
      try { 
        multiValueMap2.put(integer0, iterator0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<Object, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, Object>>();
      ConstantFactory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) null, (Factory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<Object, Integer>>();
      MultiValueMap<Collection<Integer>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Collection<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>((Map<Integer, ? super Collection<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      multiValueMap0.replaceAll(biFunction1);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap0.map = (Map<Object, Object>) hashMap0;
      hashMap0.put((Object) null, "");
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      Integer integer0 = new Integer((-2882));
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "[F_|`;I/4S");
      hashMap0.put(abstractMap_SimpleEntry0, integer0);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, String>, ? super LinkedList<Object>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<String>>();
      MultiValueMap<HashMap<String, Object>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<HashMap<String, Object>, LinkedList<Object>>();
      Collection<LinkedList<Object>> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<String>>>) hashMap0);
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      Iterator<LinkedList<Integer>> iterator0 = multiValueMap1.iterator((Object) "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.offerLast(linkedList1);
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(arrayList0, unaryOperator0);
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<LinkedList<Object>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      MultiValueMap<Comparable<Integer>, Comparable<Object>> multiValueMap1 = new MultiValueMap<Comparable<Integer>, Comparable<Object>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) "Q4<;f\"E0BMqAuPC");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-2515));
      hashMap0.put(linkedList0, integer0);
      multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Comparable<Integer>, Comparable<Object>> multiValueMap0 = new MultiValueMap<Comparable<Integer>, Comparable<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Comparable<Integer>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent("", "");
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>>();
      LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>();
      linkedList0.offer((AbstractMap.SimpleImmutableEntry<String, Object>) null);
      multiValueMap0.putAll((Object) "", (Collection<AbstractMap.SimpleImmutableEntry<String, Object>>) linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<String>>();
      MultiValueMap<HashMap<Object, String>, Comparable<String>> multiValueMap1 = new MultiValueMap<HashMap<Object, String>, Comparable<String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      multiValueMap1.put(hashMap0, hashMap0);
      Object object0 = multiValueMap1.put(hashMap0, multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(object0, hashMap0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, Comparable<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, Comparable<String>>();
      multiValueMap0.put((HashMap<Object, String>) null, "org.apache.commons.collections4.map.MultiValueMap$Values");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      MultiValueMap<Comparable<Integer>, Comparable<Object>> multiValueMap1 = new MultiValueMap<Comparable<Integer>, Comparable<Object>>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<String>>();
      MultiValueMap<HashMap<Object, String>, Comparable<String>> multiValueMap1 = new MultiValueMap<HashMap<Object, String>, Comparable<String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = multiValueMap1.put(hashMap0, multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      
      boolean boolean0 = multiValueMap1.removeMapping(object0, hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Set<String> set0 = hashMap0.keySet();
      HashMap<Collection<String>, Object> hashMap1 = new HashMap<Collection<String>, Object>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      linkedList0.offerLast(set0);
      hashMap1.put(set0, linkedList0);
      MultiValueMap<Collection<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Object>>) hashMap1);
      Collection<Object> collection0 = multiValueMap1.values();
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap2.putAll("E\"Y_c#/oRY&:kV:*", collection0);
      assertFalse(multiValueMap2.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Object>>) hashMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap2.putAll("E\"Y_c#/oRY&:kV:*", collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      Object object0 = multiValueMap1.put(multiValueMap0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue(object0, (Object) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
