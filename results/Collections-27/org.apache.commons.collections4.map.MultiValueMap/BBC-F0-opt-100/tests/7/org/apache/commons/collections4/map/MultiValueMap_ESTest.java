/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:37:27 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList0);
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<ArrayList<String>>>) hashMap0, factory0);
      multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, Collection<Collection<String>>> multiValueMap0 = new MultiValueMap<String, Collection<Collection<String>>>();
      multiValueMap0.put("*&X*b9i1@_\"&*p-X", (Object) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>(linkedList0);
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>((Map<String, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) constantFactory0);
      multiValueMap1.getCollection("*&X*b9i1@_\"&*p-X");
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Object>>();
      Collection<Collection<Object>> collection0 = multiValueMap0.createCollection((-3191));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Object>>();
      MultiValueMap<String, Collection<String>> multiValueMap1 = new MultiValueMap<String, Collection<String>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      Factory<ArrayList<ArrayList<Collection<String>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      MultiValueMap<String, ArrayList<Collection<String>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<ArrayList<Collection<String>>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.removeMapping("r}nnot instant8ate cla.s: ", arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      Factory<ArrayList<ArrayList<Collection<String>>>> factory0 = ExceptionFactory.exceptionFactory();
      multiValueMap0.map = null;
      MultiValueMap<String, ArrayList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<ArrayList<Collection<String>>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(":225l", arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList0);
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<ArrayList<String>>>) hashMap0, factory0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put(arrayList0, arrayList0);
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<ArrayList<String>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Object>>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>(1, 1.0F);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, multiValueMap0);
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<ArrayList<String>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList0.add(linkedList1);
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<String>>>) hashMap0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(linkedList1, (Collection<Object>) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      multiValueMap0.map = null;
      linkedList0.add(linkedList1);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll("^I8W%D:", (Collection<LinkedList<Object>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      LinkedList<ArrayList<Collection<String>>> linkedList1 = new LinkedList<ArrayList<Collection<String>>>();
      Factory<LinkedList<ArrayList<Collection<String>>>> factory0 = ConstantFactory.constantFactory(linkedList1);
      MultiValueMap<LinkedList<Object>, ArrayList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<ArrayList<Collection<String>>>>) multiValueMap0, factory0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<ArrayList<String>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, ArrayList<LinkedList<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<LinkedList<Object>>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.put(linkedList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) multiValueMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      multiValueMap0.map = null;
      MultiValueMap<Collection<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) hashMap0, factory0);
      hashMap0.put("", (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) hashMap0, factory0);
      hashMap0.put("", integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "wpuy/n$}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList1);
      multiValueMap0.put(arrayList0, arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      Object object0 = new Object();
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap0);
      Collection<Integer> collection0 = multiValueMap1.getCollection(object0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, Integer>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<HashMap<String, Integer>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>((Collection<Integer>) null);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) constantFactory0);
      boolean boolean0 = multiValueMap1.putAll(object0, (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(516);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(516);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(integer0, arrayList0);
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) hashMap0, factory0);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<String>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      Integer integer0 = new Integer(1);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) hashMap0, factory0);
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap1 = new MultiValueMap<ArrayList<String>, ArrayList<String>>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Collection<String>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(linkedList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>(linkedList0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) constantFactory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.putAll("r}nnot instant8ate cla.s: ", (Collection<LinkedList<Object>>) linkedList0);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(516);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(516);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(integer0, arrayList0);
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) hashMap0, factory0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(1, int0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) hashMap0, factory0);
      hashMap0.put("$*y[+ 3|AP>5:TzEJ2", arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      linkedList0.add(linkedList1);
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.putAll("Cannot instantiate class: ", (Collection<LinkedList<Object>>) linkedList0);
      Factory<ArrayList<ArrayList<Collection<String>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ArrayList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<ArrayList<Collection<String>>>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.removeMapping("Cannot instantiate class: ", arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      multiValueMap0.putAll("^I8Q%D:", (Collection<LinkedList<Object>>) linkedList0);
      MultiValueMap<Integer, Collection<String>> multiValueMap1 = new MultiValueMap<Integer, Collection<String>>();
      Factory<ArrayList<ArrayList<Collection<String>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ArrayList<Collection<String>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<ArrayList<Collection<String>>>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap2.removeMapping("^I8Q%D:", multiValueMap1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      Set<Map.Entry<Collection<Object>, Object>> set0 = (Set<Map.Entry<Collection<Object>, Object>>)multiValueMap0.entrySet();
      MultiValueMap<MultiValueMap<String, Collection<String>>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = new MultiValueMap<MultiValueMap<String, Collection<String>>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap0.putAll("Cannot instantiate class: ", (Collection<LinkedList<Object>>) linkedList0);
      Factory<ArrayList<ArrayList<Collection<String>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ArrayList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<ArrayList<Collection<String>>>>) multiValueMap0, factory0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap1.removeMapping("Cannot instantiate class: ", arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      MultiValueMap<ArrayList<Integer>, ArrayList<String>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, ArrayList<String>>();
      LinkedList<HashMap<Collection<String>, Integer>> linkedList0 = new LinkedList<HashMap<Collection<String>, Integer>>();
      Factory<LinkedList<HashMap<Collection<String>, Integer>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<Integer>, HashMap<Collection<String>, Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<HashMap<Collection<String>, Integer>>>) multiValueMap1, factory0);
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((LinkedList<Object>) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "zF..N2z}{ZCJ5");
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      Iterator<Map.Entry<Integer, Collection<String>>> iterator0 = (Iterator<Map.Entry<Integer, Collection<String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
