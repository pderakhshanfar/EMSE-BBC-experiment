/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:04:24 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(arrayList0, biFunction0);
      assertEquals(1, multiValueMap0.size());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList1, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Collection<ArrayList<Object>>, Integer> multiValueMap0 = new MultiValueMap<Collection<ArrayList<Object>>, Integer>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(biFunction0).apply(any() , any());
      Object object0 = multiValueMap0.compute(arrayList0, biFunction0);
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      MultiValueMap<Collection<Object>, Collection<ArrayList<Object>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Collection<ArrayList<Object>>>>) multiValueMap1);
      int int0 = multiValueMap2.size(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Object, Integer>>();
      Integer integer0 = new Integer(1);
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      multiValueMap0.putIfAbsent(integer0, linkedList0);
      multiValueMap0.getCollection(integer0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>((LinkedList<Object>) null);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap1.createCollection((-3511));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Collection<ArrayList<Object>>, Integer> multiValueMap0 = new MultiValueMap<Collection<ArrayList<Object>>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      multiValueMap0.put((Integer) null, "NoYqNGd- .oZ[");
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>((Map<Integer, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) constantFactory0);
      MultiValueMap<Integer, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<ArrayList<Object>>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<ArrayList<Object>>>();
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, Integer>();
      MultiValueMap<LinkedList<Integer>, LinkedList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<String>>>) multiValueMap1);
      multiValueMap1.map = (Map<LinkedList<Integer>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap0;
      Integer integer0 = new Integer(1760);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(integer0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      multiValueMap0.map = null;
      Integer integer0 = new Integer(1760);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, LinkedList<Object>>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList0.add(linkedList0);
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, Object>((Map<ArrayList<Integer>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      multiValueMap0.map = (Map<ArrayList<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList1, (Collection<LinkedList<Object>>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<HashMap<String, Integer>, ExceptionFactory<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<HashMap<String, Integer>, ExceptionFactory<String>>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, factory0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Integer>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>) null);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put((String) null, constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<ArrayList<Object>>>) null, (Factory<LinkedList<ArrayList<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ExceptionFactory<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, HashMap<Object, Collection<ArrayList<Object>>>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, HashMap<Object, Collection<ArrayList<Object>>>>();
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(multiValueMap0, (Integer) null);
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      multiValueMap0.putIfAbsent(abstractMap_SimpleEntry0, multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) abstractMap_SimpleEntry0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Collection<ArrayList<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Collection<ArrayList<Object>>>>) hashMap0);
      hashMap0.put((HashMap<Object, Object>) null, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      multiValueMap1.map = (Map<Collection<Object>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", "org.apache.commons.collections4.map.MultiValueMap$ValuesIterator");
      hashMap0.put(abstractMap_SimpleImmutableEntry0, "");
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Collection<Object>, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, HashMap<Object, Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<Object, Integer>((Map<Object, ? super LinkedList<Integer>>) hashMap0, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Integer, LinkedList<Object>>();
      Collection<LinkedList<Object>> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      Iterator<String> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<ArrayList<Collection<ArrayList<Object>>>, Object> hashMap0 = new HashMap<ArrayList<Collection<ArrayList<Object>>>, Object>();
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<ArrayList<Object>>>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      Factory<Collection<LinkedList<String>>> factory0 = ConstantFactory.constantFactory((Collection<LinkedList<String>>) linkedList0);
      MultiValueMap<ArrayList<Collection<ArrayList<Object>>>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<ArrayList<Object>>>, ? super Collection<LinkedList<String>>>) multiValueMap0, factory0);
      ArrayList<Collection<ArrayList<Object>>> arrayList0 = new ArrayList<Collection<ArrayList<Object>>>();
      hashMap0.put(arrayList0, multiValueMap0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) linkedList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, LinkedList<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<LinkedList<Object>> arrayList1 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList1.add(linkedList0);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<LinkedList<Object>>) arrayList1);
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, LinkedList<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList1);
      ArrayList<LinkedList<Object>> arrayList2 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList2.add(linkedList0);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<LinkedList<Object>>) arrayList2);
      assertEquals(1, arrayList2.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.putAll((Object) unaryOperator0, (Collection<AbstractMap.SimpleEntry<String, String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Collection<Object>>();
      int int0 = multiValueMap0.size((Object) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(arrayList0, biFunction0);
      ArrayList<ArrayList<Object>> arrayList1 = new ArrayList<ArrayList<Object>>();
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList1, (Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<Object>>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0, (Object) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<Object>, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, HashMap<Object, Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<HashMap<Object, Integer>> linkedList1 = new LinkedList<HashMap<Object, Integer>>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList1);
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Integer integer0 = new Integer(1480);
      boolean boolean0 = multiValueMap1.containsValue((Object) linkedList0, (Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Collection<ArrayList<Object>>>, Collection<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Collection<ArrayList<Object>>>, Collection<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put("n", arrayList0);
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Collection<String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<Collection<AbstractMap.SimpleEntry<String, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<String, Object>>>) hashMap0, factory0);
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<HashMap<Object, Collection<ArrayList<Object>>>, ExceptionFactory<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Collection<ArrayList<Object>>>, ExceptionFactory<Object>>();
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap1.putIfAbsent(hashMap0, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("or.apache.commns.collections4.ap.MultiValeMap$ValuesIterator", "or.apache.commns.collections4.ap.MultiValeMap$ValuesIterator");
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      hashMap0.put(abstractMap_SimpleImmutableEntry0, arrayList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", multiValueMap0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, (Object) null);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0, (Object) null).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(arrayList0, biFunction0);
      assertFalse(multiValueMap0.isEmpty());
      
      Object object0 = multiValueMap0.compute(arrayList0, biFunction0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Collection<ArrayList<Object>>, Object> hashMap0 = new HashMap<Collection<ArrayList<Object>>, Object>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<ArrayList<Object>>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<ArrayList<Object>>, ? super Collection<String>>) hashMap0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList1, arrayList1);
      assertEquals(1, hashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0, (Factory<Collection<ArrayList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Collection<ArrayList<Object>>, Collection<ArrayList<Object>>> multiValueMap0 = new MultiValueMap<Collection<ArrayList<Object>>, Collection<ArrayList<Object>>>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<ArrayList<Object>>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<ArrayList<Object>>, ? super LinkedList<String>>) multiValueMap0, factory0);
      Collection<Object> collection0 = multiValueMap1.values();
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap2.putAll((Object) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Collection<Object>, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, HashMap<Object, Integer>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      Iterator<Map.Entry<Integer, ArrayList<String>>> iterator0 = (Iterator<Map.Entry<Integer, ArrayList<String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      MultiValueMap<Integer, MultiValueMap<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<MultiValueMap<Integer, Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<Collection<AbstractMap.SimpleEntry<String, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<String, Object>>>) hashMap0, factory0);
      MultiValueMap<LinkedList<String>, ArrayList<Integer>> multiValueMap1 = new MultiValueMap<LinkedList<String>, ArrayList<Integer>>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) multiValueMap1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap2.putIfAbsent(linkedList0, multiValueMap0);
      int int0 = multiValueMap2.totalSize();
      assertFalse(multiValueMap2.isEmpty());
      assertEquals(1, int0);
  }
}
