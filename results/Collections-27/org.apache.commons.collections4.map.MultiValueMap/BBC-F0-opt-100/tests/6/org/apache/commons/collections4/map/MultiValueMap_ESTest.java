/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 11:28:39 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      multiValueMap0.merge(linkedList0, linkedList1, biFunction0);
      assertFalse(multiValueMap0.isEmpty());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, linkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add((Object) arrayList0);
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      Factory<Collection<LinkedList<String>>> factory0 = ConstantFactory.constantFactory((Collection<LinkedList<String>>) null);
      MultiValueMap<LinkedList<Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<String>>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) arrayList0);
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Object>>) hashMap0, factory0);
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap1.put(linkedList0, (Object) null);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      MultiValueMap<LinkedList<String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      multiValueMap1.getCollection(linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      Factory<ArrayList<AbstractMap.SimpleImmutableEntry<Integer, String>>> factory0 = ConstantFactory.constantFactory((ArrayList<AbstractMap.SimpleImmutableEntry<Integer, String>>) null);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<AbstractMap.SimpleImmutableEntry<Integer, String>>>) multiValueMap0, factory0);
      Collection<AbstractMap.SimpleImmutableEntry<Integer, String>> collection0 = multiValueMap1.createCollection(2171);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection((-1381));
      assertFalse(collection0.contains((-1381)));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Object>>();
      HashMap<LinkedList<Object>, String> hashMap0 = new HashMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, "u+I");
      multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) hashMap0);
      Factory<Collection<LinkedList<String>>> factory0 = ConstantFactory.constantFactory((Collection<LinkedList<String>>) null);
      MultiValueMap<LinkedList<Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      Factory<Collection<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Object>>>) multiValueMap1, factory0);
      multiValueMap1.map = (Map<ArrayList<Object>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, Collection<LinkedList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<LinkedList>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping((Object) null, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.put("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", linkedList0);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<String>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Object>>();
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(linkedList0, multiValueMap0);
      linkedList0.add(hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) linkedList0, (Collection<HashMap<Object, Object>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<String>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<Collection<Integer>, Object> multiValueMap1 = new MultiValueMap<Collection<Integer>, Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(collection0);
      MultiValueMap<Collection<Integer>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Object>>) multiValueMap1, (Factory<Collection<Object>>) constantFactory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap2.put(arrayList0, "6H");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>((Map<ArrayList<String>, ? super LinkedList<Integer>>) hashMap0, factory0);
      hashMap0.put(arrayList0, factory0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, arrayList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory((LinkedList<Integer>) null);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Object>>();
      multiValueMap0.map = null;
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Object, String>>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) constantFactory0);
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap1;
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap2 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap2.getCollection(multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ConstantFactory<Object>>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Collection>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<LinkedList<Collection>>>) multiValueMap1);
      multiValueMap1.map = (Map<AbstractMap.SimpleEntry<Object, Object>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      hashMap0.put((LinkedList<Object>) null, (Object) null);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put("I!PnIv;69\"", "I!PnIv;69\"");
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, Integer> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<Integer, Integer>((Map<Integer, ? super LinkedList<Integer>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      Integer integer0 = new Integer(1);
      ArrayList<LinkedList<Integer>> arrayList0 = new ArrayList<LinkedList<Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(integer0, "org.apache.commons.collections4.map.MultiValueMap$Values", biFunction0);
      arrayList0.add(linkedList0);
      boolean boolean0 = multiValueMap1.putAll(integer0, (Collection<LinkedList<Integer>>) arrayList0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Integer>, ? super Collection<Object>>) multiValueMap0);
      Set<Map.Entry<AbstractMap.SimpleEntry<String, Integer>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<String, Integer>, Object>>)multiValueMap1.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      Collection<String> collection0 = multiValueMap0.getCollection(multiValueMap1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      linkedList0.add(hashMap0);
      MultiValueMap<Object, MultiValueMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<Object, Object>>>) hashMap0);
      Factory<LinkedList<HashMap<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<HashMap<Object, Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Object) factory0, (Collection<HashMap<Object, Object>>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      boolean boolean0 = multiValueMap0.putAll("`K3D*Qy-3Sh$ox+", (Collection<ArrayList<Integer>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) hashMap0, factory0);
      int int0 = multiValueMap0.size((Object) factory0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("F;LMJ1s8!b", multiValueMap0, biFunction0);
      int int0 = multiValueMap0.size((Object) "F;LMJ1s8!b");
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue(object0, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) null, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(biFunction0).toString();
      multiValueMap0.merge(linkedList0, biFunction0, biFunction0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, ConstantFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ConstantFactory<Object>>>) hashMap0);
      Factory<LinkedList<LinkedList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<LinkedList<Integer>>>) hashMap0, factory0);
      Collection<Object> collection0 = multiValueMap1.values();
      MultiValueMap<Object, Integer> multiValueMap2 = new MultiValueMap<Object, Integer>();
      hashMap0.put(collection0, multiValueMap2);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Object>>();
      MultiValueMap<String, Collection<String>> multiValueMap1 = new MultiValueMap<String, Collection<String>>();
      multiValueMap1.put("PrototypeCloneFactory: Clone method threw an exception", multiValueMap0);
      MultiValueMap<String, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap1);
      multiValueMap2.putAll((Map<? extends String, ?>) multiValueMap1);
      assertEquals(1, multiValueMap1.size());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      Object object1 = new Object();
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(object1).when(biFunction1).apply(any() , any());
      Object object2 = multiValueMap0.merge(linkedList0, object0, biFunction1);
      boolean boolean0 = multiValueMap0.containsValue(object2);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Object>>();
      MultiValueMap<String, Collection<String>> multiValueMap1 = new MultiValueMap<String, Collection<String>>();
      multiValueMap1.put("PrototypeCloneFactory: Clone method threw an exception", multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "PrototypeCloneFactory: Clone method threw an exception");
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      Object object1 = new Object();
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(object1).when(biFunction1).apply(any() , any());
      multiValueMap0.merge(linkedList0, object0, biFunction1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Object>>();
      Integer integer0 = new Integer(2);
      multiValueMap0.putIfAbsent(integer0, integer0);
      MultiValueMap<LinkedList<Object>, MultiValueMap<Collection<Object>, Object>> multiValueMap1 = new MultiValueMap<LinkedList<Object>, MultiValueMap<Collection<Object>, Object>>();
      Object object0 = multiValueMap1.getOrDefault(multiValueMap0, multiValueMap0);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, object0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Object, Collection<Collection<Object>>> multiValueMap0 = new MultiValueMap<Object, Collection<Collection<Object>>>();
      Factory<LinkedList<LinkedList<LinkedList<Object>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, LinkedList<LinkedList<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<LinkedList<Object>>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Collection<Object>>>) multiValueMap1, (Factory<LinkedList<Collection<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      Factory<Collection<LinkedList<String>>> factory0 = ConstantFactory.constantFactory((Collection<LinkedList<String>>) null);
      MultiValueMap<LinkedList<Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<String>>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      multiValueMap0.put("_zPfJusNwT52V", "_zPfJusNwT52V");
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Factory<ArrayList<Integer>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<Integer>>) multiValueMap0, factory0);
      multiValueMap1.iterator((Object) "_zPfJusNwT52V");
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.clear();
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      Iterator<Map.Entry<ArrayList<Object>, LinkedList<Object>>> iterator0 = (Iterator<Map.Entry<ArrayList<Object>, LinkedList<Object>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
