/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 11:27:36 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>(1);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super LinkedList<Object>>) hashMap0, factory0);
      Collection<Object> collection0 = multiValueMap0.getCollection(hashMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1958);
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, HashMap<Integer, String>>();
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      Factory<Collection<Collection<Object>>> factory0 = ConstantFactory.constantFactory((Collection<Collection<Object>>) arrayList0);
      MultiValueMap<HashMap<Object, String>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<Collection<Object>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<HashMap<Object, String>, Object>) multiValueMap1;
      Integer integer0 = new Integer(1678);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, "orgOapace.commons.collections4.map.MultiValueMa$RefectionFactory");
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      Object object0 = multiValueMap0.put(linkedList0, arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(object0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<LinkedList<ConstantFactory<Collection<Object>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ConstantFactory<Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ConstantFactory<Collection<Object>>>>) hashMap0, factory0);
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<ExceptionFactory<String>, Collection<Object>> hashMap0 = new HashMap<ExceptionFactory<String>, Collection<Object>>();
      ExceptionFactory<String> exceptionFactory0 = (ExceptionFactory<String>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, String>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, String>, Collection<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      hashMap0.put(exceptionFactory0, collection0);
      MultiValueMap<ExceptionFactory<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<String>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends ExceptionFactory<String>, ?>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>();
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(multiValueMap0, arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap0).when(biFunction0).apply(any() , any());
      Integer integer0 = new Integer((-2831));
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("J$KfpG*gBm7Qn").when(biFunction1).apply(any() , any());
      multiValueMap0.compute(integer0, biFunction1);
      multiValueMap0.replaceAll(biFunction0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<?, ?>) multiValueMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      arrayList0.add((Collection<Object>) linkedList0);
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Collection<Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(linkedList0, (Collection<Collection<Object>>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<Object>>();
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) arrayList0);
      arrayList0.add((Collection<Object>) linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList0, (Collection<Collection<Object>>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) linkedList0);
      linkedList0.add((Object) arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Factory<Collection<ArrayList<MultiValueMap<Object, String>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ExceptionFactory<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Object>, ArrayList<Object>>();
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, factory0);
      Factory<ArrayList<ArrayList<Object>>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super ArrayList<ArrayList<Object>>>) multiValueMap1, factory1);
      // Undeclared exception!
      try { 
        multiValueMap2.put(arrayList0, multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<String, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<String, Object>>();
      ConstantFactory<LinkedList<AbstractMap.SimpleEntry<String, Object>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleEntry<String, Object>>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super LinkedList<AbstractMap.SimpleEntry<String, Object>>>) null, (Factory<LinkedList<AbstractMap.SimpleEntry<String, Object>>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, ArrayList<Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = multiValueMap0.put(hashMap0, hashMap0);
      hashMap0.put((Object) null, multiValueMap0);
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      LinkedList<AbstractMap.SimpleEntry<String, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<String, String>>();
      ConstantFactory<LinkedList<AbstractMap.SimpleEntry<String, String>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleEntry<String, String>>>(linkedList0);
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<String, String>>>) multiValueMap1, (Factory<LinkedList<AbstractMap.SimpleEntry<String, String>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap2.iterator(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      Factory<LinkedList<Collection<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<String>>>) hashMap0, factory0);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      arrayList0.add((Collection<Object>) linkedList1);
      linkedList1.add((Object) arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      multiValueMap0.putIfAbsent("", multiValueMap0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) hashMap0, (Factory<LinkedList<Integer>>) constantFactory0);
      MultiValueMap<Integer, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) null);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put("", multiValueMap0);
      MultiValueMap<String, LinkedList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<String>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = multiValueMap0.put(linkedList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = multiValueMap0.put(linkedList0, arrayList0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.getCollection(object0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      MultiValueMap<HashMap<Object, String>, Integer> multiValueMap1 = new MultiValueMap<HashMap<Object, String>, Integer>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Collection<ArrayList<String>>, Object> multiValueMap0 = new MultiValueMap<Collection<ArrayList<String>>, Object>();
      MultiValueMap<HashMap<String, String>, ArrayList<Collection<Object>>> multiValueMap1 = new MultiValueMap<HashMap<String, String>, ArrayList<Collection<Object>>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      multiValueMap1.put(hashMap0, multiValueMap0);
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<ArrayList<String>>, Object> multiValueMap0 = new MultiValueMap<Collection<ArrayList<String>>, Object>();
      ArrayList<ArrayList<String>> arrayList0 = new ArrayList<ArrayList<String>>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = new MultiValueMap<Object, Collection<Object>>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      Factory<Collection<LinkedList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Integer>>>) multiValueMap1, factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap2.containsValue(object0, (Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, Object>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>(linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<LinkedList, AbstractMap.SimpleImmutableEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<LinkedList, AbstractMap.SimpleImmutableEntry>>>) multiValueMap0);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) constantFactory0, (Object) constantFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Collection<ArrayList<String>>, Object> multiValueMap0 = new MultiValueMap<Collection<ArrayList<String>>, Object>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      multiValueMap1.putIfAbsent(multiValueMap0, (Object) null);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Collection<Collection<Object>>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<Collection<Object>>, AbstractMap.SimpleEntry<Object, Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ExceptionFactory<String>, Collection<Object>> hashMap0 = new HashMap<ExceptionFactory<String>, Collection<Object>>();
      ExceptionFactory<String> exceptionFactory0 = (ExceptionFactory<String>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      hashMap0.put(exceptionFactory0, arrayList0);
      MultiValueMap<ExceptionFactory<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ExceptionFactory<String>, ? super Collection<Object>>) hashMap0);
      multiValueMap0.putAll((Map<? extends ExceptionFactory<String>, ?>) hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList0.add((Collection<Object>) linkedList0);
      multiValueMap0.putAll("{", (Collection<Collection<Object>>) arrayList0);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(linkedList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(linkedList0, arrayList0);
      Object object0 = multiValueMap0.put(linkedList0, arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping(object0, arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(linkedList0, arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<String, String>>>) multiValueMap0, (Factory<LinkedList<AbstractMap.SimpleEntry<String, String>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap1.putIfAbsent(linkedList0, arrayList0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ExceptionFactory<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ExceptionFactory<Integer>>>) hashMap0);
      hashMap0.put((String) null, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      multiValueMap0.putIfAbsent("", multiValueMap0);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList0.add((Collection<Object>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll("", (Collection<Collection<Object>>) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      Iterator<Map.Entry<Object, ArrayList<Object>>> iterator0 = (Iterator<Map.Entry<Object, ArrayList<Object>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
