/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 11:29:17 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0);
      Integer integer0 = new Integer(648);
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.iterators.EmptyOrderedIterator").when(biFunction0).apply(anyInt() , any());
      multiValueMap1.compute(integer0, biFunction0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) hashMap0);
      Integer integer0 = new Integer(1611);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(integer0, arrayList0);
      Collection<ArrayList<String>> collection0 = multiValueMap0.getCollection(integer0);
      assertFalse(collection0.contains(arrayList0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>((LinkedList<String>) null);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) constantFactory0);
      Collection<String> collection0 = multiValueMap1.createCollection(420);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, Collection<Integer>> multiValueMap0 = new MultiValueMap<Integer, Collection<Integer>>();
      Collection<Collection<Integer>> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Collection<Integer>, Collection<Integer>> hashMap0 = new HashMap<Collection<Integer>, Collection<Integer>>();
      hashMap0.put((Collection<Integer>) null, (Collection<Integer>) null);
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) null);
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) hashMap0, factory0);
      MultiValueMap<Collection<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Collection<Integer>> hashMap0 = new HashMap<Object, Collection<Integer>>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      multiValueMap0.putIfAbsent(collection0, multiValueMap1);
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      ConstantFactory<LinkedList<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<Integer>>>(linkedList0);
      MultiValueMap<String, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<Integer>>>) multiValueMap1, (Factory<LinkedList<LinkedList<Integer>>>) constantFactory0);
      multiValueMap2.put("JA8", linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ConstantFactory<Integer>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ConstantFactory<Integer>, LinkedList<Integer>>();
      multiValueMap0.map = null;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<Object>>) multiValueMap0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("hCkbv!, BOV@7", "hCkbv!, BOV@7");
      multiValueMap1.putIfAbsent(abstractMap_SimpleImmutableEntry0, multiValueMap0);
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap2 = new MultiValueMap<Collection<String>, Collection<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap2.removeMapping(multiValueMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<Object>>) multiValueMap0);
      Integer integer0 = new Integer(2);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(multiValueMap1, integer0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      Function<Object, Object> function0 = Function.identity();
      multiValueMap1.computeIfAbsent(abstractMap_SimpleImmutableEntry1, function0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends AbstractMap.SimpleImmutableEntry<Object, Object>, ?>) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends AbstractMap.SimpleImmutableEntry<Object, Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(hashMap1, hashMap1);
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, Integer>((Map<HashMap<Object, Object>, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends HashMap<Object, Object>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<Integer>>();
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap0;
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add((Collection<Integer>) linkedList1);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<Collection<Integer>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<Integer>>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      multiValueMap0.map = null;
      linkedList0.add((Collection<Integer>) linkedList1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<Collection<Integer>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(489);
      MultiValueMap<ConstantFactory<Integer>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ConstantFactory<Integer>, LinkedList<Integer>>();
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Collection<Integer>, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, AbstractMap.SimpleEntry<Collection<Integer>, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super LinkedList<AbstractMap.SimpleEntry<Collection<Integer>, Integer>>>) hashMap0, factory0);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(integer0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(abstractMap_SimpleImmutableEntry0, multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>(arrayList0);
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Integer>((Map<ArrayList<Integer>, ? super Collection<Integer>>) hashMap0, (Factory<Collection<Integer>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("Dh");
      hashMap0.put("Dh", constantFactory0);
      Integer integer0 = new Integer((-1402));
      // Undeclared exception!
      try { 
        multiValueMap0.put("Dh", integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Object> hashMap0 = new HashMap<HashMap<Integer, String>, Object>();
      MultiValueMap<HashMap<Integer, String>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Collection<Integer>>, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<ConstantFactory<Integer>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ConstantFactory<Integer>, LinkedList<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap0;
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<Object>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, HashMap<Integer, Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      MultiValueMap<Collection<Integer>, ExceptionFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<ExceptionFactory<Object>>>) hashMap0);
      hashMap0.put(linkedList0, multiValueMap0.map);
      MultiValueMap<Collection<Integer>, Collection<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Collection<Integer>>>) multiValueMap1);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) arrayList0, (Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(2757);
      MultiValueMap<ConstantFactory<Integer>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ConstantFactory<Integer>, LinkedList<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Collection<Object>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, HashMap<Integer, Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      linkedList0.add((Collection<Integer>) arrayList1);
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<Collection<Integer>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<Object>>();
      Integer integer0 = new Integer(0);
      Collection<LinkedList<Object>> collection0 = multiValueMap0.getCollection(integer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<String>, MultiValueMap<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, MultiValueMap<String, Object>>();
      Iterator<MultiValueMap<String, Object>> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add((Collection<Integer>) linkedList1);
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      Factory<Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) hashMap0, factory0);
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Collection<Integer>>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Collection<String>) arrayList0, (Collection<Collection<Integer>>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<Integer>>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<Collection<Integer>>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<ArrayList<String>, MultiValueMap<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, MultiValueMap<String, Object>>();
      MultiValueMap<ConstantFactory<Object>, MultiValueMap<Object, Object>> multiValueMap1 = new MultiValueMap<ConstantFactory<Object>, MultiValueMap<Object, Object>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<MultiValueMap<String, Object>, Integer> multiValueMap0 = new MultiValueMap<MultiValueMap<String, Object>, Integer>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      multiValueMap0.put(multiValueMap1, multiValueMap1);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      int int0 = multiValueMap0.size((Object) hashMap0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Object, Collection<Integer>> hashMap0 = new HashMap<Object, Collection<Integer>>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("ExceptionFactory invoked", arrayList0);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>((Object) null);
      BiFunction<Object, Object, Collection<Integer>> biFunction0 = (BiFunction<Object, Object, Collection<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(abstractMap_SimpleImmutableEntry0, constantFactory0, biFunction0);
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) multiValueMap0, factory0);
      ConstantFactory<Object> constantFactory1 = new ConstantFactory<Object>(multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) abstractMap_SimpleImmutableEntry0, (Object) constantFactory1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, Collection<Collection<Integer>>> multiValueMap0 = new MultiValueMap<Object, Collection<Collection<Integer>>>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = new MultiValueMap<Object, LinkedList<String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(arrayList0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) constantFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Object, Collection<Integer>> hashMap0 = new HashMap<Object, Collection<Integer>>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("ExceptionFactory invoked", arrayList0);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>((Object) null);
      BiFunction<Object, Object, Collection<Integer>> biFunction0 = (BiFunction<Object, Object, Collection<Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(abstractMap_SimpleImmutableEntry0, constantFactory0, biFunction0);
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) abstractMap_SimpleImmutableEntry0, (Object) constantFactory0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      ConstantFactory<LinkedList<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<Integer>>>(linkedList0);
      MultiValueMap<String, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<Integer>>>) multiValueMap0, (Factory<LinkedList<LinkedList<Integer>>>) constantFactory0);
      multiValueMap1.totalSize();
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(491);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(integer0, integer0);
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<Object>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(abstractMap_SimpleImmutableEntry0, linkedList0);
      multiValueMap0.putAll((Map<? extends AbstractMap.SimpleImmutableEntry<Object, Object>, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<Object>>) multiValueMap0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("hCkbv!, BOV@7", "[K");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap1.putIfAbsent(abstractMap_SimpleImmutableEntry0, linkedList0);
      multiValueMap1.putAll((Map<? extends AbstractMap.SimpleImmutableEntry<Object, Object>, ?>) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ConstantFactory<Integer>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ConstantFactory<Integer>, LinkedList<Integer>>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap1.merge(multiValueMap0, multiValueMap0, biFunction0);
      boolean boolean0 = multiValueMap1.containsValue(object0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer((-1));
      multiValueMap0.putIfAbsent(integer0, (Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<ConstantFactory<Object>, Object> hashMap0 = new HashMap<ConstantFactory<Object>, Object>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>((Object) null);
      hashMap0.put(constantFactory0, constantFactory0);
      MultiValueMap<ConstantFactory<Object>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<Collection<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("b<N%Z?mm2.[`o");
      multiValueMap0.replace((Collection<String>) arrayList0, (Object) constantFactory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<Integer>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      AbstractMap.SimpleEntry<Object, Collection<Integer>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Collection<Integer>>(linkedList0, arrayList0);
      AbstractMap.SimpleImmutableEntry<Object, Collection<Integer>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Collection<Integer>>(abstractMap_SimpleEntry0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, abstractMap_SimpleImmutableEntry0, biFunction0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList1, linkedList1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Object, Collection<Collection<Integer>>> multiValueMap0 = new MultiValueMap<Object, Collection<Collection<Integer>>>();
      HashMap<String, Collection<Integer>> hashMap0 = new HashMap<String, Collection<Integer>>();
      boolean boolean0 = multiValueMap0.removeMapping(hashMap0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      assertFalse(multiValueMap0.isEmpty());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, HashMap<Integer, Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>("cf7ka");
      multiValueMap0.putIfAbsent(linkedList0, constantFactory0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0);
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap2 = new MultiValueMap<LinkedList<Object>, ArrayList<String>>();
      multiValueMap2.map = multiValueMap1.map;
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.ConstantFactory
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      boolean boolean0 = linkedList0.addAll(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ConstantFactory<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(linkedList0, linkedList0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.iterator((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<Collection<Object>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, HashMap<Integer, Object>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, ExceptionFactory<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, ExceptionFactory<String>>();
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Object>, ExceptionFactory<String>>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Object>, ExceptionFactory<String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, ExceptionFactory<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, ExceptionFactory<String>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super Collection<Collection<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
