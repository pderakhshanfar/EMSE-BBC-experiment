/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:37:21 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = new MultiValueMap<Collection<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      assertEquals(1, multiValueMap0.size());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<String, String>, Object> hashMap0 = new HashMap<HashMap<String, String>, Object>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("org.apache.commons.collections4.iterators.AbstractEmptyIterator", "Cannot instantiate class: ");
      hashMap0.put(hashMap1, hashMap1);
      MultiValueMap<HashMap<String, String>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, String>, ? super Collection<AbstractMap.SimpleEntry<String, Object>>>) hashMap0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>();
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("", (Integer) null);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleEntry1);
      multiValueMap0.put(abstractMap_SimpleImmutableEntry0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, Collection<Object>> hashMap0 = new HashMap<Integer, Collection<Object>>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>((Map<Integer, ? super Collection<Object>>) hashMap0, factory0);
      Integer integer0 = new Integer((-1));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(integer0, linkedList0);
      Collection<Object> collection0 = multiValueMap0.getCollection(integer0);
      assertFalse(collection0.contains((-1)));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ConstantFactory<Collection<LinkedList<Object>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Object>>>((Collection<LinkedList<Object>>) null);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) hashMap0, (Factory<Collection<LinkedList<Object>>>) constantFactory0);
      Collection<LinkedList<Object>> collection0 = multiValueMap0.createCollection(512);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<HashMap<String, String>, Object> hashMap0 = new HashMap<HashMap<String, String>, Object>();
      MultiValueMap<HashMap<String, String>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, String>, ? super Collection<AbstractMap.SimpleEntry<String, Object>>>) hashMap0);
      Collection<AbstractMap.SimpleEntry<String, Object>> collection0 = multiValueMap0.createCollection((-486));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = new MultiValueMap<LinkedList<Object>, Integer>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap1;
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("/(:x_9O1~4G@3", "/(:x_9O1~4G@3");
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<HashMap<String, String>, Object> hashMap0 = new HashMap<HashMap<String, String>, Object>();
      MultiValueMap<HashMap<String, String>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, String>, ? super Collection<AbstractMap.SimpleEntry<String, Object>>>) hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put(hashMap1, "q;s*&#}rG]mf%,7qxk.");
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("/(:x_9O1~4G@3", "/(:x_9O1~4G@3");
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Collection<Object>>, Integer> multiValueMap0 = new MultiValueMap<ExceptionFactory<Collection<Object>>, Integer>();
      MultiValueMap<ExceptionFactory<Collection<Object>>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Collection<Object>>, ? super Collection<Object>>) multiValueMap0);
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      Factory<LinkedList<Collection<Integer>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ExceptionFactory<Collection<Object>>, Collection<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Collection<Object>>, ? super LinkedList<Collection<Integer>>>) multiValueMap1, factory0);
      multiValueMap0.map = (Map<ExceptionFactory<Collection<Object>>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap2.size((Object) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = new MultiValueMap<Collection<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      Integer integer0 = new Integer((-1));
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction1).apply(any() , any());
      multiValueMap0.replaceAll(biFunction1);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(object0, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Integer, Object>>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<? extends Integer, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      Collection<Object> collection0 = multiValueMap0.values();
      HashMap<Collection<String>, Collection<Object>> hashMap1 = new HashMap<Collection<String>, Collection<Object>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      hashMap1.put(linkedList1, collection0);
      MultiValueMap<Collection<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Object>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends Collection<String>, ?>) hashMap1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Collection<Object>, Collection<Object>> hashMap0 = new HashMap<Collection<Object>, Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, linkedList0);
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Collection<Object>) linkedList0, (Collection<Object>) linkedList0);
      MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Integer, Object>>();
      LinkedList<AbstractMap.SimpleEntry<Integer, Object>> linkedList1 = new LinkedList<AbstractMap.SimpleEntry<Integer, Object>>();
      Integer integer0 = new Integer((-3));
      AbstractMap.SimpleImmutableEntry<Integer, Collection<Object>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Collection<Object>>(integer0, linkedList0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
      linkedList1.add(abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Collection<Object>) linkedList0, (Collection<AbstractMap.SimpleEntry<Integer, Object>>) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.map = null;
      arrayList0.add((Object) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<Object>) arrayList0, (Collection<Object>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, multiValueMap0);
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add(arrayList1);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(integer0, (Collection<ArrayList<Object>>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>((Map<String, ? super LinkedList<String>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put("C8!R#", "C8!R#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Collection<Object>, Collection<Object>> hashMap0 = new HashMap<Collection<Object>, Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>>((LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>) null);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>>) hashMap0, (Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>>) constantFactory0);
      Integer integer0 = new Integer(1470);
      // Undeclared exception!
      try { 
        multiValueMap0.put(integer0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>(685, 685);
      ArrayList<ExceptionFactory<String>> arrayList0 = new ArrayList<ExceptionFactory<String>>();
      Factory<Collection<ExceptionFactory<String>>> factory0 = ConstantFactory.constantFactory((Collection<ExceptionFactory<String>>) arrayList0);
      MultiValueMap<Collection<Object>, ExceptionFactory<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ExceptionFactory<String>>>) hashMap0, factory0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      hashMap0.put(arrayList1, multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Factory<Collection<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<ArrayList<String>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<LinkedList<String>, Collection<Object>> hashMap0 = new HashMap<LinkedList<String>, Collection<Object>>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, (Collection<Object>) null);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Collection<LinkedList<String>>, Object> hashMap1 = new HashMap<Collection<LinkedList<String>>, Object>();
      MultiValueMap<Collection<LinkedList<String>>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<LinkedList<String>>, ? super Collection<LinkedList<String>>>) hashMap1);
      hashMap1.put((Collection<LinkedList<String>>) null, hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<Object, String>>();
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>(linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) "OoN[XQ] -A'a{`@TTB");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<Collection<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Collection<Object>>>>) hashMap0);
      Integer integer0 = new Integer((-1283));
      hashMap0.put(linkedList0, (Object) null);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      Integer integer0 = new Integer(518);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(integer0, integer0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, integer0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, ConstantFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<ConstantFactory<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = new MultiValueMap<Collection<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("a=1");
      boolean boolean0 = multiValueMap0.putAll((Collection<Integer>) linkedList0, (Collection<String>) linkedList1);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      MultiValueMap<Object, Object> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<Object, Object>((Map<Object, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Collection<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Collection<String>>();
      Collection<Collection<String>> collection0 = multiValueMap0.getCollection(constantFactory0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MultiValueMap<ArrayList<Collection<Object>>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<Object>>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      Iterator<AbstractMap.SimpleImmutableEntry<String, Object>> iterator0 = multiValueMap0.iterator((Object) hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<LinkedList<String>, Collection<Object>> hashMap0 = new HashMap<LinkedList<String>, Collection<Object>>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      hashMap0.put(linkedList0, linkedList1);
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, HashMap<Object, String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<HashMap<Object, String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      int int0 = multiValueMap0.size((Object) constantFactory0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<Object, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap0);
      int int0 = multiValueMap1.size(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>(linkedList0);
      MultiValueMap<Collection<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) constantFactory0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) linkedList1, (Object) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<Object, String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>(linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) "OoN[XQ] -A'a{`@TTB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<Object, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) multiValueMap0);
      multiValueMap1.totalSize();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<ConstantFactory<String>, Object> hashMap0 = new HashMap<ConstantFactory<String>, Object>(18, 3925.385F);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("org.apache.commons.collections4.map.MultiValueMap$1");
      Integer integer0 = new Integer((-1));
      hashMap0.put(constantFactory0, integer0);
      MultiValueMap<ConstantFactory<String>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<LinkedList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ConstantFactory<String>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends Collection<Object>, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap1 = new MultiValueMap<Collection<Object>, LinkedList<String>>();
      multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) multiValueMap1);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = new MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<Object, String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList0);
      MultiValueMap<Collection<Integer>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<String>>) multiValueMap1, (Factory<Collection<String>>) constantFactory0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap2.merge(linkedList1, multiValueMap0, biFunction0);
      boolean boolean0 = multiValueMap2.containsValue((Object) "");
      assertFalse(multiValueMap2.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = new MultiValueMap<Collection<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("a");
      multiValueMap0.putAll((Collection<Integer>) linkedList0, (Collection<String>) linkedList1);
      boolean boolean0 = multiValueMap0.containsValue((Object) "a");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      MultiValueMap<Collection<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap1.removeMapping(object0, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = new MultiValueMap<Collection<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("1i/)\u0004h");
      multiValueMap0.putAll((Collection<Integer>) linkedList0, (Collection<String>) linkedList1);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>(2074);
      Integer integer0 = new Integer(2074);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<LinkedList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, LinkedList<Integer>>();
      boolean boolean0 = multiValueMap0.removeMapping("C8!R#", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<String>>) multiValueMap0, (Factory<Collection<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<Collection<Integer>, String> multiValueMap0 = new MultiValueMap<Collection<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      MultiValueMap<Collection<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((Collection<Object>) arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Collection<Object>) arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, ConstantFactory<String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, ConstantFactory<String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MultiValueMap<MultiValueMap<Integer, Object>, ConstantFactory<Integer>> multiValueMap0 = new MultiValueMap<MultiValueMap<Integer, Object>, ConstantFactory<Integer>>();
      Iterator<Map.Entry<MultiValueMap<Integer, Object>, ConstantFactory<Integer>>> iterator0 = (Iterator<Map.Entry<MultiValueMap<Integer, Object>, ConstantFactory<Integer>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MultiValueMap<MultiValueMap<Integer, Object>, ConstantFactory<Integer>> multiValueMap0 = new MultiValueMap<MultiValueMap<Integer, Object>, ConstantFactory<Integer>>();
      MultiValueMap<MultiValueMap<Integer, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<MultiValueMap<Integer, Object>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<MultiValueMap<Integer, Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<LinkedList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<Integer>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(2119);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }
}
