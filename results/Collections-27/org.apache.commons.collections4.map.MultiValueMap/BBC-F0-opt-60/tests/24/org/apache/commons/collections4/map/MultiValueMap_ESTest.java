/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:08:46 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object> hashMap0 = new HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object>();
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      hashMap0.put(linkedList0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList1);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      MultiValueMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<AbstractMap.SimpleEntry<Object, String>>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      boolean boolean0 = multiValueMap0.replace(linkedList0, (Object) linkedList1, (Object) linkedList2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Integer integer0 = new Integer((-1));
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge((Object) null, integer0, biFunction0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String>();
      Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object> hashMap0 = new HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object>();
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry1);
      linkedList0.add(abstractMap_SimpleEntry0);
      hashMap0.put(linkedList0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList1);
      MultiValueMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<AbstractMap.SimpleEntry<Object, String>>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      multiValueMap0.put("", (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.put("uiG^1PC-[ *;'>t1R", "uiG^1PC-[ *;'>t1R");
      multiValueMap0.getCollection("uiG^1PC-[ *;'>t1R");
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      Factory<LinkedList<Collection<Integer>>> factory0 = ConstantFactory.constantFactory((LinkedList<Collection<Integer>>) null);
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Collection<Integer>>>) multiValueMap0, factory0);
      Collection<Collection<Integer>> collection0 = multiValueMap1.createCollection(741);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) multiValueMap0);
      Collection<AbstractMap.SimpleEntry<String, String>> collection0 = multiValueMap1.createCollection(4071);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Collection<Object>, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Collection<Object>, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(arrayList0);
      linkedList0.add((Object) arrayList0);
      arrayList0.add((Object) multiValueMap0);
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(linkedList0, function0);
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<ConstantFactory<Integer>, HashMap<String, Integer>> multiValueMap1 = new MultiValueMap<ConstantFactory<Integer>, HashMap<String, Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.map = (Map<Object, Object>) multiValueMap0;
      Integer integer0 = new Integer((-5));
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(integer0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object> hashMap0 = new HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object>();
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      hashMap0.put(linkedList0, "(AT=)Bf|(");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList1);
      MultiValueMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<AbstractMap.SimpleEntry<Object, String>>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(linkedList2, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      Collection<Object> collection0 = multiValueMap1.values();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) multiValueMap1, collection0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putAll((Object) linkedList0, (Collection<Object>) arrayList0);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<String, Collection<Object>>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<String, Collection<Object>>>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) null, (Factory<Collection<Integer>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<Object>>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Object>>) multiValueMap1, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Collection<Object>, ArrayList<Collection<Object>>>, ? super Collection<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry, LinkedList>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<Object>>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Object>>, Object>();
      MultiValueMap<HashMap<String, Object>, HashMap<Integer, Integer>> multiValueMap1 = new MultiValueMap<HashMap<String, Object>, HashMap<Integer, Integer>>();
      multiValueMap0.map = null;
      Collection<Object> collection0 = multiValueMap1.values();
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, Object> hashMap0 = new HashMap<HashMap<Integer, Object>, Object>();
      Factory<ArrayList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Integer, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Object>, ? super ArrayList<Integer>>) hashMap0, factory0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      hashMap0.put(hashMap1, "8~B7Z");
      MultiValueMap<Collection<Object>, String> multiValueMap1 = new MultiValueMap<Collection<Object>, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) multiValueMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = new MultiValueMap<String, LinkedList<String>>();
      MultiValueMap<String, LinkedList<ArrayList<String>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<ArrayList<String>>>>) multiValueMap1);
      multiValueMap1.map = (Map<String, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.map = null;
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = new MultiValueMap<String, LinkedList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object> hashMap0 = new HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object>();
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      hashMap0.put(linkedList0, (Object) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList1);
      MultiValueMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<AbstractMap.SimpleEntry<Object, String>>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      LinkedList<Object> linkedList2 = new LinkedList<Object>(linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object> hashMap0 = new HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object>();
      Object object0 = new Object();
      hashMap0.put((LinkedList<AbstractMap.SimpleEntry<Object, String>>) null, object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<AbstractMap.SimpleEntry<Object, String>>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) constantFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object> hashMap0 = new HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<AbstractMap.SimpleEntry<Object, String>>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Integer>();
      Integer integer0 = new Integer((-36));
      Collection<Integer> collection0 = multiValueMap0.getCollection(integer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ConstantFactory<Object>, Integer> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, Integer>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      HashMap<Collection<Object>, String> hashMap0 = new HashMap<Collection<Object>, String>();
      Object object0 = multiValueMap1.put(multiValueMap0, hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer((-1));
      arrayList0.add((Object) integer0);
      boolean boolean0 = multiValueMap1.putAll(object0, (Collection<Object>) arrayList0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super Collection<String>>) hashMap0);
      Integer integer0 = new Integer(52);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("!mSG\u0006", integer0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleEntry1, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap0, factory0);
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ConstantFactory<Object>, Integer> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, Integer>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      HashMap<Collection<Object>, String> hashMap0 = new HashMap<Collection<Object>, String>();
      multiValueMap1.put(multiValueMap0, hashMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) null);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.put("uiG^1PC-[ *;'>t1R", "uiG^1PC-[ *;'>t1R");
      boolean boolean0 = multiValueMap0.containsValue((Object) "uiG^1PC-[ *;'>t1R", (Object) "uiG^1PC-[ *;'>t1R");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer((-1301));
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put(integer0, "IteratorChain cannot be changed after the first use of a method from the Iterator interface");
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent("InstantiateFactory: Constructor must be public", function0);
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object> hashMap0 = new HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object>();
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      hashMap0.put(linkedList0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList1);
      MultiValueMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<AbstractMap.SimpleEntry<Object, String>>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      Integer integer0 = new Integer(2251);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.putIfAbsent("The comparator must not be null", "The comparator must not be null");
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "The comparator must not be null");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent("=qDou=@~bP;:-", function0);
      multiValueMap0.put("=qDou=@~bP;:-", "=qDou=@~bP;:-");
      boolean boolean0 = multiValueMap0.removeMapping("=qDou=@~bP;:-", "=qDou=@~bP;:-");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object> hashMap0 = new HashMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, Object>();
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      hashMap0.put(linkedList0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList1);
      MultiValueMap<LinkedList<AbstractMap.SimpleEntry<Object, String>>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<AbstractMap.SimpleEntry<Object, String>>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList1, linkedList0);
      assertFalse(hashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.putIfAbsent("1T", "1T");
      ArrayList<LinkedList<Collection<Object>>> arrayList0 = new ArrayList<LinkedList<Collection<Object>>>();
      ConstantFactory<Collection<LinkedList<Collection<Object>>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Collection<Object>>>>(arrayList0);
      MultiValueMap<Object, LinkedList<Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Collection<Object>>>>) multiValueMap0, (Factory<Collection<LinkedList<Collection<Object>>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<ConstantFactory<Object>, Object> hashMap0 = new HashMap<ConstantFactory<Object>, Object>();
      MultiValueMap<ConstantFactory<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<Object>>) hashMap0);
      Iterator<Map.Entry<ConstantFactory<Object>, Object>> iterator0 = (Iterator<Map.Entry<ConstantFactory<Object>, Object>>)multiValueMap0.iterator();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      hashMap1.put(integer0, iterator0);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap1);
      MultiValueMap<Integer, MultiValueMap<String, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<MultiValueMap<String, String>>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<? extends Integer, ?>) multiValueMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap$1 cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Factory<ArrayList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<LinkedList<Object>>>) multiValueMap0, factory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }
}
