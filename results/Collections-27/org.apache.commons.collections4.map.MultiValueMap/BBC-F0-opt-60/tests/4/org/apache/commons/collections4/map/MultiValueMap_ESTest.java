/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:36:14 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, HashMap<Integer, String>>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      multiValueMap0.put(linkedList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, HashMap<Integer, String>>();
      multiValueMap0.put(linkedList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, String>();
      multiValueMap1.putIfAbsent(arrayList0, "=j9i5");
      multiValueMap1.getCollection(object0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<String>>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>((LinkedList<Object>) null);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap1.createCollection(10);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      Collection<LinkedList<Object>> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0);
      hashMap0.put((Integer) null, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, Collection<Object>>();
      multiValueMap0.map = null;
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put((Integer) null, hashMap1);
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping((Object) null, factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(184);
      arrayList0.add(integer0);
      MultiValueMap<String, ArrayList<String>> multiValueMap0 = new MultiValueMap<String, ArrayList<String>>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>((Map<String, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll("fBA", (Collection<Integer>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("K\"tQ>>5awS:=$PI4");
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((String) null, (Collection<String>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("-VzXlvUk");
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory((LinkedList<String>) null);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll("Vh}n~@", (Collection<String>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      HashMap<Collection<Integer>, Collection<LinkedList<Object>>> hashMap0 = new HashMap<Collection<Integer>, Collection<LinkedList<Object>>>();
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<LinkedList<Object>>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<LinkedList<Object>> arrayList1 = new ArrayList<LinkedList<Object>>();
      HashMap<Collection<Integer>, Object> hashMap1 = new HashMap<Collection<Integer>, Object>();
      hashMap1.put(arrayList0, multiValueMap0);
      multiValueMap1.map = (Map<Collection<Integer>, Object>) hashMap1;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList1.add(linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Collection<Integer>) arrayList0, (Collection<LinkedList<Object>>) arrayList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, factory0);
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ConstantFactory<LinkedList<ArrayList<String>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<String>>>(linkedList0);
      MultiValueMap<Object, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<String>>>) multiValueMap1, (Factory<LinkedList<ArrayList<String>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap2.put(multiValueMap1.map, factory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      Factory<ArrayList<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      hashMap0.put("org.apache.commons.collections4.functors.ConstantFactory", "org.apache.commons.collections4.functors.ConstantFactory");
      // Undeclared exception!
      try { 
        multiValueMap0.put("org.apache.commons.collections4.functors.ConstantFactory", hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<String>>>) null, (Factory<Collection<ArrayList<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<ArrayList<Collection<LinkedList<Object>>>, LinkedList<String>> multiValueMap1 = new MultiValueMap<ArrayList<Collection<LinkedList<Object>>>, LinkedList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0);
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      ConstantFactory<LinkedList<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<Integer>>>(linkedList0);
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<Integer>>>) multiValueMap0, (Factory<LinkedList<LinkedList<Integer>>>) constantFactory0);
      MultiValueMap<Object, Collection<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<String>>>) multiValueMap1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      multiValueMap1.map = (Map<Object, Object>) multiValueMap2;
      MultiValueMap<Integer, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) arrayList0, (Object) multiValueMap3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, HashMap<Integer, String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.map = null;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0, (Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<ConstantFactory<Object>, Object> hashMap0 = new HashMap<ConstantFactory<Object>, Object>();
      Factory<LinkedList<ConstantFactory<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ConstantFactory<Object>, ConstantFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super LinkedList<ConstantFactory<Object>>>) hashMap0, factory0);
      MultiValueMap<ConstantFactory<Object>, Collection<ConstantFactory<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<Collection<ConstantFactory<String>>>>) multiValueMap0);
      HashMap<ArrayList<ConstantFactory<Object>>, Object> hashMap1 = new HashMap<ArrayList<ConstantFactory<Object>>, Object>();
      MultiValueMap<ArrayList<ConstantFactory<Object>>, ConstantFactory<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<ConstantFactory<Object>>, ? super Collection<ConstantFactory<Object>>>) hashMap1);
      hashMap0.put((ConstantFactory<Object>) null, multiValueMap2);
      MultiValueMap<ConstantFactory<Object>, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<String>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap3.containsValue((Object) null, (Object) factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Collection<LinkedList<Object>>> hashMap0 = new HashMap<Integer, Collection<LinkedList<Object>>>();
      Integer integer0 = new Integer((-2549));
      hashMap0.put(integer0, (Collection<LinkedList<Object>>) null);
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("gRk%j}3XHU@lZXh<)R");
      multiValueMap0.putAll("gRk%j}3XHU@lZXh<)R", (Collection<String>) arrayList0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<String, String>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      MultiValueMap<Collection<Object>, String> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<Collection<Object>, String>((Map<Collection<Object>, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, String>();
      multiValueMap1.getCollection(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<HashMap<String, String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<HashMap<String, String>, LinkedList<String>>();
      MultiValueMap<ArrayList<Integer>, LinkedList<String>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, LinkedList<String>>();
      Iterator<LinkedList<String>> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("K\"tQ>>5aKS:=jPI4");
      multiValueMap0.put("K\"tQ>>5aKS:=jPI4", "K\"tQ>5aKS:=jPI4");
      boolean boolean0 = multiValueMap0.putAll("K\"tQ>>5aKS:=jPI4", (Collection<String>) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) hashMap0);
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<String>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap1.putAll(arrayList0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, HashMap<Integer, String>>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      MultiValueMap<Integer, LinkedList<String>> multiValueMap1 = new MultiValueMap<Integer, LinkedList<String>>();
      int int0 = multiValueMap1.size(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<HashMap<String, String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<HashMap<String, String>, LinkedList<String>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      multiValueMap0.put(hashMap0, hashMap0);
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      int int0 = multiValueMap0.size((Object) multiValueMap1);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, HashMap<Integer, String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, HashMap<Integer, String>>();
      multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      HashMap<LinkedList<Object>, Integer> hashMap0 = new HashMap<LinkedList<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(244);
      hashMap0.put(linkedList0, integer0);
      multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addFirst(multiValueMap0);
      multiValueMap0.putAll("o/(x>&e'fTX`o@e_i", (Collection<Object>) linkedList0);
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, HashMap<Integer, String>>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      Integer integer0 = new Integer(3);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("K\"t=Q>5a4KS:=jPI4<");
      multiValueMap0.putAll("K\"t=Q>5a4KS:=jPI4<", (Collection<String>) arrayList0);
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "K\"t=Q>5a4KS:=jPI4<");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, HashMap<Integer, String>>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, HashMap<Integer, String>>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(object0, linkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Collection<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<String>>();
      boolean boolean0 = multiValueMap0.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add(":P,jZ5/r715C");
      multiValueMap0.putAll(":P,jZ5/r715C", (Collection<String>) arrayList0);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      MultiValueMap<String, LinkedList<Collection<LinkedList<Object>>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Collection<LinkedList<Object>>>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap2.values();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Object) ":P,jZ5/r715C", collection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("K\"t=Q>5a4KS:=jPI4<");
      multiValueMap0.putAll("K\"t=Q>5a4KS:=jPI4<", (Collection<String>) arrayList0);
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0);
      multiValueMap1.iterator((Object) "K\"t=Q>5a4KS:=jPI4<");
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      MultiValueMap<String, LinkedList<Collection<LinkedList<Object>>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Collection<LinkedList<Object>>>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll((Object) ":P,jZ5/r715C", collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<String>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, HashMap<Integer, String>>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping(object0, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<ConstantFactory<Object>, Object> hashMap0 = new HashMap<ConstantFactory<Object>, Object>();
      Factory<LinkedList<ConstantFactory<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ConstantFactory<Object>, ConstantFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super LinkedList<ConstantFactory<Object>>>) hashMap0, factory0);
      MultiValueMap<ConstantFactory<Object>, Collection<ConstantFactory<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<Collection<ConstantFactory<String>>>>) multiValueMap0);
      multiValueMap1.clear();
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Iterator<Map.Entry<Object, Integer>> iterator0 = (Iterator<Map.Entry<Object, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
