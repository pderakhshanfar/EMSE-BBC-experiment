/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:37:06 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Integer>>) hashMap0, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(linkedList1, arrayList0);
      multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, ArrayList<Collection<Integer>>> multiValueMap0 = new MultiValueMap<String, ArrayList<Collection<Integer>>>();
      MultiValueMap<String, HashMap<LinkedList<String>, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<LinkedList<String>, Integer>>>) multiValueMap0);
      Object object0 = multiValueMap1.putIfAbsent("!DY3Nn>MBw_ZD34{Mu4", "!DY3Nn>MBw_ZD34{Mu4");
      assertNotNull(object0);
      
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.put((Object) null, (Object) null);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<ArrayList<Collection<Integer>>, Collection<Integer>> hashMap0 = new HashMap<ArrayList<Collection<Integer>>, Collection<Integer>>();
      hashMap0.put(arrayList0, linkedList0);
      MultiValueMap<ArrayList<Collection<Integer>>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Integer>>, ? super Collection<Integer>>) hashMap0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Collection<Integer> collection0 = multiValueMap0.getCollection(arrayList1);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<MultiValueMap<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, Object>, LinkedList<Object>>();
      ConstantFactory<LinkedList<ExceptionFactory<String>>> constantFactory0 = new ConstantFactory<LinkedList<ExceptionFactory<String>>>((LinkedList<ExceptionFactory<String>>) null);
      MultiValueMap<MultiValueMap<Object, Object>, ExceptionFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<MultiValueMap<Object, Object>, ? super LinkedList<ExceptionFactory<String>>>) multiValueMap0, (Factory<LinkedList<ExceptionFactory<String>>>) constantFactory0);
      Collection<ExceptionFactory<String>> collection0 = multiValueMap1.createCollection(764);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection((-470));
      assertFalse(collection0.contains((-470)));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, HashMap<HashMap, LinkedList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<HashMap<HashMap, LinkedList<String>>>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleEntry<Object, String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<Integer, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, MultiValueMap<Object, String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, MultiValueMap<Object, String>>();
      MultiValueMap<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<Collection<Integer>, Integer>> multiValueMap1 = new MultiValueMap<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<Collection<Integer>, Integer>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Collection<Integer>>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Collection<Integer>, Collection<Integer>>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Integer>, Collection<Integer>>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Collection<Integer>, Collection<Integer>>, ? super Collection<String>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      AbstractMap.SimpleEntry<Collection<Integer>, Collection<Integer>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Collection<Integer>, Collection<Integer>>(arrayList0, arrayList0);
      Integer integer0 = new Integer(1345);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      multiValueMap0.put(abstractMap_SimpleEntry0, constantFactory0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<Object>>>) hashMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<?, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) hashMap0, factory0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, factory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, ArrayList<Collection<Integer>>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, ArrayList<Collection<Integer>>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Integer>, ? super Collection<Collection<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.put((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(integer0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) null, (Factory<Collection<String>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<String, ArrayList<Collection<Integer>>> multiValueMap0 = new MultiValueMap<String, ArrayList<Collection<Integer>>>();
      MultiValueMap<String, HashMap<LinkedList<String>, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<LinkedList<String>, Integer>>>) multiValueMap0);
      multiValueMap1.putIfAbsent(" ZV", " ZV");
      multiValueMap1.replace(" ZV", (Object) multiValueMap0);
      MultiValueMap<Object, Collection<Integer>> multiValueMap2 = new MultiValueMap<Object, Collection<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ArrayList<String>>();
      MultiValueMap<LinkedList<Integer>, HashMap<String, Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<HashMap<String, Collection<Integer>>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<Collection<Integer>, Integer>> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, Object>, AbstractMap.SimpleEntry<Collection<Integer>, Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      Factory<Collection<HashMap<String, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<String, Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(641);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Integer, HashMap<String, Integer>> multiValueMap0 = new MultiValueMap<Integer, HashMap<String, Integer>>();
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<Object>>>) multiValueMap1, factory0);
      multiValueMap1.map = (Map<String, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("cH@Yn%B", "cH@Yn%B");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap0.replaceAll(biFunction0);
      MultiValueMap<String, ArrayList<Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Collection<Integer>>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) "cH@Yn%B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      MultiValueMap<Collection<Integer>, MultiValueMap<Collection<Integer>, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<MultiValueMap<Collection<Integer>, String>>>) hashMap0);
      MultiValueMap<Object, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1);
      hashMap0.put(linkedList0, multiValueMap3);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, ArrayList<Collection<Integer>>> multiValueMap0 = new MultiValueMap<String, ArrayList<Collection<Integer>>>();
      MultiValueMap<String, HashMap<LinkedList<String>, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<LinkedList<String>, Integer>>>) multiValueMap0);
      multiValueMap1.putIfAbsent("*86\"]zj!d", "*86\"]zj!d");
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0, factory0);
      assertFalse(multiValueMap0.isEmpty());
      
      multiValueMap2.put("*86\"]zj!d", multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) "*86\"]zj!d", (Object) multiValueMap1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, Object>>();
      Collection<HashMap<String, Object>> collection0 = multiValueMap0.getCollection("");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<ArrayList<Integer>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      ConstantFactory<LinkedList<Collection<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Integer>>>(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super LinkedList<Collection<Integer>>>) multiValueMap0, (Factory<LinkedList<Collection<Integer>>>) constantFactory0);
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      hashMap0.put(linkedList2, multiValueMap1);
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList1);
      MultiValueMap<LinkedList<String>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      linkedList0.add((Collection<Integer>) null);
      MultiValueMap<Collection<Collection<Integer>>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Collection<Integer>>, Collection<Integer>>();
      boolean boolean0 = multiValueMap0.putAll((Collection<Collection<Integer>>) linkedList0, (Collection<Collection<Integer>>) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add((Collection<Integer>) linkedList1);
      MultiValueMap<Collection<Collection<Integer>>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Collection<Integer>>, Collection<Integer>>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.putAll((Collection<Collection<Integer>>) linkedList0, (Collection<Collection<Integer>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      boolean boolean0 = multiValueMap0.putAll((String) null, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, Object>>();
      MultiValueMap<Integer, LinkedList<String>> multiValueMap1 = new MultiValueMap<Integer, LinkedList<String>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, ArrayList<Collection<Integer>>> multiValueMap0 = new MultiValueMap<String, ArrayList<Collection<Integer>>>();
      MultiValueMap<String, HashMap<LinkedList<String>, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<LinkedList<String>, Integer>>>) multiValueMap0);
      multiValueMap1.putIfAbsent("*86\"]zj!d", "*86\"]zj!d");
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap2.containsValue((Object) "*86\"]zj!d", (Object) multiValueMap1);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = new MultiValueMap<Collection<Integer>, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) arrayList0);
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) factory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      ConstantFactory<LinkedList<Collection<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Integer>>>(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super LinkedList<Collection<Integer>>>) multiValueMap0, (Factory<LinkedList<Collection<Integer>>>) constantFactory0);
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      hashMap0.put(linkedList2, multiValueMap1);
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList1);
      MultiValueMap<LinkedList<String>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<? extends LinkedList<String>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(multiValueMap0, "Unsupported object tpe: null");
      multiValueMap0.putIfAbsent(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, ArrayList<Collection<Integer>>> multiValueMap0 = new MultiValueMap<String, ArrayList<Collection<Integer>>>();
      MultiValueMap<String, HashMap<LinkedList<String>, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<LinkedList<String>, Integer>>>) multiValueMap0);
      multiValueMap1.putIfAbsent(" ZV", " ZV");
      multiValueMap1.replace(" ZV", (Object) multiValueMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap1);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<String, ArrayList<Collection<Integer>>> multiValueMap0 = new MultiValueMap<String, ArrayList<Collection<Integer>>>();
      MultiValueMap<String, HashMap<LinkedList<String>, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<LinkedList<String>, Integer>>>) multiValueMap0);
      multiValueMap1.putIfAbsent(" ZV", " ZV");
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      Factory<Collection<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory((Collection<LinkedList<Object>>) arrayList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) hashMap0, factory0);
      multiValueMap0.putIfAbsent(arrayList0, (Object) null);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, hashMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList1, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      MultiValueMap<HashMap<String, Object>, MultiValueMap<String, Object>> multiValueMap2 = new MultiValueMap<HashMap<String, Object>, MultiValueMap<String, Object>>();
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll((Object) multiValueMap0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<String, String>>();
      Iterator<Map.Entry<ArrayList<Object>, AbstractMap.SimpleEntry<String, String>>> iterator0 = (Iterator<Map.Entry<ArrayList<Object>, AbstractMap.SimpleEntry<String, String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      ConstantFactory<LinkedList<Collection<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Integer>>>(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super LinkedList<Collection<Integer>>>) multiValueMap0, (Factory<LinkedList<Collection<Integer>>>) constantFactory0);
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      boolean boolean0 = multiValueMap1.removeMapping(arrayList0, constantFactory0);
      assertFalse(boolean0);
  }
}
