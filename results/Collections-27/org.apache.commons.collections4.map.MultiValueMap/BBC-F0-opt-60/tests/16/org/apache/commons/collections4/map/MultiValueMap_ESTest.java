/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:03:18 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList1, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) hashMap0);
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList0.add(linkedList0);
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap1.putAll("0&vDp", (Collection<LinkedList<Object>>) arrayList0);
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      int int0 = multiValueMap2.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<LinkedList<Integer>, Collection<String>> hashMap0 = new HashMap<LinkedList<Integer>, Collection<String>>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>((Map<LinkedList<Integer>, ? super Collection<String>>) hashMap0, factory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Integer>>) multiValueMap0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      hashMap0.put(linkedList0, linkedList1);
      Collection<Integer> collection0 = multiValueMap1.getCollection(linkedList1);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) null);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Object>((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap0, factory0);
      Collection<Object> collection0 = multiValueMap1.createCollection(0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      Collection<Collection<Object>> collection0 = multiValueMap0.createCollection((-423));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>((Object) null);
      hashMap0.put("4@7ib&832=[(*", constantFactory0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Collection<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Collection<String>>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.ConstantFactory
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<ArrayList<String>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList1);
      Integer integer0 = new Integer(0);
      hashMap0.put(linkedList0, integer0);
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<String>>) hashMap0);
      Object object0 = multiValueMap0.put(linkedList0, hashMap0);
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, Integer>();
      MultiValueMap<ArrayList<Integer>, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<LinkedList<Integer>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.removeMapping(object0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.map = null;
      Integer integer0 = new Integer(989);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(integer0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>(72);
      Integer integer0 = new Integer(72);
      hashMap0.put(linkedList1, integer0);
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(1, 72);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(linkedList2, multiValueMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>((Map<Object, ? super ArrayList<Object>>) hashMap0, factory0);
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList1);
      Integer integer0 = new Integer(0);
      Object object0 = hashMap0.put(linkedList0, integer0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList0.push(integer0);
      hashMap0.put(linkedList2, object0);
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<Integer>, ?>) hashMap0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerLast(multiValueMap0);
      multiValueMap0.put(linkedList0, linkedList0);
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      arrayList0.add(linkedList0);
      multiValueMap0.putAll("X`+x0!9p~t%", (Collection<LinkedList<Object>>) arrayList0);
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) hashMap0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>(arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(arrayList1, (Collection<LinkedList<Object>>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Integer>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(multiValueMap0);
      multiValueMap0.put(hashMap1, constantFactory0);
      hashMap1.put(hashMap0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(hashMap1, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put(hashMap1, hashMap1);
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(hashMap1, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Factory<Collection<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory((Collection<ArrayList<Object>>) null);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(hashMap0, unaryOperator0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      MultiValueMap<LinkedList<String>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      linkedList0.add(object0);
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = new MultiValueMap<Integer, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      linkedList0.add(object0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0, (Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.map = null;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList1, (Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Collection<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<String, Collection<String>>>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList0);
      hashMap0.put((Object) null, constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList1);
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      hashMap0.put(linkedList0, (Object) null);
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      MultiValueMap<ArrayList<String>, MultiValueMap<Object, Object>> multiValueMap1 = new MultiValueMap<ArrayList<String>, MultiValueMap<Object, Object>>();
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<String>>>) multiValueMap1);
      Object object0 = multiValueMap2.getOrDefault(linkedList0, linkedList1);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Object>, ? super LinkedList<ArrayList<String>>>) hashMap0, factory0);
      Integer integer0 = new Integer((-1543));
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, factory0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleEntry1, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory(collection0);
      MultiValueMap<String, Object> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<String, Object>((Map<String, ? super Collection<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap1.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<LinkedList<Integer>, ArrayList<Collection<String>>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ArrayList<Collection<String>>>();
      Collection<ArrayList<Collection<String>>> collection0 = multiValueMap0.getCollection(linkedList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<LinkedList<Integer>, Collection<String>> hashMap0 = new HashMap<LinkedList<Integer>, Collection<String>>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>((Map<LinkedList<Integer>, ? super Collection<String>>) hashMap0, factory0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Iterator<String> iterator0 = multiValueMap0.iterator((Object) hashMap1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      Factory<LinkedList<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      Object object0 = new Object();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      multiValueMap0.compute(object0, biFunction0);
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<Integer>>>) multiValueMap0, factory0);
      multiValueMap1.iterator(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = new MultiValueMap<String, LinkedList<Object>>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge("", multiValueMap0, biFunction0);
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList0.add(linkedList0);
      boolean boolean0 = multiValueMap1.putAll("", (Collection<LinkedList<Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Factory<Collection<ArrayList<String>>> factory0 = ConstantFactory.constantFactory((Collection<ArrayList<String>>) null);
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.putAll("Caaqlm@k*9IL", (Collection<ArrayList<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<String>>();
      multiValueMap0.put((Collection<String>) null, (Object) null);
      int int0 = multiValueMap0.size((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      multiValueMap0.put(linkedList0, hashMap0);
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      LinkedList<Collection<String>> linkedList1 = new LinkedList<Collection<String>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<String>>) hashMap0);
      multiValueMap0.put(linkedList0, hashMap0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<String>>) hashMap0);
      Integer integer0 = new Integer((-2736));
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<ExceptionFactory<String>, Integer> multiValueMap0 = new MultiValueMap<ExceptionFactory<String>, Integer>();
      MultiValueMap<LinkedList<Integer>, String> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap1.putIfAbsent(linkedList0, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList1);
      hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      Integer integer0 = new Integer((-896));
      boolean boolean0 = multiValueMap0.removeMapping(integer0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<HashMap, Object>>>) multiValueMap1, (Factory<LinkedList<AbstractMap.SimpleEntry<HashMap, Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) hashMap0);
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList0.add(linkedList0);
      multiValueMap0.putAll("0&vDp", (Collection<LinkedList<Object>>) arrayList0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<ExceptionFactory<String>, Object> hashMap0 = new HashMap<ExceptionFactory<String>, Object>(901, 901);
      MultiValueMap<ExceptionFactory<String>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ExceptionFactory<String>, ? super Collection<LinkedList<String>>>) hashMap0);
      ExceptionFactory<String> exceptionFactory0 = (ExceptionFactory<String>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      hashMap0.put(exceptionFactory0, "");
      MultiValueMap<ExceptionFactory<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<String>, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      boolean boolean0 = multiValueMap1.putAll((String) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Integer>>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Integer>>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      Iterator<Map.Entry<Collection<String>, String>> iterator0 = (Iterator<Map.Entry<Collection<String>, String>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
