/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:06:27 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Integer integer0 = new Integer((-10));
      Integer integer1 = new Integer((-2146683242));
      Object object0 = multiValueMap0.putIfAbsent(integer0, integer1);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<HashMap<Object, Object>> arrayList0 = new ArrayList<HashMap<Object, Object>>();
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, arrayList0, biFunction0);
      multiValueMap0.getCollection(arrayList0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<ArrayList<Collection<Object>>, Collection<Object>> hashMap0 = new HashMap<ArrayList<Collection<Object>>, Collection<Object>>();
      MultiValueMap<ArrayList<Collection<Object>>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Object>>, ? super Collection<Object>>) hashMap0);
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>((Collection<Object>) null);
      MultiValueMap<ArrayList<Collection<Object>>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Collection<Object>>, Object>((Map<ArrayList<Collection<Object>>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap1.createCollection(4123);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Object>, ExceptionFactory<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Object>, ExceptionFactory<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleEntry1, "G*yT`C%;<1Dc3%%~gf^");
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<HashMap<String, String>, Collection<Object>> multiValueMap0 = new MultiValueMap<HashMap<String, String>, Collection<Object>>();
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap1 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) null);
      MultiValueMap<Collection<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) multiValueMap1, factory0);
      multiValueMap1.map = (Map<Collection<Object>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<MultiValueMap<String, Object>, ExceptionFactory<String>> multiValueMap0 = new MultiValueMap<MultiValueMap<String, Object>, ExceptionFactory<String>>();
      multiValueMap0.map = null;
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) multiValueMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      MultiValueMap<HashMap<String, Object>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      multiValueMap0.put(hashMap1, hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap1.put(integer0, "org.apache.commons.collections4.map.MultiValueMap");
      hashMap0.putAll(hashMap1);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(integer0, arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Object, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<HashMap<Object, Object>> arrayList1 = new ArrayList<HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      arrayList1.add(hashMap0);
      Factory<LinkedList<HashMap<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<HashMap<Object, Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Collection<String>) arrayList0, (Collection<HashMap<Object, Object>>) arrayList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Object, Object>>();
      ArrayList<HashMap<Object, Object>> arrayList0 = new ArrayList<HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Collection<String>, LinkedList<EmptyIterator<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<EmptyIterator<Object>>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap1;
      arrayList0.add(hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<String>) linkedList0, (Collection<HashMap<Object, Object>>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0, factory0);
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      Integer integer0 = new Integer((-1523));
      // Undeclared exception!
      try { 
        multiValueMap1.put((String) null, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<ArrayList<Collection<Object>>, Object> hashMap0 = new HashMap<ArrayList<Collection<Object>>, Object>();
      ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>((LinkedList<Collection<Object>>) null);
      MultiValueMap<ArrayList<Collection<Object>>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Object>>, ? super LinkedList<Collection<Object>>>) hashMap0, (Factory<LinkedList<Collection<Object>>>) constantFactory0);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(3211);
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(integer0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      ConstantFactory<Collection<Collection<Object>>> constantFactory0 = new ConstantFactory<Collection<Collection<Object>>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super Collection<Collection<Object>>>) null, (Factory<Collection<Collection<Object>>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.put(linkedList0, linkedList0);
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Collection<Object>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap2 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Integer, String>>();
      // Undeclared exception!
      try { 
        multiValueMap2.getCollection(multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<Object>, ExceptionFactory<Collection<Object>>> multiValueMap0 = new MultiValueMap<Collection<Object>, ExceptionFactory<Collection<Object>>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      Factory<ArrayList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Collection<Object>>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Collection<Object>>>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) arrayList0, (Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(482);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      hashMap1.put(integer0, (Object) null);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-1));
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      hashMap1.put(integer0, (Object) null);
      hashMap1.replace(integer0, (Object) hashMap0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<Object, String>((Map<Object, ? super Collection<String>>) null, (Factory<Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Collection<Object>, ExceptionFactory<Collection<Object>>> multiValueMap0 = new MultiValueMap<Collection<Object>, ExceptionFactory<Collection<Object>>>();
      Set<Map.Entry<Collection<Object>, Object>> set0 = (Set<Map.Entry<Collection<Object>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<HashMap<Object, Object>> arrayList0 = new ArrayList<HashMap<Object, Object>>();
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<String>>();
      Collection<ArrayList<String>> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<HashMap<String, String>, Integer> multiValueMap0 = new MultiValueMap<HashMap<String, String>, Integer>();
      Integer integer0 = new Integer((-1285));
      Iterator<Integer> iterator0 = multiValueMap0.iterator((Object) integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("H`LIj+\">pUJq5Oyg}<e", "");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, LinkedList<Object>>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(abstractMap_SimpleEntry0, multiValueMap0, biFunction0);
      multiValueMap1.iterator((Object) abstractMap_SimpleImmutableEntry0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Collection<Object>>, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Collection<Object>>, ArrayList<Collection<Object>>>();
      AbstractMap.SimpleEntry<String, Collection<Object>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Collection<Object>>("f", linkedList0);
      ArrayList<ArrayList<Collection<Object>>> arrayList0 = new ArrayList<ArrayList<Collection<Object>>>();
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleEntry0, (Collection<ArrayList<Collection<Object>>>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Object, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<HashMap<Object, Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      Integer integer0 = new Integer(0);
      multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<String>>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Integer integer0 = new Integer((-10));
      Integer integer1 = new Integer((-2146683242));
      multiValueMap0.putIfAbsent(integer0, integer1);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      Collection<Object> collection0 = multiValueMap0.createCollection((-3));
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap1.containsValue((Object) collection0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      multiValueMap0.put(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      multiValueMap1.putAll((Map<? extends AbstractMap.SimpleEntry<String, String>, ?>) hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap0.put(hashMap0, hashMap0);
      MultiValueMap<Object, HashMap<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<Integer, Object>>>) hashMap0);
      multiValueMap1.map = (Map<Object, Object>) multiValueMap0;
      boolean boolean0 = multiValueMap1.containsValue((Object) hashMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-21));
      hashMap0.put(integer0, arrayList0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      multiValueMap0.put(integer0, (Object) null);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-21));
      hashMap0.put(integer0, arrayList0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, (Object) null);
      assertTrue(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-15));
      hashMap0.put(integer0, arrayList0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, (Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      multiValueMap1.putIfAbsent(abstractMap_SimpleEntry1, hashMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(482);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      hashMap1.put(integer0, collection0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap1);
      boolean boolean0 = multiValueMap1.containsValue((Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("H`LIj+\">pUJq5Oyg}<e", "+fOx0hAc$j7li7h.D");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry1);
      multiValueMap0.put(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends AbstractMap.SimpleEntry<String, String>, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      Factory<Collection<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0, factory0);
      Iterator<Map.Entry<LinkedList<Object>, ArrayList<Object>>> iterator0 = (Iterator<Map.Entry<LinkedList<Object>, ArrayList<Object>>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }
}
