/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:16:54 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<LinkedList<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(linkedList0, "@-\"=c9C[<_/8MWF[");
      multiValueMap0.put(linkedList0, "@-\"=c9C[<_/8MWF[");
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1952);
      Integer integer1 = new Integer(1952);
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(integer0, integer1, biFunction0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap1.removeMapping(object0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Object>();
      Set<Map.Entry<LinkedList<Integer>, Object>> set0 = (Set<Map.Entry<LinkedList<Integer>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1436);
      hashMap0.put(integer0, integer0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0);
      Integer integer0 = new Integer(0);
      multiValueMap1.put("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", integer0);
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0, factory0);
      int int0 = multiValueMap2.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.put((String) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<ArrayList<Object>> factory0 = ConstantFactory.constantFactory((ArrayList<Object>) null);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<Object>>) hashMap0, factory0);
      Collection<Object> collection0 = multiValueMap0.createCollection(1952);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Collection<Collection<ArrayList<String>>>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Collection<Collection<ArrayList<String>>>>();
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(arrayList0, integer0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry, AbstractMap.SimpleImmutableEntry>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry, AbstractMap.SimpleImmutableEntry>>>) hashMap0);
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0, factory0);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Integer>();
      MultiValueMap<ArrayList<Integer>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Integer>, Object>) multiValueMap1;
      MultiValueMap<Object, ArrayList<Object>> multiValueMap2 = new MultiValueMap<Object, ArrayList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap2.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      hashMap0.put("S9UP?", multiValueMap0);
      MultiValueMap<String, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) "S9UP?");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Object>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, multiValueMap0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, arrayList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put(arrayList0, "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) hashMap0, factory0);
      Object object0 = new Object();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(object0, (Collection<Integer>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Integer>();
      MultiValueMap<ArrayList<Integer>, EntrySetToMapIteratorAdapter<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<EntrySetToMapIteratorAdapter<Object, Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<Integer>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      linkedList0.add((LinkedList<Object>) null);
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      multiValueMap0.map = null;
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(integer0, (Collection<LinkedList<Object>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Object>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, "fn5tX?Mswlv!%");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super LinkedList<Object>>) null, (Factory<LinkedList<Object>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<AbstractMap.SimpleEntry<Integer, Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      Integer integer0 = new Integer((-2146107053));
      multiValueMap0.putIfAbsent(integer0, hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Integer>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(hashMap1, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<MultiValueMap<Integer, Integer>, EntrySetToMapIteratorAdapter<Integer, Integer>> multiValueMap0 = new MultiValueMap<MultiValueMap<Integer, Integer>, EntrySetToMapIteratorAdapter<Integer, Integer>>();
      MultiValueMap<MultiValueMap<Integer, Integer>, LinkedList<ArrayList<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<MultiValueMap<Integer, Integer>, ? super Collection<LinkedList<ArrayList<Object>>>>) multiValueMap0);
      multiValueMap0.map = (Map<MultiValueMap<Integer, Integer>, Object>) multiValueMap1;
      MultiValueMap<MultiValueMap<Object, Object>, Object> multiValueMap2 = new MultiValueMap<MultiValueMap<Object, Object>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Object>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      MultiValueMap<HashMap<Integer, Object>, String> multiValueMap1 = new MultiValueMap<HashMap<Integer, Object>, String>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(multiValueMap0, "vie<&6fdi1qh?");
      MultiValueMap<Object, MultiValueMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<String, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Integer>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      ConstantFactory<ArrayList<AbstractMap.SimpleImmutableEntry<Object, Object>>> constantFactory0 = new ConstantFactory<ArrayList<AbstractMap.SimpleImmutableEntry<Object, Object>>>(arrayList0);
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super ArrayList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap0, (Factory<ArrayList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) constantFactory0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      multiValueMap1.put(arrayList1, arrayList1);
      boolean boolean0 = multiValueMap1.putAll(arrayList1, (Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>) arrayList0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Integer>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Integer>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory((LinkedList<Integer>) null);
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>((Map<LinkedList<String>, ? super LinkedList<Integer>>) hashMap0, factory0);
      Factory<ArrayList<LinkedList<EntrySetToMapIteratorAdapter<Object, String>>>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, LinkedList<EntrySetToMapIteratorAdapter<Object, String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super ArrayList<LinkedList<EntrySetToMapIteratorAdapter<Object, String>>>>) multiValueMap0, factory1);
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleEntry<Integer, Integer>>>) multiValueMap1);
      Collection<AbstractMap.SimpleEntry<Integer, Integer>> collection0 = multiValueMap2.getCollection((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Collection<String>, ArrayList<Object>>();
      Iterator<ArrayList<Object>> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(1954);
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends Integer, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      Integer integer0 = new Integer(335);
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<LinkedList<Object>>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.putAll((Collection<Object>) arrayList0, (Collection<Collection<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Integer>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      MultiValueMap<Collection<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      multiValueMap0.put(linkedList1, linkedList0);
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0, (Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, Object>();
      Integer integer0 = new Integer((-346));
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "E@");
      hashMap0.put(abstractMap_SimpleEntry0, integer0);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, HashMap<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, String>, ? super Collection<HashMap<String, String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends AbstractMap.SimpleEntry<Integer, String>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer(1455);
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      Integer integer1 = new Integer(2004);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer1, integer0, biFunction0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge((Integer) null, linkedList0, biFunction0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(1952);
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(integer0, integer0, biFunction0);
      multiValueMap0.put((Integer) object0, integer0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(object0, integer0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Integer integer0 = new Integer(2772);
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<Integer, LinkedList<Integer>>();
      multiValueMap1.put(integer0, multiValueMap0);
      multiValueMap0.putAll((Map<?, ?>) multiValueMap1);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Object object0 = new Object();
      boolean boolean0 = multiValueMap0.removeMapping(object0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<Object>>>) hashMap0, (Factory<LinkedList<LinkedList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer0, integer0, biFunction0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, ArrayList<Integer>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      boolean boolean0 = arrayList0.addAll(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MultiValueMap<String, Collection<Integer>> multiValueMap0 = new MultiValueMap<String, Collection<Integer>>();
      Iterator<Map.Entry<String, Collection<Integer>>> iterator0 = (Iterator<Map.Entry<String, Collection<Integer>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Comparable>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Comparable>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.put("D.5", "D.5");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
