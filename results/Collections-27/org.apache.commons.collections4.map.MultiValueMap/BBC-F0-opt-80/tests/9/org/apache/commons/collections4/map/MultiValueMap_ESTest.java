/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 11:30:13 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("The comparator must not be null");
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      multiValueMap0.putAll((Collection<Object>) arrayList1, (Collection<String>) arrayList0);
      MultiValueMap<Collection<Object>, ExceptionFactory<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ExceptionFactory<Integer>>>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap1.removeMapping(arrayList1, "The comparator must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      Set<Map.Entry<ArrayList<String>, Object>> set0 = (Set<Map.Entry<ArrayList<String>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<Object>>();
      multiValueMap0.put(arrayList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      multiValueMap0.getCollection(linkedList1);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory((LinkedList<String>) null);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) multiValueMap0, factory0);
      Collection<String> collection0 = multiValueMap1.createCollection((-612));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) multiValueMap0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      Collection<ArrayList<Object>> collection0 = multiValueMap2.createCollection(1);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      MultiValueMap<LinkedList<String>, ConstantFactory<String>> multiValueMap1 = new MultiValueMap<LinkedList<String>, ConstantFactory<String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<Object>>();
      MultiValueMap<Collection<Integer>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      multiValueMap0.map = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Collection<Object>, ExceptionFactory<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ExceptionFactory<Integer>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(arrayList0, "qQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      HashMap<Integer, Collection<Object>> hashMap1 = new HashMap<Integer, Collection<Object>>();
      hashMap0.put(integer0, hashMap1);
      MultiValueMap<Integer, ConstantFactory<Collection<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ConstantFactory<Collection<Object>>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("Tk%*D VZ_;)Rr;8");
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList1.add((Object) arrayList1);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<Object>) arrayList1, (Collection<String>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.map = null;
      linkedList0.add("M1'h]0RX!pAGr>:U");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<Object>) null, (Collection<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      Set<String> set0 = multiValueMap1.keySet();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(set0);
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0, (Factory<Collection<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap2.put(multiValueMap1, multiValueMap1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      Factory<LinkedList<ConstantFactory<Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<ConstantFactory<Object>>) null);
      MultiValueMap<ArrayList<Object>, ConstantFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<ConstantFactory<Object>>>) hashMap0, factory0);
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, MultiValueMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<MultiValueMap<String, Object>>>) multiValueMap0);
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<Object>>>) hashMap0);
      hashMap0.put((Collection<String>) null, multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.put((Collection<String>) null, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<String>>) null, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<HashMap<String, Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.put("PrototypeCloneFactory: Clone method threw an exception", multiValueMap1);
      multiValueMap1.putIfAbsent("PrototypeCloneFactory: Clone method threw an exception", multiValueMap0);
      MultiValueMap<Object, ExceptionFactory<Object>> multiValueMap2 = new MultiValueMap<Object, ExceptionFactory<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      multiValueMap0.map = null;
      Integer integer0 = new Integer(632);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<Object>>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Object>>, Object>();
      MultiValueMap<LinkedList<Collection<Object>>, HashMap<Object, HashMap<Collection<Object>, String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<Object>>, ? super Collection<HashMap<Object, HashMap<Collection<Object>, String>>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Collection<Object>>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<MultiValueMap<Integer, String>, Object> multiValueMap0 = new MultiValueMap<MultiValueMap<Integer, String>, Object>();
      multiValueMap0.map = (Map<MultiValueMap<Integer, String>, Object>) multiValueMap0;
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super LinkedList<Object>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.createCollection(512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(multiValueMap0);
      hashMap0.put("8Id,N&>G/{}_zW2O{E", "8Id,N&>G/{}_zW2O{E");
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) hashMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) "8Id,N&>G/{}_zW2O{E", (Object) "8Id,N&>G/{}_zW2O{E");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.put("PrototypeCloneFactory: Clone method threw an exception", multiValueMap1);
      multiValueMap1.putIfAbsent("PrototypeCloneFactory: Clone method threw an exception", multiValueMap0);
      MultiValueMap<String, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Collection<Object>>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Collection<Object>>, ArrayList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "+okUm SoiK86!%*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) hashMap0);
      hashMap0.put("09tkP{", multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      MultiValueMap<Collection<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      multiValueMap0.put(arrayList1, "");
      arrayList0.add("");
      boolean boolean0 = multiValueMap1.putAll((Collection<Object>) arrayList1, (Collection<String>) arrayList0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap2 = new MultiValueMap<String, ArrayList<Object>>();
      Collection<ArrayList<Object>> collection0 = multiValueMap2.getCollection(multiValueMap1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap1.putAll((Collection<Object>) null, (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.putAll((Collection<Object>) linkedList0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Object>, HashMap<Collection<Object>, String>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Object>, HashMap<Collection<Object>, String>>();
      MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>> multiValueMap1 = new MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("rM", "rM");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(multiValueMap0);
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) hashMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      int int0 = multiValueMap1.size((Object) "rM");
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("8Id,N&>G/{}_zW2O{E", "8Id,N&>G/{}_zW2O{E");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(multiValueMap0);
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) hashMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "8Id,N&>G/{}_zW2O{E", (Object) "8Id,N&>G/{}_zW2O{E");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("8Id,N&>G/{}_zW2O{E", "8Id,N&>G/{}_zW2O{E");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(multiValueMap0);
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) hashMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      HashMap<Collection<Object>, Collection<Object>> hashMap1 = new HashMap<Collection<Object>, Collection<Object>>();
      boolean boolean0 = multiValueMap1.containsValue((Object) "8Id,N&>G/{}_zW2O{E", (Object) hashMap1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Object>, HashMap<Collection<Object>, String>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Object>, HashMap<Collection<Object>, String>>();
      MultiValueMap<ExceptionFactory<Object>, Collection<LinkedList<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<Collection<LinkedList<String>>>>) multiValueMap0);
      MultiValueMap<ExceptionFactory<Object>, ExceptionFactory<Collection<Object>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<ExceptionFactory<Collection<Object>>>>) multiValueMap1);
      multiValueMap2.totalSize();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(multiValueMap0);
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) hashMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("8Id,N&>G/{}_zW2O{E", "8Id,N&>G/{}_zW2O{E");
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("org.apache.commons.collections4.collection.AbstractCollectionDecorator");
      multiValueMap0.put("8Id,N&>G/{}_zW2O{E", constantFactory0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      multiValueMap1.putIfAbsent("~9U'L'$q_ysC }>F\\{", integer0);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = new MultiValueMap<String, ArrayList<Integer>>();
      Object object0 = multiValueMap1.putIfAbsent("PrototypeCloneFactory: Clone method threw an exception", multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue(object0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("org.apache.commons.collections4.functors.ExceptionFactory");
      arrayList0.add("org.apache.commons.collections4.functors.ExceptionFactory");
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      multiValueMap0.putAll((Collection<Object>) arrayList1, (Collection<String>) arrayList0);
      MultiValueMap<Collection<Object>, ExceptionFactory<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ExceptionFactory<Integer>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(arrayList1, "org.apache.commons.collections4.functors.ExceptionFactory");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("org.apache.commons.collections4.iterators.AbstractEmptyIterator", "org.apache.commons.collections4.iterators.AbstractEmptyIterator");
      Integer integer0 = new Integer(1);
      boolean boolean0 = multiValueMap0.removeMapping("org.apache.commons.collections4.iterators.AbstractEmptyIterator", integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<ExceptionFactory<Object>> linkedList0 = new LinkedList<ExceptionFactory<Object>>();
      Factory<LinkedList<ExceptionFactory<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<LinkedList<Object>, ExceptionFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<ExceptionFactory<Object>>>) hashMap0, factory0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<ArrayList<String>>>) multiValueMap1, (Factory<LinkedList<ArrayList<String>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("8Id,N&>G/{}_zW2O{E", "8Id,N&>G/{}_zW2O{E");
      multiValueMap0.iterator((Object) "8Id,N&>G/{}_zW2O{E");
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(collection0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("8Id,N&>G/{}_zW2O{E", "8Id,N&>G/{}_zW2O{E");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(multiValueMap0);
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) hashMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap0);
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(multiValueMap0);
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) hashMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      Iterator<Map.Entry<Object, LinkedList<String>>> iterator0 = (Iterator<Map.Entry<Object, LinkedList<String>>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }
}
