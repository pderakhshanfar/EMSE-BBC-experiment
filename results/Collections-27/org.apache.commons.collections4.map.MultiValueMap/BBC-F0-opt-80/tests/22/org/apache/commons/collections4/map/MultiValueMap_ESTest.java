/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:07:50 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      HashMap<LinkedList<Object>, Collection<Integer>> hashMap0 = new HashMap<LinkedList<Object>, Collection<Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, arrayList0);
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>(arrayList0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0, (Factory<Collection<Integer>>) constantFactory0);
      ArrayList<Collection<Integer>> arrayList1 = new ArrayList<Collection<Integer>>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList1, (Object) null);
      assertEquals(0, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashMap<LinkedList<Object>, Collection<Integer>> hashMap0 = new HashMap<LinkedList<Object>, Collection<Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, arrayList0);
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>(arrayList0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0, (Factory<Collection<Integer>>) constantFactory0);
      ArrayList<Collection<Integer>> arrayList1 = new ArrayList<Collection<Integer>>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList1, (Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, ConstantFactory<Collection<Integer>>> multiValueMap0 = new MultiValueMap<String, ConstantFactory<Collection<Integer>>>();
      Object object0 = new Object();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(object0);
      multiValueMap0.put("F", constantFactory0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      MultiValueMap<LinkedList<Object>, HashMap<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Object, Integer>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap1.put(linkedList0, (Object) null);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, String> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, String>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.put(multiValueMap0, "hSJ-}~P");
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, HashMap<String, Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super Collection<HashMap<String, Integer>>>) hashMap0);
      multiValueMap1.getCollection(multiValueMap2);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>((LinkedList<LinkedList<String>>) null);
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<String>>>) multiValueMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      Collection<LinkedList<String>> collection0 = multiValueMap1.createCollection((-472));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Object>>();
      Collection<ArrayList<Object>> collection0 = multiValueMap0.createCollection((-274));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Integer>>>) multiValueMap0);
      multiValueMap0.put(multiValueMap1, multiValueMap1);
      MultiValueMap<Object, MultiValueMap<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<Object, Object>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, LinkedList<String>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleEntry<Object, Integer>, Object>) multiValueMap1;
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>(2);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<String>>();
      MultiValueMap<Comparable<Object>, Object> multiValueMap1 = new MultiValueMap<Comparable<Object>, Object>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<LinkedList<Object>, Collection<Integer>> hashMap0 = new HashMap<LinkedList<Object>, Collection<Integer>>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping((Object) null, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(arrayList0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<Object>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      hashMap0.put(linkedList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Integer> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = multiValueMap1.getOrDefault(multiValueMap0, multiValueMap0);
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      hashMap0.put(linkedList0, object0);
      MultiValueMap<LinkedList<Integer>, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<? extends LinkedList<Integer>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("org.apache.commons.collections4.map.MultiValueMap$1$1$1");
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) "org.apache.commons.collections4.map.MultiValueMap$1$1$1", (Collection<String>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add(linkedList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ConstantFactory.constantFactory((LinkedList<LinkedList<String>>) null);
      MultiValueMap<Collection<Integer>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<LinkedList<String>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<Integer>) arrayList1, (Collection<LinkedList<String>>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<HashMap<Integer, Object>, Object> multiValueMap1 = new MultiValueMap<HashMap<Integer, Object>, Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(collection0);
      MultiValueMap<HashMap<Integer, Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Object>, ? super Collection<Object>>) multiValueMap1, (Factory<Collection<Object>>) constantFactory0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.put(hashMap0, multiValueMap1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<HashMap<String, String>, Comparable<Object>> multiValueMap0 = new MultiValueMap<HashMap<String, String>, Comparable<Object>>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<HashMap<String, String>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, String>, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<HashMap<String, String>, Object>) multiValueMap1;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(hashMap0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      ConstantFactory<LinkedList<ConstantFactory<Object>>> constantFactory0 = new ConstantFactory<LinkedList<ConstantFactory<Object>>>((LinkedList<ConstantFactory<Object>>) null);
      MultiValueMap<String, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ConstantFactory<Object>>>) multiValueMap0, (Factory<LinkedList<ConstantFactory<Object>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put("org.apache.commons.collections4.map.MultiValueMap", constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) hashMap0, factory0);
      ArrayList<MultiValueMap<Object, Object>> arrayList0 = new ArrayList<MultiValueMap<Object, Object>>();
      ConstantFactory<ArrayList<MultiValueMap<Object, Object>>> constantFactory0 = new ConstantFactory<ArrayList<MultiValueMap<Object, Object>>>(arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>(arrayList0);
      hashMap0.put(linkedList0, factory0);
      MultiValueMap<LinkedList<Object>, MultiValueMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super ArrayList<MultiValueMap<Object, Object>>>) multiValueMap0, (Factory<ArrayList<MultiValueMap<Object, Object>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Factory<Collection<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<String>>();
      MultiValueMap<HashMap<Integer, Integer>, String> multiValueMap1 = new MultiValueMap<HashMap<Integer, Integer>, String>();
      MultiValueMap<HashMap<Integer, Integer>, LinkedList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Integer>, ? super Collection<LinkedList<String>>>) multiValueMap1);
      multiValueMap1.map = (Map<HashMap<Integer, Integer>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.map = null;
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Collection<Integer>>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("e>q$&Pj!6Fv@)+)", "e>q$&Pj!6Fv@)+)");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add((Collection<Integer>) linkedList1);
      multiValueMap0.merge(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0, biFunction0);
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleImmutableEntry0, (Collection<Collection<Integer>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-124));
      arrayList0.add(integer0);
      Factory<LinkedList<Collection<Integer>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = new MultiValueMap<Collection<Integer>, Integer>();
      multiValueMap0.putAll((Collection<Integer>) arrayList0, (Collection<Integer>) arrayList0);
      Factory<LinkedList<Comparable<Object>>> factory1 = ConstantFactory.constantFactory((LinkedList<Comparable<Object>>) null);
      MultiValueMap<Collection<Integer>, Comparable<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<Comparable<Object>>>) multiValueMap0, factory1);
      multiValueMap1.put(arrayList0, factory0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, HashMap<String, Collection<Integer>>> multiValueMap0 = new MultiValueMap<String, HashMap<String, Collection<Integer>>>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, HashMap<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super Collection<HashMap<String, Integer>>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.getCollection(multiValueMap1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MultiValueMap<Collection<String>, MultiValueMap<Object, String>> multiValueMap0 = new MultiValueMap<Collection<String>, MultiValueMap<Object, String>>();
      Iterator<MultiValueMap<Object, String>> iterator0 = multiValueMap0.iterator((Object) hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, Collection<Integer>>();
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, String> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Object object0 = multiValueMap0.put(hashMap0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, String> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, String>();
      MultiValueMap<Collection<Integer>, String> multiValueMap1 = new MultiValueMap<Collection<Integer>, String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap1, (Object) multiValueMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, String> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, String>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.put(hashMap0, linkedList0);
      MultiValueMap<Collection<Integer>, String> multiValueMap1 = new MultiValueMap<Collection<Integer>, String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap1, (Object) multiValueMap1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<String>>();
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = new MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Object, String>>();
      MultiValueMap<HashMap<String, Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Integer>>) multiValueMap1);
      multiValueMap2.putIfAbsent((HashMap<String, Object>) null, multiValueMap0);
      multiValueMap2.putAll((Map<? extends HashMap<String, Object>, ?>) multiValueMap1);
      assertFalse(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<String, HashMap<Integer, Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Integer, Integer>>>) multiValueMap1);
      multiValueMap2.putAll((Map<? extends String, ?>) multiValueMap0);
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(linkedList0, arrayList0);
      MultiValueMap<LinkedList<Integer>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      multiValueMap0.putAll((Map<? extends LinkedList<Integer>, ?>) hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<String>>();
      ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add(linkedList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      multiValueMap0.putAll((Collection<Integer>) arrayList1, (Collection<LinkedList<String>>) arrayList0);
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList2);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<LinkedList<String>> arrayList1 = new ArrayList<LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList1.add(linkedList0);
      multiValueMap0.putAll((Collection<Integer>) arrayList0, (Collection<LinkedList<String>>) arrayList1);
      boolean boolean0 = multiValueMap0.containsValue((Object) "");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer((-2042));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ConstantFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ConstantFactory<Object>>>) hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("8j/Nahyj4q(L|@D*~`", hashMap1);
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>((LinkedList<String>) null);
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>((Map<String, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<LinkedList<Object>, Collection<Integer>> hashMap0 = new HashMap<LinkedList<Object>, Collection<Integer>>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      hashMap0.put((LinkedList<Object>) null, arrayList0);
      Integer integer0 = new Integer((-3810));
      arrayList0.add(integer0);
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<LinkedList<Object>>>) multiValueMap0, (Factory<LinkedList<LinkedList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<ConstantFactory<Collection<Integer>>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<ConstantFactory<Collection<Integer>>, ArrayList<Object>>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((Object) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Comparable<Object>, Object> multiValueMap0 = new MultiValueMap<Comparable<Object>, Object>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Iterator<Map.Entry<Object, String>> iterator0 = (Iterator<Map.Entry<Object, String>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap1.computeIfAbsent(multiValueMap0, unaryOperator0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
