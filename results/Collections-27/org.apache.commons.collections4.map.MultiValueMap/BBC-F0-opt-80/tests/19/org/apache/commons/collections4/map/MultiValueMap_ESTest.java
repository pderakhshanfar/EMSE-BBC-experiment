/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:12:18 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      multiValueMap0.putAll((Map<?, ?>) multiValueMap1);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      multiValueMap0.put(integer0, (Object) null);
      multiValueMap0.put(integer0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-28));
      Object object0 = multiValueMap0.put(integer0, integer0);
      assertFalse(multiValueMap0.isEmpty());
      
      Integer integer1 = new Integer((-28));
      boolean boolean0 = multiValueMap0.removeMapping(object0, integer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-131));
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap1.put(integer0, (Object) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<Integer, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) multiValueMap1, (Factory<LinkedList<String>>) constantFactory0);
      int int0 = multiValueMap2.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<HashMap<String, String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<String, String>, ArrayList<String>>();
      MultiValueMap<HashMap<String, String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, String>, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<HashMap<String, String>, ConstantFactory<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<String, String>, ? super Collection<ConstantFactory<Object>>>) multiValueMap1);
      MultiValueMap<HashMap<String, String>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap3 = MultiValueMap.multiValueMap((Map<HashMap<String, String>, ? super Collection<AbstractMap.SimpleEntry<Integer, Integer>>>) multiValueMap2);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      multiValueMap0.put(hashMap0, multiValueMap3);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      multiValueMap3.getCollection(hashMap1);
      assertFalse(multiValueMap3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Comparable<Object>, Object> hashMap0 = new HashMap<Comparable<Object>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Factory<ArrayList<Integer>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<Comparable<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Comparable<Object>, ? super ArrayList<Integer>>) hashMap0, factory0);
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>((LinkedList<Object>) null);
      MultiValueMap<Comparable<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Comparable<Object>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap1.createCollection(1190);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      Collection<ArrayList<Object>> collection0 = multiValueMap0.createCollection(1400);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("a *O,C1zx", (Object) null);
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      Integer integer0 = new Integer(4093);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Comparable<Object>, Object> multiValueMap0 = new MultiValueMap<Comparable<Object>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<ConstantFactory<Object>> arrayList0 = new ArrayList<ConstantFactory<Object>>();
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<Integer, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap1);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap2;
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator");
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(arrayList0, constantFactory0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = new MultiValueMap<String, ArrayList<String>>();
      multiValueMap0.map = null;
      multiValueMap1.put("}1,8[}M![)f7CT;0", multiValueMap0);
      HashMap<AbstractMap.SimpleEntry<Integer, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Integer>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, Collection<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Integer>, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.removeMapping(multiValueMap1, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-2028178999));
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      HashMap<ExceptionFactory<Integer>, Object> hashMap0 = new HashMap<ExceptionFactory<Integer>, Object>();
      MultiValueMap<ExceptionFactory<Integer>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Integer>, ? super Collection<Collection<Object>>>) hashMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory(collection0);
      MultiValueMap<Integer, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.put(integer0, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ConstantFactory.constantFactory((LinkedList<LinkedList<String>>) null);
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<LinkedList<String>>>) multiValueMap0, factory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(3);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(integer0, constantFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(multiValueMap0, integer0);
      multiValueMap0.putIfAbsent(hashMap0, (Object) null);
      Set<Map.Entry<HashMap<Object, Object>, Object>> set0 = (Set<Map.Entry<HashMap<Object, Object>, Object>>)multiValueMap0.entrySet();
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, HashMap<Object, Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, HashMap<Object, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) set0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(1, 1);
      hashMap0.put((Integer) null, (Object) null);
      ArrayList<LinkedList<Integer>> arrayList0 = new ArrayList<LinkedList<Integer>>();
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>(arrayList0);
      ConstantFactory<LinkedList<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<Integer>>>(linkedList0);
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<Integer>>>) hashMap0, (Factory<LinkedList<LinkedList<Integer>>>) constantFactory0);
      LinkedList<LinkedList<String>> linkedList1 = new LinkedList<LinkedList<String>>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ConstantFactory.constantFactory(linkedList1);
      MultiValueMap<Integer, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Object>, ArrayList<Object>>();
      multiValueMap0.map = null;
      Factory<LinkedList<HashMap<String, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ExceptionFactory<Object>, HashMap<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super LinkedList<HashMap<String, String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>(linkedList0);
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Collection<Object>>>) multiValueMap0, (Factory<LinkedList<Collection<Object>>>) constantFactory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Collection<String>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, ConstantFactory<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(linkedList0, hashMap0);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(linkedList0);
      ArrayList<ConstantFactory<Object>> arrayList0 = new ArrayList<ConstantFactory<Object>>();
      arrayList0.add(constantFactory0);
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) linkedList0, (Collection<ConstantFactory<Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<LinkedList<String>, Object>((Map<LinkedList<String>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ConstantFactory<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ConstantFactory<String>, ArrayList<String>>();
      Object object0 = new Object();
      Iterator<ArrayList<String>> iterator0 = multiValueMap0.iterator(object0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-28));
      multiValueMap0.put(integer0, integer0);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(20);
      Object object0 = multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0);
      MultiValueMap<Integer, EmptyIterator<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<EmptyIterator<Integer>>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) integer0, object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(27);
      multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, EmptyIterator<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<EmptyIterator<Integer>>>) multiValueMap0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0, (Object) hashMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Integer>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) null, "Cannot instantiate class: ");
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends Integer, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-28));
      multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      multiValueMap0.put(integer0, (Object) null);
      MapIterator<Integer, Object> mapIterator0 = multiValueMap0.mapIterator();
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) mapIterator0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, Collection<String>> hashMap0 = new HashMap<String, Collection<String>>();
      hashMap0.put("org.apache.commons.collections4.map.MultiValueMap$Values", (Collection<String>) null);
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(16);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>(arrayList0);
      arrayList1.add((Object) integer0);
      multiValueMap0.putAll(integer0, (Collection<Object>) arrayList1);
      Object object0 = multiValueMap0.put(integer0, integer0);
      boolean boolean0 = multiValueMap0.removeMapping(object0, object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer((-28));
      Object object0 = multiValueMap0.put(integer0, integer0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      boolean boolean0 = multiValueMap0.removeMapping(object0, hashMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      boolean boolean0 = multiValueMap0.removeMapping("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Integer, Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      Integer integer0 = new Integer(3);
      MultiValueMap<ConstantFactory<Integer>, Object> multiValueMap1 = new MultiValueMap<ConstantFactory<Integer>, Object>();
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      boolean boolean0 = multiValueMap1.putAll(constantFactory0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      Integer integer0 = new Integer(4093);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ConstantFactory<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ConstantFactory<String>, ArrayList<String>>();
      MultiValueMap<ConstantFactory<String>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap1.clear();
      assertEquals(0, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Comparable<Object>, Object> multiValueMap0 = new MultiValueMap<Comparable<Object>, Object>();
      Iterator<Map.Entry<Comparable<Object>, Object>> iterator0 = (Iterator<Map.Entry<Comparable<Object>, Object>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, Collection<String>> hashMap0 = new HashMap<String, Collection<String>>();
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      boolean boolean0 = multiValueMap0.putAll("DE'W;@DkIA>nV@`.", (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Factory<Collection<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
