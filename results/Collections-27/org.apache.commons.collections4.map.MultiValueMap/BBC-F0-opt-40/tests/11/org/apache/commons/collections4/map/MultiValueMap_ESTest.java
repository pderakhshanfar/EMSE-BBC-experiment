/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:50:54 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<HashMap<Object, Object>, Object> hashMap2 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Object>>) hashMap2);
      MultiValueMap<HashMap<Object, Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(hashMap1, hashMap0, biFunction0);
      multiValueMap1.put(hashMap1, hashMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(object0, arrayList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Integer>>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<HashMap<Object, Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, ArrayList<Object>>();
      multiValueMap0.put(hashMap0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<String, ConstantFactory<Object>>();
      MultiValueMap<LinkedList<Object>, String> multiValueMap1 = new MultiValueMap<LinkedList<Object>, String>();
      Iterator<String> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap2 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap2.put(iterator0, iterator0);
      multiValueMap2.getCollection(iterator0);
      assertFalse(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) null);
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0, factory0);
      Collection<Integer> collection0 = multiValueMap0.createCollection((-194));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<String, Object>>>) multiValueMap0);
      Collection<AbstractMap.SimpleEntry<String, Object>> collection0 = multiValueMap1.createCollection(1463);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Object>>();
      MultiValueMap<Collection<String>, Object> multiValueMap1 = new MultiValueMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(arrayList0, multiValueMap0, biFunction0);
      ConstantFactory<ArrayList<String>> constantFactory0 = new ConstantFactory<ArrayList<String>>(arrayList0);
      arrayList0.add("");
      MultiValueMap<Collection<String>, String> multiValueMap2 = new MultiValueMap<Collection<String>, String>((Map<Collection<String>, ? super ArrayList<String>>) multiValueMap1, (Factory<ArrayList<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, HashMap<Collection<Object>, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Collection<Object>, String>>();
      HashMap<ConstantFactory<Collection<Object>>, Object> hashMap0 = new HashMap<ConstantFactory<Collection<Object>>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      ConstantFactory<Object> constantFactory1 = new ConstantFactory<Object>(multiValueMap0);
      hashMap0.put(constantFactory0, constantFactory1);
      MultiValueMap<ConstantFactory<Collection<Object>>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Collection<Object>>, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<ConstantFactory<Collection<Object>>, HashMap<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ConstantFactory<Collection<Object>>, ? super Collection<HashMap<Object, String>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.put(arrayList0, arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<LinkedList<LinkedList<Object>>, String> multiValueMap0 = new MultiValueMap<LinkedList<LinkedList<Object>>, String>();
      MultiValueMap<LinkedList<LinkedList<Object>>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<LinkedList<Object>>, ? super Collection<Object>>) multiValueMap0);
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<Object>, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      hashMap0.put(arrayList0, multiValueMap2);
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<String>>>) multiValueMap2);
      // Undeclared exception!
      try { 
        multiValueMap3.removeMapping(hashMap0, multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<LinkedList<String>> arrayList1 = new ArrayList<LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList1.add(linkedList0);
      MultiValueMap<ArrayList<Integer>, LinkedList<String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, LinkedList<String>>();
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Integer>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<LinkedList<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(arrayList0, (Collection<LinkedList<String>>) arrayList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<String>, LinkedList<ConstantFactory<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<LinkedList<ConstantFactory<Integer>>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      linkedList0.add("|PSNW<.`.mA\"z:.");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList0, (Collection<String>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      Factory<ArrayList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Object, Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super ArrayList<ArrayList<Object>>>) multiValueMap0, factory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.put((HashMap<Object, Object>) null, arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Object>>();
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>(2677);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<String>, String> multiValueMap1 = new MultiValueMap<ArrayList<String>, String>((Map<ArrayList<String>, ? super LinkedList<String>>) hashMap0, factory0);
      Collection<Object> collection0 = multiValueMap1.values();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(collection0);
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) constantFactory0);
      Integer integer0 = new Integer(2677);
      // Undeclared exception!
      try { 
        multiValueMap2.put("Y7#U:va9P", integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Collection<Object>, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<Collection<Object>, Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, ArrayList<Object>>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) null);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<Integer>>) multiValueMap0, factory0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("[U`EI", "[U`EI");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry1);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(abstractMap_SimpleImmutableEntry0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, ArrayList<LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<LinkedList>>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<HashMap<Object, Object>, Object> hashMap2 = new HashMap<HashMap<Object, Object>, Object>();
      hashMap2.put(hashMap1, multiValueMap0);
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Object>>) hashMap2);
      MultiValueMap<HashMap<Object, Object>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.put(hashMap1, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("mbHW", arrayList0);
      arrayList0.add((Object) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection((-778));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap1.put(hashMap0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) multiValueMap1, (Object) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, ArrayList<LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<LinkedList>>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<HashMap<Object, Object>, Object> hashMap2 = new HashMap<HashMap<Object, Object>, Object>();
      hashMap2.put(hashMap1, multiValueMap0);
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Object>>) hashMap2);
      MultiValueMap<HashMap<Object, Object>, ArrayList<Object>> multiValueMap2 = new MultiValueMap<HashMap<Object, Object>, ArrayList<Object>>();
      Object object0 = multiValueMap2.put(hashMap1, hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap2 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap2.put(linkedList0, hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<LinkedList<Object>>) null);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (Object) null);
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.putIfAbsent(linkedList0, multiValueMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      BiFunction<Integer, Object, Object> biFunction0 = (BiFunction<Integer, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(anyInt() , any());
      multiValueMap0.compute(integer0, biFunction0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<Integer>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.getCollection(hashMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<Integer>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Integer integer0 = new Integer((-6051));
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, ArrayList<LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<LinkedList>>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<HashMap<Object, Object>, Object> hashMap2 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Object>>) hashMap2);
      MultiValueMap<HashMap<Object, Object>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      Object object0 = multiValueMap2.put(hashMap1, hashMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, object0);
      assertEquals(1, multiValueMap2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, ArrayList<LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<LinkedList>>>) hashMap0);
      MultiValueMap<Collection<String>, Object> multiValueMap1 = new MultiValueMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<ArrayList<String>> constantFactory0 = new ConstantFactory<ArrayList<String>>(arrayList0);
      MultiValueMap<Collection<String>, String> multiValueMap2 = new MultiValueMap<Collection<String>, String>((Map<Collection<String>, ? super ArrayList<String>>) multiValueMap1, (Factory<ArrayList<String>>) constantFactory0);
      boolean boolean0 = multiValueMap2.containsValue((Object) multiValueMap0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      multiValueMap0.putAll(linkedList0, (Collection<String>) linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) "");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      multiValueMap0.values();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ConstantFactory<LinkedList<ArrayList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Object>>>(linkedList0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, (Factory<LinkedList<ArrayList<Object>>>) constantFactory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("-6hAI<r%98", (Integer) null);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(arrayList0, function0);
      MultiValueMap<ArrayList<String>, MultiValueMap<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<MultiValueMap<String, String>>>) multiValueMap0);
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      multiValueMap2.putAll((Map<? extends ArrayList<String>, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(arrayList0, function0);
      MultiValueMap<ArrayList<String>, MultiValueMap<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<MultiValueMap<String, String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<Integer>>();
      MultiValueMap<ArrayList<String>, String> multiValueMap1 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      multiValueMap1.putIfAbsent(arrayList0, hashMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping(object0, arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, hashMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      boolean boolean0 = multiValueMap0.removeMapping("\";\"qz Y", "\";\"qz Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, Integer> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<String, Integer>((Map<String, ? super ArrayList<Integer>>) multiValueMap0, (Factory<ArrayList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, multiValueMap0, biFunction0);
      ConstantFactory<ArrayList<String>> constantFactory0 = new ConstantFactory<ArrayList<String>>(arrayList0);
      MultiValueMap<Collection<String>, String> multiValueMap1 = new MultiValueMap<Collection<String>, String>((Map<Collection<String>, ? super ArrayList<String>>) multiValueMap0, (Factory<ArrayList<String>>) constantFactory0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, Object>>();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = new MultiValueMap<Object, Collection<Object>>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap1.computeIfAbsent(multiValueMap0, function0);
      multiValueMap1.iterator((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Collection<Object>>, Object> hashMap0 = new HashMap<ArrayList<Collection<Object>>, Object>();
      MultiValueMap<ArrayList<Collection<Object>>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Object>>, ? super Collection<Integer>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      boolean boolean0 = arrayList0.addAll(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, Object>>();
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<HashMap<Object, Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      Iterator<Map.Entry<HashMap<Object, Object>, ArrayList<Object>>> iterator0 = (Iterator<Map.Entry<HashMap<Object, Object>, ArrayList<Object>>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) null, (Factory<Collection<Collection<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }
}
