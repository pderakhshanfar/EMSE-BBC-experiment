/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 11:27:54 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Integer>, Object>();
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) null);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(abstractMap_SimpleEntry0, arrayList0, biFunction0);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Integer>, ? super LinkedList<Collection<Object>>>) hashMap0, (Factory<LinkedList<Collection<Object>>>) constantFactory0);
      multiValueMap0.putAll((Map<? extends AbstractMap.SimpleEntry<Integer, Integer>, ?>) hashMap0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = new MultiValueMap<Object, Collection<Integer>>();
      ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();
      Factory<Collection<LinkedList<String>>> factory0 = ConstantFactory.constantFactory((Collection<LinkedList<String>>) arrayList0);
      LinkedList<AbstractMap.SimpleEntry<Object, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, Object>>();
      ConstantFactory<Collection<AbstractMap.SimpleEntry<Object, Object>>> constantFactory0 = new ConstantFactory<Collection<AbstractMap.SimpleEntry<Object, Object>>>(linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap1, (Factory<Collection<AbstractMap.SimpleEntry<Object, Object>>>) constantFactory0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Factory<LinkedList<Integer>> factory1 = ConstantFactory.constantFactory(linkedList1);
      MultiValueMap<Integer, Integer> multiValueMap3 = new MultiValueMap<Integer, Integer>((Map<Integer, ? super LinkedList<Integer>>) multiValueMap0, factory1);
      multiValueMap2.put(multiValueMap3, factory0);
      int int0 = multiValueMap2.totalSize();
      assertEquals(1, multiValueMap2.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      Collection<String> collection0 = multiValueMap0.createCollection(734);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Object, Collection<Integer>> multiValueMap0 = new MultiValueMap<Object, Collection<Integer>>();
      ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();
      Factory<Collection<LinkedList<String>>> factory0 = ConstantFactory.constantFactory((Collection<LinkedList<String>>) arrayList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap0, factory0);
      LinkedList<AbstractMap.SimpleEntry<Object, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, Object>>();
      ConstantFactory<Collection<AbstractMap.SimpleEntry<Object, Object>>> constantFactory0 = new ConstantFactory<Collection<AbstractMap.SimpleEntry<Object, Object>>>(linkedList0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap1, (Factory<Collection<AbstractMap.SimpleEntry<Object, Object>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Comparable<Collection<Object>>, Object> hashMap0 = new HashMap<Comparable<Collection<Object>>, Object>();
      Factory<LinkedList<ExceptionFactory<String>>> factory0 = ExceptionFactory.exceptionFactory();
      Comparable<Collection<Object>> comparable0 = (Comparable<Collection<Object>>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      hashMap0.put(comparable0, factory0);
      MultiValueMap<Comparable<Collection<Object>>, ExceptionFactory<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Comparable<Collection<Object>>, ? super LinkedList<ExceptionFactory<String>>>) hashMap0, factory0);
      MultiValueMap<Comparable<Collection<Object>>, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Comparable<Collection<Object>>, ? super Collection<ConstantFactory<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<Object, String>>>) hashMap0, factory0);
      HashMap<HashMap<Object, Object>, Object> hashMap1 = new HashMap<HashMap<Object, Object>, Object>();
      Factory<Collection<String>> factory1 = ExceptionFactory.exceptionFactory();
      hashMap1.put(hashMap0, hashMap0);
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<String>>) hashMap1, factory1);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Integer integer0 = new Integer((-4893));
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(multiValueMap0, integer0);
      arrayList0.add(abstractMap_SimpleImmutableEntry0);
      hashMap0.put(")-)nHK}G$EK`yZ", arrayList0);
      MultiValueMap<HashMap<Object, Object>, Collection<Object>> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<AbstractMap.SimpleEntry<String, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<String, String>>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, "The factory must not be null");
      Factory<LinkedList<AbstractMap.SimpleEntry<String, String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleEntry<String, String>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(integer0, factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      Function<Object, Object> function0 = Function.identity();
      hashMap1.computeIfAbsent(integer0, function0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Collection<Object>> arrayList1 = new ArrayList<Collection<Object>>();
      arrayList1.add((Collection<Object>) null);
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Collection<Object>, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Collection<Object>, String>>();
      Factory<Collection<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(arrayList0, (Collection<Collection<Object>>) arrayList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<String>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap1;
      ArrayList<Collection<Object>> arrayList1 = new ArrayList<Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList1.add((Collection<Object>) linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<Collection<Object>>) arrayList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(200);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      multiValueMap0.map = null;
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer0);
      arrayList0.add(abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(integer0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) hashMap0);
      Integer integer0 = new Integer((-2144665425));
      hashMap0.put(integer0, integer0);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add((Collection<Object>) linkedList1);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(integer0, (Collection<Collection<Object>>) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      Factory<ArrayList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super ArrayList<Collection<Object>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      Integer integer0 = new Integer((-953));
      // Undeclared exception!
      try { 
        multiValueMap0.put(integer0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) hashMap0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, "");
      // Undeclared exception!
      try { 
        multiValueMap0.put(integer0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantFactory<LinkedList<ArrayList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Object>>>((LinkedList<ArrayList<Object>>) null);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<Object>>>) null, (Factory<LinkedList<ArrayList<Object>>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, String>, ? super Collection<Collection<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) hashMap0);
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) multiValueMap0);
      Integer integer0 = new Integer((-2145026570));
      hashMap0.put(integer0, multiValueMap0);
      Object object0 = hashMap0.put(integer0, multiValueMap1);
      MultiValueMap<ConstantFactory<String>, LinkedList<String>> multiValueMap2 = new MultiValueMap<ConstantFactory<String>, LinkedList<String>>();
      MultiValueMap<ConstantFactory<String>, ConstantFactory<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<ConstantFactory<String>>>) multiValueMap2);
      // Undeclared exception!
      try { 
        multiValueMap3.iterator(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) constantFactory0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ExceptionFactory<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ExceptionFactory<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      multiValueMap0.put((String) null, hashMap0);
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Integer integer0 = new Integer((-4882));
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(multiValueMap0, integer0);
      arrayList0.add(abstractMap_SimpleImmutableEntry0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      multiValueMap1.putAll(integer0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      MultiValueMap<ExceptionFactory<Object>, Object> multiValueMap2 = new MultiValueMap<ExceptionFactory<Object>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.getCollection(multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Comparable<Collection<Object>>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Comparable<Collection<Object>>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      Object object0 = multiValueMap0.put((String) null, hashMap0);
      Integer integer0 = new Integer((-4880));
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue(object0, (Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(arrayList0, hashMap0);
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(983);
      Object object0 = multiValueMap0.replace(integer0, (Object) integer0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(integer0, object0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add((Object) arrayList1);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<Object>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<HashMap<Collection<Object>, Object>, String> multiValueMap0 = new MultiValueMap<HashMap<Collection<Object>, Object>, String>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Collection<String> collection0 = multiValueMap0.getCollection(hashMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Comparable<Collection<Object>>, Object> hashMap0 = new HashMap<Comparable<Collection<Object>>, Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Comparable<Collection<Object>>, Object> multiValueMap0 = new MultiValueMap<Comparable<Collection<Object>>, Object>((Map<Comparable<Collection<Object>>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      multiValueMap1.putIfAbsent(multiValueMap0, (Object) null);
      multiValueMap1.iterator((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Object>, ExceptionFactory<Object>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Object>, ExceptionFactory<Object>>();
      ExceptionFactory<Object> exceptionFactory0 = (ExceptionFactory<Object>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      ArrayList<ExceptionFactory<Object>> arrayList0 = new ArrayList<ExceptionFactory<Object>>();
      boolean boolean0 = multiValueMap0.putAll(exceptionFactory0, (Collection<ExceptionFactory<Object>>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ConstantFactory<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<ConstantFactory<String>, LinkedList<String>>();
      MultiValueMap<ConstantFactory<String>, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<ConstantFactory<String>>>) multiValueMap0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("`Rz3/m{EgMP.PWNl-S");
      boolean boolean0 = multiValueMap1.putAll(constantFactory0, (Collection<ConstantFactory<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0);
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap2 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      MultiValueMap<Collection<Object>, ExceptionFactory<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ExceptionFactory<Object>>>) multiValueMap2);
      Collection<Object> collection0 = multiValueMap3.values();
      int int0 = multiValueMap1.size((Object) collection0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      multiValueMap0.putIfAbsent(linkedList0, constantFactory0);
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Integer integer0 = new Integer((-4882));
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(multiValueMap0, integer0);
      arrayList0.add(abstractMap_SimpleImmutableEntry0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      multiValueMap1.putAll(integer0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap1);
      MultiValueMap<Integer, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap2);
      boolean boolean0 = multiValueMap3.containsValue((Object) integer0, (Object) abstractMap_SimpleImmutableEntry0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      MultiValueMap<Collection<Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) multiValueMap1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap2.containsValue((Object) hashMap0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Integer integer0 = new Integer(2);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(multiValueMap0, integer0);
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      arrayList0.add(abstractMap_SimpleImmutableEntry0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      multiValueMap1.putAll(integer0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      MultiValueMap<Integer, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.containsValue((Object) integer0, (Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      multiValueMap0.values();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      Integer integer0 = new Integer(0);
      Function<Object, Object> function0 = Function.identity();
      hashMap0.computeIfAbsent(integer0, function0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Integer integer0 = new Integer((-4880));
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(multiValueMap0, integer0);
      arrayList0.add(abstractMap_SimpleImmutableEntry0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      multiValueMap1.putAll(integer0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap1);
      multiValueMap2.putAll((Map<? extends Integer, ?>) multiValueMap1);
      assertEquals(1, multiValueMap1.size());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(integer0, arrayList0);
      MultiValueMap<Integer, HashMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      Object object0 = multiValueMap1.put(integer0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer((-1502));
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      multiValueMap0.put(integer0, multiValueMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer((-1502));
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(integer0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<ConstantFactory<String>, Object> hashMap0 = new HashMap<ConstantFactory<String>, Object>();
      MultiValueMap<ConstantFactory<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<Integer>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("/ho8<lZs2oMg`");
      hashMap0.put(constantFactory0, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Collection<Object>> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, Collection<Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap1.putIfAbsent(hashMap0, arrayList0);
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Object>>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) multiValueMap0);
      MultiValueMap<LinkedList<Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.removeMapping((Object) null, multiValueMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<HashMap<Object, Object>, Collection<Object>> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, Collection<Object>>();
      multiValueMap1.putIfAbsent(hashMap0, hashMap0);
      assertEquals(1, multiValueMap1.size());
      
      boolean boolean0 = multiValueMap1.removeMapping(hashMap0, multiValueMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, (Factory<LinkedList<ArrayList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Integer integer0 = new Integer((-4892));
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(multiValueMap0, integer0);
      arrayList0.add(abstractMap_SimpleImmutableEntry0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      multiValueMap1.putAll(integer0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>) arrayList0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.util.AbstractMap$SimpleImmutableEntry
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(collection0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Comparable<Collection<Object>>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Comparable<Collection<Object>>>();
      Set<Map.Entry<AbstractMap.SimpleEntry<String, Object>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<String, Object>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<HashMap<Collection<Object>, Object>, String> multiValueMap0 = new MultiValueMap<HashMap<Collection<Object>, Object>, String>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      multiValueMap0.putIfAbsent(hashMap0, (Object) null);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      multiValueMap0.getCollection(hashMap1);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      Iterator<Map.Entry<Integer, ArrayList<Object>>> iterator0 = (Iterator<Map.Entry<Integer, ArrayList<Object>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
