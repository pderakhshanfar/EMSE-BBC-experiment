/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 11:26:42 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer0, integer0, biFunction0);
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends Integer, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, Collection<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, Collection<String>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      Object object0 = multiValueMap0.put((Collection<Object>) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(linkedList0, arrayList0);
      MultiValueMap<Collection<Integer>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<Collection<Object>>>) hashMap0, factory0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<MultiValueMap<Object, Object>, Object> hashMap0 = new HashMap<MultiValueMap<Object, Object>, Object>();
      Factory<LinkedList<HashMap<Object, Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<HashMap<Object, Object>>) null);
      MultiValueMap<MultiValueMap<Object, Object>, HashMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<MultiValueMap<Object, Object>, ? super LinkedList<HashMap<Object, Object>>>) hashMap0, factory0);
      Collection<HashMap<Object, Object>> collection0 = multiValueMap0.createCollection(512);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.createCollection(1);
      assertFalse(collection0.contains(1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Integer>, LinkedList<Collection<Object>>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Integer>, LinkedList<Collection<Object>>>();
      MultiValueMap<ExceptionFactory<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Integer>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<ExceptionFactory<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Collection<Object>>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Collection<Object>>, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent("", unaryOperator0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Collection<Integer>, AbstractMap.SimpleImmutableEntry<Collection<Object>, Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, AbstractMap.SimpleImmutableEntry<Collection<Object>, Object>>();
      MultiValueMap<Collection<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Object>>) multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap1.putIfAbsent(linkedList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Collection<Integer>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<Collection<Object>>>) hashMap0, factory0);
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      hashMap0.put(linkedList0, multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Collection<Object>, ConstantFactory<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, ConstantFactory<Integer>>();
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap2;
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<String, Collection<Object>>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<String, Collection<Object>>>();
      multiValueMap0.map = null;
      MultiValueMap<Collection<Object>, Integer> multiValueMap1 = new MultiValueMap<Collection<Object>, Integer>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = multiValueMap1.getOrDefault((Object) null, hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(object0, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Comparable<Object>, String> hashMap0 = new HashMap<Comparable<Object>, String>();
      hashMap0.put((Comparable<Object>) null, "");
      HashMap<Comparable<Object>, Object> hashMap1 = new HashMap<Comparable<Object>, Object>(1, 1);
      Factory<LinkedList<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Comparable<Object>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Comparable<Object>, ? super LinkedList<Collection<String>>>) hashMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Comparable<Object>, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super LinkedList<String>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends AbstractMap.SimpleImmutableEntry<Object, Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>>) hashMap0);
      MultiValueMap<String, Collection<Object>> multiValueMap1 = new MultiValueMap<String, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Collection<Object>, ConstantFactory<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, ConstantFactory<Integer>>();
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>((String) null, multiValueMap0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
      arrayList0.add(abstractMap_SimpleEntry1);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      Factory<Collection<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Object) null, (Collection<AbstractMap.SimpleEntry<Object, Object>>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      Integer integer0 = new Integer(2);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(integer0, arrayList0);
      arrayList0.add(abstractMap_SimpleEntry0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) arrayList0, (Collection<AbstractMap.SimpleEntry<Object, Object>>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>((Collection<String>) null);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0, (Factory<Collection<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put("yiCe8gn&5", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, MultiValueMap<Object, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<MultiValueMap<Object, String>>>) hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.put("-tdUhlSrY0A`]8[]", hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.put("-tdUhlSrY0A`]8[]", "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>((LinkedList<Integer>) null);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super LinkedList<Integer>>) null, (Factory<LinkedList<Integer>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ConstantFactory<Integer>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ConstantFactory<Integer>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>>) multiValueMap1);
      multiValueMap1.map = (Map<AbstractMap.SimpleEntry<Object, String>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
      multiValueMap0.map = null;
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super Collection<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<String, Collection<Object>>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<String, Collection<Object>>>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList1.add((Object) arrayList0);
      arrayList0.add((Collection<Object>) arrayList1);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, String>>();
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      MultiValueMap<ConstantFactory<Integer>, Collection<Object>> multiValueMap2 = new MultiValueMap<ConstantFactory<Integer>, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<String, Collection<Object>>> multiValueMap1 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<String, Collection<Object>>>();
      multiValueMap1.map = null;
      MultiValueMap<Collection<Object>, ArrayList<Collection<Object>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ArrayList<Collection<Object>>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, String>>();
      Collection<AbstractMap.SimpleEntry<Object, String>> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Iterator<Integer> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap1.putIfAbsent(multiValueMap0, factory0);
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      arrayList0.add((AbstractMap.SimpleEntry<Object, Object>) null);
      boolean boolean0 = multiValueMap1.putAll((Object) multiValueMap0, (Collection<AbstractMap.SimpleEntry<Object, Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.putAll("", (Collection<Integer>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      boolean boolean0 = multiValueMap0.putAll((Collection<Object>) null, (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<MultiValueMap<Object, String>, Collection<Object>> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, String>, Collection<Object>>();
      Integer integer0 = new Integer(512);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      arrayList0.add((AbstractMap.SimpleEntry<Object, Object>) null);
      multiValueMap0.putAll((Object) null, (Collection<AbstractMap.SimpleEntry<Object, Object>>) arrayList0);
      MultiValueMap<Object, MultiValueMap<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<Object, Integer>>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<ConstantFactory<Integer>, Collection<Object>> multiValueMap1 = new MultiValueMap<ConstantFactory<Integer>, Collection<Object>>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap0, multiValueMap0);
      arrayList0.add(abstractMap_SimpleEntry0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<AbstractMap.SimpleEntry<Object, Object>>) arrayList0);
      MultiValueMap<Object, ArrayList<Collection<Object>>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Collection<Object>>>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Comparable<Object>, Collection<String>> multiValueMap0 = new MultiValueMap<Comparable<Object>, Collection<String>>();
      HashMap<Comparable<Object>, String> hashMap0 = new HashMap<Comparable<Object>, String>();
      hashMap0.put((Comparable<Object>) null, (String) null);
      multiValueMap0.putAll((Map<? extends Comparable<Object>, ?>) hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Comparable<Object>, Collection<String>> multiValueMap0 = new MultiValueMap<Comparable<Object>, Collection<String>>();
      HashMap<Comparable<Object>, String> hashMap0 = new HashMap<Comparable<Object>, String>();
      hashMap0.put((Comparable<Object>) null, (String) null);
      multiValueMap0.putAll((Map<? extends Comparable<Object>, ?>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(4784);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("p=nc+J993[o");
      linkedList0.add("N\"#*kLV_%9\"b");
      hashMap0.put(integer0, linkedList0);
      Factory<ArrayList<MultiValueMap<Collection<Object>, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, MultiValueMap<Collection<Object>, Object>> multiValueMap0 = new MultiValueMap<Object, MultiValueMap<Collection<Object>, Object>>((Map<Object, ? super ArrayList<MultiValueMap<Collection<Object>, Object>>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, "N\"#*kLV_%9\"b");
      assertFalse(hashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(4784);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("N\"#*kLV_%9\"b");
      hashMap0.put(integer0, linkedList0);
      Factory<ArrayList<MultiValueMap<Collection<Object>, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, MultiValueMap<Collection<Object>, Object>> multiValueMap0 = new MultiValueMap<Object, MultiValueMap<Collection<Object>, Object>>((Map<Object, ? super ArrayList<MultiValueMap<Collection<Object>, Object>>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, "N\"#*kLV_%9\"b");
      assertTrue(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      boolean boolean0 = multiValueMap0.removeMapping("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap1.putIfAbsent(linkedList0, linkedList0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0, factory0);
      multiValueMap1.clear();
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      Iterator<Map.Entry<ArrayList<Object>, ArrayList<Object>>> iterator0 = (Iterator<Map.Entry<ArrayList<Object>, ArrayList<Object>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object>(332);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super LinkedList<LinkedList<Object>>>) hashMap0, (Factory<LinkedList<LinkedList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }
}
