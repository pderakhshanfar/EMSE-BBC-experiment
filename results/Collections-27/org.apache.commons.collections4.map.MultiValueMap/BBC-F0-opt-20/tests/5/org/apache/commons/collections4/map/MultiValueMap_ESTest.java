/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 11:27:40 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList1, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
      Set<Map.Entry<LinkedList<String>, Object>> set0 = (Set<Map.Entry<LinkedList<String>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<Object>>) hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>(4298);
      multiValueMap1.putIfAbsent(hashMap1, multiValueMap0);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      multiValueMap1.getCollection(multiValueMap2);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ConstantFactory<String>>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<LinkedList<Object>>) null);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super LinkedList<LinkedList<Object>>>) multiValueMap0, factory0);
      Collection<LinkedList<Object>> collection0 = multiValueMap1.createCollection(476);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Collection<String> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Object> multiValueMap0 = new MultiValueMap<Collection<Integer>, Object>();
      ArrayList<MultiValueMap<Collection<Integer>, String>> arrayList0 = new ArrayList<MultiValueMap<Collection<Integer>, String>>();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Integer>, Object>) multiValueMap1;
      ConstantFactory<Collection<MultiValueMap<Collection<Integer>, String>>> constantFactory0 = new ConstantFactory<Collection<MultiValueMap<Collection<Integer>, String>>>(arrayList0);
      MultiValueMap<Collection<Integer>, MultiValueMap<Collection<Integer>, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<MultiValueMap<Collection<Integer>, String>>>) multiValueMap0, (Factory<Collection<MultiValueMap<Collection<Integer>, String>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Object, String>>();
      MultiValueMap<HashMap<String, Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Integer>>) multiValueMap0);
      MultiValueMap<HashMap<String, Object>, ConstantFactory<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<ConstantFactory<Object>>>) multiValueMap1);
      multiValueMap0.map = (Map<HashMap<String, Object>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<MultiValueMap<Object, Integer>, Object> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, Integer>, Object>();
      multiValueMap0.map = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        multiValueMap0.size(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put(arrayList0, "~bn0\"");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Object>, ? super Collection<Collection<Object>>>) hashMap0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>((Integer) null, arrayList0);
      hashMap0.put(abstractMap_SimpleEntry0, "");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends AbstractMap.SimpleEntry<Integer, Object>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap1;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<Object>) arrayList0, (Collection<Object>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      multiValueMap0.map = null;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<Object>) linkedList0, (Collection<Object>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Factory<Collection<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      Factory<LinkedList<Object>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) multiValueMap0, factory1);
      // Undeclared exception!
      try { 
        multiValueMap1.put("Gt98xUA*E{6*b>i", factory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, ArrayList<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, ArrayList<Object>>>>) hashMap0);
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>();
      Collection<Object> collection0 = multiValueMap1.values();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(collection0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) constantFactory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.put(linkedList0, arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.put((LinkedList<Object>) null, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<String>>();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) null);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = new MultiValueMap<LinkedList<Object>, Object>((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0, factory0);
      Integer integer0 = new Integer(1174);
      // Undeclared exception!
      try { 
        multiValueMap1.put((LinkedList<Object>) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      MultiValueMap<Collection<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Object>>) hashMap0);
      hashMap0.put((Collection<Integer>) null, "");
      // Undeclared exception!
      try { 
        multiValueMap0.put((Collection<Integer>) null, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Integer>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Collection<Object>, MultiValueMap<Collection<Integer>, String>> multiValueMap0 = new MultiValueMap<Collection<Object>, MultiValueMap<Collection<Integer>, String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<Object>>>) hashMap0);
      hashMap0.put((LinkedList<String>) null, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(" $7mNyyZ>P)*-]2[#N", hashMap0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection((-2979));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      HashMap<HashMap<Integer, Object>, Object> hashMap0 = new HashMap<HashMap<Integer, Object>, Object>();
      MultiValueMap<HashMap<Integer, Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Object>, ? super Collection<Integer>>) hashMap0);
      multiValueMap1.put((HashMap<Integer, Object>) null, hashMap0);
      MultiValueMap<HashMap<Integer, Object>, ConstantFactory<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Object>, ? super Collection<ConstantFactory<String>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) hashMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, " gs++~");
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("The collections must not be null");
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) constantFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<Integer, Object>((Map<Integer, ? super LinkedList<Object>>) null, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      Integer integer0 = new Integer(0);
      multiValueMap0.put(integer0, integer0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<Integer>>) hashMap0);
      Collection<Integer> collection0 = multiValueMap0.getCollection(hashMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      Iterator<ArrayList<Object>> iterator0 = multiValueMap1.iterator((Object) "AW/2@G=e=:8T+`3");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, String>>();
      multiValueMap0.put("#:7MzDfm?VAn-:", "#:7MzDfm?VAn-:");
      ConstantFactory<Collection<HashMap<Object, String>>> constantFactory0 = new ConstantFactory<Collection<HashMap<Object, String>>>((Collection<HashMap<Object, String>>) null);
      MultiValueMap<String, HashMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Object, String>>>) multiValueMap0, (Factory<Collection<HashMap<Object, String>>>) constantFactory0);
      multiValueMap1.iterator((Object) "#:7MzDfm?VAn-:");
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Collection<Object>) arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<Integer, HashMap<Object, String>> multiValueMap1 = new MultiValueMap<Integer, HashMap<Object, String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(linkedList0, (Object) null);
      arrayList0.add((Object) null);
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<Object>) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, String>>();
      ConstantFactory<Collection<HashMap<Object, String>>> constantFactory0 = new ConstantFactory<Collection<HashMap<Object, String>>>((Collection<HashMap<Object, String>>) null);
      MultiValueMap<String, HashMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Object, String>>>) multiValueMap0, (Factory<Collection<HashMap<Object, String>>>) constantFactory0);
      boolean boolean0 = multiValueMap1.putAll("!j~UPhL1Ds", (Collection<HashMap<Object, String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      Object object0 = multiValueMap0.putIfAbsent(constantFactory0, constantFactory0);
      boolean boolean0 = multiValueMap0.containsValue(object0, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Object object0 = new Object();
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) biFunction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      Object object0 = multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) "");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("TN*Fi.<qk\rr.^", integer0);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      MultiValueMap<Object, ExceptionFactory<String>> multiValueMap1 = new MultiValueMap<Object, ExceptionFactory<String>>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      multiValueMap0.put((LinkedList<Object>) null, (Object) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Integer>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      multiValueMap0.put(arrayList0, (Object) null);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      Object object0 = multiValueMap0.putIfAbsent(constantFactory0, constantFactory0);
      MultiValueMap<Object, ConstantFactory<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ConstantFactory<Integer>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(object0, "");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      Object object0 = multiValueMap1.putIfAbsent(multiValueMap0, constantFactory0);
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap2 = new MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<ArrayList<Integer>, ArrayList<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<ArrayList<String>>>) multiValueMap2);
      ConstantFactory<Object> constantFactory1 = new ConstantFactory<Object>(object0);
      boolean boolean0 = multiValueMap3.removeMapping(constantFactory0, constantFactory1);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      MultiValueMap<Collection<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      boolean boolean0 = multiValueMap0.putAll(collection0, collection0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      Iterator<Map.Entry<LinkedList<String>, ArrayList<Object>>> iterator0 = (Iterator<Map.Entry<LinkedList<String>, ArrayList<Object>>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }
}
