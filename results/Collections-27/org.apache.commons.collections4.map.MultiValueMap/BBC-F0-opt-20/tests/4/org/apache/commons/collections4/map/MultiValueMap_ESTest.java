/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 11:27:11 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      ConstantFactory<Collection<ArrayList<Object>>> constantFactory0 = new ConstantFactory<Collection<ArrayList<Object>>>(arrayList0);
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) hashMap0, (Factory<Collection<ArrayList<Object>>>) constantFactory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, "hAFrES\"zGA9A|*euX]", biFunction0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, "hAFrES\"zGA9A|*euX]");
      assertTrue(arrayList0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<Integer>>();
      MultiValueMap<Collection<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<String>>) multiValueMap0);
      Set<Map.Entry<Collection<String>, Object>> set0 = (Set<Map.Entry<Collection<String>, Object>>)multiValueMap1.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      Factory<Collection<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory((Collection<ArrayList<Object>>) arrayList0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0, factory0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("cz2D/m>Fr", "7.kq<A*!L");
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap1);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      multiValueMap0.put((AbstractMap.SimpleImmutableEntry<Object, String>) null, (Object) null);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection((-1530));
      assertFalse(collection0.contains((-1530)));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<Object>>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Object>>, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<Object, ConstantFactory<String>> multiValueMap1 = new MultiValueMap<Object, ConstantFactory<String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>>>) hashMap0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("be", multiValueMap0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      hashMap0.putIfAbsent(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Object, Object>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      multiValueMap0.map = null;
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("B2xF'+{");
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      ConstantFactory<Collection<ArrayList<Object>>> constantFactory0 = new ConstantFactory<Collection<ArrayList<Object>>>(arrayList0);
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) hashMap0, (Factory<Collection<ArrayList<Object>>>) constantFactory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      hashMap0.put(linkedList0, object0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(arrayList1, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      Iterator<Map.Entry<Integer, String>> iterator0 = (Iterator<Map.Entry<Integer, String>>)multiValueMap1.iterator();
      HashMap<HashMap<Object, String>, Object> hashMap1 = new HashMap<HashMap<Object, String>, Object>();
      hashMap1.put((HashMap<Object, String>) null, iterator0);
      MultiValueMap<HashMap<Object, String>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<String>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<? extends HashMap<Object, String>, ?>) hashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap$1 cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1161);
      arrayList0.add(integer0);
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList0, (Collection<Integer>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-1986));
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0);
      hashMap0.put(integer0, multiValueMap0);
      linkedList0.add((Object) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add(integer0);
      HashMap<LinkedList<Object>, Object> hashMap1 = new HashMap<LinkedList<Object>, Object>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(linkedList0, (Collection<Integer>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<ConstantFactory<String>, Object> hashMap0 = new HashMap<ConstantFactory<String>, Object>();
      ConstantFactory<LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Integer>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Integer>>>((LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Integer>>) null);
      MultiValueMap<ConstantFactory<String>, AbstractMap.SimpleEntry<Collection<Object>, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Integer>>>) hashMap0, (Factory<LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Integer>>>) constantFactory0);
      ConstantFactory<String> constantFactory1 = new ConstantFactory<String>("Id`.sD)Mu~NaQiHou^+");
      LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Collection<Object>, Integer>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleEntry<Collection<Object>, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Collection<Object>, Integer>(linkedList1, integer0);
      linkedList0.add(abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(constantFactory1, (Collection<AbstractMap.SimpleEntry<Collection<Object>, Integer>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(2492);
      arrayList0.add(integer0);
      multiValueMap0.putAll(linkedList0, (Collection<Integer>) arrayList0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      multiValueMap0.map = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) null, (Factory<LinkedList<Object>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<String, Object>>>) multiValueMap0);
      Integer integer0 = new Integer((-731));
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(multiValueMap0, integer0, biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Object) null, hashMap0);
      hashMap0.put(abstractMap_SimpleEntry0, (Object) null);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      multiValueMap0.put("=kqe[0*V%x-VH", "=kqe[0*V%x-VH");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "=kqe[0*V%x-VH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      hashMap0.put((Collection<Object>) null, multiValueMap0);
      MultiValueMap<Collection<Object>, LinkedList<Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<Collection<Object>>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<LinkedList, Collection>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<LinkedList, Collection>>>) hashMap0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = new MultiValueMap<Object, ArrayList<String>>();
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<String, Object>>>) multiValueMap1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap2.merge(multiValueMap0, hashMap0, biFunction0);
      LinkedList<HashMap<String, Object>> linkedList0 = new LinkedList<HashMap<String, Object>>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      linkedList0.add(hashMap1);
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap3 = new MultiValueMap<ArrayList<Integer>, Integer>();
      boolean boolean0 = multiValueMap2.putAll((Object) multiValueMap3, (Collection<HashMap<String, Object>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Object>, Integer>, Collection<Collection<Object>>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Object>, Integer>, Collection<Collection<Object>>>();
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Object>, Integer>, Collection<Collection<Object>>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Object>, Integer>, Collection<Collection<Object>>>();
      Collection<Collection<Collection<Object>>> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      Integer integer0 = new Integer((-1));
      multiValueMap0.put(integer0, integer0);
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) multiValueMap0);
      multiValueMap1.iterator((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      multiValueMap0.put("s$w95U", "s$w95U");
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.putAll((Object) arrayList0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0);
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<String>>) multiValueMap1, factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent(linkedList0, arrayList0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      int int0 = multiValueMap2.size((Object) arrayList1);
      assertEquals(1, multiValueMap2.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<Integer>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super LinkedList<String>>) multiValueMap1, factory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap2.containsValue((Object) arrayList0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Factory<LinkedList<Collection<Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<Collection<Object>>) null);
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<Object>>>) multiValueMap0, factory0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("=kqe[B*V%x-VH", "=kqe[B*V%x-VH");
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      multiValueMap0.put("=Tkq[B*V(x-VH", "=Tkq[B*V(x-VH");
      Object object0 = new Object();
      multiValueMap0.put("=Tkq[B*V(x-VH", object0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      multiValueMap0.put("=kqe[0*V%x-VH", "=kqe[0*V%x-VH");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      multiValueMap0.put("[y~$TzT/QwQm+<vAvZ ", "[y~$TzT/QwQm+<vAvZ ");
      boolean boolean0 = multiValueMap0.containsValue((Object) "[y~$TzT/QwQm+<vAvZ ");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      ConstantFactory<Collection<ArrayList<Object>>> constantFactory0 = new ConstantFactory<Collection<ArrayList<Object>>>(arrayList0);
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) hashMap0, (Factory<Collection<ArrayList<Object>>>) constantFactory0);
      arrayList0.add((ArrayList<Object>) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, "hAFrES\"zGA9A|*euX]", biFunction0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, "hAFrES\"zGA9A|*euX]");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      multiValueMap0.put("s$w95U", "s$w95U");
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, factory0);
      HashMap<Integer, Collection<Object>> hashMap0 = new HashMap<Integer, Collection<Object>>();
      boolean boolean0 = multiValueMap1.removeMapping("s$w95U", hashMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, String>> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, String>>();
      boolean boolean0 = multiValueMap2.removeMapping(multiValueMap1, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      multiValueMap0.put("=Tkqe[B*V(o-VH", "=Tkqe[B*V(o-VH");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) arrayList0);
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>((Map<String, ? super Collection<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("org.apache.commons.collections4.map.MultiValueMap$1$1", "C8/_0L!");
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleEntry0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, MultiValueMap<String, Object>> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, MultiValueMap<String, Object>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, ArrayList<AbstractMap.SimpleEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<AbstractMap.SimpleEntry>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
