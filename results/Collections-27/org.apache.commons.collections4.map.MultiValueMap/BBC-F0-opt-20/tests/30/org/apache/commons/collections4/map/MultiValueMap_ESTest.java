/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:27:54 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer((-3229));
      hashMap0.put(integer0, "org.apache.commons.collections4.map.MultiValueMap$1");
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("org.apache.commons.collections4.map.MultialueMap$1$1$1", "org.apache.commons.collections4.map.MultialueMap$1$1$1");
      multiValueMap0.getCollection("org.apache.commons.collections4.map.MultialueMap$1$1$1");
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(10);
      assertFalse(collection0.contains(10));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("+kG>D]", "+kG>D]");
      Factory<LinkedList<AbstractMap.SimpleEntry<Integer, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<Integer, Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<Collection<Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) multiValueMap1);
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap2.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<Object>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>(885, 1.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put(",L9U", ",L9U");
      MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Integer, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleEntry<Integer, Object>>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<? extends String, ?>) multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      HashMap<ConstantFactory<String>, Collection<Object>> hashMap0 = new HashMap<ConstantFactory<String>, Collection<Object>>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("*");
      hashMap0.put(constantFactory0, collection0);
      MultiValueMap<ConstantFactory<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends ConstantFactory<String>, ?>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((ArrayList<String>) null, (Collection<Integer>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      Factory<ArrayList<ArrayList<ExceptionFactory<String>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<String>, ArrayList<ExceptionFactory<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super ArrayList<ArrayList<ExceptionFactory<String>>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList0, (Collection<Object>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      multiValueMap0.map = null;
      arrayList0.add((Object) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<Object>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<String>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(multiValueMap0, "The factory must not be null");
      Integer integer0 = new Integer(3412);
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.put(abstractMap_SimpleEntry0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap0.put(linkedList0, hashMap1);
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, linkedList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0, (Factory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<Collection<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      hashMap0.put(linkedList0, (Object) null);
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0, factory0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>((String) null);
      hashMap0.put(linkedList0, constantFactory0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ConstantFactory<Collection<Object>>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ConstantFactory<Collection<Object>>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap1);
      multiValueMap2.put(linkedList0, hashMap0);
      Factory<Collection<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap3.containsValue((Object) hashMap0, (Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(0);
      Factory<Collection<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      hashMap0.put(linkedList0, "");
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>();
      ConstantFactory<ArrayList<Object>> constantFactory0 = new ConstantFactory<ArrayList<Object>>((ArrayList<Object>) null);
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<Object>>) hashMap0, (Factory<ArrayList<Object>>) constantFactory0);
      hashMap0.put((Object) null, (Collection<Object>) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Comparable<Integer>, Object> hashMap0 = new HashMap<Comparable<Integer>, Object>();
      Integer integer0 = new Integer((-5226));
      hashMap0.put(integer0, integer0);
      MultiValueMap<Comparable<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Comparable<Integer>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ConstantFactory<Collection<Object>>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ConstantFactory<Collection<Object>>>();
      Set<Map.Entry<ArrayList<Object>, Object>> set0 = (Set<Map.Entry<ArrayList<Object>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Iterator<Integer> iterator0 = multiValueMap0.iterator((Object) linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList0.add(linkedList0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(arrayList1, unaryOperator0);
      boolean boolean0 = multiValueMap0.putAll(arrayList1, (Collection<LinkedList<Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      int int0 = multiValueMap0.size((Object) "u8Nd%9<$K");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("Ho<dv$>/s=s,", "Ho<dv$>/s=s,");
      int int0 = multiValueMap0.size((Object) "Ho<dv$>/s=s,");
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap1.putIfAbsent(linkedList0, arrayList0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap1);
      multiValueMap2.put(linkedList0, hashMap0);
      Factory<Collection<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap3.containsValue((Object) arrayList0, (Object) hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, HashMap<Object, Object>>();
      MultiValueMap<HashMap<Integer, Integer>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap1 = new MultiValueMap<HashMap<Integer, Integer>, AbstractMap.SimpleImmutableEntry<String, String>>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap1.putIfAbsent(linkedList0, arrayList0);
      Factory<Collection<AbstractMap.SimpleEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap2.containsValue((Object) arrayList0, (Object) hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>(860, 860);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ConstantFactory<ArrayList<Object>> constantFactory0 = new ConstantFactory<ArrayList<Object>>(arrayList0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ConstantFactory<String> constantFactory1 = new ConstantFactory<String>("@H|k#}vAT");
      hashMap0.put(arrayList1, constantFactory1);
      MultiValueMap<Collection<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super ArrayList<Object>>) hashMap0, (Factory<ArrayList<Object>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<String>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put(",L9U", ",L9U");
      MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>>();
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put((String) null, (Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put((String) null, "H<dv$>/s=s,");
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("org.apache.commons.collections4.map.MultialueMap$1$1$1", "org.apache.commons.collections4.map.MultialueMap$1$1$1");
      multiValueMap0.put("org.apache.commons.collections4.map.MultialueMap$1$1$1", "org.apache.commons.collections4.map.MultialueMap$1$1$1");
      boolean boolean0 = multiValueMap0.removeMapping("org.apache.commons.collections4.map.MultialueMap$1$1$1", "org.apache.commons.collections4.map.MultialueMap$1$1$1");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("H<dv$>/s=s,", "H<dv$>/s=s,");
      boolean boolean0 = multiValueMap0.removeMapping("H<dv$>/s=s,", "");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      multiValueMap1.putIfAbsent((String) null, arrayList0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, HashMap<Integer, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<HashMap<Integer, Object>>>) multiValueMap1);
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll("", collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("X", "]<dv2>s=sL");
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping("X", "]<dv2>s=sL");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      Iterator<Map.Entry<String, ArrayList<Object>>> iterator0 = (Iterator<Map.Entry<String, ArrayList<Object>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<String>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }
}
