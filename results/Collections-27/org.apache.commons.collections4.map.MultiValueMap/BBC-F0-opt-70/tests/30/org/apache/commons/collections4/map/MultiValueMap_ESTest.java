/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:28:38 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<LinkedList<Collection<Object>>> arrayList0 = new ArrayList<LinkedList<Collection<Object>>>();
      ConstantFactory<Collection<LinkedList<Collection<Object>>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Collection<Object>>>>(arrayList0);
      MultiValueMap<Object, LinkedList<Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Collection<Object>>>>) multiValueMap0, (Factory<Collection<LinkedList<Collection<Object>>>>) constantFactory0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge("6 V!!I*w<G*", arrayList0, biFunction0);
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, LinkedList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) multiValueMap1, factory0);
      multiValueMap2.putAll((Map<?, ?>) multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, linkedList0, biFunction0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<MultiValueMap<Object, String>, Collection<Object>> hashMap0 = new HashMap<MultiValueMap<Object, String>, Collection<Object>>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory((LinkedList<Object>) null);
      MultiValueMap<MultiValueMap<Object, String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<MultiValueMap<Object, String>, ? super LinkedList<Object>>) hashMap0, factory0);
      Collection<Object> collection0 = multiValueMap0.createCollection(0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Collection<String>, Integer> multiValueMap0 = new MultiValueMap<Collection<String>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection((-1795));
      assertFalse(collection0.contains((-1795)));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      multiValueMap0.map = null;
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<String>>) hashMap0);
      hashMap0.put((HashMap<Object, Object>) null, multiValueMap0);
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<String>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Collection<Collection<Object>>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Collection<Collection<Object>>>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = new MultiValueMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, HashMap<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<HashMap<Object, String>>>) multiValueMap1);
      multiValueMap1.map = (Map<LinkedList<String>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap2.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      multiValueMap0.map = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      multiValueMap0.map = (Map<Object, Object>) multiValueMap0;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      multiValueMap0.map = null;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      ArrayList<LinkedList<Collection<Object>>> arrayList0 = new ArrayList<LinkedList<Collection<Object>>>();
      ConstantFactory<Collection<LinkedList<Collection<Object>>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Collection<Object>>>>(arrayList0);
      multiValueMap0.put("", constantFactory0);
      MultiValueMap<Object, LinkedList<Collection<Object>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Collection<Object>>>>) multiValueMap1, (Factory<Collection<LinkedList<Collection<Object>>>>) constantFactory0);
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, LinkedList<String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) multiValueMap2, factory0);
      // Undeclared exception!
      try { 
        multiValueMap3.putAll((Map<?, ?>) multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      HashMap<Collection<Object>, String> hashMap0 = new HashMap<Collection<Object>, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put(arrayList0, ">)@r0cW{E3>jFZ");
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, ExceptionFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ExceptionFactory<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("#5");
      Integer integer0 = new Integer(3821);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(integer0, (Collection<String>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<Object>>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Collection<Object>> linkedList1 = new LinkedList<Collection<Object>>();
      linkedList1.add((Collection<Object>) arrayList0);
      ArrayList<Collection<Object>> arrayList1 = new ArrayList<Collection<Object>>(linkedList1);
      hashMap0.put(linkedList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList0, (Collection<Collection<Object>>) arrayList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      MultiValueMap<MultiValueMap<String, Object>, Collection<Object>> multiValueMap1 = new MultiValueMap<MultiValueMap<String, Object>, Collection<Object>>();
      Collection<Object> collection0 = multiValueMap1.values();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory(collection0);
      MultiValueMap<Collection<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.put(collection0, collection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, HashMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<HashMap<Object, String>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      multiValueMap0.map = null;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<ConstantFactory<Object>, ExceptionFactory<Integer>> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, ExceptionFactory<Integer>>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(multiValueMap0);
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      MultiValueMap<HashMap<Object, Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<LinkedList<Object>>>) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      MultiValueMap<Integer, String> multiValueMap2 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap2);
      hashMap0.put(hashMap1, multiValueMap3);
      // Undeclared exception!
      try { 
        multiValueMap1.put(hashMap1, constantFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<String, String>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>();
      ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>>) null, (Factory<LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Collection<Object>>, LinkedList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Collection<Object>, Collection<Object>>, LinkedList<String>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Collection<Object>, Collection<Object>>, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap0, linkedList0);
      arrayList0.add(abstractMap_SimpleEntry0);
      multiValueMap0.putAll(linkedList0, (Collection<AbstractMap.SimpleEntry<Object, Object>>) arrayList0);
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<String, ConstantFactory<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<LinkedList, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<AbstractMap.SimpleEntry<LinkedList, Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<Object, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, Object>>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", linkedList0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
      linkedList0.add(abstractMap_SimpleEntry1);
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0, (Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap1.map = null;
      MultiValueMap<String, Collection<Object>> multiValueMap2 = new MultiValueMap<String, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Collection<Integer>, Collection<Object>> hashMap0 = new HashMap<Collection<Integer>, Collection<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      HashMap<Collection<String>, Object> hashMap1 = new HashMap<Collection<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap1.put(linkedList0, hashMap0);
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<String>>) hashMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<ArrayList<Collection<Object>>, Collection<Object>> hashMap0 = new HashMap<ArrayList<Collection<Object>>, Collection<Object>>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Collection<Object>>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Object>>, ? super Collection<Object>>) hashMap0, factory0);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      hashMap0.put(arrayList0, (Collection<Object>) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<ConstantFactory<Integer>, Object> hashMap0 = new HashMap<ConstantFactory<Integer>, Object>();
      MultiValueMap<ConstantFactory<Integer>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Integer>, ? super Collection<ArrayList<String>>>) hashMap0);
      Integer integer0 = new Integer(525);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      hashMap0.put(constantFactory0, constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Collection<Object>>, Collection<Object>> hashMap0 = new HashMap<ArrayList<Collection<Object>>, Collection<Object>>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Collection<Object>>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Object>>, ? super Collection<Object>>) hashMap0, factory0);
      ArrayList<Collection<Object>> arrayList1 = new ArrayList<Collection<Object>>();
      hashMap0.put(arrayList1, arrayList0);
      Object object0 = multiValueMap0.put(arrayList1, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Set<Map.Entry<ArrayList<String>, Object>> set0 = (Set<Map.Entry<ArrayList<String>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.getCollection((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Collection<Object>>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Collection<Object>>>();
      Factory<Collection<HashMap<String, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, HashMap<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<String, Integer>>>) multiValueMap0, factory0);
      Iterator<HashMap<String, Integer>> iterator0 = multiValueMap1.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("#5");
      Integer integer0 = new Integer((-173));
      multiValueMap0.putAll(integer0, (Collection<String>) arrayList0);
      multiValueMap0.iterator((Object) integer0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("#5");
      Integer integer0 = new Integer((-173));
      multiValueMap0.putIfAbsent(integer0, integer0);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<String>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Integer, String>>();
      Integer integer0 = new Integer(2275);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<HashMap<Integer, String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, arrayList1);
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<String>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) hashMap0);
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<String>, ?>) multiValueMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Collection<Integer>, Collection<Object>> hashMap0 = new HashMap<Collection<Integer>, Collection<Object>>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList1.add((Object) hashMap0);
      hashMap0.put(arrayList0, arrayList1);
      MultiValueMap<Collection<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Object>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Collection<Integer>, Collection<Object>> hashMap0 = new HashMap<Collection<Integer>, Collection<Object>>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList1);
      MultiValueMap<Collection<Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Object>>) hashMap0, factory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("\"Kq~6/psox");
      arrayList0.add("\"Kq~6/psox");
      Integer integer0 = new Integer(0);
      multiValueMap0.putAll(integer0, (Collection<String>) arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, "\"Kq~6/psox");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer((-173));
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("#5");
      multiValueMap1.putAll(integer0, (Collection<String>) arrayList0);
      boolean boolean0 = multiValueMap1.removeMapping(integer0, multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("\"Kq~6/psox");
      Integer integer0 = new Integer(0);
      multiValueMap0.putAll(integer0, (Collection<String>) arrayList0);
      assertEquals(1, arrayList0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping(integer0, "\"Kq~6/psox");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<Object>>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Object>>, ArrayList<String>>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList1);
      MultiValueMap<LinkedList<Collection<Object>>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<Object>>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      boolean boolean0 = multiValueMap1.putAll("r.apache.cmmons.collections4.iterators.EmptyrderedIterator", collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<String, Collection<Object>> multiValueMap2 = new MultiValueMap<String, Collection<Object>>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      Iterator<Map.Entry<Integer, ArrayList<String>>> iterator0 = (Iterator<Map.Entry<Integer, ArrayList<String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<Collection<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }
}
