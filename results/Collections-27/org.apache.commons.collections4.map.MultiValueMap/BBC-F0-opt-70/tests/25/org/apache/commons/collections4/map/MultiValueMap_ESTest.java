/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:16:49 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<String, LinkedList<Integer>>();
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap1 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(arrayList0, multiValueMap0, biFunction0);
      assertEquals(1, multiValueMap1.size());
      
      boolean boolean0 = multiValueMap1.removeMapping(arrayList0, multiValueMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      linkedList0.push((LinkedList<Object>) null);
      multiValueMap0.putAll((Object) linkedList0, (Collection<LinkedList<Object>>) linkedList0);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.getCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, String>, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleEntry<String, String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Collection<ExceptionFactory<String>>, Collection<String>> multiValueMap0 = new MultiValueMap<Collection<ExceptionFactory<String>>, Collection<String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.map = (Map<Collection<ExceptionFactory<String>>, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Collection<ExceptionFactory<String>>, Collection<String>> multiValueMap0 = new MultiValueMap<Collection<ExceptionFactory<String>>, Collection<String>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Collection<String>>();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = new MultiValueMap<Object, Collection<Object>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      linkedList0.addLast((LinkedList<Object>) null);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) multiValueMap0, (Collection<LinkedList<Object>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, ArrayList<Object>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.map = null;
      ArrayList<ArrayList<Object>> arrayList1 = new ArrayList<ArrayList<Object>>();
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      arrayList1.add(arrayList2);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<ArrayList<Object>>) arrayList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(3);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Collection<String> collection0 = hashMap1.values();
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory(collection0);
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0, factory0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        multiValueMap0.put("org.apache.commons.collections4.CollectionUtils", integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>((LinkedList<String>) null);
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) constantFactory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Object>>>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = hashMap0.put(linkedList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Comparable<String>, ? super Collection<LinkedList<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Object> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Object>((Map<AbstractMap.SimpleEntry<String, Integer>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      multiValueMap0.map = (Map<AbstractMap.SimpleEntry<String, Integer>, Object>) multiValueMap1;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Collection<String>>, Comparable<Collection<String>>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Collection<String>>, Comparable<Collection<String>>>();
      multiValueMap0.map = null;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Object>, Integer> multiValueMap0 = new MultiValueMap<ExceptionFactory<Object>, Integer>();
      MultiValueMap<ExceptionFactory<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap0);
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList0);
      hashMap0.put("", linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.addFirst(linkedList0);
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<String>>>) hashMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      MultiValueMap<LinkedList<String>, String> multiValueMap1 = new MultiValueMap<LinkedList<String>, String>();
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Factory<LinkedList<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<ArrayList<Integer>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Collection<String>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Collection<String>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super Collection<String>>) hashMap0);
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      Integer integer0 = new Integer(3696);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, hashMap0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, (Collection<String>) null);
      Factory<LinkedList<HashMap<Object, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super LinkedList<HashMap<Object, Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Integer, Comparable<Object>> multiValueMap0 = new MultiValueMap<Integer, Comparable<Object>>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleEntry<String, Object>>>) multiValueMap0);
      Integer integer0 = new Integer((-1320));
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(integer0, integer0, biFunction0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(integer0, linkedList0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, Integer>();
      MultiValueMap<HashMap<String, Object>, Integer> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<HashMap<String, Object>, Integer>((Map<HashMap<String, Object>, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      Collection<Integer> collection0 = multiValueMap1.getCollection(linkedList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      Iterator<LinkedList<String>> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      MultiValueMap<ArrayList<Object>, Comparable<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Comparable<Object>>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap1.putAll(arrayList0, (Collection<Comparable<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Integer integer0 = new Integer(4);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      multiValueMap0.put(linkedList0, linkedList0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("", linkedList0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "", (Object) "");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Object>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("PeQor+/", linkedList0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "PeQor+/", (Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) hashMap0);
      hashMap0.put(multiValueMap0, (Object) null);
      LinkedList<ConstantFactory<Object>> linkedList0 = new LinkedList<ConstantFactory<Object>>();
      Factory<LinkedList<ConstantFactory<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ConstantFactory<Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<?, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer((-2007));
      arrayList0.add((Object) integer0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Integer>>>) multiValueMap1, (Factory<Collection<Collection<Integer>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      multiValueMap0.put(linkedList0, linkedList0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.iterator((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<HashMap<String, String>, Object> multiValueMap0 = new MultiValueMap<HashMap<String, String>, Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<Object>>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((HashMap<String, String>) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Collection<String>>();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = new MultiValueMap<Object, Collection<Object>>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }
}
