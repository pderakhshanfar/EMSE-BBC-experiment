/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:03:12 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Comparable<Collection<String>>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Comparable<Collection<String>>, ArrayList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Collection<String>, ArrayList<Object>>();
      multiValueMap1.putIfAbsent(arrayList0, multiValueMap0);
      multiValueMap1.put(arrayList0, arrayList1);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<String>>();
      Set<Map.Entry<Collection<Object>, Object>> set0 = (Set<Map.Entry<Collection<Object>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("The comparator must not be null", "The comparator must not be null");
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) multiValueMap0);
      multiValueMap1.getCollection(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      MultiValueMap<MultiValueMap<String, Object>, ConstantFactory<String>> multiValueMap1 = new MultiValueMap<MultiValueMap<String, Object>, ConstantFactory<String>>();
      MultiValueMap<String, String> multiValueMap2 = new MultiValueMap<String, String>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(linkedList0, multiValueMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, MultiValueMap<String, Object>> multiValueMap0 = new MultiValueMap<Object, MultiValueMap<String, Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = new MultiValueMap<LinkedList<Object>, Object>((Map<LinkedList<Object>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(linkedList0, (Collection<Object>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Comparable<Collection<String>>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Comparable<Collection<String>>, ArrayList<Object>>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      Factory<LinkedList<Collection<Integer>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Comparable<Collection<String>>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Comparable<Collection<String>>, ? super LinkedList<Collection<Integer>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Comparable<Collection<String>>, Object>) multiValueMap1;
      arrayList0.add(arrayList1);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Comparable<Collection<String>>) null, (Collection<ArrayList<Object>>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Collection<MultiValueMap<String, String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<MultiValueMap<String, String>>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put("bWP*,[", linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory(collection0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap2 = new MultiValueMap<LinkedList<Object>, Integer>();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap2, factory0);
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>((Collection<String>) null);
      MultiValueMap<LinkedList<Object>, String> multiValueMap4 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) multiValueMap3, (Factory<Collection<String>>) constantFactory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap4.put(linkedList0, multiValueMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super LinkedList<LinkedList<Object>>>) multiValueMap0, (Factory<LinkedList<LinkedList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>();
      Integer integer0 = new Integer(860);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(hashMap0, integer0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, integer0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Comparable<Collection<String>>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Comparable<Collection<String>>, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, String>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<String>>();
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>(linkedList0);
      MultiValueMap<LinkedList<Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<LinkedList<String>>>) multiValueMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.map = (Map<Object, Object>) multiValueMap0;
      Integer integer0 = new Integer(0);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0, (Object) constantFactory0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>("The factory must not be null");
      hashMap0.put((Object) null, constantFactory0);
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<Integer, Object>((Map<Integer, ? super ArrayList<Object>>) null, (Factory<ArrayList<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Comparable<Collection<String>>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Comparable<Collection<String>>, ArrayList<Object>>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put((Comparable<Collection<String>>) null, linkedList0);
      arrayList0.add(arrayList1);
      boolean boolean0 = multiValueMap0.putAll((Comparable<Collection<String>>) null, (Collection<ArrayList<Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, ? super Collection<Object>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Integer>>();
      Collection<ArrayList<Integer>> collection0 = multiValueMap0.getCollection("");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<String>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Comparable<Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Comparable<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super LinkedList<String>>) multiValueMap1, factory0);
      Iterator<String> iterator0 = multiValueMap2.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Comparable<Collection<String>>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Comparable<Collection<String>>, ArrayList<Object>>();
      int int0 = multiValueMap0.size((Object) "org.apache.commons.collections4.map.MultiValueMap$Values");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Integer integer0 = new Integer(2);
      multiValueMap0.putIfAbsent(integer0, integer0);
      MultiValueMap<Object, ConstantFactory<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ConstantFactory<Collection<String>>>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.putIfAbsent(linkedList0, "K`.yxk T'`n/Ckd-S5");
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.putIfAbsent(linkedList0, "/y0>|97-mV");
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) "/y0>|97-mV");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Factory<ArrayList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<Object>>) multiValueMap0, factory0);
      multiValueMap1.totalSize();
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Collection<String>, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Collection<String>, String>>>) hashMap0);
      hashMap0.put("", multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap0.putAll((Map<?, ?>) multiValueMap1);
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<String>>();
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Collection<String>, ArrayList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.put(arrayList0, (Object) null);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<String>>();
      MultiValueMap<Collection<Object>, MultiValueMap<String, Object>> multiValueMap1 = new MultiValueMap<Collection<Object>, MultiValueMap<String, Object>>();
      MultiValueMap<Object, String> multiValueMap2 = new MultiValueMap<Object, String>();
      multiValueMap2.putIfAbsent(multiValueMap0, "K`.yxk T'`n/Ckd-S5");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap2.removeMapping(multiValueMap1, linkedList0);
      assertEquals(1, multiValueMap2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      HashMap<ArrayList<String>, Collection<String>> hashMap0 = new HashMap<ArrayList<String>, Collection<String>>();
      MultiValueMap<ArrayList<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, multiValueMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.putIfAbsent(linkedList0, "v;");
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, "v;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<ArrayList<Collection<String>>, Collection<String>> multiValueMap1 = new MultiValueMap<ArrayList<Collection<String>>, Collection<String>>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      multiValueMap1.put(arrayList0, (Object) null);
      Collection<Object> collection0 = multiValueMap1.values();
      boolean boolean0 = multiValueMap0.putAll((Integer) null, collection0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<ArrayList<Collection<String>>, Collection<String>> multiValueMap1 = new MultiValueMap<ArrayList<Collection<String>>, Collection<String>>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((Integer) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      multiValueMap0.putIfAbsent(hashMap0, hashMap0);
      multiValueMap0.iterator((Object) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, ArrayList<Object>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<String>>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Collection<String>>, Integer>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<LinkedList<Collection<String>>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<String>>, ? super LinkedList<LinkedList<Object>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<LinkedList<Collection<String>>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
