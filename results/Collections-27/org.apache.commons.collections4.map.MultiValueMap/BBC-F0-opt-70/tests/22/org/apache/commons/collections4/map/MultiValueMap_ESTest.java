/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:07:37 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      multiValueMap0.put(linkedList0, arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, ? super LinkedList<String>>) hashMap0, factory0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, ? super Collection<Collection<Integer>>>) multiValueMap0);
      Factory<LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, ? super LinkedList<AbstractMap.SimpleEntry<Integer, Integer>>>) multiValueMap1, factory1);
      Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>>)multiValueMap2.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      multiValueMap0.putIfAbsent((Integer) null, "6Il9Q!AEAn");
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      MultiValueMap<Integer, String> multiValueMap1 = new MultiValueMap<Integer, String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(multiValueMap1, hashMap0, biFunction0);
      multiValueMap0.getCollection(object0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) null);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0, factory0);
      Collection<String> collection0 = multiValueMap1.createCollection(1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<Integer>>();
      Collection<LinkedList<Integer>> collection0 = multiValueMap0.createCollection(1);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, arrayList0);
      arrayList0.add("[q7+kzLES&!Oi?");
      MultiValueMap<Collection<String>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Collection<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(3557);
      hashMap0.putIfAbsent(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = multiValueMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<String>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.size(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-830));
      hashMap0.put(linkedList0, integer0);
      MultiValueMap<Collection<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) multiValueMap0);
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping((Object) null, multiValueMap2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>((Integer) null);
      hashMap0.put((Integer) null, constantFactory0);
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping((Object) null, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) multiValueMap0);
      multiValueMap1.put(multiValueMap0, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<ArrayList<String>, HashMap<Collection<Object>, Collection<Object>>> multiValueMap0 = new MultiValueMap<ArrayList<String>, HashMap<Collection<Object>, Collection<Object>>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<String>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>((Collection<Integer>) null);
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>((Map<Object, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) constantFactory0);
      arrayList0.add((Object) multiValueMap1);
      ConstantFactory<Collection<Object>> constantFactory1 = new ConstantFactory<Collection<Object>>(arrayList0);
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1, (Factory<Collection<Object>>) constantFactory1);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Object) integer0, (Collection<Object>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-36));
      hashMap0.putIfAbsent(integer0, arrayList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      HashMap<LinkedList<Integer>, Object> hashMap1 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      Factory<LinkedList<Collection<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<LinkedList<Integer>, Collection<Object>> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, Collection<Object>>((Map<LinkedList<Integer>, ? super LinkedList<Collection<Object>>>) hashMap1, factory0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      hashMap1.put(linkedList1, hashMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(integer0, collection0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = new MultiValueMap<LinkedList<Object>, Integer>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) multiValueMap1, factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.put(linkedList0, multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<ConstantFactory<Object>, Object> hashMap0 = new HashMap<ConstantFactory<Object>, Object>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(hashMap0);
      hashMap0.put(constantFactory0, "");
      MultiValueMap<ConstantFactory<Object>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(constantFactory0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<String, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<String, Object>>();
      Factory<Collection<AbstractMap.SimpleEntry<String, Object>>> factory0 = ConstantFactory.constantFactory((Collection<AbstractMap.SimpleEntry<String, Object>>) linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<AbstractMap.SimpleEntry<String, Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Integer>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap1;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Integer>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleEntry>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleEntry>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<String, LinkedList<Collection<Object>>> multiValueMap1 = new MultiValueMap<String, LinkedList<Collection<Object>>>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) arrayList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      multiValueMap0.map = null;
      MultiValueMap<String, LinkedList<Collection<Object>>> multiValueMap1 = new MultiValueMap<String, LinkedList<Collection<Object>>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(multiValueMap0, "EbE5r^ilbX");
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(hashMap0, hashMap0, biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(10);
      hashMap0.putIfAbsent(integer0, (Object) null);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, multiValueMap0);
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<String>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Collection<Object>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      MultiValueMap<Collection<Integer>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Collection<Integer>, ArrayList<Object>>();
      Collection<ArrayList<Object>> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Iterator<LinkedList<Integer>> iterator0 = multiValueMap0.iterator((Object) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap1);
      hashMap1.put("TK2vv;+WkeDY\",|", iterator0);
      MultiValueMap<String, MultiValueMap<Integer, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<MultiValueMap<Integer, String>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.iterators.EmptyIterator cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      multiValueMap0.iterator((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<Integer, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      multiValueMap1.putIfAbsent((Object) null, (Object) null);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap0);
      int int0 = multiValueMap2.size((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<HashMap<String, Integer>, Collection<Object>> hashMap0 = new HashMap<HashMap<String, Integer>, Collection<Object>>();
      MultiValueMap<HashMap<String, Integer>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, Integer>, ? super Collection<Object>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<String>>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap0, factory0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      Integer integer0 = new Integer(2336);
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) multiValueMap0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("", integer0);
      multiValueMap1.putAll((Map<?, ?>) hashMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      linkedList0.add((Collection<Object>) null);
      Integer integer0 = new Integer(1);
      multiValueMap0.putAll((Object) integer0, (Collection<Collection<Object>>) linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) multiValueMap0);
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(hashMap0, hashMap0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) multiValueMap0);
      MultiValueMap<Object, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      multiValueMap2.putIfAbsent((Object) null, (Object) null);
      boolean boolean0 = multiValueMap1.removeMapping((Object) null, multiValueMap2);
      assertEquals(1, multiValueMap2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      MultiValueMap<Integer, ExceptionFactory<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ExceptionFactory<Object>>>) multiValueMap1);
      boolean boolean0 = multiValueMap2.removeMapping("N", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-36));
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      HashMap<LinkedList<Integer>, Object> hashMap1 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      Factory<LinkedList<Collection<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<LinkedList<Integer>, Collection<Object>> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, Collection<Object>>((Map<LinkedList<Integer>, ? super LinkedList<Collection<Object>>>) hashMap1, factory0);
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Object) arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      Iterator<Map.Entry<LinkedList<Object>, String>> iterator0 = (Iterator<Map.Entry<LinkedList<Object>, String>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
