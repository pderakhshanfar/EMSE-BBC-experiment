/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:31:06 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      multiValueMap0.put(linkedList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      hashMap0.put((LinkedList<Object>) null, (Object) null);
      MultiValueMap<LinkedList<Object>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, LinkedList<Collection<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<Collection<String>>>>) hashMap0);
      LinkedList<LinkedList<Collection<String>>> linkedList0 = new LinkedList<LinkedList<Collection<String>>>();
      MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      arrayList0.add(linkedList1);
      multiValueMap1.putAll((Collection<String>) linkedList1, (Collection<LinkedList<String>>) arrayList0);
      multiValueMap1.getCollection(linkedList0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, ArrayList<Collection<String>>> multiValueMap0 = new MultiValueMap<String, ArrayList<Collection<String>>>();
      Collection<ArrayList<Collection<String>>> collection0 = multiValueMap0.createCollection(1);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) multiValueMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) hashMap0);
      hashMap0.put(multiValueMap0, linkedList0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = new MultiValueMap<ArrayList<String>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList1);
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      hashMap0.put(arrayList0, constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(linkedList0, "The comparator must not be null");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Integer>>>) hashMap0);
      hashMap0.put(multiValueMap0, "");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(arrayList0);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory1 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap1, (Factory<LinkedList<Object>>) constantFactory1);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<?, ?>) multiValueMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(arrayList0, linkedList0);
      linkedList0.add((Object) hashMap0);
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(788);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<ArrayList<Object>> constantFactory0 = new ConstantFactory<ArrayList<Object>>((ArrayList<Object>) null);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super ArrayList<Object>>) multiValueMap0, (Factory<ArrayList<Object>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(integer0, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) null, (Factory<Collection<ArrayList<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("J3&PdJ5VZy0tx({8[V", multiValueMap0);
      linkedList0.add(abstractMap_SimpleImmutableEntry0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<AbstractMap.SimpleImmutableEntry<String, Object>>) linkedList0);
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, LinkedList<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap0;
      Integer integer0 = new Integer((-1394));
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0, (Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Integer integer0 = new Integer(1166);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.put(multiValueMap0, integer0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) hashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Collection<LinkedList<Object>> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      Iterator<LinkedList<Object>> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>();
      linkedList0.add((AbstractMap.SimpleImmutableEntry<String, Object>) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<AbstractMap.SimpleImmutableEntry<String, Object>>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<AbstractMap.SimpleImmutableEntry<String, Object>>) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<AbstractMap.SimpleImmutableEntry<String, Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      int int0 = multiValueMap0.size((Object) multiValueMap1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<LinkedList<String>, HashMap<Object, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, HashMap<Object, Integer>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", (Object) "org.apache.commons.collections4.map.MultiValueMap$ValuesIterator");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      multiValueMap1.totalSize();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>();
      linkedList0.add((AbstractMap.SimpleImmutableEntry<String, Object>) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<AbstractMap.SimpleImmutableEntry<String, Object>>) linkedList0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<String>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer((-1));
      multiValueMap0.put(arrayList0, integer0);
      multiValueMap0.put(arrayList0, "s");
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.put(multiValueMap0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) hashMap0);
      hashMap0.put(integer0, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<String, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      hashMap0.put(arrayList0, linkedList1);
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList1);
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, "The comparator must not be null");
      assertFalse(hashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap1.computeIfAbsent(arrayList0, function0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<Collection<String>, String> multiValueMap1 = new MultiValueMap<Collection<String>, String>();
      MultiValueMap<Collection<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Object>>) multiValueMap1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap2.putAll((Collection<String>) arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Integer, Integer>>();
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      Factory<Collection<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) multiValueMap0, factory0);
      multiValueMap1.clear();
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      Iterator<Map.Entry<LinkedList<String>, Object>> iterator0 = (Iterator<Map.Entry<LinkedList<String>, Object>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) hashMap0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = new MultiValueMap<ArrayList<String>, Object>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, hashMap0);
      assertFalse(boolean0);
  }
}
