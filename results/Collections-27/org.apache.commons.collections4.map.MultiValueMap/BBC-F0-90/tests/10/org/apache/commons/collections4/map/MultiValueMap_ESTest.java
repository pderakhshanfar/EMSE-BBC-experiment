/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:31:45 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, integer0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>(linkedList0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) hashMap0, (Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) constantFactory0);
      multiValueMap1.put("", multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      HashMap<AbstractMap.SimpleEntry<String, Collection<Object>>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Collection<Object>>, Object>();
      AbstractMap.SimpleEntry<String, Collection<Object>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Collection<Object>>("", collection0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      hashMap0.computeIfAbsent(abstractMap_SimpleEntry0, unaryOperator0);
      MultiValueMap<AbstractMap.SimpleEntry<String, Collection<Object>>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Collection<Object>>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.util.AbstractMap$SimpleEntry
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> multiValueMap1 = new MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, HashMap<Object, Object>>();
      Collection<HashMap<Object, Object>> collection0 = multiValueMap0.createCollection(0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, String> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, String>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Collection<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super Collection<Collection<Integer>>>) multiValueMap1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap1.map = (Map<AbstractMap.SimpleEntry<Object, Integer>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap2.removeMapping(arrayList0, collection0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      Integer integer0 = new Integer(2574);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping("", integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap0, multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(linkedList0);
      Integer integer0 = new Integer((-906));
      arrayList0.add(integer0);
      multiValueMap0.putAll(abstractMap_SimpleEntry0, (Collection<Integer>) arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, Comparable<Collection<Object>>> multiValueMap0 = new MultiValueMap<String, Comparable<Collection<Object>>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.put("^Q<~TmmX,", "^Q<~TmmX,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      hashMap0.put((Integer) null, factory0);
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.put((Integer) null, "A{1's");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Collection<ArrayList<Object>>> linkedList0 = new LinkedList<Collection<ArrayList<Object>>>();
      Factory<LinkedList<Collection<ArrayList<Object>>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<Collection<ArrayList<Object>>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Integer>, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Integer>, ? super Collection<AbstractMap.SimpleEntry<String, Object>>>) hashMap0, (Factory<Collection<AbstractMap.SimpleEntry<String, Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) "", (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      hashMap0.put((Integer) null, factory0);
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<Object>>>) multiValueMap0, factory0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(integer0, (Collection<LinkedList<Object>>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap2 = new MultiValueMap<ArrayList<Object>, Object>();
      Iterator<Object> iterator0 = multiValueMap2.iterator((Object) multiValueMap1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, linkedList0, biFunction0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      multiValueMap0.iterator((Object) arrayList1);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Integer integer0 = new Integer(0);
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(integer0, arrayList0);
      linkedList0.add(linkedList1);
      boolean boolean0 = multiValueMap1.putAll(integer0, (Collection<LinkedList<Object>>) linkedList0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, ArrayList<Integer>>();
      Integer integer0 = new Integer(3004);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = new MultiValueMap<Object, LinkedList<String>>();
      Collection<Object> collection0 = multiValueMap1.values();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(collection0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(linkedList0, integer0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      LinkedList<ArrayList<Integer>> linkedList1 = new LinkedList<ArrayList<Integer>>();
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleEntry0, (Collection<ArrayList<Integer>>) linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      boolean boolean0 = multiValueMap0.putAll("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      multiValueMap0.put("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", (Object) null);
      int int0 = multiValueMap0.size((Object) "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      MultiValueMap<ArrayList<Object>, MultiValueMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<MultiValueMap<Object, String>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      multiValueMap0.put("org.apache.commons.collections4.map.MultiValueMap$1", "");
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = new MultiValueMap<String, LinkedList<Object>>();
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(1);
      multiValueMap0.put(integer0, integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) constantFactory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      MultiValueMap<ArrayList<Object>, MultiValueMap<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<MultiValueMap<Object, String>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap2 = new MultiValueMap<Object, ArrayList<Integer>>();
      multiValueMap2.putIfAbsent(collection0, collection0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap2.containsValue((Object) linkedList0);
      assertEquals(1, multiValueMap2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(1);
      Object object0 = multiValueMap0.put(integer0, integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      multiValueMap0.replace((Integer) object0, (Object) linkedList0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) constantFactory0);
      boolean boolean0 = multiValueMap1.removeMapping(object0, integer0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer(1);
      Object object0 = multiValueMap0.put(integer0, integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) constantFactory0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap1.removeMapping(object0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>((Map<LinkedList<Object>, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      Integer integer0 = new Integer((-1));
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put((Integer) null, linkedList0);
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("z%&");
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) constantFactory0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> multiValueMap1 = new MultiValueMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Object>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Collection<Object>>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Collection<Object>>>();
      Iterator<Map.Entry<Integer, LinkedList<Collection<Object>>>> iterator0 = (Iterator<Map.Entry<Integer, LinkedList<Collection<Object>>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
