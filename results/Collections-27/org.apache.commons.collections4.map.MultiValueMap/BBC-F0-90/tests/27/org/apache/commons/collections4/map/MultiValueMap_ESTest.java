/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:41:42 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      HashMap<ArrayList<Object>, Integer> hashMap0 = new HashMap<ArrayList<Object>, Integer>();
      multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      multiValueMap0.put(linkedList1, linkedList0);
      MultiValueMap<LinkedList<Integer>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Collection<String>>>) multiValueMap0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      multiValueMap1.replace(linkedList2, (Object) linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      multiValueMap0.put(linkedList1, arrayList1);
      MultiValueMap<LinkedList<Integer>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Collection<String>>>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap1.removeMapping(linkedList0, arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MultiValueMap<Object, Collection<ArrayList<Integer>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<ArrayList<Integer>>>>) hashMap1);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap1.put(hashMap0, arrayList0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      multiValueMap0.put((Integer) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(integer0, biFunction0);
      Factory<LinkedList<HashMap<String, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<HashMap<String, Integer>>>) multiValueMap0, factory0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(3953);
      assertFalse(collection0.contains(3953));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<LinkedList<Integer>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Collection<String>>>) multiValueMap0);
      MultiValueMap<MultiValueMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap2 = new MultiValueMap<MultiValueMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      multiValueMap0.map = (Map<LinkedList<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping((Object) null, multiValueMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.putIfAbsent(multiValueMap1, multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      arrayList0.add((Integer) null);
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>((LinkedList<Integer>) null);
      MultiValueMap<LinkedList<String>, Integer> multiValueMap1 = new MultiValueMap<LinkedList<String>, Integer>((Map<LinkedList<String>, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) constantFactory0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(linkedList0, (Collection<Integer>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, HashMap<Collection, AbstractMap.SimpleImmutableEntry>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Collection, AbstractMap.SimpleImmutableEntry>>>) hashMap0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      Set<Object> set0 = multiValueMap1.keySet();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(set0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) constantFactory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1859));
      // Undeclared exception!
      try { 
        multiValueMap2.put(linkedList0, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<LinkedList<Collection<Integer>>, Object> hashMap0 = new HashMap<LinkedList<Collection<Integer>>, Object>();
      Factory<ArrayList<LinkedList<String>>> factory0 = ConstantFactory.constantFactory((ArrayList<LinkedList<String>>) null);
      MultiValueMap<LinkedList<Collection<Integer>>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<Integer>>, ? super ArrayList<LinkedList<String>>>) hashMap0, factory0);
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer((-868));
      hashMap0.put(arrayList0, integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) null, (Factory<Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Collection<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<LinkedList<Object>>>) multiValueMap0, (Factory<LinkedList<LinkedList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge((LinkedList<String>) null, multiValueMap0, biFunction0);
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator(object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Object>();
      Integer integer0 = new Integer(1660);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "");
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(abstractMap_SimpleEntry0, biFunction0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      multiValueMap0.replaceAll(biFunction1);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Integer>>();
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      hashMap0.put((HashMap<String, Object>) null, multiValueMap0);
      MultiValueMap<HashMap<String, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>((Map<ArrayList<Object>, ? super Collection<String>>) null, (Factory<Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, Integer>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1));
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(linkedList0, function0);
      arrayList0.add(integer0);
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<Integer>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, HashMap<String, String>> multiValueMap0 = new MultiValueMap<String, HashMap<String, String>>();
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap1.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      Factory<LinkedList<HashMap<String, Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, HashMap<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<HashMap<String, Integer>>>) multiValueMap0, factory0);
      Collection<HashMap<String, Integer>> collection0 = multiValueMap1.getCollection(factory0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(2, 2);
      MultiValueMap<Object, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<String>>>) hashMap0);
      MultiValueMap<Integer, Object> multiValueMap2 = new MultiValueMap<Integer, Object>();
      hashMap0.put(object0, multiValueMap2);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap3.iterator((Object) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(integer0, biFunction0);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-5232));
      arrayList0.add(integer0);
      multiValueMap0.putAll(linkedList0, (Collection<Integer>) arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(48);
      arrayList0.add(integer0);
      multiValueMap0.putAll(linkedList0, (Collection<Integer>) arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<Object>, HashMap<Object, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<HashMap<Object, String>>>) hashMap0);
      multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge((LinkedList<String>) null, multiValueMap0, biFunction0);
      multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add((Object) arrayList1);
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(48);
      arrayList0.add(integer0);
      multiValueMap0.putAll(linkedList0, (Collection<Integer>) arrayList0);
      MultiValueMap<LinkedList<String>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Object object0 = multiValueMap0.put(linkedList1, linkedList0);
      MultiValueMap<LinkedList<Integer>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Collection<String>>>) multiValueMap0);
      multiValueMap1.replace(linkedList1, (Object) linkedList1);
      boolean boolean0 = multiValueMap1.removeMapping(object0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(81);
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      multiValueMap0.put(linkedList1, integer0);
      MultiValueMap<LinkedList<Integer>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Collection<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(linkedList0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll("Aep@=4-NQi", collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      Integer integer0 = new Integer(0);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<String>>>) multiValueMap0);
      Iterator<Map.Entry<Object, Collection<String>>> iterator0 = (Iterator<Map.Entry<Object, Collection<String>>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      MultiValueMap<LinkedList<Object>, ArrayList<Collection>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Collection>>>) multiValueMap0);
      Factory<ArrayList<AbstractMap.SimpleImmutableEntry<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super ArrayList<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.createCollection((-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }
}
