/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:31:11 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Collection<LinkedList<Integer>>> linkedList1 = new LinkedList<Collection<LinkedList<Integer>>>();
      hashMap0.put(linkedList0, linkedList1);
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Integer>>) hashMap0);
      Object object0 = multiValueMap0.replace(linkedList0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, HashMap<Object, String>>();
      Set<Map.Entry<ArrayList<Integer>, Object>> set0 = (Set<Map.Entry<ArrayList<Integer>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.put(multiValueMap0, "8]");
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) multiValueMap0);
      multiValueMap1.put((Object) null, (Object) null);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      Collection<String> collection0 = multiValueMap1.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put("", "");
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Object>>();
      multiValueMap0.map = (Map<Object, Object>) hashMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<ExceptionFactory<String>, Object> hashMap0 = new HashMap<ExceptionFactory<String>, Object>();
      ExceptionFactory<String> exceptionFactory0 = (ExceptionFactory<String>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1400);
      hashMap0.put(exceptionFactory0, integer0);
      MultiValueMap<ExceptionFactory<String>, LinkedList<ExceptionFactory<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ExceptionFactory<String>, ? super Collection<LinkedList<ExceptionFactory<String>>>>) hashMap0);
      MultiValueMap<ExceptionFactory<String>, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<String>, ? super Collection<HashMap<Object, Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, HashMap<String, Integer>> multiValueMap0 = new MultiValueMap<String, HashMap<String, Integer>>();
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Integer, ExceptionFactory<String>> multiValueMap0 = new MultiValueMap<Integer, ExceptionFactory<String>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(linkedList0, integer0);
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Integer>>) hashMap0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) linkedList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.put(multiValueMap0, "8]");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(multiValueMap0, hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Integer>>) hashMap0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(linkedList1, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Factory<Collection<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) multiValueMap0, factory0);
      ArrayList<ArrayList<Integer>> arrayList1 = new ArrayList<ArrayList<Integer>>();
      arrayList1.add(arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Object) constantFactory0, (Collection<ArrayList<Integer>>) arrayList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<String>>>) hashMap0, factory0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, arrayList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Integer>>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, "2xJJ<}[gv>");
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super LinkedList<ArrayList<Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<ExceptionFactory<String>, Object> multiValueMap0 = new MultiValueMap<ExceptionFactory<String>, Object>();
      MultiValueMap<ExceptionFactory<String>, ExceptionFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<String>, ? super Collection<ExceptionFactory<Object>>>) multiValueMap0);
      ExceptionFactory<String> exceptionFactory0 = (ExceptionFactory<String>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      multiValueMap0.putIfAbsent(exceptionFactory0, multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Integer, Collection<LinkedList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<LinkedList>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<String, HashMap<String, String>> multiValueMap0 = new MultiValueMap<String, HashMap<String, String>>();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Integer>>();
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1);
      multiValueMap1.map = (Map<Object, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Object>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<ExceptionFactory<String>, Object> hashMap0 = new HashMap<ExceptionFactory<String>, Object>();
      MultiValueMap<ExceptionFactory<String>, LinkedList<ExceptionFactory<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ExceptionFactory<String>, ? super Collection<LinkedList<ExceptionFactory<String>>>>) hashMap0);
      ExceptionFactory<String> exceptionFactory0 = (ExceptionFactory<String>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      hashMap0.put(exceptionFactory0, multiValueMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0, factory0);
      Integer integer0 = new Integer(1);
      Object object0 = new Object();
      hashMap0.put(integer0, object0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0, (Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", (Object) "org.apache.commons.collections4.map.MultiValueMap$ValuesIterator");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) hashMap0);
      Collection<AbstractMap.SimpleEntry<Object, String>> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Integer>, ExceptionFactory<Object>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Integer>, ExceptionFactory<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Collection<LinkedList<Integer>>>, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Collection<LinkedList<Integer>>>, LinkedList<Integer>>();
      Iterator<LinkedList<Integer>> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Collection<LinkedList<Integer>>>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Collection<LinkedList<Integer>>>, LinkedList<Integer>>();
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      multiValueMap1.putIfAbsent(hashMap0, multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2);
      linkedList0.add(integer0);
      boolean boolean0 = multiValueMap1.putAll(hashMap0, (Collection<Integer>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      boolean boolean0 = multiValueMap0.putAll((Object) "org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Integer integer0 = new Integer(0);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      HashMap<String, Collection<LinkedList<Integer>>> hashMap0 = new HashMap<String, Collection<LinkedList<Integer>>>();
      Integer integer0 = new Integer(512);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      BiFunction<Object, Object, Collection<LinkedList<Integer>>> biFunction0 = (BiFunction<Object, Object, Collection<LinkedList<Integer>>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(hashMap0, constantFactory0, biFunction0);
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<String>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<String>>>) hashMap0);
      multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<Object, Object>>();
      multiValueMap0.map = (Map<Object, Object>) hashMap0;
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<String>>>) hashMap0, factory0);
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Collection<LinkedList<Integer>>> linkedList1 = new LinkedList<Collection<LinkedList<Integer>>>();
      hashMap0.put(linkedList0, linkedList1);
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Integer>>) hashMap0);
      Object object0 = multiValueMap0.replace(linkedList0, (Object) linkedList0);
      assertNotNull(object0);
      
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Integer>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, (Object) null);
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<HashMap<Integer, Integer>, HashMap<String, String>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, HashMap<String, String>>();
      HashMap<Collection<LinkedList<Integer>>, Object> hashMap1 = new HashMap<Collection<LinkedList<Integer>>, Object>();
      boolean boolean0 = multiValueMap0.removeMapping(hashMap0, hashMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      multiValueMap0.put((Object) null, "8]");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, hashMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      ArrayList<ArrayList<String>> arrayList0 = new ArrayList<ArrayList<String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add(arrayList1);
      multiValueMap0.putAll((Object) arrayList0, (Collection<ArrayList<String>>) arrayList0);
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(arrayList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
      Iterator<Map.Entry<ArrayList<Integer>, Object>> iterator0 = (Iterator<Map.Entry<ArrayList<Integer>, Object>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, (Factory<LinkedList<ArrayList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }
}
