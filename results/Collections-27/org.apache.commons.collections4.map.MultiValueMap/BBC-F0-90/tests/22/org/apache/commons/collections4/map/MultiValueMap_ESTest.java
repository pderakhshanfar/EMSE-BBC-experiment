/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:41:10 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Integer>>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      multiValueMap0.put("", "");
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, Collection<ArrayList<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<ArrayList<Integer>>>>) multiValueMap0);
      MultiValueMap multiValueMap2 = (MultiValueMap)multiValueMap1.getOrDefault(multiValueMap0, multiValueMap0);
      multiValueMap0.put(multiValueMap2, (Object) null);
      assertEquals(1, multiValueMap2.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", arrayList0);
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      ConstantFactory<LinkedList<Collection<String>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<String>>>(linkedList0);
      MultiValueMap<String, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<String>>>) multiValueMap0, (Factory<LinkedList<Collection<String>>>) constantFactory0);
      Collection<Collection<String>> collection0 = multiValueMap1.getCollection("");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Collection<ArrayList<Integer>>, Collection<ArrayList<Integer>>>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Collection<ArrayList<Integer>>, Collection<ArrayList<Integer>>>>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      Integer integer0 = new Integer((-1));
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      hashMap0.put(integer0, arrayList0);
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>((Map<Integer, ? super Collection<Integer>>) hashMap0, factory0);
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>>();
      Integer integer0 = new Integer(179);
      multiValueMap0.put(integer0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(488);
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<String, String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<HashMap<Collection<ArrayList<Integer>>, String>, Object> hashMap0 = new HashMap<HashMap<Collection<ArrayList<Integer>>, String>, Object>();
      LinkedList<HashMap<String, Object>> linkedList0 = new LinkedList<HashMap<String, Object>>();
      ConstantFactory<LinkedList<HashMap<String, Object>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Object>>>(linkedList0);
      MultiValueMap<HashMap<Collection<ArrayList<Integer>>, String>, HashMap<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Collection<ArrayList<Integer>>, String>, ? super LinkedList<HashMap<String, Object>>>) hashMap0, (Factory<LinkedList<HashMap<String, Object>>>) constantFactory0);
      HashMap<Collection<ArrayList<Integer>>, String> hashMap1 = new HashMap<Collection<ArrayList<Integer>>, String>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>(10, 1093.0406F);
      linkedList0.offer(hashMap2);
      hashMap0.put(hashMap1, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(hashMap1, (Collection<HashMap<String, Object>>) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Factory<Collection<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put("", factory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Collection<ArrayList<Integer>>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<ArrayList<Integer>>, HashMap<Object, Object>>();
      MultiValueMap<Collection<ArrayList<Integer>>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<ArrayList<Integer>>, ? super Collection<Integer>>) multiValueMap0);
      LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
      Object object0 = multiValueMap1.put(linkedList0, multiValueMap0);
      MultiValueMap<Object, Integer> multiValueMap2 = new MultiValueMap<Object, Integer>();
      ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap2.put(object0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, Integer>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("rj1LAHuKr!", multiValueMap0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.put("rj1LAHuKr!", (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<ArrayList<Integer>>>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<ArrayList<Integer>>>, ArrayList<Object>>();
      MultiValueMap<ArrayList<Collection<ArrayList<Integer>>>, ExceptionFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<ArrayList<Integer>>>, ? super Collection<ExceptionFactory<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Collection<ArrayList<Integer>>>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<ArrayList<Integer>>>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<ArrayList<Integer>>>, ArrayList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(512);
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putIfAbsent(arrayList0, integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) "Cannot instantiate class: ");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      arrayList0.add(linkedList0);
      Integer integer0 = new Integer(512);
      multiValueMap0.putIfAbsent(integer0, integer0);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<LinkedList<Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      ConstantFactory<LinkedList<Collection<String>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<String>>>(linkedList0);
      MultiValueMap<String, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<String>>>) multiValueMap0, (Factory<LinkedList<Collection<String>>>) constantFactory0);
      Collection<Collection<String>> collection0 = multiValueMap1.getCollection("");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Iterator<AbstractMap.SimpleImmutableEntry<Integer, Object>> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      boolean boolean0 = multiValueMap0.putAll("c_", (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, Collection<ArrayList<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<ArrayList<Integer>>>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, (Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, (Object) null);
      ArrayList<ArrayList<Integer>> arrayList1 = new ArrayList<ArrayList<Integer>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList1, (Object) arrayList1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", arrayList0);
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("r+3+U]-@u-c!", multiValueMap0, biFunction0);
      MultiValueMap<String, HashMap<LinkedList, LinkedList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<LinkedList, LinkedList>>>) multiValueMap0);
      multiValueMap0.putAll((Map<? extends String, ?>) multiValueMap1);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<HashMap<Integer, String>, Object> multiValueMap0 = new MultiValueMap<HashMap<Integer, String>, Object>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(hashMap0, hashMap0, biFunction0);
      ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
      multiValueMap0.put(hashMap0, arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>>();
      Integer integer0 = new Integer(209);
      multiValueMap1.put(integer0, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>>();
      Integer integer0 = new Integer(209);
      multiValueMap1.put(integer0, multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      
      boolean boolean0 = multiValueMap1.removeMapping(integer0, multiValueMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, String>>();
      Integer integer0 = new Integer(209);
      multiValueMap1.put(integer0, multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(integer0, integer0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      arrayList0.add(linkedList0);
      Integer integer0 = new Integer(1571);
      multiValueMap0.putAll(integer0, (Collection<LinkedList<Object>>) arrayList0);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      Integer integer0 = new Integer(1517);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      boolean boolean0 = multiValueMap1.putAll((Object) integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Object object0 = new Object();
      boolean boolean0 = multiValueMap0.containsValue(object0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Collection<ArrayList<Integer>>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<Collection<ArrayList<Integer>>, AbstractMap.SimpleEntry<String, Object>>();
      Iterator<Map.Entry<Collection<ArrayList<Integer>>, AbstractMap.SimpleEntry<String, Object>>> iterator0 = (Iterator<Map.Entry<Collection<ArrayList<Integer>>, AbstractMap.SimpleEntry<String, Object>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Factory<Collection<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }
}
