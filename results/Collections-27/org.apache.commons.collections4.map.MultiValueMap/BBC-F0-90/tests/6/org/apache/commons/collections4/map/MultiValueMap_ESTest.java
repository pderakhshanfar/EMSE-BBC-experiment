/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:31:02 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap2 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap2.putIfAbsent(arrayList0, multiValueMap1);
      int int0 = multiValueMap2.totalSize();
      assertFalse(multiValueMap2.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) hashMap0);
      Collection<AbstractMap.SimpleImmutableEntry<String, Object>> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(1240);
      hashMap0.put(integer0, integer0);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      multiValueMap0.map = null;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, HashMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      HashMap<AbstractMap.SimpleEntry<Integer, String>, Object> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(collection0);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, String>, ? super Collection<Object>>) hashMap1, (Factory<Collection<Object>>) constantFactory0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "org.apache.commons.collections4.map.MultiValueMap$Values");
      // Undeclared exception!
      try { 
        multiValueMap1.put(abstractMap_SimpleEntry0, collection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<LinkedList>, ? super LinkedList<Object>>) null, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, HashMap<Object, String>>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection((-2004));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("(1FIQIY", object0);
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory((LinkedList<Object>) null);
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>((Map<String, ? super LinkedList<Object>>) hashMap0, factory0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Iterator<Map.Entry<String, LinkedList<Object>>> iterator0 = (Iterator<Map.Entry<String, LinkedList<Object>>>)multiValueMap1.iterator();
      MultiValueMap<HashMap<String, Object>, ArrayList<Integer>> multiValueMap2 = new MultiValueMap<HashMap<String, Object>, ArrayList<Integer>>();
      MultiValueMap<HashMap<String, Object>, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<String>>) multiValueMap2);
      MultiValueMap<HashMap<String, Object>, HashMap<Object, String>> multiValueMap4 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<HashMap<Object, String>>>) multiValueMap3);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap4.computeIfAbsent(hashMap0, unaryOperator0);
      multiValueMap3.replace(hashMap0, (Object) iterator0);
      assertEquals(1, multiValueMap3.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Integer, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<String, Object>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      Collection<Integer> collection0 = multiValueMap1.getCollection(linkedList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<ArrayList<String>> arrayList0 = new ArrayList<ArrayList<String>>();
      arrayList0.add((ArrayList<String>) null);
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      multiValueMap0.put((Object) null, (Object) null);
      boolean boolean0 = multiValueMap0.putAll((Object) null, (Collection<ArrayList<String>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = new MultiValueMap<Object, ArrayList<String>>();
      boolean boolean0 = multiValueMap1.putAll((Object) multiValueMap0, (Collection<ArrayList<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) "5nP>kFH-KB");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList1, (Object) multiValueMap1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList1, (Object) arrayList1);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<String>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Set<String> set0 = hashMap0.keySet();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, set0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = new MultiValueMap<ArrayList<String>, Object>();
      multiValueMap1.putAll((Map<? extends ArrayList<String>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<String>, MultiValueMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<MultiValueMap<Object, Object>>>) hashMap0);
      multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<String>, MultiValueMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<MultiValueMap<Object, Object>>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      MultiValueMap<HashMap<String, Object>, ArrayList<Integer>> multiValueMap2 = new MultiValueMap<HashMap<String, Object>, ArrayList<Integer>>();
      MultiValueMap<HashMap<String, Object>, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<String>>) multiValueMap2);
      MultiValueMap<HashMap<String, Object>, HashMap<Object, String>> multiValueMap4 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<HashMap<Object, String>>>) multiValueMap3);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      multiValueMap2.putIfAbsent(hashMap0, (Object) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap4.removeMapping(multiValueMap1, arrayList0);
      assertFalse(multiValueMap4.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<String, String>>>) multiValueMap0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap2.entrySet();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<Object>> multiValueMap3 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<Object>>();
      boolean boolean0 = multiValueMap3.removeMapping(multiValueMap1, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      MultiValueMap<HashMap<String, Object>, ArrayList<Integer>> multiValueMap1 = new MultiValueMap<HashMap<String, Object>, ArrayList<Integer>>();
      MultiValueMap<HashMap<String, Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<String>>) multiValueMap1);
      MultiValueMap<HashMap<String, Object>, HashMap<Object, String>> multiValueMap3 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<HashMap<Object, String>>>) multiValueMap2);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      multiValueMap1.putIfAbsent(hashMap0, multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, String> multiValueMap4 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) hashMap0, factory0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      boolean boolean0 = multiValueMap3.removeMapping(multiValueMap4, hashMap1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      multiValueMap0.putIfAbsent(hashMap0, multiValueMap1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ConstantFactory<ArrayList<Object>> constantFactory0 = new ConstantFactory<ArrayList<Object>>(arrayList0);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>((Map<Object, ? super ArrayList<Object>>) multiValueMap0, (Factory<ArrayList<Object>>) constantFactory0);
      int int0 = multiValueMap2.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.putIfAbsent(multiValueMap0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap2 = new MultiValueMap<String, ArrayList<Object>>();
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll((Object) hashMap0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = multiValueMap0.putIfAbsent(arrayList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue(object0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }
}
