/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:40:51 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<String>>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      MultiValueMap<Object, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap2);
      multiValueMap3.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Integer>>) multiValueMap0);
      Set<Map.Entry<ArrayList<Integer>, Object>> set0 = (Set<Map.Entry<ArrayList<Integer>, Object>>)multiValueMap1.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Collection<Object>>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, String>();
      hashMap0.put(abstractMap_SimpleImmutableEntry1, "f_=@=/-s$<IL");
      multiValueMap0.putAll((Map<? extends AbstractMap.SimpleImmutableEntry<Object, String>, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("", arrayList0, biFunction0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) hashMap0, factory0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      Collection<LinkedList<Object>> collection0 = multiValueMap0.createCollection((-2352));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, String>();
      MultiValueMap<HashMap<Object, Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<HashMap<Object, Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Collection<Collection<Integer>>> multiValueMap0 = new MultiValueMap<Collection<Integer>, Collection<Collection<Integer>>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.map = null;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      Factory<LinkedList<HashMap<String, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, HashMap<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<HashMap<String, Object>>>) hashMap0, factory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, "org.apache.commons.collections4.iterators.EmptyOrderedMapIterator");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(linkedList0, factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory((LinkedList<Object>) null);
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>((Map<Integer, ? super LinkedList<Object>>) multiValueMap0, factory0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap1.put((Integer) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      MultiValueMap<Integer, LinkedList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<String>>>) multiValueMap1);
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, multiValueMap0);
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap3.put(linkedList0, multiValueMap2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Collection<Object>>>) null, (Factory<LinkedList<Collection<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<LinkedList<Collection<Integer>>, Object> hashMap0 = new HashMap<LinkedList<Collection<Integer>>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(arrayList0);
      MultiValueMap<LinkedList<Collection<Integer>>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<Integer>>, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(linkedList0, hashMap0, biFunction0);
      MultiValueMap<Collection<String>, Object> multiValueMap1 = new MultiValueMap<Collection<String>, Object>();
      ArrayList<ArrayList<Object>> arrayList1 = new ArrayList<ArrayList<Object>>();
      ConstantFactory<Collection<ArrayList<Object>>> constantFactory1 = new ConstantFactory<Collection<ArrayList<Object>>>(arrayList1);
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ArrayList<Object>>>) multiValueMap1, (Factory<Collection<ArrayList<Object>>>) constantFactory1);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue(object0, object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Object, String>>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Object>, String> multiValueMap0 = new MultiValueMap<HashMap<Integer, Object>, String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("org.apache.commons.collections4.map.MultiValueMap");
      Object object0 = new Object();
      multiValueMap0.put(hashMap0, object0);
      boolean boolean0 = multiValueMap0.putAll(hashMap0, (Collection<String>) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<ArrayList<String>>>) hashMap0);
      Collection<ArrayList<String>> collection0 = multiValueMap0.getCollection(hashMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, Collection<Integer>>();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Object>, ? super Collection<Integer>>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put((AbstractMap.SimpleEntry<Integer, Object>) null, linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Object>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      Iterator<LinkedList<Object>> iterator0 = multiValueMap1.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Integer integer0 = new Integer((-3926));
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, ArrayList<Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(multiValueMap0, integer0);
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      linkedList0.add(arrayList0);
      boolean boolean0 = multiValueMap1.putAll(abstractMap_SimpleImmutableEntry0, (Collection<ArrayList<Object>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      boolean boolean0 = multiValueMap1.putAll(linkedList0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      boolean boolean0 = multiValueMap0.putAll("j[\"SE", (Collection<LinkedList<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = new MultiValueMap<Object, LinkedList<String>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap1.merge(multiValueMap0, multiValueMap0, biFunction0);
      boolean boolean0 = multiValueMap1.containsValue(object0, (Object) "{<7k(Nq");
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) "Thd factory must notF#e null", (Object) "Thd factory must notF#e null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("Thd factory must notF#e null", "Thd factory must notF#e null", biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "Thd factory must notF#e null", (Object) "Thd factory must notF#e null");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer((-3090));
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, integer0);
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<AbstractMap.SimpleEntry<String, Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, "#b*yNl37 4MCk~Z");
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, String>();
      MultiValueMap<Collection<String>, Object> multiValueMap1 = new MultiValueMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap1.computeIfAbsent(arrayList0, unaryOperator0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(arrayList0, unaryOperator0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) multiValueMap0, (Factory<Collection<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, "#b*yNl37 4MCk~Z");
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, Collection<ArrayList<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<ArrayList<Object>>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = linkedList0.addAll(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Integer integer0 = new Integer(1);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) constantFactory0);
      Iterator<Map.Entry<Object, Object>> iterator0 = (Iterator<Map.Entry<Object, Object>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<HashMap<Object, Integer>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, ArrayList<Integer>>();
      MultiValueMap<HashMap<Object, Integer>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<Collection<Integer>>>) multiValueMap0);
      MultiValueMap<HashMap<Object, Integer>, ArrayList<LinkedList<Integer>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<ArrayList<LinkedList<Integer>>>>) multiValueMap1);
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>((Collection<Object>) null);
      MultiValueMap<HashMap<Object, Integer>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<HashMap<Object, Integer>, ? super Collection<Object>>) multiValueMap2, (Factory<Collection<Object>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap3.createCollection(1342);
      assertNull(collection0);
  }
}
