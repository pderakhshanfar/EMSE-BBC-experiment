/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:36:39 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Object>>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(0, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) hashMap0, factory0);
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      ConstantFactory<LinkedList<LinkedList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<Object>>>(linkedList0);
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<Object>>>) multiValueMap0, (Factory<LinkedList<LinkedList<Object>>>) constantFactory0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap1.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, Integer>();
      LinkedList<HashMap<Integer, Object>> linkedList0 = new LinkedList<HashMap<Integer, Object>>();
      Factory<LinkedList<HashMap<Integer, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<HashMap<Integer, Integer>, HashMap<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Integer>, ? super LinkedList<HashMap<Integer, Object>>>) multiValueMap0, factory0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      multiValueMap1.put(hashMap0, (Object) null);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      LinkedList<AbstractMap.SimpleEntry<String, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<String, Integer>>();
      hashMap0.putIfAbsent(linkedList0, "~#NM");
      Factory<LinkedList<AbstractMap.SimpleEntry<String, Integer>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<String, Integer>>>) hashMap0, factory0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Comparable<String>> arrayList0 = new ArrayList<Comparable<String>>();
      ConstantFactory<Collection<Comparable<String>>> constantFactory0 = new ConstantFactory<Collection<Comparable<String>>>(arrayList0);
      MultiValueMap<Object, Comparable<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Comparable<String>>>) hashMap0, (Factory<Collection<Comparable<String>>>) constantFactory0);
      Factory<LinkedList<Comparable<Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<Comparable<Object>>) null);
      MultiValueMap<Object, Comparable<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Comparable<Object>>>) multiValueMap0, factory0);
      Collection<Comparable<Object>> collection0 = multiValueMap1.createCollection(2244);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      Collection<String> collection0 = multiValueMap0.createCollection((-954));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = new MultiValueMap<Integer, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Object>, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Object>, Object>, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      AbstractMap.SimpleImmutableEntry<Collection<Object>, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Collection<Object>, Object>(arrayList0, multiValueMap0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(abstractMap_SimpleImmutableEntry0, unaryOperator0);
      MultiValueMap<Collection<Object>, ConstantFactory<Collection<Object>>> multiValueMap1 = new MultiValueMap<Collection<Object>, ConstantFactory<Collection<Object>>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(abstractMap_SimpleImmutableEntry1, "org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<String, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<String, Integer>>();
      linkedList0.offer((AbstractMap.SimpleEntry<String, Integer>) null);
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, Integer>>();
      MultiValueMap<Object, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) linkedList0, (Collection<AbstractMap.SimpleEntry<String, Integer>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<HashMap<Integer, Integer>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, Integer>();
      Factory<LinkedList<HashMap<Integer, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Integer, Integer>, HashMap<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Integer>, ? super LinkedList<HashMap<Integer, Object>>>) multiValueMap0, factory0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(hashMap1, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      AbstractMap.SimpleImmutableEntry<Collection<Object>, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Collection<Object>, String>(arrayList0, "org.apache.commons.collections4.map.MultiValueMap$1");
      AbstractMap.SimpleEntry<Collection<Object>, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Collection<Object>, String>(abstractMap_SimpleImmutableEntry0);
      arrayList0.add((Object) abstractMap_SimpleEntry0);
      Stream<Object> stream0 = arrayList0.stream();
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, stream0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<HashMap<Collection<Object>, Object>, Object> hashMap0 = new HashMap<HashMap<Collection<Object>, Object>, Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>((Collection<Object>) null);
      MultiValueMap<HashMap<Collection<Object>, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Collection<Object>, Object>, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      HashMap<Collection<Object>, Object> hashMap1 = new HashMap<Collection<Object>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(hashMap1, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleEntry<Collection<Object>, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Collection<Object>, Integer>(arrayList0, integer0);
      AbstractMap.SimpleImmutableEntry<Collection<Object>, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Collection<Object>, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Collection<Object>, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Collection<Object>, Integer>(abstractMap_SimpleImmutableEntry0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(arrayList0, integer0);
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>((Map<Collection<Object>, ? super LinkedList<String>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, abstractMap_SimpleEntry1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      Factory<LinkedList<LinkedList<Integer>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<Integer>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Integer>, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<HashMap<Integer, Integer>, HashMap<Integer, Object>>();
      MultiValueMap<HashMap<Integer, Integer>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Integer>, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<HashMap<Integer, Integer>, Object>) multiValueMap1;
      MultiValueMap<String, Collection<Object>> multiValueMap2 = new MultiValueMap<String, Collection<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<LinkedList, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<LinkedList, Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) hashMap0);
      hashMap0.put((Integer) null, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<LinkedList<String>, Object> hashMap1 = new HashMap<LinkedList<String>, Object>(512, 512);
      MultiValueMap<LinkedList<String>, ArrayList<Collection<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<Collection<Object>>>>) hashMap1);
      multiValueMap0.put(linkedList0, hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap1, (Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(39);
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>();
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, (Object) null);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>();
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, integer0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "_2BP`~_");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      boolean boolean0 = multiValueMap0.putAll("", (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) hashMap0);
      Collection<ArrayList<String>> collection0 = multiValueMap0.getCollection(hashMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<String, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<String, Integer>>();
      linkedList0.add((AbstractMap.SimpleEntry<String, Integer>) null);
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, Integer>>();
      multiValueMap0.putAll((Object) linkedList0, (Collection<AbstractMap.SimpleEntry<String, Integer>>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll((Object) linkedList0, (Collection<AbstractMap.SimpleEntry<String, Integer>>) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, (Object) null);
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends Collection<Object>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<String, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<String, Integer>>();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Object>();
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Collection<Object>>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(linkedList0, "org.apache.commons.collections4.functors.ConstantFactory");
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) "org.apache.commons.collections4.functors.ConstantFactory");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Collection<Object>>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.collections4.functors.ConstantFactory", (Object) "org.apache.commons.collections4.functors.ConstantFactory");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Collection<Object>>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(linkedList0, "org.apache.commons.collections4.functors.ConstantFactory");
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) "Nh");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<Object>>();
      HashMap<Collection<String>, String> hashMap0 = new HashMap<Collection<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, "org.apache.commons.collections4.iterators.AbstractEmptyMapIterator");
      multiValueMap0.putAll((Map<? extends Collection<String>, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, "org.apache.commons.collections4.map.MultiValueMap$1");
      MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Collection<Integer>>>) multiValueMap0);
      MultiValueMap<Collection<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<? extends Collection<Object>, ?>) multiValueMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>(512, 512);
      MultiValueMap<LinkedList<String>, ArrayList<Collection<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<Collection<Object>>>>) hashMap0);
      multiValueMap0.put(linkedList0, hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "$:e2:");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Collection<Object>>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Collection<Object>>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(linkedList0, "org.apache.commons.collections4.functors.ConstantFactory");
      boolean boolean0 = multiValueMap0.containsValue((Object) "org.apache.commons.collections4.functors.ConstantFactory");
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping(object0, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<String, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<String, Integer>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      multiValueMap0.put(linkedList1, "y,LN7GQ");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      linkedList0.offerFirst("org.apache.commons.collections4.collection.AbstractCollectionDecorator");
      boolean boolean0 = multiValueMap0.removeMapping(object0, object0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>((Map<ArrayList<Object>, ? super LinkedList<Integer>>) hashMap0, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, LinkedList<Collection<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Collection<Object>>>>) multiValueMap0);
      multiValueMap1.put(constantFactory0, linkedList0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      multiValueMap0.iterator(object0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(collection0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      Integer integer0 = new Integer((-1));
      Object object0 = multiValueMap0.put(integer0, integer0);
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(")|2$#<,<.o^o&?XA").when(biFunction0).apply(anyInt() , any());
      multiValueMap0.compute((Integer) object0, biFunction0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Iterator<Map.Entry<String, Integer>> iterator0 = (Iterator<Map.Entry<String, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
