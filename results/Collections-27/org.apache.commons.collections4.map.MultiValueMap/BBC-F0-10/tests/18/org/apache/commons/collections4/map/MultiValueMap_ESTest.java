/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:38:33 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.putIfAbsent(linkedList0, arrayList0);
      multiValueMap0.put(linkedList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<String, String>>();
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge((String) null, integer0, biFunction0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(512);
      MultiValueMap<Collection<Integer>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<Integer>>();
      multiValueMap0.putIfAbsent((Collection<Integer>) null, integer0);
      multiValueMap0.getCollection((Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory((LinkedList<String>) null);
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) hashMap0);
      MultiValueMap<ArrayList<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<String>>) multiValueMap0, factory0);
      Collection<String> collection0 = multiValueMap1.createCollection((-2));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Collection<AbstractMap.SimpleImmutableEntry<Integer, Integer>> collection0 = multiValueMap0.createCollection((-1205));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      hashMap0.put(linkedList0, integer0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(1);
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      Integer integer0 = new Integer(1);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      hashMap1.put(integer0, multiValueMap1);
      MultiValueMap<Integer, Collection<AbstractMap.SimpleImmutableEntry>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<AbstractMap.SimpleImmutableEntry>>>) hashMap1);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>>) multiValueMap2);
      // Undeclared exception!
      try { 
        multiValueMap3.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.map = null;
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = new MultiValueMap<LinkedList<String>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      HashMap<ArrayList<Collection<Integer>>, Object> hashMap0 = new HashMap<ArrayList<Collection<Integer>>, Object>();
      Factory<ArrayList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ConstantFactory<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ConstantFactory<Object>>>) multiValueMap1);
      multiValueMap2.put(hashMap0, factory0);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap3 = new MultiValueMap<Integer, ArrayList<String>>();
      MultiValueMap<LinkedList<Object>, ArrayList<Integer>> multiValueMap4 = new MultiValueMap<LinkedList<Object>, ArrayList<Integer>>();
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      hashMap0.put(arrayList0, multiValueMap2);
      Factory<LinkedList<ConstantFactory<String>>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, ConstantFactory<String>> multiValueMap5 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<ConstantFactory<String>>>) multiValueMap4, factory1);
      Iterator<Map.Entry<LinkedList<Object>, ConstantFactory<String>>> iterator0 = (Iterator<Map.Entry<LinkedList<Object>, ConstantFactory<String>>>)multiValueMap5.iterator();
      // Undeclared exception!
      try { 
        multiValueMap3.removeMapping(hashMap0, iterator0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<ArrayList<String>, Collection<Integer>> hashMap0 = new HashMap<ArrayList<String>, Collection<Integer>>();
      MultiValueMap<MultiValueMap<Object, String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, String>, LinkedList<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, multiValueMap0);
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends ArrayList<Object>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(674);
      linkedList0.add(integer0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(integer0, (Collection<Integer>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("org.apache.commons.collections4.iterators.EmptyListIterator");
      MultiValueMap<ArrayList<Integer>, LinkedList<MultiValueMap<String, Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<LinkedList<MultiValueMap<String, Object>>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Integer>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<String>) arrayList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      multiValueMap0.map = null;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer(3684);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(integer0, (Collection<Integer>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(linkedList0, "", biFunction0);
      ArrayList<AbstractMap.SimpleEntry<Object, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, Object>>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
      arrayList0.add(abstractMap_SimpleEntry1);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList0, (Collection<AbstractMap.SimpleEntry<Object, Object>>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<String, String>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Object>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put(linkedList0, multiValueMap0);
      ConstantFactory<LinkedList<Collection<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Integer>>>((LinkedList<Collection<Integer>>) null);
      MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Collection<Integer>>>) multiValueMap0, (Factory<LinkedList<Collection<Integer>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      Factory<Collection<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory((Collection<ArrayList<Object>>) arrayList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super Collection<LinkedList<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<Integer>>) hashMap0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("~mt<.jVApo]3y17j=", (String) null);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleImmutableEntry1, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Object>>>) multiValueMap0);
      Factory<Collection<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.createCollection((-1891));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      MultiValueMap<ArrayList<Object>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, "org.apache.commons.collections4.functors.PrototypeFactory");
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList1, (Object) "org.apache.commons.collections4.functors.PrototypeFactory");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      hashMap0.put(arrayList0, ";B%eB>;{3l{.;");
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "Class to instantiate must not be null");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Object>();
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("", integer0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleEntry0, (Collection<Object>) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Collection<String> collection0 = multiValueMap0.getCollection(linkedList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<LinkedList<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, LinkedList<String>>();
      multiValueMap0.put((LinkedList<String>) null, (Object) null);
      ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add(linkedList0);
      boolean boolean0 = multiValueMap0.putAll((LinkedList<String>) null, (Collection<LinkedList<String>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer(3684);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<Integer>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.putAll(linkedList0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      int int0 = multiValueMap0.size((Object) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<String>>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      Factory<LinkedList<MultiValueMap<Collection<Integer>, Collection<Integer>>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Integer>, MultiValueMap<Collection<Integer>, Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<MultiValueMap<Collection<Integer>, Collection<Integer>>>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.size(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      hashMap0.put(arrayList0, arrayList0);
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<String>>();
      multiValueMap0.put(linkedList0, linkedList0);
      MultiValueMap<Collection<Integer>, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<ConstantFactory<Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) linkedList0, (Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, LinkedList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory((LinkedList<String>) null);
      Integer integer0 = new Integer(2098);
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>((Map<Integer, ? super LinkedList<String>>) hashMap0, factory0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(integer0, arrayList0);
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = new MultiValueMap<Object, ArrayList<String>>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<Integer>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Object object0 = multiValueMap0.replace(arrayList1, (Object) arrayList1);
      assertNotNull(object0);
      
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(arrayList0, linkedList0);
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "Class to instantiate must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<String>>();
      multiValueMap0.put(linkedList0, (Object) null);
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping(object0, arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.put(linkedList0, hashMap0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<Collection<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.put(linkedList0, (Object) null);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, hashMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Collection<String>, Integer> multiValueMap0 = new MultiValueMap<Collection<String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<String>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      hashMap0.put(arrayList0, arrayList0);
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      Iterator<LinkedList<Object>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }
}
