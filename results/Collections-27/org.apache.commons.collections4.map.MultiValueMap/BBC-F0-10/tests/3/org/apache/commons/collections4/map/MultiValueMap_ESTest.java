/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:29:52 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<Object>>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Object>>, Object>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap1.merge(multiValueMap0, multiValueMap0, biFunction0);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap2, object0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("Y&|-<DiFm~aXG", (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection((-1650));
      assertFalse(collection0.contains((-1650)));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("", object0);
      MultiValueMap<String, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Object
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<Object>>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Object>>, Object>();
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<String>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, String>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) linkedList0);
      linkedList0.add((Object) arrayList0);
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) linkedList0, (Collection<Object>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) linkedList0, (Collection<Object>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<Object>>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Object>>, Object>();
      MultiValueMap<String, ArrayList<String>> multiValueMap1 = new MultiValueMap<String, ArrayList<String>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.put("org.apache.commons.collections4.iterators.IteratorChain", multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-2237));
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(integer0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<String>, ? super LinkedList<Integer>>) null, (Factory<LinkedList<Integer>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) multiValueMap0.map);
      MultiValueMap<String, ArrayList<Object>> multiValueMap2 = new MultiValueMap<String, ArrayList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap2.getCollection(multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(3874);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      multiValueMap0.putIfAbsent(hashMap0, (Object) null);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<Object>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0, (Object) multiValueMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Collection<Object>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Collection<Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super Collection<Object>>) hashMap0);
      HashMap<HashMap<Object, String>, Object> hashMap1 = new HashMap<HashMap<Object, String>, Object>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      hashMap1.put(hashMap2, hashMap2);
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<String, Integer>>> factory0 = ConstantFactory.constantFactory((LinkedList<AbstractMap.SimpleImmutableEntry<String, Integer>>) null);
      MultiValueMap<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super LinkedList<AbstractMap.SimpleImmutableEntry<String, Integer>>>) hashMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<Integer, String>((Map<Integer, ? super ArrayList<String>>) null, (Factory<ArrayList<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.putAll((Object) linkedList0, (Collection<Object>) linkedList0);
      boolean boolean0 = multiValueMap1.putAll((Object) linkedList0, (Collection<Object>) linkedList0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      Set<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) multiValueMap0.map);
      MultiValueMap<String, ArrayList<Object>> multiValueMap2 = new MultiValueMap<String, ArrayList<Object>>();
      Collection<ArrayList<Object>> collection0 = multiValueMap2.getCollection(multiValueMap1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      boolean boolean0 = multiValueMap0.putAll((Object) "", (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Integer>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      int int0 = multiValueMap0.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<ArrayList<Collection<Object>>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<Object>>, ArrayList<Object>>();
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      multiValueMap0.putIfAbsent(arrayList0, linkedList0);
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<LinkedList<Collection<Object>>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Collection<Object>>, Object>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      multiValueMap1.putIfAbsent(multiValueMap0, (Object) null);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<ConstantFactory<Object>> arrayList0 = new ArrayList<ConstantFactory<Object>>();
      ConstantFactory<Collection<ConstantFactory<Object>>> constantFactory0 = new ConstantFactory<Collection<ConstantFactory<Object>>>(arrayList0);
      MultiValueMap<String, ConstantFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ConstantFactory<Object>>>) hashMap0, (Factory<Collection<ConstantFactory<Object>>>) constantFactory0);
      ConstantFactory<Object> constantFactory1 = new ConstantFactory<Object>(linkedList0);
      multiValueMap0.putIfAbsent("", constantFactory1);
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      multiValueMap1.map = (Map<String, Object>) multiValueMap0;
      multiValueMap0.putAll((Map<? extends String, ?>) multiValueMap1);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.putAll((Object) linkedList0, (Collection<Object>) linkedList0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      multiValueMap1.putAll((Object) multiValueMap0, (Collection<Object>) linkedList0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<HashMap<Object, String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, LinkedList<String>>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<String>, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap0).when(biFunction0).apply(any() , any());
      multiValueMap1.compute(arrayList0, biFunction0);
      assertEquals(1, multiValueMap1.size());
      
      boolean boolean0 = multiValueMap1.removeMapping(linkedList0, multiValueMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<HashMap<Object, String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, LinkedList<String>>();
      MultiValueMap<ArrayList<String>, Collection<Collection<Object>>> multiValueMap1 = new MultiValueMap<ArrayList<String>, Collection<Collection<Object>>>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap0).when(biFunction0).apply(any() , any());
      multiValueMap2.compute(arrayList0, biFunction0);
      boolean boolean0 = multiValueMap2.removeMapping(linkedList0, multiValueMap0);
      assertFalse(multiValueMap2.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory((LinkedList<Object>) null);
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>((Map<Collection<Object>, ? super LinkedList<Object>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Collection<Object>>>) multiValueMap0, (Factory<LinkedList<Collection<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      MultiValueMap<Object, ConstantFactory<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ConstantFactory<Integer>>>) multiValueMap0);
      multiValueMap1.iterator((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Integer integer0 = new Integer((-1497));
      MultiValueMap<ArrayList<Collection<Object>>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<ArrayList<Collection<Object>>, ArrayList<Object>>();
      Collection<Object> collection0 = multiValueMap1.values();
      boolean boolean0 = multiValueMap0.putAll((Object) integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, String>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }
}
