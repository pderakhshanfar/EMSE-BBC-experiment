/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:30:36 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList1);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<String>>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(linkedList0, "xM:1]R;:j");
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      multiValueMap0.put((AbstractMap.SimpleImmutableEntry<String, String>) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) multiValueMap0);
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) null);
      MultiValueMap<Integer, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap1, factory0);
      Collection<String> collection0 = multiValueMap2.createCollection((-1));
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      Collection<LinkedList<Object>> collection0 = multiValueMap0.createCollection(2147483645);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Collection<Object>, Comparable<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, Comparable<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      arrayList0.add(object0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, multiValueMap0);
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<AbstractMap.SimpleEntry<Integer, Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      MultiValueMap<Collection<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Object>, Object>) multiValueMap1;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(arrayList0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Collection<Object>>, Collection<Object>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Collection<Object>>, Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Collection<Object>>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Collection<Object>>, Object>((Map<AbstractMap.SimpleEntry<Object, Collection<Object>>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Collection<Object>>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Collection<Object>>, ? super Collection<Collection<Object>>>) multiValueMap0);
      AbstractMap.SimpleEntry<Object, Collection<Object>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Collection<Object>>(multiValueMap1, linkedList0);
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(abstractMap_SimpleEntry0, integer0, biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends AbstractMap.SimpleEntry<Object, Collection<Object>>, ?>) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      MultiValueMap<Integer, LinkedList<LinkedList>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<LinkedList>>>) multiValueMap1);
      Integer integer0 = new Integer(0);
      hashMap0.put((Integer) null, integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) multiValueMap2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<Integer>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(multiValueMap0, (String) null);
      multiValueMap0.put(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.offerFirst(linkedList1);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(abstractMap_SimpleEntry0, (Collection<LinkedList<String>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Collection<Object>> hashMap0 = new HashMap<String, Collection<Object>>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>((LinkedList<Object>) null);
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>((Map<String, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.put("JUyN4 VWW", arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<AbstractMap.SimpleEntry<Integer, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Integer, Object>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Integer, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<AbstractMap.SimpleEntry<Integer, Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Object, Object>>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>((Collection<String>) null);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap0;
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0, (Factory<Collection<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Object, Object>>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>((Collection<String>) null);
      multiValueMap0.map = null;
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0, (Factory<Collection<String>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Integer, ConstantFactory<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ConstantFactory<Object>>>) multiValueMap1);
      multiValueMap1.map = (Map<Integer, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>(1);
      MultiValueMap<LinkedList<Object>, ConstantFactory<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ConstantFactory<Integer>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<Integer>>) hashMap0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(multiValueMap0, (String) null);
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.offerFirst(linkedList1);
      boolean boolean0 = multiValueMap1.putAll(abstractMap_SimpleEntry0, (Collection<LinkedList<String>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList0.add(linkedList0);
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      Factory<Collection<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<Object>) linkedList0, (Collection<LinkedList<Object>>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<String>>>) hashMap0);
      Set<Map.Entry<LinkedList<String>, Object>> set0 = (Set<Map.Entry<LinkedList<String>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, Collection<Object>>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, Collection<Object>>>();
      Integer integer0 = new Integer(1);
      Collection<HashMap<Object, Collection<Object>>> collection0 = multiValueMap0.getCollection(integer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, "Bw0*$\"Ffa");
      ArrayList<LinkedList<Object>> arrayList1 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList1.add(linkedList0);
      boolean boolean0 = multiValueMap0.putAll((Collection<Object>) linkedList0, (Collection<LinkedList<Object>>) arrayList1);
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(1516);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<ArrayList<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) hashMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Integer>();
      multiValueMap0.putIfAbsent((AbstractMap.SimpleEntry<Integer, String>) null, (Object) null);
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Integer>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      Integer integer0 = new Integer(1);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1665));
      hashMap0.put("", integer0);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put("`", linkedList0);
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      multiValueMap1.putAll((Map<? extends String, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap1.put(linkedList0, arrayList0);
      multiValueMap1.put(linkedList0, multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, Integer>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(hashMap1, function0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "&h#$a (*#-=XC2{");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Integer>();
      multiValueMap0.putIfAbsent((AbstractMap.SimpleEntry<Integer, String>) null, (Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, "Bw0*$\"Ffa");
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      multiValueMap0.put("org.apache.commons.collections4.map.MultiValueMap$1$1", linkedList0);
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<LinkedList<Object>>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, "Can extract singleton only when collection size == 1", biFunction0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.iterator((Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll("org.apache.commons.collections4.FunctorException", collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) multiValueMap0);
      Iterator<Map.Entry<Integer, Collection<Object>>> iterator0 = (Iterator<Map.Entry<Integer, Collection<Object>>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Object, Object>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<Object>>>) multiValueMap0, (Factory<LinkedList<LinkedList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }
}
