/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:38:31 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("}!)a'`r+wUPZ~q", "}!)a'`r+wUPZ~q", biFunction0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Object> multiValueMap0 = new MultiValueMap<ArrayList<String>, Object>();
      Collection<Object> collection0 = multiValueMap0.getCollection((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      Collection<String> collection0 = multiValueMap1.createCollection(2282);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(hashMap0, (String) null);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(abstractMap_SimpleEntry1, arrayList0);
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) abstractMap_SimpleEntry1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, LinkedList<Object>>();
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap1 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) multiValueMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      HashMap<HashMap<Integer, Object>, Object> hashMap0 = new HashMap<HashMap<Integer, Object>, Object>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      hashMap0.put(hashMap1, "");
      MultiValueMap<HashMap<Integer, Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(hashMap0, (String) null);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(abstractMap_SimpleEntry1, arrayList0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = new MultiValueMap<LinkedList<Object>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, abstractMap_SimpleEntry1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Integer, Comparable<Object>> multiValueMap0 = new MultiValueMap<Integer, Comparable<Object>>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Integer>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Collection<Integer>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      hashMap0.put(arrayList1, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(arrayList0, arrayList2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(hashMap0, (String) null);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(abstractMap_SimpleEntry1, arrayList0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends AbstractMap.SimpleEntry<Object, String>, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<ArrayList<Object>, String> hashMap0 = new HashMap<ArrayList<Object>, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      MultiValueMap<HashMap<String, Object>, Object> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap1).when(biFunction0).apply(any() , any());
      hashMap1.compute("}!)a'`r+wUPZ~q", biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(hashMap1, (Collection<Object>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>>();
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put("BdN'2C_:22C(z)O[x", factory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(hashMap0, (String) null);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(abstractMap_SimpleEntry1, arrayList0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(abstractMap_SimpleEntry1, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer((-2951));
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Factory<ArrayList<Object>> factory0 = ConstantFactory.constantFactory((ArrayList<Object>) null);
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<Object>>) hashMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(integer0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.put(arrayList0, hashMap1);
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, hashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      Set<String> set0 = multiValueMap0.keySet();
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) set0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<Integer>>) hashMap0, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, multiValueMap0);
      Set<Map.Entry<Collection<Integer>, Object>> set0 = (Set<Map.Entry<Collection<Integer>, Object>>)multiValueMap0.entrySet();
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) set0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
      multiValueMap0.putIfAbsent((LinkedList<String>) null, (Object) null);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
      multiValueMap0.putIfAbsent((LinkedList<String>) null, (Object) null);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("%.3[}").when(biFunction0).apply(any() , any());
      multiValueMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Comparable<Object>, Object> hashMap0 = new HashMap<Comparable<Object>, Object>();
      MultiValueMap<Comparable<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Comparable<Object>, ? super Collection<String>>) hashMap0);
      Factory<LinkedList<AbstractMap.SimpleEntry<Integer, String>>> factory0 = ExceptionFactory.exceptionFactory();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      hashMap0.put(comparable0, multiValueMap0);
      MultiValueMap<Comparable<Object>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Comparable<Object>, ? super LinkedList<AbstractMap.SimpleEntry<Integer, String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap0;
      Integer integer0 = new Integer((-20));
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0, (Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("F8|yi@h8jF`R$d=", "b9H1=Q$};");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      hashMap0.put(abstractMap_SimpleEntry1, (Object) null);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<ArrayList<String>, String> multiValueMap1 = new MultiValueMap<ArrayList<String>, String>();
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(multiValueMap0, "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory");
      hashMap0.put(abstractMap_SimpleEntry0, multiValueMap0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<Object, Integer>((Map<Object, ? super Collection<Integer>>) null, (Factory<Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("&");
      multiValueMap0.putAll(arrayList0, (Collection<String>) arrayList0);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<String>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap1.getCollection(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<AbstractMap.SimpleEntry<Object, Integer>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, Integer>>();
      Factory<Collection<AbstractMap.SimpleEntry<Object, Integer>>> factory0 = ConstantFactory.constantFactory((Collection<AbstractMap.SimpleEntry<Object, Integer>>) arrayList0);
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      Iterator<Collection<String>> iterator0 = multiValueMap0.iterator((Object) factory0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      multiValueMap0.put(arrayList0, (Object) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Function<Object, Object> function0 = Function.identity();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      multiValueMap0.computeIfAbsent(arrayList0, function0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Integer, Comparable<String>> multiValueMap0 = new MultiValueMap<Integer, Comparable<String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) "", (Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(arrayList0, function0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(10);
      hashMap0.put(integer0, "6N}=\"X%N");
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.put("pZo|:{aS4a6a))VQd", "InstantiateFactory: Constructor must be public");
      multiValueMap0.putAll((Map<? extends String, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      Integer integer0 = new Integer((-356));
      multiValueMap0.put(integer0, integer0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.replace(integer0, (Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      multiValueMap0.put(arrayList0, (Object) null);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>((Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) constantFactory0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      linkedList0.add(arrayList2);
      Factory<LinkedList<ArrayList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Collection<Integer>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<ArrayList<Object>>>) hashMap0, factory0);
      Integer integer0 = new Integer(1383);
      BiFunction<Object, Object, Collection<String>> biFunction0 = (BiFunction<Object, Object, Collection<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList1, integer0, biFunction0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList2);
      assertFalse(linkedList0.contains(arrayList2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, LinkedList<Object>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(multiValueMap0, (String) null);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Collection<Integer>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Collection<Integer>, ArrayList<Object>>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(arrayList1, arrayList0, biFunction0);
      boolean boolean0 = multiValueMap1.removeMapping(arrayList0, abstractMap_SimpleEntry1);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ConstantFactory<Collection<Collection<Object>>> constantFactory0 = new ConstantFactory<Collection<Collection<Object>>>(arrayList0);
      Factory<Collection<String>> factory1 = ConstantFactory.constantFactory((Collection<String>) arrayList1);
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<Object>>>) multiValueMap0, (Factory<Collection<Collection<Object>>>) constantFactory0);
      boolean boolean0 = multiValueMap1.removeMapping(hashMap0, factory1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Collection<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<Object>>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList1, arrayList1, biFunction0);
      assertFalse(multiValueMap0.isEmpty());
      
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      MultiValueMap<Object, String> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<Object, String>((Map<Object, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      hashMap0.put(arrayList1, factory0);
      ConstantFactory<Collection<Collection<Object>>> constantFactory0 = new ConstantFactory<Collection<Collection<Object>>>(arrayList0);
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<Object>>>) multiValueMap0, (Factory<Collection<Collection<Object>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      Object object0 = multiValueMap0.put(arrayList0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, LinkedList<Object>>();
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap1 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      int int0 = multiValueMap0.size((Object) multiValueMap1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<Integer>>) hashMap0, factory0);
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Comparable<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Comparable<Integer>>();
      Iterator<Map.Entry<ArrayList<Object>, Comparable<Integer>>> iterator0 = (Iterator<Map.Entry<ArrayList<Object>, Comparable<Integer>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
