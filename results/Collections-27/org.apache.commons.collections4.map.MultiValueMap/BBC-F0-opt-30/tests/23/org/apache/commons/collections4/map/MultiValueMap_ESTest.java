/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:07:57 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Object, Object>>();
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<Integer>>();
      multiValueMap1.putAll((Map<? extends Integer, ?>) multiValueMap0);
      assertEquals(0, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      MultiValueMap<LinkedList<String>, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0);
      Set<Map.Entry<LinkedList<String>, Object>> set0 = (Set<Map.Entry<LinkedList<String>, Object>>)multiValueMap1.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(multiValueMap0, "org.apache.commons.collections4.map.MultiValueMap");
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Integer, Comparable<Object>> multiValueMap0 = new MultiValueMap<Integer, Comparable<Object>>();
      LinkedList<AbstractMap.SimpleEntry<Object, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      Integer integer0 = new Integer(1297);
      multiValueMap1.putIfAbsent(integer0, linkedList0);
      multiValueMap1.putAll((Map<? extends Integer, ?>) multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MultiValueMap<Integer, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Object, Object>>();
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(integer0, biFunction0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Object> multiValueMap0 = new MultiValueMap<Collection<Integer>, Object>();
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      ConstantFactory<Collection<ArrayList<Object>>> constantFactory0 = new ConstantFactory<Collection<ArrayList<Object>>>(arrayList0);
      MultiValueMap<Collection<Integer>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<ArrayList<Object>>>) multiValueMap0, (Factory<Collection<ArrayList<Object>>>) constantFactory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap1.put(linkedList0, (Object) null);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Collection<String>> arrayList1 = new ArrayList<Collection<String>>();
      hashMap0.put(arrayList0, arrayList1);
      ArrayList<LinkedList<Integer>> arrayList2 = new ArrayList<LinkedList<Integer>>();
      ConstantFactory<ArrayList<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<ArrayList<LinkedList<Integer>>>(arrayList2);
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super ArrayList<LinkedList<Integer>>>) hashMap0, (Factory<ArrayList<LinkedList<Integer>>>) constantFactory0);
      Collection<LinkedList<Integer>> collection0 = multiValueMap0.getCollection(arrayList2);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      Collection<ArrayList<Integer>> collection0 = multiValueMap1.createCollection((-289));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, HashMap<Comparable, LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Comparable, LinkedList>>>) hashMap0);
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      hashMap0.put(linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, Comparable<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Comparable<Integer>>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, (Object) null);
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, HashMap<Comparable, LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Comparable, LinkedList>>>) hashMap0);
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      hashMap0.put(linkedList0, object0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      MapIterator<ArrayList<Object>, Object> mapIterator0 = multiValueMap0.mapIterator();
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(mapIterator0);
      hashMap0.put(arrayList0, constantFactory0);
      MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<AbstractMap.SimpleEntry<String, String>> linkedList2 = new LinkedList<AbstractMap.SimpleEntry<String, String>>();
      ConstantFactory<LinkedList<AbstractMap.SimpleEntry<String, String>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleEntry<String, String>>>(linkedList2);
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<String, String>>>) multiValueMap0, (Factory<LinkedList<AbstractMap.SimpleEntry<String, String>>>) constantFactory0);
      Object object0 = multiValueMap1.putIfAbsent(linkedList1, linkedList2);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(object0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Object, String>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<String>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("NFGa]HcSQt22yab>3");
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Object) linkedList0, (Collection<String>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MultiValueMap<Object, Collection<Collection>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Collection>>>) multiValueMap0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.put("%GJcKOT9*", "%GJcKOT9*");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, Object>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.put(multiValueMap0, multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(collection0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) null, (Factory<Collection<Object>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Integer>, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, Comparable<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Comparable<String>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<String>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<String>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<ConstantFactory<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ConstantFactory<String>, LinkedList<Object>>();
      MultiValueMap<ConstantFactory<String>, AbstractMap.SimpleEntry<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<AbstractMap.SimpleEntry<String, Integer>>>) multiValueMap0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("The factory must not be null");
      multiValueMap1.put(constantFactory0, multiValueMap0);
      HashMap<EmptyIterator<Object>, String> hashMap0 = new HashMap<EmptyIterator<Object>, String>();
      HashMap<EmptyIterator<Object>, Object> hashMap1 = new HashMap<EmptyIterator<Object>, Object>(hashMap0);
      MultiValueMap<EmptyIterator<Object>, EmptyIterator<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<EmptyIterator<Object>, ? super Collection<EmptyIterator<String>>>) hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.getCollection(multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Comparable<String>, Object> hashMap0 = new HashMap<Comparable<String>, Object>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Comparable<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Comparable<String>, ? super Collection<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(1482);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Integer, Comparable<Object>> multiValueMap0 = new MultiValueMap<Integer, Comparable<Object>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, Comparable<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Comparable<Integer>>>) multiValueMap1);
      multiValueMap1.map = (Map<Object, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) arrayList0);
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, Integer>((Map<ArrayList<Integer>, ? super Collection<Integer>>) hashMap0, factory0);
      multiValueMap0.map = null;
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) arrayList0, (Object) factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, multiValueMap0);
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) arrayList0);
      MultiValueMap<ArrayList<Integer>, Integer> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, Integer>((Map<ArrayList<Integer>, ? super Collection<Integer>>) hashMap0, factory0);
      MultiValueMap<ArrayList<Integer>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) arrayList0, (Object) factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Object>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap1.put(hashMap0, hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(hashMap1, hashMap0, biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<Object>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(arrayList0);
      MultiValueMap<String, String> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<String, String>((Map<String, ? super Collection<String>>) null, (Factory<Collection<String>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Object, Object>>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<LinkedList<Integer>> arrayList0 = new ArrayList<LinkedList<Integer>>();
      ConstantFactory<ArrayList<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<ArrayList<LinkedList<Integer>>>(arrayList0);
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super ArrayList<LinkedList<Integer>>>) hashMap0, (Factory<ArrayList<LinkedList<Integer>>>) constantFactory0);
      Collection<LinkedList<Integer>> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<ArrayList<Object>> iterator0 = multiValueMap0.iterator((Object) linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap2 = new MultiValueMap<LinkedList<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-959));
      arrayList0.add(integer0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap2.merge(linkedList0, multiValueMap1, biFunction0);
      boolean boolean0 = multiValueMap2.putAll(linkedList0, (Collection<Integer>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      MultiValueMap<ArrayList<Integer>, Comparable<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Comparable<Integer>>>) hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Comparable<Integer>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      Object object0 = multiValueMap1.put(multiValueMap0, multiValueMap0);
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<Object>>>) multiValueMap1, factory0);
      int int0 = multiValueMap2.size(object0);
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap1.put(multiValueMap0, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) null);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap1.put(multiValueMap0, multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(hashMap0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(linkedList0, constantFactory0, biFunction0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory1 = new ConstantFactory<LinkedList<Object>>(linkedList1);
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory1);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(arrayList0, (Collection<Object>) arrayList0);
      MultiValueMap<ArrayList<Object>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends ArrayList<Object>, ?>) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      multiValueMap0.put("PrototypeCloneFactory: Clone method threw an exception", multiValueMap1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(".NI-Cut xLGkcPA[zz").when(biFunction0).apply(any() , any());
      multiValueMap0.computeIfPresent("PrototypeCloneFactory: Clone method threw an exception", biFunction0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, HashMap<Comparable, LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Comparable, LinkedList>>>) hashMap0);
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      hashMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Object>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(hashMap1, hashMap0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap1);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<String, String>>>) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList1);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      linkedList2.add((Object) null);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, linkedList2);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<String, String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList1);
      assertFalse(multiValueMap0.isEmpty());
      
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, linkedList2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, MultiValueMap<Object, Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, MultiValueMap<Object, Integer>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, HashMap<Comparable, LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Comparable, LinkedList>>>) hashMap0);
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "Cz");
      hashMap0.put(linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      Object object0 = multiValueMap1.put(multiValueMap0, multiValueMap0);
      multiValueMap1.iterator(object0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<Integer, Comparable<Object>> multiValueMap0 = new MultiValueMap<Integer, Comparable<Object>>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap2 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      // Undeclared exception!
      try { 
        multiValueMap2.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
