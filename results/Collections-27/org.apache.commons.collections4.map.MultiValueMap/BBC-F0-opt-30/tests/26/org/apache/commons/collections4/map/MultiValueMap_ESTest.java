/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:18:55 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Object, ExceptionFactory<Object>> multiValueMap0 = new MultiValueMap<Object, ExceptionFactory<Object>>();
      multiValueMap0.totalSize();
      multiValueMap0.iterator((Object) "qPe'U`7zyNV~#DO]2");
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      multiValueMap1.iterator();
      MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap1);
      MultiValueMap<ConstantFactory<String>, Collection<Integer>> multiValueMap2 = new MultiValueMap<ConstantFactory<String>, Collection<Integer>>();
      MultiValueMap<ConstantFactory<String>, Integer> multiValueMap3 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<Integer>>) multiValueMap2);
      MultiValueMap<ConstantFactory<String>, Object> multiValueMap4 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<Object>>) multiValueMap3);
      multiValueMap4.createCollection((-1721));
      Integer integer0 = new Integer(512);
      multiValueMap3.iterator((Object) integer0);
      multiValueMap4.map = null;
      // Undeclared exception!
      try { 
        multiValueMap4.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      multiValueMap0.map = null;
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      String string0 = "8N{ExAVj";
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      LinkedList<ArrayList<Collection<Integer>>> linkedList0 = new LinkedList<ArrayList<Collection<Integer>>>();
      ConstantFactory<Collection<ArrayList<Collection<Integer>>>> constantFactory0 = new ConstantFactory<Collection<ArrayList<Collection<Integer>>>>(linkedList0);
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      linkedList0.add(arrayList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ConstantFactory.constantFactory((Object) linkedList1);
      Integer integer0 = new Integer(3712);
      Factory<Object> factory0 = ConstantFactory.constantFactory((Object) integer0);
      MultiValueMap<LinkedList<String>, ArrayList<Collection<Integer>>> multiValueMap1 = new MultiValueMap<LinkedList<String>, ArrayList<Collection<Integer>>>((Map<LinkedList<String>, ? super Collection<ArrayList<Collection<Integer>>>>) multiValueMap0, (Factory<Collection<ArrayList<Collection<Integer>>>>) constantFactory0);
      HashMap<LinkedList<Collection<Integer>>, Object> hashMap0 = new HashMap<LinkedList<Collection<Integer>>, Object>();
      LinkedList<Collection<Integer>> linkedList2 = new LinkedList<Collection<Integer>>();
      hashMap0.put(linkedList2, factory0);
      MultiValueMap<LinkedList<Collection<Integer>>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<Integer>>, ? super Collection<ArrayList<Object>>>) hashMap0);
      LinkedList<Collection<Integer>> linkedList3 = new LinkedList<Collection<Integer>>();
      // Undeclared exception!
      try { 
        multiValueMap2.put(linkedList3, factory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      Object object0 = multiValueMap1.put("(t", multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put((String) null, (Object) null);
      multiValueMap0.containsValue((Object) null, (Object) null);
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) multiValueMap0);
      multiValueMap1.getCollection((Object) null);
      MultiValueMap<String, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      HashMap<Integer, Collection<Integer>> hashMap0 = new HashMap<Integer, Collection<Integer>>();
      multiValueMap2.iterator((Object) hashMap0);
      multiValueMap2.getCollection((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Object, MultiValueMap<Integer, String>> multiValueMap0 = new MultiValueMap<Object, MultiValueMap<Integer, String>>();
      multiValueMap0.mapIterator();
      Iterator<Map.Entry<Object, MultiValueMap<Integer, String>>> iterator0 = (Iterator<Map.Entry<Object, MultiValueMap<Integer, String>>>)multiValueMap0.iterator();
      HashMap<ArrayList<Collection<Integer>>, Object> hashMap0 = new HashMap<ArrayList<Collection<Integer>>, Object>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add((Collection<Integer>) linkedList1);
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      arrayList0.add((Collection<Integer>) linkedList1);
      hashMap0.put(arrayList0, arrayList0);
      hashMap0.put(arrayList0, iterator0);
      ConstantFactory<LinkedList<Collection<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Integer>>>(linkedList0);
      MultiValueMap<ArrayList<Collection<Integer>>, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Integer>>, ? super LinkedList<Collection<Integer>>>) hashMap0, (Factory<LinkedList<Collection<Integer>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(arrayList0, (Collection<Collection<Integer>>) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap$1 cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      multiValueMap0.map = null;
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<ExceptionFactory<Object>, Object> hashMap0 = new HashMap<ExceptionFactory<Object>, Object>();
      MultiValueMap<ExceptionFactory<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Object>, ? super Collection<Integer>>) hashMap0);
      hashMap0.values();
      ExceptionFactory<Object> exceptionFactory0 = (ExceptionFactory<Object>) mock(ExceptionFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exceptionFactory0).toString();
      multiValueMap0.put(exceptionFactory0, hashMap0);
      HashMap<LinkedList<Object>, Object> hashMap1 = new HashMap<LinkedList<Object>, Object>();
      Factory<Collection<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      hashMap1.put(linkedList0, linkedList1);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Object> function2 = function0.compose((Function<? super Object, ?>) function1);
      linkedList2.add((Object) "\"sS1tew");
      Function<Object, Object> function3 = function2.andThen((Function<? super Object, ?>) function0);
      Function.identity();
      hashMap1.computeIfAbsent(linkedList2, function3);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap1.replaceAll(biFunction0);
      MultiValueMap<LinkedList<Object>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Integer>>>) hashMap1, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends LinkedList<Object>, ?>) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "clone";
      hashMap0.put("clone", "clone");
      MultiValueMap<String, HashMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      String string1 = "D^9BA#:p1";
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) "clone");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.map = null;
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>(linkedList0);
      MultiValueMap<LinkedList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      String string0 = "P}";
      multiValueMap0.put("P}", "P}");
      multiValueMap0.containsValue((Object) null);
      String string1 = "org.apache.commons.collections4.functors.InstantiateFactory";
      multiValueMap0.map = null;
      int int0 = (-689);
      // Undeclared exception!
      try { 
        multiValueMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      multiValueMap0.map = null;
      linkedList0.add((Collection<Object>) null);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) null, (Collection<Collection<Object>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<String, ExceptionFactory<Integer>> multiValueMap0 = new MultiValueMap<String, ExceptionFactory<Integer>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<String>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put((String) null, (Object) null);
      multiValueMap0.put((String) null, (Object) null);
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Collection<Object> collection0 = multiValueMap1.values();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(collection0);
      // Undeclared exception!
      try { 
        linkedList0.addAll(512, collection0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 512, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.iterator();
      multiValueMap0.put("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", "org.apache.commons.collections4.iterators.AbstractEmptyIterator");
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", "org.apache.commons.collections4.iterators.AbstractEmptyIterator");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, arrayList0);
      Map<ArrayList<Object>, Object> map0 = null;
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection("org.apache.commons.collections4.functors.ConstantFactory");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      HashMap<String, Collection<Integer>> hashMap0 = new HashMap<String, Collection<Integer>>();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) hashMap0);
      multiValueMap1.clear();
      multiValueMap1.put("org.apache.commons.collections4.map.MultiValueMap$1", hashMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(hashMap0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, AbstractMap.SimpleEntry<String, Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleEntry<String, Collection<Integer>>>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      String string0 = "org.apache.commons.collections4.iterators.EmptyOrderedIterator";
      // Undeclared exception!
      try { 
        multiValueMap0.put("org.apache.commons.collections4.iterators.EmptyOrderedIterator", "org.apache.commons.collections4.iterators.EmptyOrderedIterator");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      linkedList0.add((Collection<Object>) null);
      multiValueMap0.putAll((Object) null, (Collection<Collection<Object>>) linkedList0);
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      LinkedList<Collection<Object>> linkedList1 = new LinkedList<Collection<Object>>();
      multiValueMap1.containsValue((Object) null, (Object) null);
      Integer integer0 = new Integer(2147483645);
      multiValueMap0.put(integer0, multiValueMap1);
      MultiValueMap<String, Object> multiValueMap2 = new MultiValueMap<String, Object>();
      Integer integer1 = new Integer(1138);
      MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap3 = new MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<Integer, Object>>();
      Factory<Collection<String>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Integer>, String> multiValueMap4 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<String>>) multiValueMap3, factory1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(linkedList2);
      multiValueMap2.removeMapping(multiValueMap4, constantFactory0);
      MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        arrayList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      String string0 = "P}";
      multiValueMap0.put("P}", "P}");
      multiValueMap0.containsValue((Object) null);
      multiValueMap0.map = null;
      Integer integer0 = new Integer((-689));
      // Undeclared exception!
      try { 
        multiValueMap0.put("org.apache.commons.collections4.functors.InstantiateFactory", integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      linkedList0.add((Collection<Object>) null);
      multiValueMap0.putAll((Object) linkedList0, (Collection<Collection<Object>>) linkedList0);
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      multiValueMap1.containsValue((Object) null, (Object) null);
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Object) multiValueMap2, (Collection<Collection<Object>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      linkedList0.add((Collection<Object>) null);
      multiValueMap0.putAll((Object) null, (Collection<Collection<Object>>) linkedList0);
      multiValueMap0.iterator((Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, multiValueMap0);
      hashMap0.put(multiValueMap0, multiValueMap0);
      LinkedList<AbstractMap.SimpleEntry<Object, Collection<Integer>>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, Collection<Integer>>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<Object, Collection<Integer>>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Collection<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<Object, Collection<Integer>>>>) hashMap0, factory0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put("Pnt}", "Pnt}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.values();
      multiValueMap0.put("P}", "P}");
      multiValueMap0.containsValue((Object) "P}");
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      multiValueMap1.iterator();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Collection<Object>> linkedList1 = new LinkedList<Collection<Object>>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      linkedList1.add((Collection<Object>) linkedList2);
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Collection<Object>>>) multiValueMap1, factory0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Object) integer0, (Collection<Collection<Object>>) linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Collection<Integer>>, LinkedList<String>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Collection<Integer>>, LinkedList<String>>();
      Integer integer0 = new Integer((-1));
      MultiValueMap<ExceptionFactory<Collection<Integer>>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Collection<Integer>>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<ExceptionFactory<Collection<Integer>>, Object>) multiValueMap1;
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) constantFactory0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      multiValueMap0.size((Object) arrayList0);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      multiValueMap0.putAll((Object) linkedList0, (Collection<Collection<Object>>) linkedList0);
      HashMap<HashMap<Integer, String>, Object> hashMap0 = new HashMap<HashMap<Integer, String>, Object>();
      MultiValueMap<HashMap<Integer, String>, AbstractMap.SimpleEntry<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Integer, String>, ? super Collection<AbstractMap.SimpleEntry<Object, Object>>>) hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.putIfAbsent(hashMap1, linkedList0);
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      multiValueMap1.put(hashMap2, linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedList<Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(multiValueMap0, multiValueMap0);
      multiValueMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<String>>) multiValueMap0);
      Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>>)multiValueMap1.entrySet();
      MultiValueMap<Integer, LinkedList<String>> multiValueMap2 = new MultiValueMap<Integer, LinkedList<String>>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Object> multiValueMap3 = new MultiValueMap<Integer, Object>((Map<Integer, ? super Collection<Object>>) multiValueMap2, factory0);
      multiValueMap3.iterator();
      multiValueMap3.entrySet();
      MultiValueMap<Collection<Object>, Integer> multiValueMap4 = new MultiValueMap<Collection<Object>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap4.getCollection(set0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<String>>) multiValueMap1);
      multiValueMap1.map = (Map<AbstractMap.SimpleEntry<Object, Object>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap2.size((Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("P}", "P}");
      multiValueMap0.containsValue((Object) null);
      Integer integer0 = new Integer((-689));
      multiValueMap0.put("org.apache.commons.collections4.functors.InstantiateFactory", integer0);
      multiValueMap0.containsValue((Object) "P}");
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Iterator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>> iterator0 = (Iterator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Integer integer0 = new Integer(1);
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>((Map<Object, ? super Collection<Object>>) multiValueMap1, factory0);
      MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap2);
      multiValueMap0.putIfAbsent("]d`Acwe", "]d`Acwe");
      multiValueMap0.removeMapping(integer0, integer0);
      MultiValueMap<String, Collection<Object>> multiValueMap3 = new MultiValueMap<String, Collection<Object>>();
      multiValueMap0.clear();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      multiValueMap0.compute("]d`Acwe", biFunction0);
      multiValueMap3.createCollection(1201);
      multiValueMap3.size((Object) multiValueMap0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap4 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, String>>();
      BiFunction<String, Object, Object> biFunction1 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap4.computeIfPresent("]d`Acwe", biFunction1);
      BiFunction<String, Object, Integer> biFunction2 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction2).apply(anyString() , any());
      multiValueMap3.map = (Map<String, Object>) multiValueMap4;
      multiValueMap4.putIfAbsent("]d`Acwe", "]d`Acwe");
      multiValueMap4.mapIterator();
      multiValueMap4.replaceAll(biFunction2);
      multiValueMap4.putAll((Map<? extends String, ?>) multiValueMap3);
      assertFalse(multiValueMap4.isEmpty());
      
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> multiValueMap5 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap6 = new MultiValueMap<ArrayList<Object>, Object>();
      Integer integer1 = new Integer(1201);
      multiValueMap6.getCollection(integer1);
      MultiValueMap<ArrayList<String>, String> multiValueMap7 = new MultiValueMap<ArrayList<String>, String>();
      int int0 = multiValueMap7.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      linkedList0.add((Collection<Object>) null);
      multiValueMap0.putAll((Object) null, (Collection<Collection<Object>>) linkedList0);
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      multiValueMap1.containsValue((Object) null, (Object) linkedList0);
      MultiValueMap<Integer, Integer> multiValueMap2 = new MultiValueMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      multiValueMap2.put(integer0, (Object) null);
      MultiValueMap<ConstantFactory<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap3 = new MultiValueMap<ConstantFactory<Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      int int0 = multiValueMap3.size((Object) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.putIfAbsent("c_A]", "c_A]");
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) multiValueMap0);
      MultiValueMap<Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>, ArrayList<Object>>();
      MultiValueMap<Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>, Collection<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>, ? super Collection<Collection<String>>>) multiValueMap1);
      multiValueMap1.map = (Map<Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("P}", "P}");
      multiValueMap0.containsValue((Object) null);
      multiValueMap0.entrySet();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap1 = new MultiValueMap<Object, LinkedList<Integer>>();
      multiValueMap1.getCollection("P}");
      MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<String, Object>> multiValueMap2 = new MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<String, Object>>();
      MultiValueMap<Collection<Integer>, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<String>>) multiValueMap2);
      MultiValueMap<Collection<Integer>, Integer> multiValueMap4 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) multiValueMap3);
      multiValueMap4.clear();
      assertTrue(multiValueMap4.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1540);
      Function<Object, Object> function0 = Function.identity();
      Function.identity();
      hashMap0.clear();
      hashMap0.computeIfAbsent(integer0, function0);
      Integer integer1 = new Integer(1540);
      Integer integer2 = new Integer(0);
      hashMap0.put(integer2, integer2);
      hashMap0.put(integer1, integer1);
      Integer integer3 = new Integer(0);
      hashMap0.put(integer3, "yK;Z/");
      hashMap0.values();
      MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) hashMap0);
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      multiValueMap0.createCollection(0);
      MultiValueMap<ArrayList<String>, Collection<Integer>> multiValueMap1 = new MultiValueMap<ArrayList<String>, Collection<Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer4 = new Integer(912);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(arrayList0, integer4, biFunction0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Map<ArrayList<Object>, Object> map0 = null;
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<Integer>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("Cannot instantiate class: ", "Cannot instantiate class: ");
      multiValueMap0.containsValue((Object) "Cannot instantiate class: ");
      assertEquals(1, multiValueMap0.size());
      
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      multiValueMap1.iterator();
      MultiValueMap<Collection<Collection<Integer>>, LinkedList<String>> multiValueMap2 = new MultiValueMap<Collection<Collection<Integer>>, LinkedList<String>>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      boolean boolean0 = multiValueMap2.putAll((Collection<Collection<Integer>>) linkedList0, (Collection<LinkedList<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Object>>();
      MultiValueMap<ArrayList<String>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap1.map = (Map<ArrayList<String>, Object>) multiValueMap0;
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      multiValueMap0.mapIterator();
      multiValueMap2.get(multiValueMap1.map);
      multiValueMap0.iterator((Object) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.containsValue((Object) arrayList0);
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap3 = new MultiValueMap<Integer, LinkedList<Object>>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap4 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) multiValueMap3);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<String>>>) multiValueMap4, (Factory<LinkedList<LinkedList<String>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      linkedList0.add((Collection<Object>) null);
      multiValueMap0.putAll((Object) null, (Collection<Collection<Object>>) linkedList0);
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      multiValueMap1.containsValue((Object) null, (Object) linkedList0);
      assertEquals(1, linkedList0.size());
      
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      boolean boolean0 = multiValueMap2.containsValue((Object) null, (Object) linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.remove((Object) "jLqli?~", (Object) arrayList0);
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Integer> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Integer>();
      Object object0 = new Object();
      Object object1 = multiValueMap1.getOrDefault(set0, object0);
      multiValueMap0.clear();
      multiValueMap1.replace((AbstractMap.SimpleImmutableEntry<String, Integer>) null, (Object) multiValueMap0, (Object) multiValueMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.replaceAll(biFunction0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.removeAll(set0);
      multiValueMap1.containsValue((Object) arrayList0, (Object) multiValueMap0);
      multiValueMap0.size((Object) set0);
      MultiValueMap<Integer, LinkedList<String>> multiValueMap2 = new MultiValueMap<Integer, LinkedList<String>>();
      Integer integer0 = new Integer((-1));
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap3 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      Object object2 = multiValueMap3.getOrDefault(multiValueMap1, object1);
      multiValueMap2.putIfAbsent(integer0, object2);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      int int0 = multiValueMap2.size((Object) arrayList1);
      assertEquals(1, multiValueMap2.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(149);
      Integer integer1 = new Integer(149);
      hashMap0.put("^ctNXnzr~", integer1);
      hashMap0.put((String) null, integer0);
      Integer integer2 = new Integer(149);
      hashMap0.put((String) null, integer2);
      Integer integer3 = new Integer(3039);
      Integer integer4 = new Integer((-867));
      Integer integer5 = new Integer(0);
      hashMap0.replace(">HnD7Cq;-C", integer2, integer5);
      hashMap0.replace("4F7I6.kIL36j1", integer3, integer4);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        arrayList0.add((-589), (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -589, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, String>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = null;
      Integer integer0 = new Integer(149);
      Integer integer1 = new Integer(149);
      hashMap0.put("^ctNXnzr~", integer1);
      hashMap0.put((String) null, integer0);
      Integer integer2 = new Integer(149);
      hashMap0.put((String) null, integer2);
      Integer integer3 = new Integer(3039);
      Integer integer4 = new Integer((-867));
      Integer integer5 = new Integer(0);
      hashMap0.replace("SG%*2G[q4Gk><;1Z", integer2, integer5);
      hashMap0.replace("4F7I6.kIL36j1", integer3, integer4);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap1 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Integer, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        arrayList0.add((-589), (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -589, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      linkedList0.add((Collection<Object>) null);
      multiValueMap0.putAll((Object) "", (Collection<Collection<Object>>) linkedList0);
      int int0 = multiValueMap0.size((Object) "");
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      Map<ArrayList<Object>, Object> map0 = multiValueMap0.decorated();
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Integer>>>) map0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      multiValueMap0.clear();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add(linkedList1);
      multiValueMap1.putAll(arrayList0, (Collection<LinkedList<Integer>>) linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap1, multiValueMap1);
      multiValueMap2.entrySet();
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap3 = new MultiValueMap<Object, HashMap<Object, Object>>();
      multiValueMap3.iterator();
      LinkedList<LinkedList<Object>> linkedList2 = new LinkedList<LinkedList<Object>>();
      ConstantFactory<LinkedList<LinkedList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<Object>>>(linkedList2);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<Object>>>) multiValueMap3, (Factory<LinkedList<LinkedList<Object>>>) constantFactory0);
      Object object0 = new Object();
      multiValueMap4.replace((Object) "DG$>n\"2Hgg>t~B<?1*x", object0);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap4.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      linkedList0.add((Collection<Object>) null);
      multiValueMap0.putAll((Object) null, (Collection<Collection<Object>>) linkedList0);
      ExceptionFactory.exceptionFactory();
      linkedList0.add((Collection<Object>) null);
      boolean boolean0 = multiValueMap0.putAll((Object) null, (Collection<Collection<Object>>) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      multiValueMap0.size((Object) "l,s{");
      multiValueMap0.put((Object) null, (Object) null);
      multiValueMap0.iterator((Object) "fE(Mf,0ZRl|");
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<Integer>>();
      multiValueMap0.totalSize();
      MultiValueMap<HashMap<Object, Object>, Collection<Object>> multiValueMap1 = new MultiValueMap<HashMap<Object, Object>, Collection<Object>>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super LinkedList<Integer>>) multiValueMap1, factory0);
      HashMap<Object, Object> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Object, Object>(0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleEntry<Integer, String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleEntry<Integer, String>>();
      multiValueMap1.getCollection("aEG/F0%NHjL+c");
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, LinkedList<Object>> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, LinkedList<Object>>();
      Collection<LinkedList<Object>> collection0 = multiValueMap2.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MultiValueMap<Integer, Collection<Integer>> multiValueMap0 = new MultiValueMap<Integer, Collection<Integer>>();
      multiValueMap0.values();
      multiValueMap0.values();
      Map<Integer, String> map0 = null;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }
}
