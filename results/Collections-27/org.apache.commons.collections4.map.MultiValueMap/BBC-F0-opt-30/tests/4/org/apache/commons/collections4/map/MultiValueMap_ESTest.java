/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 11:27:16 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<ArrayList<String>>>) hashMap0);
      multiValueMap0.replace(arrayList0, (Object) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ArrayList<String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList1, biFunction0);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping(linkedList1, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, "D6k}R{");
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, String>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      Integer integer0 = new Integer(2113);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(integer0, factory0);
      LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(linkedList1);
      linkedList0.add(arrayList0);
      multiValueMap1.putAll(abstractMap_SimpleEntry0, (Collection<ArrayList<Integer>>) linkedList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap2 = new MultiValueMap<Object, LinkedList<String>>();
      MultiValueMap<Object, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap2);
      multiValueMap3.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(multiValueMap0, arrayList0, biFunction0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(unaryOperator0, unaryOperator0);
      MultiValueMap<Object, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.getCollection(unaryOperator0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) hashMap0);
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) linkedList0);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0, factory0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, "f*6*x)b");
      Factory<Collection<LinkedList<Object>>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap1, factory1);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ArrayList<String>>();
      multiValueMap0.map = (Map<LinkedList<Integer>, Object>) multiValueMap0;
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>();
      multiValueMap0.map = null;
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) multiValueMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(object0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>();
      multiValueMap0.map = null;
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(1658, 1658);
      hashMap0.put(linkedList1, multiValueMap0);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(linkedList0, multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      linkedList1.add((Object) arrayList0);
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<Object>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Collection<String>) linkedList0, (Collection<Object>) linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap1;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<String>) linkedList0, (Collection<Object>) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<LinkedList<Collection<Object>>, Object> hashMap0 = new HashMap<LinkedList<Collection<Object>>, Object>();
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("%2L7{sdKubkP%xG");
      hashMap0.put(linkedList0, constantFactory0);
      MultiValueMap<LinkedList<Collection<Object>>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<Object>>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Factory<Collection<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<Object>>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer((-73));
      hashMap0.put(arrayList0, integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, Collection<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, Collection<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>((Map<LinkedList<Object>, ? super Collection<String>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<ArrayList<String>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<ArrayList<String>>>>) hashMap0);
      MultiValueMap<Integer, HashMap<ArrayList, LinkedList>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<ArrayList, LinkedList>>>) multiValueMap0);
      MultiValueMap<Integer, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) multiValueMap1);
      Integer integer0 = new Integer(2440);
      hashMap0.put(integer0, multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap2.containsValue((Object) multiValueMap1, (Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0, (Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "!LtR|o_=7k#?8)F;-p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put(hashMap1, hashMap1);
      MultiValueMap<HashMap<Object, String>, HashMap<Integer, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<HashMap<Integer, String>>>) hashMap0);
      Factory<LinkedList<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<HashMap<Object, String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super LinkedList<LinkedList<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<String, Object> multiValueMap2 = new MultiValueMap<String, Object>((Map<String, ? super LinkedList<Object>>) multiValueMap1, (Factory<LinkedList<Object>>) constantFactory0);
      int int0 = multiValueMap2.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<Object>>>) multiValueMap0);
      MultiValueMap<ArrayList<String>, Integer> multiValueMap2 = null;
      try {
        multiValueMap2 = new MultiValueMap<ArrayList<String>, Integer>((Map<ArrayList<String>, ? super LinkedList<Integer>>) multiValueMap1, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<String>>();
      Collection<ArrayList<String>> collection0 = multiValueMap0.getCollection("'A+#xWB+8A]");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      Object object0 = new Object();
      Iterator<String> iterator0 = multiValueMap0.iterator(object0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) multiValueMap0);
      multiValueMap0.putAll((Collection<String>) linkedList0, (Collection<Object>) linkedList1);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap1 = new MultiValueMap<LinkedList<Object>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList1, linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList1, biFunction0);
      linkedList1.add((Object) linkedList0);
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) linkedList0, (Collection<Object>) linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = multiValueMap0.computeIfAbsent(unaryOperator0, unaryOperator0);
      int int0 = multiValueMap0.size(object0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList1, (Object) "W5MTK\"");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      boolean boolean0 = multiValueMap0.containsValue((Object) ":G3le3ln", (Object) ":G3le3ln");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Object, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<Object, ConstantFactory<Object>>();
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap0);
      MultiValueMap<Object, LinkedList<Collection<Object>>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Collection<Object>>>>) multiValueMap1);
      HashMap<LinkedList<Collection<Object>>, Object> hashMap0 = new HashMap<LinkedList<Collection<Object>>, Object>();
      MultiValueMap<LinkedList<Collection<Object>>, HashMap<Object, Collection<Object>>> multiValueMap3 = MultiValueMap.multiValueMap((Map<LinkedList<Collection<Object>>, ? super Collection<HashMap<Object, Collection<Object>>>>) hashMap0);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      hashMap0.put(linkedList0, multiValueMap2);
      // Undeclared exception!
      try { 
        multiValueMap3.putAll((Map<? extends LinkedList<Collection<Object>>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      MultiValueMap<Object, ArrayList<LinkedList<Object>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<LinkedList<Object>>>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap1.put(multiValueMap0, arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap1.computeIfAbsent(multiValueMap0, unaryOperator0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "!LtR|o_=7k#?8)F;-p");
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = multiValueMap0.computeIfAbsent(unaryOperator0, unaryOperator0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, linkedList0, biFunction0);
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.removeMapping(object0, linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<LinkedList<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ArrayList<String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList0, arrayList0, biFunction0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, "s1QD~1W!");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<LinkedList<Integer>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ArrayList<String>>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, "s1QD~1W!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<MultiValueMap<Object, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<MultiValueMap<Object, Object>, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<MultiValueMap<Object, Object>, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent(unaryOperator0, unaryOperator0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.util.function.UnaryOperator$$Lambda$98/1806236225
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Object>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((Collection<String>) linkedList0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Integer, ArrayList<Object>>();
      int int0 = multiValueMap0.size((Object) multiValueMap1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0);
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      ConstantFactory<LinkedList<Collection<Integer>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Integer>>>(linkedList0);
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Collection<Integer>>>) multiValueMap0, (Factory<LinkedList<Collection<Integer>>>) constantFactory0);
      multiValueMap1.clear();
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      Iterator<Map.Entry<LinkedList<Object>, Integer>> iterator0 = (Iterator<Map.Entry<LinkedList<Object>, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      MultiValueMap<String, LinkedList<String>> multiValueMap2 = new MultiValueMap<String, LinkedList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
