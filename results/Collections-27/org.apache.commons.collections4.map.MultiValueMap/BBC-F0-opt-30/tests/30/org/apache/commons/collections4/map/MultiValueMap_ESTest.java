/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:28:25 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      multiValueMap0.putIfAbsent("org.apache.commons.collections4.map.MultiValueMap", "org.apache.commons.collections4.map.MultiValueMap");
      multiValueMap0.put("org.apache.commons.collections4.map.MultiValueMap", "org.apache.commons.collections4.map.MultiValueMap");
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, linkedList0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("&<:s-yJ` QD%~y['", hashMap0);
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap1);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      MultiValueMap<ArrayList<Integer>, Collection<Object>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, Collection<Object>>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Integer>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Object>>) multiValueMap1, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap1.put(arrayList0, set0);
      MultiValueMap<ArrayList<Integer>, Collection<Collection<Object>>> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<Collection<Collection<Object>>>>) multiValueMap2);
      multiValueMap3.getCollection(linkedList0);
      assertFalse(multiValueMap2.isEmpty());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>(0, 635.083F);
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>((Collection<Integer>) null);
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) hashMap0, (Factory<Collection<Integer>>) constantFactory0);
      Collection<Integer> collection0 = multiValueMap0.createCollection(1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(1);
      assertFalse(collection0.contains(1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Integer integer0 = new Integer(5894);
      multiValueMap0.putIfAbsent(integer0, integer0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Integer integer0 = new Integer(5894);
      multiValueMap0.putIfAbsent(integer0, integer0);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      BiFunction<Integer, Object, Object> biFunction0 = (BiFunction<Integer, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(anyInt() , any());
      multiValueMap1.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, multiValueMap0);
      MultiValueMap<Collection<String>, Object> multiValueMap1 = new MultiValueMap<Collection<String>, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();
      multiValueMap0.map = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping((Object) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      hashMap0.put(linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Factory<ArrayList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<Collection<Object>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.putAll("0m51]", (Collection<Integer>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(310);
      linkedList0.add(integer0);
      ConstantFactory<LinkedList<Integer>> constantFactory0 = new ConstantFactory<LinkedList<Integer>>((LinkedList<Integer>) null);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll("FHJeBZg%k~OBwT5B,", (Collection<Integer>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      hashMap0.put((HashMap<Object, String>) null, "InstantiateFactory: Constructor threw an exception");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(arrayList0);
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<ConstantFactory<String>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<ConstantFactory<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      MultiValueMap<ConstantFactory<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<Object>>) multiValueMap1);
      ConstantFactory<String> constantFactory1 = new ConstantFactory<String>("EAkh2?Y");
      // Undeclared exception!
      try { 
        multiValueMap2.putAll(constantFactory1, collection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      LinkedList<HashMap<Object, Object>> linkedList0 = new LinkedList<HashMap<Object, Object>>();
      ConstantFactory<LinkedList<HashMap<Object, Object>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<Object, Object>>>(linkedList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Object, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super LinkedList<HashMap<Object, Object>>>) hashMap0, (Factory<LinkedList<HashMap<Object, Object>>>) constantFactory0);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super LinkedList<Integer>>) multiValueMap1, factory0);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(multiValueMap0, "");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        multiValueMap2.put(abstractMap_SimpleImmutableEntry1, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer(2673);
      hashMap0.put(arrayList0, integer0);
      MultiValueMap<Collection<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super LinkedList<ArrayList<String>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<LinkedList<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.map = (Map<String, Object>) multiValueMap0;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.map = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, "pbbBV");
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      hashMap0.put(linkedList1, multiValueMap0);
      MultiValueMap<LinkedList<String>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.getCollection(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      MultiValueMap<HashMap<String, Object>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<Collection<Integer>>>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("@Kf<uY9e3G(;ed ;", hashMap0);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      hashMap0.putIfAbsent(hashMap1, hashMap2);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0, (Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) arrayList0, (Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      multiValueMap0.map = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      hashMap0.put(linkedList0, hashMap1);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1910);
      linkedList0.add(integer0);
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent("FHJeBZg%k~OBwT5B,", unaryOperator0);
      boolean boolean0 = multiValueMap0.putAll("FHJeBZg%k~OBwT5B,", (Collection<Integer>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, linkedList0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Object, Object>>();
      Collection<HashMap<Object, Object>> collection0 = multiValueMap0.getCollection("dD(cA(AY");
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<LinkedList<String>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      boolean boolean0 = multiValueMap0.putAll("VbOV42<ih&X~{A^\\", (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Integer integer0 = new Integer(3);
      int int0 = multiValueMap0.size((Object) integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, linkedList0);
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) "InstantiateFactory: Constructor threw an exception", (Object) "InstantiateFactory: Constructor threw an exception");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Object>>>) multiValueMap0);
      multiValueMap1.totalSize();
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap0);
      int int0 = multiValueMap2.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) hashMap0);
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
      hashMap0.put("Unsupported object type: ", multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer((-3));
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      multiValueMap0.putIfAbsent(integer0, constantFactory0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      multiValueMap0.putIfAbsent((Collection<String>) null, (Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<String>, LinkedList<String>>();
      multiValueMap0.put((Collection<String>) null, (Object) null);
      multiValueMap0.put((Collection<String>) null, (Object) null);
      boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap1 = new MultiValueMap<Collection<String>, LinkedList<String>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap1.put((Collection<String>) null, linkedList0);
      boolean boolean0 = multiValueMap1.removeMapping((Object) null, multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      multiValueMap0.putAll((String) null, (Collection<Integer>) linkedList0);
      ConstantFactory<ArrayList<Collection<Object>>> constantFactory0 = new ConstantFactory<ArrayList<Collection<Object>>>((ArrayList<Collection<Object>>) null);
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<Collection<Object>>>) multiValueMap0, (Factory<ArrayList<Collection<Object>>>) constantFactory0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(arrayList0);
      MultiValueMap<HashMap<Object, String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<ConstantFactory<String>, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap1 = new MultiValueMap<ConstantFactory<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      MultiValueMap<ConstantFactory<String>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<Object>>) multiValueMap1);
      ConstantFactory<String> constantFactory1 = new ConstantFactory<String>("EAkh2?Y");
      boolean boolean0 = multiValueMap2.putAll(constantFactory1, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      multiValueMap0.putAll("", (Collection<Integer>) linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) "", (Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<String, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Integer, String>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<String, HashMap<Integer, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Integer, String>>();
      Iterator<Map.Entry<String, HashMap<Integer, String>>> iterator0 = (Iterator<Map.Entry<String, HashMap<Integer, String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      multiValueMap1.put((Collection<String>) null, multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
