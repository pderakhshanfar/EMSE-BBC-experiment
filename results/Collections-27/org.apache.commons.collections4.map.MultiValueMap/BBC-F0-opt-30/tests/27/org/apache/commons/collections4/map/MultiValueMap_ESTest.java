/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:18:22 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.putIfAbsent(hashMap1, linkedList0);
      Factory<LinkedList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<HashMap<String, Object>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super LinkedList<LinkedList<Object>>>) hashMap0, factory0);
      multiValueMap0.putAll((Map<? extends HashMap<String, Object>, ?>) hashMap0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.put((String) null, (Object) null);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, HashMap<Object, String>> multiValueMap0 = new MultiValueMap<String, HashMap<Object, String>>();
      Iterator<Map.Entry<String, HashMap<Object, String>>> iterator0 = (Iterator<Map.Entry<String, HashMap<Object, String>>>)multiValueMap0.iterator();
      MultiValueMap<HashMap<Integer, String>, String> multiValueMap1 = new MultiValueMap<HashMap<Integer, String>, String>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(hashMap0, iterator0, biFunction0);
      MultiValueMap<Object, String> multiValueMap2 = new MultiValueMap<Object, String>();
      multiValueMap1.getCollection(multiValueMap2);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<MultiValueMap<String, Object>, Object> hashMap0 = new HashMap<MultiValueMap<String, Object>, Object>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>((Collection<String>) null);
      MultiValueMap<MultiValueMap<String, Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<MultiValueMap<String, Object>, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      Collection<String> collection0 = multiValueMap0.createCollection(2);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Object>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<ArrayList<Integer>, Object> hashMap0 = new HashMap<ArrayList<Integer>, Object>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      hashMap0.put(arrayList1, arrayList1);
      ArrayList<LinkedList<Object>> arrayList2 = new ArrayList<LinkedList<Object>>();
      Factory<ArrayList<LinkedList<Object>>> factory0 = ConstantFactory.constantFactory(arrayList2);
      MultiValueMap<ArrayList<Integer>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super ArrayList<LinkedList<Object>>>) hashMap0, factory0);
      MultiValueMap<ArrayList<Integer>, LinkedList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super Collection<LinkedList<Collection<String>>>>) hashMap0);
      multiValueMap0.map = (Map<ArrayList<Integer>, Object>) multiValueMap1;
      multiValueMap0.replace(arrayList1, (Object) arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      hashMap0.put(linkedList0, object0);
      MultiValueMap<LinkedList<Object>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Object
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>(1468);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(3545);
      hashMap0.put(linkedList0, integer0);
      MultiValueMap<LinkedList<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer(490);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      hashMap0.put(integer0, arrayList0);
      MultiValueMap<Collection<String>, LinkedList<String>> multiValueMap1 = new MultiValueMap<Collection<String>, LinkedList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<MultiValueMap<Integer, String>> linkedList0 = new LinkedList<MultiValueMap<Integer, String>>();
      ConstantFactory<LinkedList<MultiValueMap<Integer, String>>> constantFactory0 = new ConstantFactory<LinkedList<MultiValueMap<Integer, String>>>(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      hashMap0.put(linkedList1, "q=o>Cf");
      MultiValueMap<LinkedList<String>, MultiValueMap<Integer, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<MultiValueMap<Integer, String>>>) hashMap0, (Factory<LinkedList<MultiValueMap<Integer, String>>>) constantFactory0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>>();
      MultiValueMap<HashMap<Object, String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<HashMap<Object, String>, Object>) multiValueMap1;
      MultiValueMap<HashMap<Object, String>, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.removeMapping((Object) null, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<MultiValueMap<Object, Integer>>>) hashMap0);
      MultiValueMap<HashMap<Object, String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("Class to instantiate must not be null", multiValueMap0);
      hashMap0.put((HashMap<Object, String>) null, abstractMap_SimpleEntry0);
      Integer integer0 = new Integer((-953));
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping((Object) null, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleEntry cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(hashMap1, hashMap0);
      hashMap0.put(abstractMap_SimpleEntry0, hashMap1);
      LinkedList<HashMap<String, String>> linkedList0 = new LinkedList<HashMap<String, String>>();
      Factory<Collection<HashMap<String, String>>> factory0 = ConstantFactory.constantFactory((Collection<HashMap<String, String>>) linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<String, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<HashMap<String, String>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends AbstractMap.SimpleEntry<Object, Object>, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      LinkedList<MultiValueMap<Integer, String>> linkedList0 = new LinkedList<MultiValueMap<Integer, String>>();
      ConstantFactory<LinkedList<MultiValueMap<Integer, String>>> constantFactory0 = new ConstantFactory<LinkedList<MultiValueMap<Integer, String>>>(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      hashMap0.put(linkedList1, "q=o>Cf");
      MultiValueMap<LinkedList<String>, MultiValueMap<Integer, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super LinkedList<MultiValueMap<Integer, String>>>) hashMap0, (Factory<LinkedList<MultiValueMap<Integer, String>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<String>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      multiValueMap0.map = (Map<ArrayList<Object>, Object>) multiValueMap0;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-3299));
      arrayList0.add(integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((ArrayList<Object>) null, (Collection<Integer>) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Collection<String>, Collection<String>> multiValueMap0 = new MultiValueMap<Collection<String>, Collection<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.map = null;
      LinkedList<Collection<String>> linkedList0 = new LinkedList<Collection<String>>();
      linkedList0.add((Collection<String>) arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<String>) arrayList0, (Collection<Collection<String>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<HashMap<Integer, Object>> arrayList0 = new ArrayList<HashMap<Integer, Object>>();
      Factory<ArrayList<HashMap<Integer, Object>>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<String, HashMap<Integer, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<HashMap<Integer, Object>>>) hashMap0, factory0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      arrayList0.add(hashMap1);
      hashMap0.put("", multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll("", (Collection<HashMap<Integer, Object>>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory((LinkedList<Object>) null);
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      Factory<LinkedList<String>> factory1 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<String>>) multiValueMap0, factory1);
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, factory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(hashMap0, (String) null);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, "lNLubW#lv");
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(abstractMap_SimpleImmutableEntry0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<HashMap<String, Integer>, Object> hashMap1 = new HashMap<HashMap<String, Integer>, Object>();
      ConstantFactory<LinkedList<HashMap<String, Object>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Object>>>((LinkedList<HashMap<String, Object>>) null);
      MultiValueMap<HashMap<String, Integer>, HashMap<String, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<String, Integer>, ? super LinkedList<HashMap<String, Object>>>) hashMap1, (Factory<LinkedList<HashMap<String, Object>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(hashMap0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, (String) null);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, "lNLubW#lv");
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(abstractMap_SimpleImmutableEntry0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<HashMap<String, Object>> linkedList0 = new LinkedList<HashMap<String, Object>>();
      ConstantFactory<LinkedList<HashMap<String, Object>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<String, Object>>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<HashMap<String, Object>>>) null, (Factory<LinkedList<HashMap<String, Object>>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(hashMap0, "/i&phgTr");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(abstractMap_SimpleImmutableEntry0, arrayList0);
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0, (Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-908));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer(512);
      hashMap0.put(integer0, "fE[");
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, LinkedList<LinkedList>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<LinkedList>>>) hashMap0);
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) multiValueMap0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-4878));
      arrayList0.add(integer0);
      multiValueMap1.putAll((ArrayList<Object>) null, (Collection<Integer>) arrayList0);
      boolean boolean0 = multiValueMap1.putAll((ArrayList<Object>) null, (Collection<Integer>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<Collection<Object>> factory0 = ConstantFactory.constantFactory((Collection<Object>) linkedList0);
      MultiValueMap<Collection<Object>, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) multiValueMap1, factory0);
      Collection<Object> collection0 = multiValueMap2.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Object>();
      Integer integer0 = new Integer(1615);
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Factory<Collection<Integer>> factory0 = ConstantFactory.constantFactory((Collection<Integer>) arrayList0);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.size((Object) "\"!!|7u,&#");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>>();
      multiValueMap0.putIfAbsent((HashMap<Object, String>) null, (Object) null);
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-907));
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(integer0, arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      arrayList0.add((Object) null);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-907));
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(integer0, arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Factory<ArrayList<ConstantFactory<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, ConstantFactory<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super ArrayList<ConstantFactory<Integer>>>) multiValueMap0, factory0);
      HashMap<String, Collection<String>> hashMap0 = new HashMap<String, Collection<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put("", linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<MultiValueMap<Object, Integer>>>) hashMap0);
      multiValueMap0.putIfAbsent((HashMap<Object, String>) null, (Object) null);
      MultiValueMap<HashMap<Object, String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      multiValueMap0.putAll((Map<? extends HashMap<Object, String>, ?>) multiValueMap1);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer(490);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) integer0);
      hashMap0.put(integer0, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      multiValueMap0.putIfAbsent(hashMap0, (Object) null);
      MultiValueMap<HashMap<Object, String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) hashMap1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      hashMap0.put((Integer) null, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>>();
      multiValueMap0.putIfAbsent((HashMap<Object, String>) null, (Object) null);
      multiValueMap0.put((HashMap<Object, String>) null, "<.2T");
      MultiValueMap<HashMap<Object, String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping((Object) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, MultiValueMap<Object, Integer>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      multiValueMap0.putIfAbsent(hashMap0, (Object) null);
      MultiValueMap<HashMap<Object, String>, LinkedList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<LinkedList<Integer>>>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap1.removeMapping(hashMap0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      MultiValueMap<HashMap<Object, String>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping(hashMap0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<Object>>>) hashMap0, (Factory<LinkedList<LinkedList<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add((Integer) null);
      multiValueMap0.putAll((Collection<Object>) linkedList0, (Collection<Integer>) linkedList1);
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<HashMap<Object, String>, Object> hashMap0 = new HashMap<HashMap<Object, String>, Object>();
      hashMap0.put((HashMap<Object, String>) null, (Object) null);
      MultiValueMap<HashMap<Object, String>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, String>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) multiValueMap0);
      Integer integer0 = new Integer(2);
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ConstantFactory<LinkedList<ArrayList<String>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<String>>>(linkedList0);
      MultiValueMap<ArrayList<String>, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<ArrayList<String>>>) hashMap0, (Factory<LinkedList<ArrayList<String>>>) constantFactory0);
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll(integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0, (Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer(476);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(integer0, arrayList0);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, arrayList0);
      assertEquals(1, hashMap0.size());
      assertFalse(boolean0);
  }
}
