/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:09:41 GMT 2020
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      multiValueMap0.putAll((Map<? extends String, ?>) multiValueMap1);
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Integer integer0 = new Integer(1999);
      multiValueMap0.put(integer0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      MultiValueMap<String, HashMap<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<HashMap<Integer, String>>>) multiValueMap0);
      multiValueMap1.put("The factory must not be null", "The factory must not be null");
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Collection<Object>> hashMap0 = new HashMap<String, Collection<Object>>();
      MultiValueMap<String, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      Factory<LinkedList<Collection<Object>>> factory0 = ConstantFactory.constantFactory((LinkedList<Collection<Object>>) null);
      MultiValueMap<String, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<Object>>>) multiValueMap0, factory0);
      Collection<Collection<Object>> collection0 = multiValueMap1.createCollection(1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<LinkedList<Object>, String> hashMap1 = new HashMap<LinkedList<Object>, String>();
      hashMap1.put(linkedList0, "+hp[");
      hashMap0.putAll(hashMap1);
      MultiValueMap<LinkedList<Object>, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<ArrayList<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Integer>>();
      HashMap<LinkedList<ArrayList<Object>>, Object> hashMap0 = new HashMap<LinkedList<ArrayList<Object>>, Object>();
      MultiValueMap<LinkedList<ArrayList<Object>>, AbstractMap.SimpleImmutableEntry<ArrayList<Object>, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<ArrayList<Object>>, ? super Collection<AbstractMap.SimpleImmutableEntry<ArrayList<Object>, Object>>>) hashMap0);
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      multiValueMap1.putIfAbsent(linkedList0, hashMap0);
      MultiValueMap<Integer, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.size((Object) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(8406);
      Iterator<Map.Entry<Integer, Integer>> iterator0 = (Iterator<Map.Entry<Integer, Integer>>)multiValueMap0.iterator();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(collection0, iterator0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) collection0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap$1 cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Collection<String>, Object> multiValueMap0 = new MultiValueMap<Collection<String>, Object>();
      multiValueMap0.map = (Map<Collection<String>, Object>) multiValueMap0;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, multiValueMap0.map);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(integer0, arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, LinkedList<Integer>>();
      MultiValueMap<HashMap<Object, Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(multiValueMap1, multiValueMap1);
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<?, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Object> multiValueMap1 = new MultiValueMap<Integer, Object>((Map<Integer, ? super LinkedList<Object>>) hashMap0, factory0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(integer0, multiValueMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      ConstantFactory<Collection<LinkedList<Object>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Object>>>(arrayList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<LinkedList<Object>>>) null, (Factory<Collection<LinkedList<Object>>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      ArrayList<Collection<Integer>> arrayList0 = new ArrayList<Collection<Integer>>();
      Factory<ArrayList<Collection<Integer>>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<Integer, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super ArrayList<Collection<Integer>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap1, (Factory<Collection<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      hashMap0.put((Integer) null, multiValueMap0);
      Integer integer0 = new Integer(123);
      MultiValueMap<Integer, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      MultiValueMap<String, Object> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<String, Object>((Map<String, ? super Collection<Object>>) null, (Factory<Collection<Object>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Collection<String> collection0 = multiValueMap0.getCollection((Object) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      Integer integer0 = new Integer(512);
      Iterator<Integer> iterator0 = multiValueMap0.iterator((Object) integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Integer>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1));
      arrayList0.add(integer0);
      boolean boolean0 = multiValueMap0.putAll(hashMap1, (Collection<Integer>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      MultiValueMap<LinkedList<Object>, HashMap<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<HashMap<Object, Integer>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap1.putAll(linkedList0, (Collection<HashMap<Object, Integer>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>();
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer(123);
      BiFunction<Object, Object, Collection<Object>> biFunction0 = (BiFunction<Object, Object, Collection<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(integer0, integer0, biFunction0);
      int int0 = multiValueMap0.size(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Integer integer0 = new Integer(10);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer((-1));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer0, arrayList0, biFunction0);
      LinkedList<AbstractMap.SimpleImmutableEntry<Integer, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Integer, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Integer, Object>>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(1999);
      hashMap0.put(integer0, (String) null);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer((-1));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer0, arrayList0, biFunction0);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends Integer, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer((-1));
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap1).when(biFunction0).apply(any() , any());
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(integer0, arrayList0, biFunction1);
      multiValueMap1.merge(integer0, multiValueMap0, biFunction0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer((-1));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer0, arrayList0, biFunction0);
      MultiValueMap<Integer, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer(120);
      BiFunction<Object, Object, Collection<Object>> biFunction0 = (BiFunction<Object, Object, Collection<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(integer0, integer0, biFunction0);
      MultiValueMap<Integer, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<String>>>) hashMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) integer0);
      assertEquals(1, hashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-1));
      MultiValueMap<ArrayList<String>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<Integer>>();
      boolean boolean0 = multiValueMap0.removeMapping(integer0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Integer>>();
      HashMap<LinkedList<ArrayList<Object>>, Object> hashMap0 = new HashMap<LinkedList<ArrayList<Object>>, Object>();
      MultiValueMap<LinkedList<ArrayList<Object>>, AbstractMap.SimpleImmutableEntry<ArrayList<Object>, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<ArrayList<Object>>, ? super Collection<AbstractMap.SimpleImmutableEntry<ArrayList<Object>, Object>>>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap1.put(multiValueMap0, arrayList0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) hashMap1);
      boolean boolean0 = multiValueMap2.removeMapping(multiValueMap1, (Object) null);
      assertEquals(1, hashMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Integer>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap1.merge(integer0, arrayList0, biFunction0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, String> multiValueMap0 = new MultiValueMap<LinkedList<Object>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(collection0);
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>((Map<String, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) constantFactory0);
      boolean boolean0 = multiValueMap1.putAll("L6-3=pj h", collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      Set<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      Integer integer0 = new Integer(4);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add(integer0);
      Factory<ArrayList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super ArrayList<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((ArrayList<Object>) null, (Collection<Integer>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      ConstantFactory<Collection<LinkedList<Object>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<Object>>>(arrayList0);
      MultiValueMap<String, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Object>>>) multiValueMap0, (Factory<Collection<LinkedList<Object>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }
}
