/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:10:22 GMT 2020
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<String, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, String>>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap0);
      Set<Map.Entry<ArrayList<Object>, Object>> set0 = (Set<Map.Entry<ArrayList<Object>, Object>>)multiValueMap1.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      hashMap0.put((LinkedList<Integer>) null, (Object) null);
      MultiValueMap<LinkedList<Integer>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<String>>>) hashMap0);
      multiValueMap0.putAll((Map<? extends LinkedList<Integer>, ?>) hashMap0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      multiValueMap0.putIfAbsent((Integer) null, (Object) null);
      MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<ArrayList<Object>, Collection<Object>> hashMap0 = new HashMap<ArrayList<Object>, Collection<Object>>();
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Collection<Object> collection0 = multiValueMap0.getCollection(linkedList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      Integer integer0 = new Integer(0);
      multiValueMap0.putAll(integer0, (Collection<Object>) linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = new MultiValueMap<Integer, Collection<Object>>();
      Factory<Collection<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>((Map<Integer, ? super Collection<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.put((Integer) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<AbstractMap.SimpleEntry<Object, String>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<Object, String>>();
      Factory<Collection<AbstractMap.SimpleEntry<Object, String>>> factory0 = ConstantFactory.constantFactory((Collection<AbstractMap.SimpleEntry<Object, String>>) arrayList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<AbstractMap.SimpleEntry<Object, String>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<AbstractMap.SimpleEntry<Object, String>>>) hashMap0, (Factory<LinkedList<AbstractMap.SimpleEntry<Object, String>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<ArrayList<String>>, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Object>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiValueMap<String, Collection<Object>> multiValueMap0 = new MultiValueMap<String, Collection<Object>>();
      Collection<Collection<Object>> collection0 = multiValueMap0.getCollection(integer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<Object>>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<Object>>, Collection<Object>>();
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      MultiValueMap<AbstractMap.SimpleEntry<String, Collection<Object>>, Object> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<String, Collection<Object>>, Object>();
      Collection<Object> collection0 = multiValueMap1.createCollection(423);
      arrayList0.add(collection0);
      BiFunction<Object, Object, Collection<Object>> biFunction0 = (BiFunction<Object, Object, Collection<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList0, biFunction0);
      ArrayList<Collection<Object>> arrayList1 = new ArrayList<Collection<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList1.add((Collection<Object>) linkedList0);
      boolean boolean0 = multiValueMap0.putAll(arrayList1, (Collection<Collection<Object>>) arrayList1);
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<String, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<HashMap<String, String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = multiValueMap0.size((Object) linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      MultiValueMap<ArrayList<Object>, HashMap<String, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, String>>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap0);
      multiValueMap1.putAll((ArrayList<Object>) null, (Collection<String>) arrayList0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList1.add((Object) "");
      boolean boolean0 = multiValueMap1.containsValue((Object) null, (Object) arrayList1);
      assertEquals(1, multiValueMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Integer, HashMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Object, Object>>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) hashMap0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      MultiValueMap<ArrayList<Object>, HashMap<String, String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, String>>();
      MultiValueMap<ArrayList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) multiValueMap0);
      multiValueMap1.putAll((ArrayList<Object>) null, (Collection<String>) arrayList0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) null, (Object) arrayList1);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      multiValueMap0.values();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      LinkedList<AbstractMap.SimpleEntry<String, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<String, Object>>();
      Factory<LinkedList<AbstractMap.SimpleEntry<String, Object>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleEntry<String, Object>>>) multiValueMap0, factory0);
      multiValueMap1.put((Object) null, (Object) null);
      MultiValueMap<Object, Collection<Object>> multiValueMap2 = new MultiValueMap<Object, Collection<Object>>();
      multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, multiValueMap2.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      multiValueMap0.put((String) null, (Object) null);
      multiValueMap0.replace((String) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Integer integer0 = new Integer(214);
      multiValueMap0.put(integer0, integer0);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>(linkedList0);
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Collection<Object>>>) multiValueMap0, (Factory<LinkedList<Collection<Object>>>) constantFactory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, Object>();
      Iterator<Object> iterator0 = multiValueMap1.iterator((Object) multiValueMap0);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      multiValueMap2.put(iterator0, multiValueMap1);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>(linkedList0);
      MultiValueMap<Object, Collection<Object>> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Collection<Object>>>) multiValueMap2, (Factory<LinkedList<Collection<Object>>>) constantFactory0);
      boolean boolean0 = multiValueMap3.containsValue((Object) multiValueMap1);
      assertEquals(1, multiValueMap2.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Collection<Object>>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Collection<Object>>>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Collection<Object>>, Collection<Object>> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Collection<Object>>, Collection<Object>>();
      Object object0 = multiValueMap2.getOrDefault(multiValueMap0, multiValueMap0);
      multiValueMap1.put(object0, multiValueMap0);
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) multiValueMap1, factory0);
      int int0 = multiValueMap3.totalSize();
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Integer integer0 = new Integer(214);
      multiValueMap0.put(integer0, integer0);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>(linkedList0);
      MultiValueMap<Object, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Collection<Object>>>) multiValueMap0, (Factory<LinkedList<Collection<Object>>>) constantFactory0);
      multiValueMap1.iterator((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((String) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      MultiValueMap<Integer, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      MultiValueMap<String, String> multiValueMap2 = new MultiValueMap<String, String>();
      boolean boolean0 = multiValueMap2.removeMapping((Object) null, multiValueMap1);
      assertFalse(boolean0);
  }
}
