/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:08:18 GMT 2020
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>();
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      Integer integer0 = new Integer(512);
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "org.apache.commons.collections4.iterators.EmptyListIterator");
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add(integer0);
      hashMap0.put(abstractMap_SimpleImmutableEntry1, arrayList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, ? super Collection<String>>) hashMap0, factory0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<Object>>();
      multiValueMap0.put((LinkedList<Integer>) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();
      Collection<Object> collection0 = multiValueMap0.createCollection(0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      Factory<LinkedList<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Collection<String>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(integer0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      Factory<LinkedList<String>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Integer>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Integer>, ? super LinkedList<String>>) multiValueMap0, factory0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(arrayList0, (Collection<String>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Object>, Integer>();
      Factory<Collection<AbstractMap.SimpleImmutableEntry<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Object>, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap0, factory0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "org.apache.commons.collections4.iterators.EmptyMapIterator");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(abstractMap_SimpleEntry1, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      Object object0 = multiValueMap0.put("cw}Z~~m>V|Uq!7P", arrayList0);
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      MultiValueMap<Object, Object> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.put(multiValueMap0, object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0, (Factory<Collection<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>(linkedList0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) hashMap0);
      multiValueMap0.map = null;
      MultiValueMap<Integer, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ConstantFactory<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection((-2378));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-1524));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<ConstantFactory<String>, ConstantFactory<Integer>> multiValueMap0 = new MultiValueMap<ConstantFactory<String>, ConstantFactory<Integer>>();
      MultiValueMap<ConstantFactory<String>, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<ConstantFactory<String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) integer0, (Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = null;
      try {
        multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>((Map<LinkedList<Integer>, ? super LinkedList<Integer>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) hashMap0);
      ArrayList<Collection<Object>> arrayList0 = new ArrayList<Collection<Object>>();
      hashMap0.put("", arrayList0);
      ArrayList<ArrayList<Object>> arrayList1 = new ArrayList<ArrayList<Object>>();
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      arrayList1.add(arrayList2);
      boolean boolean0 = multiValueMap0.putAll("", (Collection<ArrayList<Object>>) arrayList1);
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<LinkedList<String>> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("-q&R#}gAY0", integer0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleImmutableEntry1, (Collection<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<Object>>();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Integer>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, ArrayList<String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, ArrayList<String>>();
      boolean boolean0 = multiValueMap1.containsValue((Object) collection0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Collection<Object>, Integer> multiValueMap0 = new MultiValueMap<Collection<Object>, Integer>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, Integer>();
      HashMap<HashMap<Object, Object>, Object> hashMap0 = new HashMap<HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(hashMap1, arrayList0);
      multiValueMap0.putAll((Map<? extends HashMap<Object, Object>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ConstantFactory<Integer>, Integer> multiValueMap0 = new MultiValueMap<ConstantFactory<Integer>, Integer>();
      Integer integer0 = new Integer((-2));
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      multiValueMap0.putAll(constantFactory0, (Collection<Integer>) linkedList0);
      multiValueMap0.putAll((Map<? extends ConstantFactory<Integer>, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Collection<Object>, HashMap<String, String>> multiValueMap0 = new MultiValueMap<Collection<Object>, HashMap<String, String>>();
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, LinkedList<Object>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap1.put(linkedList0, "ra8jV^QaAo~  ,");
      multiValueMap1.put(linkedList0, multiValueMap0);
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Integer integer0 = new Integer((-1));
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.merge(integer0, integer0, biFunction0);
      boolean boolean0 = multiValueMap0.containsValue(object0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<LinkedList<String>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.putIfAbsent(linkedList0, linkedList0);
      Factory<LinkedList<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Collection<Object>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super LinkedList<Collection<String>>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<ArrayList<Integer>, String> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, String>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = new MultiValueMap<LinkedList<String>, Object>();
      boolean boolean0 = multiValueMap1.putAll((LinkedList<String>) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<Object>>>) hashMap0);
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<String>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ConstantFactory<Collection<Integer>> constantFactory0 = new ConstantFactory<Collection<Integer>>((Collection<Integer>) null);
      MultiValueMap<Object, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) hashMap0, (Factory<Collection<Integer>>) constantFactory0);
      Iterator<Map.Entry<Object, Integer>> iterator0 = (Iterator<Map.Entry<Object, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Object, Collection<Object>> hashMap0 = new HashMap<Object, Collection<Object>>(1725, 1725);
      MultiValueMap<Object, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Object>>) hashMap0);
      multiValueMap0.put(hashMap0, hashMap0);
      MultiValueMap<Integer, Integer> multiValueMap1 = new MultiValueMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Factory<Collection<String>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }
}
