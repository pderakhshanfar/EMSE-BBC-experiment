/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:07:16 GMT 2020
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0);
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      Integer integer0 = new Integer(1716);
      multiValueMap0.putIfAbsent(integer0, integer0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0);
      multiValueMap0.put((Integer) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, Object>>();
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Integer>>>) multiValueMap1);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap2.size((Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(hashMap0, function0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<String, Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<String, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(hashMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.push(hashMap0);
      hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<Object, Integer> multiValueMap0 = new MultiValueMap<Object, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<Object>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("org.apache.commons.collections4.iterators.EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators.EmptyOrderedMapIterator");
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, String>, LinkedList<Integer>>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      multiValueMap0.map = (Map<AbstractMap.SimpleEntry<String, String>, Object>) multiValueMap0;
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("7g[dJ:*FY\"p5=z]-0R", "");
      // Undeclared exception!
      try { 
        multiValueMap0.put(abstractMap_SimpleEntry0, arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Collection<Object>>>) null, (Factory<LinkedList<Collection<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<ArrayList<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiValueMap<ArrayList<Integer>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Integer>, HashMap<Object, Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      Factory<LinkedList<ArrayList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ArrayList<Integer>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.createCollection(512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Collection<Integer> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<LinkedList<Integer>> arrayList0 = new ArrayList<LinkedList<Integer>>();
      ConstantFactory<ArrayList<LinkedList<Integer>>> constantFactory0 = new ConstantFactory<ArrayList<LinkedList<Integer>>>(arrayList0);
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super ArrayList<LinkedList<Integer>>>) hashMap0, (Factory<ArrayList<LinkedList<Integer>>>) constantFactory0);
      int int0 = multiValueMap0.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) hashMap0);
      Iterator<String> iterator0 = multiValueMap0.iterator((Object) hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Collection<Object>, AbstractMap.SimpleImmutableEntry<String, String>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<AbstractMap.SimpleImmutableEntry<String, String>> arrayList1 = new ArrayList<AbstractMap.SimpleImmutableEntry<String, String>>();
      boolean boolean0 = multiValueMap0.putAll((Collection<Object>) arrayList0, (Collection<AbstractMap.SimpleImmutableEntry<String, String>>) arrayList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<LinkedList<HashMap<Object, Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<HashMap<Object, Object>>>) hashMap0, factory0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      int int0 = multiValueMap0.size((Object) hashMap1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, multiValueMap1);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      int int0 = multiValueMap2.size((Object) arrayList0);
      assertFalse(multiValueMap1.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<Collection<Object>, LinkedList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>>();
      multiValueMap0.putIfAbsent((Object) null, "o;]MYRA8.n4Pa");
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = new MultiValueMap<Object, ArrayList<String>>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, arrayList1);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) hashMap0);
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<HashMap<Object, Object>, ConstantFactory<Object>> multiValueMap0 = new MultiValueMap<HashMap<Object, Object>, ConstantFactory<Object>>();
      MultiValueMap<HashMap<Object, Object>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<Object, Object>, ? super Collection<Collection<String>>>) multiValueMap0);
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap2 = new MultiValueMap<ArrayList<Object>, ArrayList<String>>();
      boolean boolean0 = multiValueMap1.removeMapping((Object) null, multiValueMap2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<String, String>>();
      multiValueMap0.putIfAbsent((Object) null, "o;]MYRA8.n4Pa");
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) multiValueMap0);
      MultiValueMap<Object, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap1);
      // Undeclared exception!
      try { 
        multiValueMap2.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, LinkedList<Object>>();
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      Iterator<Map.Entry<ArrayList<Object>, ArrayList<Object>>> iterator0 = (Iterator<Map.Entry<ArrayList<Object>, ArrayList<Object>>>)multiValueMap1.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) hashMap0);
      Integer integer0 = new Integer(0);
      ArrayList<LinkedList<Object>> arrayList0 = new ArrayList<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      arrayList0.add(linkedList0);
      multiValueMap0.putAll(integer0, (Collection<LinkedList<Object>>) arrayList0);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<LinkedList<Object>>) arrayList0);
      assertEquals(1, hashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<HashMap<Object, Object>>>) hashMap0, (Factory<LinkedList<HashMap<Object, Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }
}
