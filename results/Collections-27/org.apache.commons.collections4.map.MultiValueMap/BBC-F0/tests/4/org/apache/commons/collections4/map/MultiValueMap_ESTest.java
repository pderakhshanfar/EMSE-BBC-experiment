/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:03:33 GMT 2020
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<Integer, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<Integer, Integer>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<LinkedList<String>> constantFactory0 = new ConstantFactory<LinkedList<String>>(linkedList0);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) hashMap0, (Factory<LinkedList<String>>) constantFactory0);
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertTrue(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(arrayList0, arrayList0);
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Object>>();
      multiValueMap0.put((ArrayList<String>) null, (Object) null);
      MultiValueMap<ArrayList<String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      multiValueMap1.put((ArrayList<String>) null, abstractMap_SimpleImmutableEntry0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object>();
      Integer integer0 = new Integer((-21));
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("org.apache.commons.collections4.map.MultiValueMap$1$1", integer0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("org.apache.commons.collections4.map.MultiValueMap$1$1");
      hashMap0.put(abstractMap_SimpleEntry0, constantFactory0);
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super LinkedList<Collection<Object>>>) hashMap0, factory0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>((LinkedList<Collection<Object>>) null);
      MultiValueMap<String, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Collection<Object>>>) hashMap0, (Factory<LinkedList<Collection<Object>>>) constantFactory0);
      Collection<Collection<Object>> collection0 = multiValueMap0.createCollection(722);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<Integer>>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      Collection<String> collection0 = multiValueMap1.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      Object object0 = multiValueMap0.getOrDefault((Object) null, (Object) null);
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = new MultiValueMap<Object, Collection<Integer>>();
      MultiValueMap<Object, Collection<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<String>>>) multiValueMap1);
      multiValueMap1.map = (Map<Object, Object>) multiValueMap2;
      Integer integer0 = new Integer(4);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(object0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      linkedList0.add(arrayList0);
      multiValueMap0.putAll((Collection<Object>) null, (Collection<ArrayList<Object>>) linkedList0);
      arrayList0.add((Object) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Collection<Object>) arrayList0, (Collection<ArrayList<Object>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      Factory<Collection<HashMap<Object, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, HashMap<Object, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<HashMap<Object, String>>>) hashMap0, factory0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(arrayList0, factory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super LinkedList<Integer>>) null, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<ArrayList<Object>> linkedList1 = new LinkedList<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      linkedList1.add(arrayList0);
      multiValueMap0.putAll((Collection<Object>) linkedList0, (Collection<ArrayList<Object>>) linkedList1);
      arrayList0.add((Object) multiValueMap0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, String> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, String>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) arrayList0, (Object) "PrototypeCloneFactory: Clone method must be public");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent("", (Object) null);
      arrayList0.add("");
      boolean boolean0 = multiValueMap0.putAll("", (Collection<String>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      Iterator<Collection<String>> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      Collection<Object> collection0 = multiValueMap1.getCollection(multiValueMap0);
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      boolean boolean0 = multiValueMap0.putAll(collection0, (Collection<ArrayList<Object>>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      boolean boolean0 = multiValueMap0.putAll("The comparator must not be null", (Collection<Collection<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0);
      int int0 = multiValueMap0.size((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap0.computeIfAbsent("org.apache.commons.collections4.iterators.LazyIteratorChain", unaryOperator0);
      int int0 = multiValueMap0.size((Object) "org.apache.commons.collections4.iterators.LazyIteratorChain");
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      MapIterator<AbstractMap.SimpleEntry<Object, Object>, Object> mapIterator0 = multiValueMap0.mapIterator();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, String> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) mapIterator0, (Object) multiValueMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = new MultiValueMap<Collection<Integer>, Integer>();
      HashMap<Collection<Integer>, Integer> hashMap0 = new HashMap<Collection<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(95);
      hashMap0.put(linkedList0, integer0);
      multiValueMap0.putAll((Map<? extends Collection<Integer>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<String, Object>>();
      multiValueMap0.put((ArrayList<String>) null, "o*Cby*B_Le,BI");
      MultiValueMap<ArrayList<String>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends ArrayList<String>, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      multiValueMap0.putIfAbsent((Collection<Object>) null, (Object) null);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<ArrayList<Object>> linkedList1 = new LinkedList<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      linkedList1.add(arrayList0);
      multiValueMap0.putAll((Collection<Object>) linkedList0, (Collection<ArrayList<Object>>) linkedList1);
      boolean boolean0 = multiValueMap0.containsValue((Object) "PrototypeCloneFactory: Clone method must be public");
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      boolean boolean0 = multiValueMap1.removeMapping(multiValueMap0, "The comparator must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      multiValueMap1.put("The comparator must not be null", "The comparator must not be null");
      boolean boolean0 = multiValueMap1.removeMapping("The comparator must not be null", multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Integer>>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.put(arrayList0, hashMap0);
      MultiValueMap<Object, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Integer>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Integer>>) hashMap0);
      MultiValueMap<Collection<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<Object>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object>();
      Factory<LinkedList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Collection<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super LinkedList<Collection<Object>>>) hashMap0, factory0);
      Collection<Object> collection0 = multiValueMap0.values();
      boolean boolean0 = arrayList0.addAll(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ConstantFactory<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<ConstantFactory<Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<AbstractMap.SimpleEntry<Object, Object>, Object>) multiValueMap1;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
