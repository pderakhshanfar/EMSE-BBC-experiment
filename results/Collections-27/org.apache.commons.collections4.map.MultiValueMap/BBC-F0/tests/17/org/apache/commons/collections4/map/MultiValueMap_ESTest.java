/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:07:34 GMT 2020
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      MapIterator<ArrayList<Object>, Object> mapIterator0 = multiValueMap0.mapIterator();
      Iterator<Map.Entry<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>> iterator0 = (Iterator<Map.Entry<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>>)multiValueMap0.iterator();
      MultiValueMap<LinkedList<String>, Integer> multiValueMap1 = new MultiValueMap<LinkedList<String>, Integer>();
      boolean boolean0 = multiValueMap1.containsValue((Object) iterator0, (Object) mapIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      multiValueMap0.put((Integer) null, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Collection<String>, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Collection<String>, Object>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      multiValueMap0.getCollection(arrayList1);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Collection<Object> collection0 = multiValueMap0.createCollection(0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<String>>();
      MultiValueMap<LinkedList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1458));
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("", abstractMap_SimpleEntry0, biFunction0);
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.util.AbstractMap$SimpleEntry
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, String>, ? super Collection<Integer>>) hashMap0);
      hashMap0.put((AbstractMap.SimpleImmutableEntry<Integer, String>) null, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping(hashMap0, "h~sdf61VsHiw1KCGA");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping("h~sdf61VsHiw1KCGA", "h~sdf61VsHiw1KCGA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      HashMap<Collection<Integer>, Object> hashMap1 = new HashMap<Collection<Integer>, Object>();
      Integer integer0 = new Integer(3);
      hashMap1.put((Collection<Integer>) null, integer0);
      ConstantFactory<ArrayList<Integer>> constantFactory0 = new ConstantFactory<ArrayList<Integer>>((ArrayList<Integer>) null);
      MultiValueMap<Collection<Integer>, Integer> multiValueMap1 = new MultiValueMap<Collection<Integer>, Integer>((Map<Collection<Integer>, ? super ArrayList<Integer>>) hashMap1, (Factory<ArrayList<Integer>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping((Object) null, multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<ArrayList<String>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, HashMap<String, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<String>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<ArrayList<Object>> linkedList0 = new LinkedList<ArrayList<Object>>();
      ConstantFactory<LinkedList<ArrayList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Object>>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<ArrayList<Object>>>) null, (Factory<LinkedList<ArrayList<Object>>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<HashMap<AbstractMap.SimpleImmutableEntry, Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
          MultiValueMap<String, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0);
          multiValueMap0.map = (Map<String, Object>) multiValueMap1;
          // Undeclared exception!
          try { 
            multiValueMap0.containsValue((Object) "Mq(:", (Object) "Mq(:");
            fail("Expecting exception: StackOverflowError");
          
          } catch(StackOverflowError e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      Integer integer0 = new Integer(0);
      multiValueMap1.put("lnA(SW:", integer0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<Integer, String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.putAll(integer0, (Collection<AbstractMap.SimpleImmutableEntry<Integer, String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, ArrayList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      MultiValueMap<Object, ArrayList<String>> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<Object, ArrayList<String>>((Map<Object, ? super LinkedList<ArrayList<String>>>) multiValueMap0, (Factory<LinkedList<ArrayList<String>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, String>, LinkedList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Integer, String>, ? super Collection<LinkedList<Object>>>) hashMap0);
      Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>> set0 = (Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, LinkedList<Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Collection<Object>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Collection<Object>>();
      Collection<Collection<Object>> collection0 = multiValueMap1.getCollection(multiValueMap0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Integer>, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Iterator<Object> iterator0 = multiValueMap0.iterator((Object) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) hashMap0);
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(arrayList0);
      multiValueMap0.putAll((Object) null, (Collection<ArrayList<String>>) linkedList0);
      ArrayList<ArrayList<String>> arrayList1 = new ArrayList<ArrayList<String>>();
      arrayList1.add(arrayList0);
      boolean boolean0 = multiValueMap0.putAll((Object) null, (Collection<ArrayList<String>>) arrayList1);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(collection0);
      ArrayList<AbstractMap.SimpleImmutableEntry<Object, Object>> arrayList1 = new ArrayList<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      boolean boolean0 = multiValueMap1.putAll(arrayList0, (Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>) arrayList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>>();
      MultiValueMap<HashMap<Object, String>, Object> multiValueMap1 = new MultiValueMap<HashMap<Object, String>, Object>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>(1, 1);
      multiValueMap1.put(hashMap0, hashMap0);
      int int0 = multiValueMap1.size((Object) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      MultiValueMap<Object, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<Object>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, String>, ? super Collection<Integer>>) hashMap0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("<;j1qLcrgvri", "_wLbI");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , any());
      multiValueMap0.compute(abstractMap_SimpleImmutableEntry1, biFunction0);
      multiValueMap0.putAll((Map<? extends AbstractMap.SimpleImmutableEntry<String, String>, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap0);
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>> factory0 = ConstantFactory.constantFactory((LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>) null);
      hashMap0.put(linkedList0, (Object) null);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>>) multiValueMap1, factory0);
      multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) multiValueMap0);
      Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>> factory0 = ConstantFactory.constantFactory((LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>) null);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Integer, String>>>) multiValueMap1, factory0);
      multiValueMap2.putAll((Map<?, ?>) multiValueMap0);
      assertTrue(multiValueMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      multiValueMap0.putIfAbsent(integer0, linkedList0);
      multiValueMap0.put(integer0, integer0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      multiValueMap0.put(integer0, "");
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) "");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Factory<ArrayList<String>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>((Map<Object, ? super ArrayList<String>>) hashMap0, factory0);
      ArrayList<ArrayList<String>> arrayList1 = new ArrayList<ArrayList<String>>();
      ConstantFactory<Collection<ArrayList<String>>> constantFactory0 = new ConstantFactory<Collection<ArrayList<String>>>(arrayList1);
      MultiValueMap<Object, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<String>>>) multiValueMap1, (Factory<Collection<ArrayList<String>>>) constantFactory0);
      boolean boolean0 = multiValueMap2.removeMapping(multiValueMap0, constantFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap0, (Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap1.containsValue((Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ArrayList<String>>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<Object, String>>();
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<String>>) multiValueMap0);
      Integer integer0 = new Integer((-1275));
      multiValueMap1.put(integer0, integer0);
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = multiValueMap2.containsValue((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }
}
