/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:10:54 GMT 2020
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Object, Object>>();
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap1.putIfAbsent((Collection<String>) null, multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Collection<Integer> collection0 = multiValueMap0.createCollection(0);
      assertFalse(collection0.contains(0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, HashMap<String, Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, HashMap<String, Integer>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super Collection<ConstantFactory<Object>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, ? super LinkedList<String>>) multiValueMap1, factory0);
      multiValueMap0.map = (Map<AbstractMap.SimpleImmutableEntry<String, Object>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, MultiValueMap<Object, String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<MultiValueMap<Object, String>>>) hashMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(hashMap0, hashMap0, biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Collection<String>, HashMap<Object, Object>> multiValueMap0 = new MultiValueMap<Collection<String>, HashMap<Object, Object>>();
      MultiValueMap<Collection<String>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      multiValueMap1.putIfAbsent((Collection<String>) null, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Integer>();
      ConstantFactory<Collection<Object>> constantFactory0 = new ConstantFactory<Collection<Object>>((Collection<Object>) null);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) multiValueMap0, (Factory<Collection<Object>>) constantFactory0);
      ConstantFactory<Object> constantFactory1 = new ConstantFactory<Object>((Object) null);
      // Undeclared exception!
      try { 
        multiValueMap1.put((LinkedList<Object>) null, constantFactory1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>> constantFactory0 = new ConstantFactory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>((LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) null, (Factory<LinkedList<AbstractMap.SimpleImmutableEntry<Object, Object>>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<Collection<AbstractMap.SimpleImmutableEntry>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap0).when(biFunction0).apply(any() , any());
      MultiValueMap multiValueMap1 = (MultiValueMap)multiValueMap0.compute("", biFunction0);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<LinkedList>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<LinkedList>, ? super LinkedList<Integer>>) multiValueMap1, factory0);
      MultiValueMap<Collection<Object>, LinkedList<Object>> multiValueMap3 = new MultiValueMap<Collection<Object>, LinkedList<Object>>();
      MultiValueMap<Collection<Object>, HashMap<Object, String>> multiValueMap4 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<HashMap<Object, String>>>) multiValueMap3);
      // Undeclared exception!
      try { 
        multiValueMap4.iterator((Object) multiValueMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, (Object) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Collection<String>>>) hashMap0);
      HashMap<ArrayList<Object>, Object> hashMap1 = new HashMap<ArrayList<Object>, Object>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Integer>>) hashMap1);
      hashMap1.put(arrayList0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ExceptionFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<String>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<String>>) multiValueMap1);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(multiValueMap0, (String) null);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      multiValueMap2.put(abstractMap_SimpleImmutableEntry0, (Object) null);
      boolean boolean0 = multiValueMap2.putAll(abstractMap_SimpleImmutableEntry0, (Collection<String>) linkedList0);
      assertEquals(1, multiValueMap2.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<Object>>();
      Integer integer0 = new Integer((-1215));
      Iterator<Collection<Object>> iterator0 = multiValueMap0.iterator((Object) integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<String>, Integer>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, ArrayList<String>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, ? super Collection<String>>) multiValueMap1);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(multiValueMap0, (String) null);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      boolean boolean0 = multiValueMap2.putAll(abstractMap_SimpleImmutableEntry0, (Collection<String>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-1976));
      MultiValueMap<Integer, HashMap<Integer, Object>> multiValueMap0 = new MultiValueMap<Integer, HashMap<Integer, Object>>();
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<HashMap<Integer, Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<Object, ArrayList<String>> multiValueMap0 = new MultiValueMap<Object, ArrayList<String>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      int int0 = multiValueMap0.size((Object) multiValueMap1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<HashMap<ArrayList<Object>, String>> linkedList0 = new LinkedList<HashMap<ArrayList<Object>, String>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Integer>>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, LinkedList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, LinkedList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      hashMap0.put("org.apache.commons.collections4.map.MultiValueMap$1", arrayList0);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      multiValueMap0.put("", (Object) null);
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.putAll((Map<? extends String, ?>) multiValueMap1);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute("", biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<Object, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<Object, HashMap<String, Object>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Integer>>) multiValueMap0, (Factory<LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<HashMap<Object, String>, ArrayList<Object>> multiValueMap1 = new MultiValueMap<HashMap<Object, String>, ArrayList<Object>>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(object0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Integer>>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute("", biFunction0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Collection<Object>>();
      Iterator<Map.Entry<LinkedList<Object>, Collection<Object>>> iterator0 = (Iterator<Map.Entry<LinkedList<Object>, Collection<Object>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
