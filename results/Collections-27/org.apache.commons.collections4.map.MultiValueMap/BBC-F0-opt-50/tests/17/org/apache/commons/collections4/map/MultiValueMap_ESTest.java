/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:03:47 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Collection<Object>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, ArrayList<Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      Collection<Object> collection0 = multiValueMap1.createCollection(1);
      multiValueMap0.put(collection0, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      hashMap0.put(linkedList0, linkedList0);
      ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
      Factory<ArrayList<ArrayList<Integer>>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<LinkedList<Object>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super ArrayList<ArrayList<Integer>>>) hashMap0, factory0);
      Collection<ArrayList<Integer>> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge("", "", biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      multiValueMap0.map = null;
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addLast(multiValueMap0);
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      MultiValueMap<ArrayList<Integer>, HashMap<Collection<Object>, Object>> multiValueMap1 = new MultiValueMap<ArrayList<Integer>, HashMap<Collection<Object>, Object>>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(linkedList0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Collection<Object>, MultiValueMap<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<MultiValueMap<Object, Integer>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends Collection<Object>, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<ConstantFactory<Integer>, Object> hashMap0 = new HashMap<ConstantFactory<Integer>, Object>();
      MultiValueMap<ConstantFactory<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Integer>, ? super Collection<Integer>>) hashMap0);
      Integer integer0 = new Integer((-2));
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      hashMap0.put(constantFactory0, constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ConstantFactory<Integer>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addLast(multiValueMap0);
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      Factory<ArrayList<Collection<Integer>>> factory0 = ConstantFactory.constantFactory((ArrayList<Collection<Integer>>) null);
      MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super ArrayList<Collection<Integer>>>) hashMap0, factory0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(linkedList1, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super LinkedList<Object>>) null, (Factory<LinkedList<Object>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addLast(multiValueMap0);
      multiValueMap0.putAll(linkedList0, (Collection<Object>) linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, ConstantFactory<String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, ConstantFactory<String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      multiValueMap0.map = null;
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.iterator((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap0).when(biFunction0).apply(any() , any());
      HashMap<String, Collection<Object>> hashMap0 = new HashMap<String, Collection<Object>>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) hashMap0);
      multiValueMap0.put((LinkedList<Object>) null, multiValueMap1);
      multiValueMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Integer, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<Integer, ConstantFactory<String>>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      multiValueMap0.map = (Map<Integer, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>>();
      multiValueMap0.put("*C4(R", "*C4(R");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(multiValueMap0);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      multiValueMap0.put("*C4(R", multiValueMap1);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      // Undeclared exception!
      try { 
        multiValueMap2.getCollection(multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(2795, 2554.8618F);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>((Map<Integer, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Collection<Integer>>>) hashMap0);
      multiValueMap0.put(linkedList0, hashMap0);
      MultiValueMap<LinkedList<String>, MultiValueMap<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<MultiValueMap<Integer, String>>>) multiValueMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) multiValueMap0, (Object) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Collection<Object>> hashMap0 = new HashMap<Integer, Collection<Object>>();
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      LinkedList<Collection<Object>> linkedList0 = new LinkedList<Collection<Object>>();
      ConstantFactory<LinkedList<Collection<Object>>> constantFactory0 = new ConstantFactory<LinkedList<Collection<Object>>>(linkedList0);
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, (Collection<Object>) null);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      Integer integer0 = new Integer(0);
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      hashMap0.put(integer0, multiValueMap0);
      MultiValueMap<Integer, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<String>>) hashMap0, factory0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) linkedList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      ArrayList<ArrayList<Integer>> arrayList0 = new ArrayList<ArrayList<Integer>>();
      Factory<ArrayList<ArrayList<Integer>>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<LinkedList<Object>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super ArrayList<ArrayList<Integer>>>) hashMap0, factory0);
      Collection<ArrayList<Integer>> collection0 = multiValueMap0.getCollection(arrayList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(linkedList0);
      MultiValueMap<String, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      Iterator<String> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Integer, ArrayList<Object>>();
      Integer integer0 = new Integer(1947);
      ArrayList<ArrayList<Object>> arrayList0 = new ArrayList<ArrayList<Object>>();
      multiValueMap0.putIfAbsent(integer0, arrayList0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add(arrayList1);
      boolean boolean0 = multiValueMap0.putAll(integer0, (Collection<ArrayList<Object>>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      boolean boolean0 = multiValueMap0.putAll((Object) arrayList0, (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(multiValueMap0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = new MultiValueMap<String, ArrayList<Object>>();
      int int0 = multiValueMap1.size((Object) hashMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      multiValueMap1.putIfAbsent(".8,{Q+0mJ1W", ".8,{Q+0mJ1W");
      MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>> multiValueMap2 = new MultiValueMap<String, AbstractMap.SimpleEntry<Object, String>>();
      multiValueMap2.putAll((Map<? extends String, ?>) multiValueMap1);
      int int0 = multiValueMap2.size((Object) ".8,{Q+0mJ1W");
      assertEquals(1, multiValueMap2.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Integer>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<String>, MultiValueMap<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<MultiValueMap<Integer, String>>>) multiValueMap0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue(object0, (Object) linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Class<Object> class0 = Object.class;
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      boolean boolean0 = multiValueMap0.containsValue((Object) class0, (Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Integer>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = multiValueMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<String>, MultiValueMap<Integer, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<MultiValueMap<Integer, String>>>) multiValueMap0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap1.containsValue(object0, (Object) linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<String, LinkedList<String>> multiValueMap0 = new MultiValueMap<String, LinkedList<String>>();
      MultiValueMap<String, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Collection<Object> collection1 = multiValueMap1.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(multiValueMap0);
      Integer integer0 = new Integer(578);
      hashMap0.put(integer0, linkedList0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Integer>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(linkedList0, linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Collection<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<String>, Collection<Integer>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      multiValueMap0.put(linkedList0, linkedList0);
      Integer integer0 = new Integer((-2181));
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.putIfAbsent("", "");
      multiValueMap0.replace("", (Object) "");
      boolean boolean0 = multiValueMap0.removeMapping("", "");
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      MultiValueMap<String, ArrayList<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<Integer>>>) multiValueMap0);
      multiValueMap1.putIfAbsent(".8,{Q+0mJ1W", ".8,{Q+0mJ1W");
      Integer integer0 = new Integer(1068);
      boolean boolean0 = multiValueMap1.removeMapping(".8,{Q+0mJ1W", integer0);
      assertFalse(multiValueMap1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<LinkedList<Object>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, LinkedList<Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleEntry<ArrayList<Object>, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super Collection<AbstractMap.SimpleEntry<ArrayList<Object>, String>>>) multiValueMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<LinkedList<String>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Integer>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super LinkedList<String>>) multiValueMap1, factory0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super Collection<Integer>>) multiValueMap2, (Factory<Collection<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, AbstractMap.SimpleEntry<Integer, Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList1);
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      multiValueMap1.putIfAbsent(linkedList0, linkedList1);
      int int0 = multiValueMap1.totalSize();
      assertEquals(1, multiValueMap1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      Collection<Object> collection0 = multiValueMap0.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll((Object) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<String, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<String, ArrayList<Integer>>();
      multiValueMap0.putIfAbsent("", "org.apache.commons.collections4.map.AbstractMapDecorator");
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap0.removeMapping("", "org.apache.commons.collections4.map.AbstractMapDecorator");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Integer, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<Integer, ConstantFactory<String>>();
      Iterator<Map.Entry<Integer, ConstantFactory<String>>> iterator0 = (Iterator<Map.Entry<Integer, ConstantFactory<String>>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
