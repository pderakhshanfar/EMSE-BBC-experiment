/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 11:27:44 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent("", arrayList0);
      multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      multiValueMap0.put((Integer) null, (Object) null);
      assertEquals(1, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Collection<String>, Collection<String>> hashMap0 = new HashMap<Collection<String>, Collection<String>>();
      MultiValueMap<Collection<String>, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<String>, ? super Collection<String>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, arrayList0);
      multiValueMap0.getCollection(arrayList0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      Collection<String> collection0 = multiValueMap1.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<MultiValueMap<Integer, Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<MultiValueMap<Integer, Object>, LinkedList<Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-622));
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      multiValueMap0.putIfAbsent(integer0, integer0);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) hashMap0);
      hashMap0.put("rnY]^9XXF2M<R[R", multiValueMap0);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<ArrayList<String>, ArrayList<Collection<String>>> multiValueMap0 = new MultiValueMap<ArrayList<String>, ArrayList<Collection<String>>>();
      MultiValueMap<ArrayList<String>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Collection<Object>>>) multiValueMap0);
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap1;
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap2.size((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<Collection<Integer>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ArrayList<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      MultiValueMap<HashMap<String, Object>, Object> multiValueMap1 = new MultiValueMap<HashMap<String, Object>, Object>();
      multiValueMap1.map = null;
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) hashMap0);
      hashMap0.put("", "");
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<ConstantFactory<String>, Object> hashMap0 = new HashMap<ConstantFactory<String>, Object>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      MultiValueMap<ConstantFactory<String>, AbstractMap.SimpleImmutableEntry<ConstantFactory<String>, LinkedList<Object>>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super Collection<AbstractMap.SimpleImmutableEntry<ConstantFactory<String>, LinkedList<Object>>>>) hashMap0);
      Factory<LinkedList<ArrayList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      hashMap0.putIfAbsent(constantFactory0, multiValueMap0);
      MultiValueMap<ConstantFactory<String>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<String>, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      HashMap<Collection<Object>, Object> hashMap1 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<String>>) hashMap1);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        multiValueMap2.removeMapping(multiValueMap1, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<LinkedList<Object>, Collection<String>> hashMap0 = new HashMap<LinkedList<Object>, Collection<String>>();
      MultiValueMap<String, Collection<String>> multiValueMap0 = new MultiValueMap<String, Collection<String>>();
      Set<String> set0 = multiValueMap0.keySet();
      ConstantFactory<Collection<String>> constantFactory0 = new ConstantFactory<Collection<String>>(set0);
      MultiValueMap<LinkedList<Object>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) constantFactory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, multiValueMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, multiValueMap0);
      ConstantFactory<ArrayList<Object>> constantFactory0 = new ConstantFactory<ArrayList<Object>>(arrayList0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super ArrayList<Object>>) hashMap0, (Factory<ArrayList<Object>>) constantFactory0);
      arrayList0.add((Object) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, constantFactory0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<ConstantFactory<Object>, Object> hashMap0 = new HashMap<ConstantFactory<Object>, Object>();
      MultiValueMap<ConstantFactory<Object>, ConstantFactory<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Object>, ? super Collection<ConstantFactory<Object>>>) hashMap0);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(multiValueMap0);
      hashMap0.put(constantFactory0, multiValueMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.put(constantFactory0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<ConstantFactory<String>> linkedList0 = new LinkedList<ConstantFactory<String>>();
      Factory<LinkedList<ConstantFactory<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<ConstantFactory<String>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Integer>>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) multiValueMap0, (Factory<LinkedList<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Collection<String>, Object>, ? super Collection<Collection<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Integer>>();
      Factory<LinkedList<HashMap<ArrayList<String>, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, HashMap<ArrayList<String>, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<HashMap<ArrayList<String>, String>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap1;
      MultiValueMap<ArrayList<String>, ArrayList<Collection<String>>> multiValueMap2 = new MultiValueMap<ArrayList<String>, ArrayList<Collection<String>>>();
      // Undeclared exception!
      try { 
        multiValueMap2.iterator((Object) multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Integer, Collection<Integer>> multiValueMap0 = new MultiValueMap<Integer, Collection<Integer>>();
      Integer integer0 = new Integer((-1));
      BiFunction<Integer, Object, Object> biFunction0 = (BiFunction<Integer, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = multiValueMap0.computeIfPresent(integer0, biFunction0);
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<ArrayList<String>, LinkedList<Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, LinkedList<Integer>>();
      Factory<LinkedList<HashMap<ArrayList<String>, String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, HashMap<ArrayList<String>, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<HashMap<ArrayList<String>, String>>>) multiValueMap0, factory0);
      multiValueMap0.map = (Map<ArrayList<String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ArrayList<String>, MultiValueMap<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, MultiValueMap<Object, Object>>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValueMap<Collection<String>, Integer> multiValueMap0 = new MultiValueMap<Collection<String>, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      multiValueMap0.putIfAbsent(multiValueMap0, arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) multiValueMap0, (Object) ":2[s(s1F0?/o\"ta?.H");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList1, biFunction0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      multiValueMap1.replaceAll(biFunction1);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<String, Integer> multiValueMap1 = new MultiValueMap<String, Integer>();
      multiValueMap0.put(arrayList0, multiValueMap1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("The factory must not be null");
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<String>) linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, LinkedList<String>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(multiValueMap0, "");
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.addFirst(linkedList1);
      boolean boolean0 = multiValueMap0.putAll(abstractMap_SimpleEntry0, (Collection<LinkedList<String>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap0);
      MultiValueMap<Object, Collection<String>> multiValueMap2 = new MultiValueMap<Object, Collection<String>>();
      Collection<Collection<String>> collection0 = multiValueMap2.getCollection(multiValueMap1);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<MultiValueMap<Integer, String>, HashMap<String, Object>> multiValueMap0 = new MultiValueMap<MultiValueMap<Integer, String>, HashMap<String, Object>>();
      Iterator<HashMap<String, Object>> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<AbstractMap.SimpleImmutableEntry<String, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) hashMap0);
      int int0 = multiValueMap0.size((Object) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) hashMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.putIfAbsent("", arrayList0);
      int int0 = multiValueMap0.size((Object) "");
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, arrayList1, biFunction0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0, (Object) arrayList0);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      Integer integer0 = new Integer((-1071));
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      multiValueMap0.putIfAbsent((Object) null, arrayList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null, (Object) ":2[s(s1F0?/o\"ta?.H");
      assertFalse(multiValueMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, "org.apache.commons.collections4.map.MultiValueMap$1$1");
      MultiValueMap<String, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultiValueMap<String, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Collection<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Object> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Object>();
      LinkedList<AbstractMap.SimpleEntry<String, Collection<String>>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<String, Collection<String>>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, linkedList0, biFunction0);
      Factory<LinkedList<AbstractMap.SimpleEntry<String, Collection<String>>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(factory0).when(biFunction1).apply(any() , any());
      multiValueMap0.computeIfPresent(arrayList0, biFunction1);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Iterator<Map.Entry<Integer, Integer>> iterator0 = (Iterator<Map.Entry<Integer, Integer>>)multiValueMap0.iterator();
      Integer integer0 = new Integer((-573));
      multiValueMap0.putIfAbsent(integer0, iterator0);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      MultiValueMap<LinkedList<Integer>, LinkedList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<LinkedList<Integer>>>) hashMap0);
      Integer integer0 = new Integer((-476));
      hashMap0.put((LinkedList<Integer>) null, integer0);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) constantFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, hashMap0, biFunction0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap1.putAll((Map<? extends ArrayList<String>, ?>) multiValueMap0);
      boolean boolean0 = multiValueMap1.removeMapping(arrayList1, hashMap0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      HashMap<Collection<String>, Object> hashMap0 = new HashMap<Collection<String>, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(arrayList0, hashMap0, biFunction0);
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      
      boolean boolean0 = multiValueMap1.removeMapping(arrayList1, hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Iterator<Map.Entry<Integer, Integer>> iterator0 = (Iterator<Map.Entry<Integer, Integer>>)multiValueMap0.iterator();
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = multiValueMap1.removeMapping(linkedList0, iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiValueMap<Object, String> multiValueMap0 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultiValueMap<Object, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<String>>>) multiValueMap0);
      multiValueMap1.putIfAbsent(linkedList0, multiValueMap0);
      boolean boolean0 = multiValueMap0.removeMapping(linkedList0, linkedList0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Integer integer0 = new Integer(2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(integer0, arrayList0);
      Iterator<Map.Entry<Integer, Integer>> iterator0 = (Iterator<Map.Entry<Integer, Integer>>)multiValueMap0.iterator();
      Integer integer1 = new Integer((-2146534694));
      multiValueMap0.putIfAbsent(integer1, iterator0);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<Integer>>();
      Collection<Object> collection0 = multiValueMap0.values();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(collection0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Collection<String>, Integer> multiValueMap0 = new MultiValueMap<Collection<String>, Integer>();
      Set<Map.Entry<Collection<String>, Object>> set0 = (Set<Map.Entry<Collection<String>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<ArrayList<String>, MultiValueMap<Object, Object>> multiValueMap0 = new MultiValueMap<ArrayList<String>, MultiValueMap<Object, Object>>();
      multiValueMap0.clear();
      assertEquals(0, multiValueMap0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiValueMap<Integer, Integer> multiValueMap0 = new MultiValueMap<Integer, Integer>();
      Iterator<Map.Entry<Integer, Integer>> iterator0 = (Iterator<Map.Entry<Integer, Integer>>)multiValueMap0.iterator();
      Integer integer0 = new Integer((-573));
      multiValueMap0.putIfAbsent(integer0, iterator0);
      MultiValueMap<Integer, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<String>>>) multiValueMap0);
      int int0 = multiValueMap1.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>>();
      Factory<Collection<LinkedList<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<Integer, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<String>>>) multiValueMap0, factory0);
      MultiValueMap<Integer, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Integer>>) multiValueMap1);
      Integer integer0 = new Integer(2);
      // Undeclared exception!
      try { 
        multiValueMap2.put(integer0, factory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }
}
