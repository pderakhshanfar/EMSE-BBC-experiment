/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:36:28 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      MultiValueMap<Integer, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<String>>>) multiValueMap0);
      Set<Integer> set0 = multiValueMap1.keySet();
      Factory<Collection<LinkedList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      Integer integer0 = new Integer((-2703));
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(integer0, biFunction0);
      MultiValueMap<Integer, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0, factory0);
      int int0 = multiValueMap2.totalSize();
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap0.put(arrayList0, (Object) null);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleEntry<Integer, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<AbstractMap.SimpleEntry<Integer, Integer>>>) multiValueMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<Collection<Integer>>, HashMap<String, Integer>> multiValueMap2 = new MultiValueMap<ArrayList<Collection<Integer>>, HashMap<String, Integer>>();
      MultiValueMap<ArrayList<Collection<Integer>>, String> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Integer>>, ? super Collection<String>>) multiValueMap2);
      multiValueMap1.putIfAbsent(arrayList0, multiValueMap3);
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      multiValueMap0.getCollection(linkedList0);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, String> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, String>();
      Collection<String> collection0 = multiValueMap0.createCollection((-3));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<LinkedList<String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<LinkedList<String>, ArrayList<Object>>();
      MultiValueMap<LinkedList<String>, ArrayList<LinkedList<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<ArrayList<LinkedList<Integer>>>>) multiValueMap0);
      multiValueMap0.map = (Map<LinkedList<String>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Collection<Integer>>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Collection<Integer>>, Object>();
      LinkedList<HashMap<Object, Integer>> linkedList0 = new LinkedList<HashMap<Object, Integer>>();
      ConstantFactory<LinkedList<HashMap<Object, Integer>>> constantFactory0 = new ConstantFactory<LinkedList<HashMap<Object, Integer>>>(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      AbstractMap.SimpleEntry<String, Collection<Integer>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Collection<Integer>>("}Z", linkedList1);
      AbstractMap.SimpleEntry<String, Collection<Integer>> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Collection<Integer>>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleEntry1, abstractMap_SimpleEntry1);
      MultiValueMap<AbstractMap.SimpleEntry<String, Collection<Integer>>, HashMap<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<String, Collection<Integer>>, ? super LinkedList<HashMap<Object, Integer>>>) hashMap0, (Factory<LinkedList<HashMap<Object, Integer>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.util.AbstractMap$SimpleEntry
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Integer>, String>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Integer>, String>, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(multiValueMap0, multiValueMap0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.MultiValueMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<ConstantFactory<Integer>, Object> hashMap0 = new HashMap<ConstantFactory<Integer>, Object>();
      Integer integer0 = new Integer((-1));
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      hashMap0.put(constantFactory0, (Object) null);
      Factory<Collection<ExceptionFactory<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ConstantFactory<Integer>, ExceptionFactory<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ConstantFactory<Integer>, ? super Collection<ExceptionFactory<String>>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ConstantFactory<Integer>, ?>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) hashMap0);
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, String> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Object, Collection<Object>> multiValueMap0 = new MultiValueMap<Object, Collection<Object>>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(multiValueMap1, (Object) null);
      hashMap0.put(abstractMap_SimpleEntry0, "");
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, ArrayList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<ArrayList<Object>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap2.putAll((Map<? extends AbstractMap.SimpleEntry<Object, Object>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Collection<Object>> arrayList1 = new ArrayList<Collection<Object>>();
      arrayList1.add((Collection<Object>) null);
      MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      Factory<Collection<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(arrayList0, (Collection<Collection<Object>>) arrayList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) multiValueMap0);
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      ArrayList<Collection<Object>> arrayList1 = new ArrayList<Collection<Object>>();
      arrayList1.add((Collection<Object>) arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(arrayList0, (Collection<Collection<Object>>) arrayList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, HashMap<Integer, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<HashMap<Integer, Object>>>) hashMap0);
      Integer integer0 = new Integer((-2792));
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.put(integer0, hashMap1);
      ArrayList<HashMap<Integer, Object>> arrayList0 = new ArrayList<HashMap<Integer, Object>>();
      arrayList0.add(hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(integer0, (Collection<HashMap<Integer, Object>>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Object> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Object>();
      Integer integer0 = new Integer(2);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "hw,");
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, String>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      MultiValueMap<String, Object> multiValueMap2 = new MultiValueMap<String, Object>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(abstractMap_SimpleEntry0, multiValueMap2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      MultiValueMap<Collection<Integer>, MultiValueMap<Collection<Integer>, Integer>> multiValueMap1 = new MultiValueMap<Collection<Integer>, MultiValueMap<Collection<Integer>, Integer>>();
      MultiValueMap<Collection<Integer>, ConstantFactory<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<ConstantFactory<String>>>) multiValueMap1);
      multiValueMap1.map = (Map<Collection<Integer>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, ArrayList<Integer>> multiValueMap0 = new MultiValueMap<LinkedList<Object>, ArrayList<Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      multiValueMap0.map = (Map<LinkedList<Object>, Object>) hashMap0;
      MultiValueMap<LinkedList<Object>, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<LinkedList<String>>>) multiValueMap0);
      hashMap0.put(linkedList0, "");
      MultiValueMap<String, String> multiValueMap2 = new MultiValueMap<String, String>();
      // Undeclared exception!
      try { 
        multiValueMap1.put(linkedList0, multiValueMap2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Factory<ArrayList<Collection<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super ArrayList<Collection<Object>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValueMap<Collection<Integer>, Object> multiValueMap0 = new MultiValueMap<Collection<Integer>, Object>();
      ArrayList<AbstractMap.SimpleEntry<String, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<String, Object>>();
      MultiValueMap<Collection<Integer>, MultiValueMap<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<MultiValueMap<Object, Integer>>>) multiValueMap0);
      multiValueMap0.map = (Map<Collection<Integer>, Object>) multiValueMap1;
      Factory<ArrayList<AbstractMap.SimpleEntry<String, Object>>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<String, Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super ArrayList<AbstractMap.SimpleEntry<String, Object>>>) multiValueMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap2.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Collection<Object>> arrayList1 = new ArrayList<Collection<Object>>();
      arrayList0.add((Object) multiValueMap0);
      arrayList1.add((Collection<Object>) arrayList0);
      multiValueMap0.putAll(arrayList0, (Collection<Collection<Object>>) arrayList1);
      MultiValueMap<String, String> multiValueMap1 = new MultiValueMap<String, String>();
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) arrayList1, (Object) arrayList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>();
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>();
      Factory<ArrayList<Collection<String>>> factory0 = ConstantFactory.constantFactory(arrayList0);
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super ArrayList<Collection<String>>>) hashMap0, factory0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>((String) null);
      hashMap0.put(arrayList1, constantFactory0);
      HashMap<Collection<Integer>, String> hashMap1 = new HashMap<Collection<Integer>, String>();
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) arrayList0, (Object) hashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ConstantFactory cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put((Object) null, (Object) null);
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) "-K:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<String, String> multiValueMap0 = new MultiValueMap<String, String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(multiValueMap0, "VB-J6dYEe!BvD6C");
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.containsValue((Object) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      Collection<Integer> collection0 = multiValueMap0.getCollection(linkedList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Object>, LinkedList<Object>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Object>, LinkedList<Object>>();
      Iterator<LinkedList<Object>> iterator0 = multiValueMap0.iterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, (Object) null);
      ArrayList<Collection<Object>> arrayList1 = new ArrayList<Collection<Object>>();
      arrayList1.add((Collection<Object>) arrayList0);
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Collection<Object>>) arrayList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Collection<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.putAll(arrayList0, (Collection<Collection<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Collection<Integer>>> multiValueMap0 = new MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Collection<Integer>>>();
      LinkedList<Collection<Integer>> linkedList0 = new LinkedList<Collection<Integer>>();
      ConstantFactory<Collection<Collection<Integer>>> constantFactory0 = new ConstantFactory<Collection<Collection<Integer>>>(linkedList0);
      MultiValueMap<Object, Collection<Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<Collection<Integer>>>) multiValueMap0, (Factory<Collection<Collection<Integer>>>) constantFactory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = multiValueMap1.size((Object) arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Object object0 = multiValueMap0.put(arrayList1, arrayList0);
      Factory<LinkedList<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Collection<String>>>) multiValueMap0, factory0);
      int int0 = multiValueMap1.size(object0);
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      multiValueMap0.put(arrayList1, arrayList0);
      Factory<LinkedList<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Collection<String>>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList0, (Object) factory0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiValueMap<Integer, Collection<String>> multiValueMap0 = new MultiValueMap<Integer, Collection<String>>();
      ArrayList<HashMap<Integer, Object>> arrayList0 = new ArrayList<HashMap<Integer, Object>>();
      ConstantFactory<ArrayList<HashMap<Integer, Object>>> constantFactory0 = new ConstantFactory<ArrayList<HashMap<Integer, Object>>>(arrayList0);
      MultiValueMap<Integer, HashMap<Integer, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super ArrayList<HashMap<Integer, Object>>>) multiValueMap0, (Factory<ArrayList<HashMap<Integer, Object>>>) constantFactory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, (Object) constantFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      multiValueMap0.put(arrayList1, arrayList0);
      Factory<LinkedList<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Collection<String>>>) multiValueMap0, factory0);
      boolean boolean0 = multiValueMap1.containsValue((Object) arrayList1, (Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Collection<Integer>, Object> hashMap0 = new HashMap<Collection<Integer>, Object>();
      MultiValueMap<Collection<Integer>, ArrayList<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<ArrayList<Integer>>>) hashMap0);
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValueMap<Collection<Object>, String> multiValueMap0 = new MultiValueMap<Collection<Object>, String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      multiValueMap0.putIfAbsent(arrayList0, arrayList0);
      MultiValueMap<Collection<Object>, Object> multiValueMap1 = new MultiValueMap<Collection<Object>, Object>();
      multiValueMap1.putAll((Map<? extends Collection<Object>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MultiValueMap<Object, Integer> multiValueMap1 = new MultiValueMap<Object, Integer>();
      multiValueMap0.put(arrayList0, multiValueMap1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantFactory<LinkedList<Object>> constantFactory0 = new ConstantFactory<LinkedList<Object>>(linkedList0);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>((Map<Object, ? super LinkedList<Object>>) hashMap0, (Factory<LinkedList<Object>>) constantFactory0);
      multiValueMap0.replace(arrayList0, (Object) multiValueMap2);
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      hashMap0.put(hashMap1, linkedList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) null);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      arrayList0.add((Object) hashMap1);
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, (Object) null);
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) null);
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, (Object) null);
      assertEquals(0, arrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<ArrayList<Collection<Integer>>, HashMap<String, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Collection<Integer>>, HashMap<String, Integer>>();
      MultiValueMap<ArrayList<Collection<Integer>>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Collection<Integer>>, ? super Collection<String>>) multiValueMap0);
      MultiValueMap<Collection<Object>, LinkedList<String>> multiValueMap2 = new MultiValueMap<Collection<Object>, LinkedList<String>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = multiValueMap2.removeMapping(multiValueMap1, hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(arrayList0, arrayList0);
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<LinkedList<String>>>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping(arrayList0, (Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiValueMap<HashMap<String, Object>, Integer> multiValueMap0 = new MultiValueMap<HashMap<String, Object>, Integer>();
      MultiValueMap<HashMap<String, Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super Collection<ArrayList<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<HashMap<String, Object>, ? super LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) multiValueMap1, (Factory<LinkedList<AbstractMap.SimpleEntry<Object, Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      multiValueMap0.put(arrayList1, arrayList0);
      Factory<LinkedList<Collection<String>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Collection<String>>>) multiValueMap0, factory0);
      ArrayList<Collection<Integer>> arrayList2 = new ArrayList<Collection<Integer>>();
      multiValueMap1.iterator((Object) arrayList2);
      assertEquals(1, multiValueMap0.size());
      assertFalse(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiValueMap<String, ArrayList<Object>> multiValueMap0 = new MultiValueMap<String, ArrayList<Object>>();
      MultiValueMap<String, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap0);
      MultiValueMap<Object, Object> multiValueMap2 = new MultiValueMap<Object, Object>();
      Collection<Object> collection0 = multiValueMap2.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap1.putAll((String) null, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, HashMap<String, Integer>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, HashMap<String, Integer>>();
      Set<Map.Entry<ArrayList<Object>, Object>> set0 = (Set<Map.Entry<ArrayList<Object>, Object>>)multiValueMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<AbstractMap.SimpleImmutableEntry<Collection<Integer>, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Collection<Integer>, Object>, Object>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Collection<Integer>, Object>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Collection<Integer>, Object>, ? super LinkedList<Integer>>) hashMap0, factory0);
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Collection<Integer>, Object>, Integer>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<Collection<Integer>, Object>, Integer>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }
}
