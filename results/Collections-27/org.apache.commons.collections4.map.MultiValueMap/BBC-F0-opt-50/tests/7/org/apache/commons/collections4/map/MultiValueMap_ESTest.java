/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:37:20 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) hashMap0);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)multiValueMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      multiValueMap0.putAll((Object) null, (Collection<LinkedList<Object>>) linkedList0);
      MultiValueMap<Object, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<ConstantFactory<Object>>>) multiValueMap0);
      int int0 = multiValueMap1.size((Object) null);
      assertEquals(1, multiValueMap0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Object, Integer>>>) hashMap0);
      Collection<AbstractMap.SimpleEntry<Object, Integer>> collection0 = multiValueMap0.createCollection(0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<Object, Collection<String>> multiValueMap0 = new MultiValueMap<Object, Collection<String>>();
      multiValueMap0.map = (Map<Object, Object>) multiValueMap0;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<ExceptionFactory<String>, Integer> multiValueMap0 = new MultiValueMap<ExceptionFactory<String>, Integer>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<Object, LinkedList<String>> multiValueMap0 = new MultiValueMap<Object, LinkedList<String>>();
      Integer integer0 = new Integer(278);
      ConstantFactory<Object> constantFactory0 = new ConstantFactory<Object>(integer0);
      multiValueMap0.put((Object) null, constantFactory0);
      MultiValueMap<Object, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<String>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: org.apache.commons.collections4.functors.ConstantFactory
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Integer>>) hashMap0);
      LinkedList<ArrayList<Collection<String>>> linkedList1 = new LinkedList<ArrayList<Collection<String>>>();
      ConstantFactory<LinkedList<ArrayList<Collection<String>>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Collection<String>>>>(linkedList1);
      Integer integer0 = new Integer((-1));
      hashMap0.put(linkedList0, integer0);
      MultiValueMap<LinkedList<Integer>, ArrayList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<ArrayList<Collection<String>>>>) multiValueMap0, (Factory<LinkedList<ArrayList<Collection<String>>>>) constantFactory0);
      // Undeclared exception!
      try { 
        multiValueMap1.totalSize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Integer) null, (Collection<Object>) linkedList0);
      MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<AbstractMap.SimpleImmutableEntry<String, Integer>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<Object>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<Object>>();
      multiValueMap0.map = null;
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ConstantFactory<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<ConstantFactory<Object>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.size((Object) multiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-3));
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.size((Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(2696);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll(integer0, (Collection<Object>) linkedList0);
      MultiValueMap<String, LinkedList<String>> multiValueMap1 = new MultiValueMap<String, LinkedList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap1.removeMapping(multiValueMap0, linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put((Integer) null, hashMap0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      // Undeclared exception!
      try { 
        multiValueMap0.removeMapping((Object) null, hashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) hashMap0);
      hashMap0.put(linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Object, Integer>>>) multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      hashMap0.put(linkedList0, "");
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends LinkedList<Object>, ?>) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) multiValueMap0);
      multiValueMap0.putAll((Integer) null, (Collection<Object>) linkedList0);
      MultiValueMap<LinkedList<Object>, LinkedList<Object>> multiValueMap1 = new MultiValueMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<LinkedList<Object>> linkedList1 = new LinkedList<LinkedList<Object>>();
      linkedList1.add(linkedList0);
      // Undeclared exception!
      try { 
        multiValueMap1.putAll(linkedList0, (Collection<LinkedList<Object>>) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-3));
      linkedList0.addFirst(integer0);
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll(integer0, (Collection<Object>) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<ArrayList<Object>, ConstantFactory<String>>();
      Factory<LinkedList<ArrayList<Object>>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super LinkedList<ArrayList<Object>>>) multiValueMap0, factory0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      MultiValueMap<Object, Integer> multiValueMap2 = new MultiValueMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      Object object0 = multiValueMap2.getOrDefault(integer0, multiValueMap0);
      // Undeclared exception!
      try { 
        multiValueMap1.put(arrayList0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Object>();
      multiValueMap0.map = null;
      Integer integer0 = new Integer(1068);
      // Undeclared exception!
      try { 
        multiValueMap0.put((LinkedList<Integer>) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, ArrayList<Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<ArrayList<Object>>>) hashMap0);
      Integer integer0 = new Integer(1605);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.put(integer0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Factory<LinkedList<Object>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<Object>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<ArrayList<Object>, Object> hashMap0 = new HashMap<ArrayList<Object>, Object>();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<String>>) hashMap0, (Factory<Collection<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("*B", hashMap0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, "*B");
      MultiValueMap<ConstantFactory<Object>, ArrayList<String>> multiValueMap0 = new MultiValueMap<ConstantFactory<Object>, ArrayList<String>>();
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValueMap<ExceptionFactory<Collection<String>>, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap0 = new MultiValueMap<ExceptionFactory<Collection<String>>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      MultiValueMap<ExceptionFactory<Collection<String>>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ExceptionFactory<Collection<String>>, ? super Collection<Object>>) multiValueMap0);
      multiValueMap0.map = (Map<ExceptionFactory<Collection<String>>, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap1.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValueMap<ConstantFactory<Integer>, String> multiValueMap0 = new MultiValueMap<ConstantFactory<Integer>, String>();
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      Factory<LinkedList<ArrayList<String>>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<ConstantFactory<Integer>, ArrayList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<ConstantFactory<Integer>, ? super LinkedList<ArrayList<String>>>) multiValueMap0, factory0);
      LinkedList<LinkedList<Object>> linkedList1 = new LinkedList<LinkedList<Object>>();
      ConstantFactory<LinkedList<LinkedList<Object>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<Object>>>(linkedList1);
      MultiValueMap<ConstantFactory<Integer>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ConstantFactory<Integer>, ? super LinkedList<LinkedList<Object>>>) multiValueMap1, (Factory<LinkedList<LinkedList<Object>>>) constantFactory0);
      multiValueMap0.map = (Map<ConstantFactory<Integer>, Object>) multiValueMap2;
      // Undeclared exception!
      try { 
        multiValueMap0.getCollection((Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValueMap<HashMap<Integer, Object>, String> multiValueMap0 = new MultiValueMap<HashMap<Integer, Object>, String>();
      multiValueMap0.map = null;
      // Undeclared exception!
      try { 
        multiValueMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Collection<Object>, Object> hashMap0 = new HashMap<Collection<Object>, Object>();
      MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Collection<Object>, ? super Collection<Collection<Integer>>>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put(integer0, arrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer1 = new Integer(4);
      hashMap0.put(integer1, linkedList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      multiValueMap0.putAll((Map<? extends Integer, ?>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-2));
      hashMap0.put(integer0, (Object) null);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put(integer0, integer0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      // Undeclared exception!
      try { 
        multiValueMap0.containsValue((Object) constantFactory0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Object> multiValueMap0 = new MultiValueMap<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent(linkedList0, function0);
      int int0 = multiValueMap0.totalSize();
      assertFalse(multiValueMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MultiValueMap<ArrayList<Object>, Integer> multiValueMap0 = new MultiValueMap<ArrayList<Object>, Integer>();
      Collection<Integer> collection0 = multiValueMap0.getCollection(linkedList0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> multiValueMap0 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, Object>>>) hashMap0);
      Integer integer0 = new Integer(512);
      Iterator<AbstractMap.SimpleImmutableEntry<Object, Object>> iterator0 = multiValueMap0.iterator((Object) integer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(1);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put(integer0, "YwQcf$Y37kvfT");
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        multiValueMap0.iterator((Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<Object, String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<Object, String>>();
      Integer integer0 = new Integer(1876);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(multiValueMap0, integer0);
      boolean boolean0 = multiValueMap1.putAll(abstractMap_SimpleImmutableEntry0, (Collection<AbstractMap.SimpleEntry<Object, String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      int int0 = multiValueMap0.size((Object) hashMap0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Object object0 = multiValueMap0.put(linkedList0, arrayList0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList1.add((Object) linkedList0);
      boolean boolean0 = multiValueMap0.containsValue(object0, (Object) arrayList1);
      assertEquals(1, multiValueMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Integer>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Integer>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Integer>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      multiValueMap0.put(linkedList0, linkedList0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = multiValueMap0.containsValue((Object) arrayList0, (Object) arrayList0);
      assertFalse(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiValueMap<Integer, LinkedList<String>> multiValueMap0 = new MultiValueMap<Integer, LinkedList<String>>();
      Collection<Object> collection0 = multiValueMap0.values();
      Collection<Object> collection1 = multiValueMap0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(2676);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) integer0);
      multiValueMap0.putAll(integer0, (Collection<Object>) linkedList0);
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      multiValueMap1.putAll((Map<?, ?>) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiValueMap<Integer, Object> multiValueMap0 = new MultiValueMap<Integer, Object>();
      Integer integer0 = new Integer(656);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add((Object) linkedList1);
      multiValueMap0.putAll(integer0, (Collection<Object>) linkedList0);
      boolean boolean0 = multiValueMap0.containsValue((Object) linkedList1);
      assertEquals(1, multiValueMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-29));
      hashMap0.put(integer0, linkedList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.containsValue((Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-3));
      hashMap0.put(integer0, linkedList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      linkedList0.add((Object) multiValueMap0);
      Object object0 = multiValueMap0.put(integer0, integer0);
      boolean boolean0 = multiValueMap0.removeMapping(object0, hashMap0);
      assertEquals(1, hashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-3));
      hashMap0.put(integer0, linkedList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      linkedList0.add((Object) multiValueMap0);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, hashMap0);
      assertTrue(multiValueMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      boolean boolean0 = multiValueMap0.removeMapping(hashMap1, hashMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-3));
      hashMap0.put(integer0, linkedList0);
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      boolean boolean0 = multiValueMap0.removeMapping(integer0, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiValueMap<Object, LinkedList<Object>> multiValueMap0 = new MultiValueMap<Object, LinkedList<Object>>();
      MultiValueMap<Object, Object> multiValueMap1 = null;
      try {
        multiValueMap1 = new MultiValueMap<Object, Object>((Map<Object, ? super LinkedList<Object>>) multiValueMap0, (Factory<LinkedList<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();
      MultiValueMap<String, AbstractMap.SimpleImmutableEntry<Object, String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<AbstractMap.SimpleImmutableEntry<Object, String>>>) multiValueMap0);
      Collection<Object> collection0 = multiValueMap1.values();
      Function<Object, Object> function0 = Function.identity();
      multiValueMap0.computeIfAbsent("z2&6axG+I4l%N", function0);
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      Factory<Collection<Object>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap2 = new MultiValueMap<LinkedList<Integer>, Object>((Map<LinkedList<Integer>, ? super Collection<Object>>) hashMap0, factory0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        multiValueMap2.putAll(linkedList0, collection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.String
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<LinkedList<Integer>, Object> hashMap0 = new HashMap<LinkedList<Integer>, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap0.put(linkedList0, linkedList0);
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super Collection<Integer>>) hashMap0);
      LinkedList<ArrayList<Collection<String>>> linkedList1 = new LinkedList<ArrayList<Collection<String>>>();
      ConstantFactory<LinkedList<ArrayList<Collection<String>>>> constantFactory0 = new ConstantFactory<LinkedList<ArrayList<Collection<String>>>>(linkedList1);
      MultiValueMap<LinkedList<Integer>, ArrayList<Collection<String>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<ArrayList<Collection<String>>>>) multiValueMap0, (Factory<LinkedList<ArrayList<Collection<String>>>>) constantFactory0);
      int int0 = multiValueMap1.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MultiValueMap<Integer, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<Object>>) hashMap0);
      Integer integer0 = new Integer(809);
      MultiValueMap<LinkedList<Integer>, Object> multiValueMap1 = new MultiValueMap<LinkedList<Integer>, Object>();
      Collection<Object> collection0 = multiValueMap1.values();
      assertNotNull(collection0);
      
      boolean boolean0 = multiValueMap0.putAll(integer0, collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      multiValueMap0.clear();
      assertTrue(multiValueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>();
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, String>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, String>>)multiValueMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, String>, ? super Collection<ArrayList<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiValueMap<Integer, String> multiValueMap0 = new MultiValueMap<Integer, String>();
      Factory<LinkedList<Integer>> factory0 = ConstantFactory.constantFactory((LinkedList<Integer>) null);
      MultiValueMap<Integer, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<Integer>>) multiValueMap0, factory0);
      Collection<Integer> collection0 = multiValueMap1.createCollection(108);
      assertNull(collection0);
  }
}
