/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:13:29 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC(0L, false);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 59);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:59", dateTimeZone0.getID());
      assertEquals("+01:59", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-23), (-23));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -23
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -148
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      dateTimeZone0.hashCode();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      assertNotNull(timeZone0);
      assertEquals("VST", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("VST", timeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(2295);
      assertNotNull(dateTimeZone1);
      assertEquals("+00:00:02.295", dateTimeZone1.getID());
      assertEquals("+00:00:02.295", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      
      LocalDateTime localDateTime0 = new LocalDateTime((-1L), dateTimeZone1);
      assertNotNull(localDateTime0);
      assertEquals("+00:00:02.295", dateTimeZone1.getID());
      assertEquals("+00:00:02.295", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("VST", timeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("+00:00:02.295", dateTimeZone1.getID());
      assertEquals("+00:00:02.295", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(578);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=+00:00:00.578,offset=578,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals(578, timeZone0.getRawOffset());
      assertEquals("+00:00:00.578", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-763));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.763", dateTimeZone0.getID());
      assertEquals("-00:00:00.763", dateTimeZone0.toString());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.763", dateTimeZone0.getID());
      assertEquals("-00:00:00.763", dateTimeZone0.toString());
      assertEquals("-00:00:00.763", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:00.763,offset=-763,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals((-763), timeZone0.getRawOffset());
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.UTC.previousTransition(0L);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2199));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.199", dateTimeZone0.getID());
      assertEquals("-00:00:02.199", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.previousTransition(1181L);
      assertEquals(1181L, long0);
      assertEquals("-00:00:02.199", dateTimeZone0.getID());
      assertEquals("-00:00:02.199", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:59:59.999", dateTimeZone0.toString());
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.previousTransition((-86399999));
      assertEquals((-86399999L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:59:59.999", dateTimeZone0.toString());
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.nextTransition(0L);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.nextTransition(1000034L);
      assertEquals(1000034L, long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = fixedDateTimeZone0.nextTransition((-190L));
      assertEquals((-190L), long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("HST");
      assertNotNull(timeZone0);
      assertEquals("HST", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("HST", timeZone0.getID());
      assertEquals("Pacific/Honolulu", dateTimeZone0.toString());
      assertEquals("Pacific/Honolulu", dateTimeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertEquals("HST", timeZone0.getID());
      assertEquals("Pacific/Honolulu", dateTimeZone0.toString());
      assertEquals("Pacific/Honolulu", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.getStandardOffset(0L);
      assertEquals(0, int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.004", dateTimeZone0.getID());
      assertEquals("+00:00:00.004", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.getStandardOffset(4);
      assertEquals(4, int0);
      assertEquals("+00:00:00.004", dateTimeZone0.getID());
      assertEquals("+00:00:00.004", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2199));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.199", dateTimeZone0.toString());
      assertEquals("-00:00:02.199", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.getStandardOffset((-2199L));
      assertEquals((-2199), int0);
      assertEquals("-00:00:02.199", dateTimeZone0.toString());
      assertEquals("-00:00:02.199", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1869));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.869", dateTimeZone0.getID());
      assertEquals("-00:00:01.869", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTime dateTime0 = new DateTime((long) 14);
      assertNotNull(dateTime0);
      assertEquals(14L, dateTime0.getMillis());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals((-1869), int0);
      assertEquals("-00:00:01.869", dateTimeZone0.getID());
      assertEquals("-00:00:01.869", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(14L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int0 = dateTimeZone0.UTC.getOffset((-1810L));
      assertEquals(0, int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      
      int int0 = dateTimeZone0.getOffset((-42521587200000L));
      assertEquals(3600000, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-637));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.637", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.637", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset((-1336L));
      assertEquals((-637), int0);
      assertEquals("-00:00:00.637", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.637", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("HST");
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("HST", dateTimeZone0.getID());
      assertEquals("HST", dateTimeZone0.toString());
      
      String string0 = dateTimeZone0.getNameKey(1L);
      assertNotNull(string0);
      assertEquals("HST", string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("HST", dateTimeZone0.getID());
      assertEquals("HST", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = fixedDateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, (-2155L));
      assertEquals((-2155L), long0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      
      String string0 = dateTimeZone0.getID();
      assertNotNull(string0);
      assertEquals("+01:00", string0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      boolean boolean0 = dateTimeZone0.equals(dateTimeZone0);
      assertTrue(boolean0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertUTCToLocal(0);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.convertLocalToUTC(0L, false, 0L);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      long long0 = fixedDateTimeZone0.convertLocalToUTC(1L, false, (-1359L));
      assertEquals(1L, long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(16);
      assertNotNull(dateTimeZone0);
      assertEquals("+16:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+16:00", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 16, false);
      assertEquals((-57599984L), long0);
      assertEquals("+16:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+16:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.UTC.adjustOffset(0, true);
      assertEquals(0L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      long long0 = fixedDateTimeZone0.adjustOffset(562640715776L, false);
      assertEquals(562640715776L, long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036816889813L), true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC((-4133L), false, (-1538L));
      assertEquals((-4133L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("HST");
      assertNotNull(timeZone0);
      assertEquals("HST", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("HST", timeZone0.getID());
      assertEquals("Pacific/Honolulu", dateTimeZone0.toString());
      assertEquals("Pacific/Honolulu", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertUTCToLocal((-9223372036816889809L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      long long0 = fixedDateTimeZone0.convertUTCToLocal((-57600000L));
      assertEquals((-57600000L), long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.004", dateTimeZone0.toString());
      assertEquals("+00:00:00.004", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      String string0 = dateTimeZone0.getName((long) 4, (Locale) null);
      assertNotNull(string0);
      assertEquals("+00:00:00.004", string0);
      assertEquals("+00:00:00.004", dateTimeZone0.toString());
      assertEquals("+00:00:00.004", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      String string0 = dateTimeZone0.getShortName(0L, (Locale) null);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-9), 43);
      assertNotNull(dateTimeZone0);
      assertEquals("-09:43", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-09:43", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-1260), (-2202));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -1260
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(29, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 29
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID(" WZ<4xQ:[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id ' WZ<4xQ:[' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-763));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.763", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.763", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.adjustOffset((-763), false);
      assertEquals((-763L), long0);
      assertEquals("-00:00:00.763", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.763", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2199));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.199", dateTimeZone0.toString());
      assertEquals("-00:00:02.199", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals("-00:00:02.199", dateTimeZone0.toString());
      assertEquals("-00:00:02.199", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, CopticChronology.AM);
      
      LocalDateTime localDateTime0 = new LocalDateTime(10800000L, (Chronology) copticChronology0);
      assertNotNull(localDateTime0);
      assertEquals("-00:00:02.199", dateTimeZone0.toString());
      assertEquals("-00:00:02.199", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("-00:00:02.199", dateTimeZone0.toString());
      assertEquals("-00:00:02.199", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-763));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.763", dateTimeZone0.getID());
      assertEquals("-00:00:00.763", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-763), false);
      assertEquals(0L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.763", dateTimeZone0.getID());
      assertEquals("-00:00:00.763", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("HST");
      assertNotNull(timeZone0);
      assertEquals("HST", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("HST", timeZone0.getID());
      assertEquals("Pacific/Honolulu", dateTimeZone0.getID());
      assertEquals("Pacific/Honolulu", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, false, (-260L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036816889813L), false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC(10800000L, true);
      assertEquals(7200000L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036816889800L), true, (-9223372036816889800L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.convertUTCToLocal((-2199L));
      assertEquals(3597801L, long0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
      assertEquals(28800000, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(fixedDateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(752L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      int int0 = dateTimeZone0.getOffsetFromLocal((-60172699L));
      assertEquals(43200000, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("HST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
      assertEquals((-37886000), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      int int0 = dateTimeZone0.getOffsetFromLocal((-9223372036816889813L));
      assertEquals(43200000, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("HST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(1L);
      assertEquals((-36000000), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      boolean boolean0 = dateTimeZone0.isStandardOffset(1);
      assertTrue(boolean0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      boolean boolean0 = dateTimeZone0.isStandardOffset(31L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(14);
      DateTime dateTime0 = new DateTime((long) 14);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals("+14:00", dateTimeZone0.toString());
      assertEquals(50400000, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(43);
      Locale locale0 = new Locale(" ", "", " ");
      String string0 = dateTimeZone0.UTC.getName(1L, locale0);
      assertEquals("+00:00", string0);
      assertEquals("+00:00:00.043", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.ITALY;
      String string0 = fixedDateTimeZone0.getShortName((-4563L), locale0);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(43);
      Locale locale0 = new Locale(" ", "", " ");
      String string0 = dateTimeZone0.getShortName((-153L), locale0);
      assertEquals("+00:00:00.043", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("-18:00", dateTimeZone1.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(9223372036854775807L, dateTimeZone0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("+00:00:00.001");
      assertEquals("+00:00:00.001", dateTimeZone1.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(960, "GMT-");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("+18:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "Iy");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Iy' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(2145338290);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 2145338290
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-1933724512));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -1933724512
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-9));
      dateTimeZone0.isFixed();
      assertEquals("-09:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(23, 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 102
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -646
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      dateTimeZone0.getNameKey(1);
      assertEquals("+00:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-00:00:00.763");
      assertEquals("-00:00:00.763", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      Integer integer0 = new Integer(0);
      boolean boolean0 = dateTimeZone0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      // Undeclared exception!
      try { 
        LocalTime.parse("VocQzQ30");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"VocQzQ30\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      long long0 = dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 1);
      assertEquals(1L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      String string0 = dateTimeZone0.toString();
      assertEquals("+23:59:59.999", string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(43);
      String string0 = dateTimeZone0.getName((long) 4);
      assertEquals("+00:00:00.043", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("HST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      TimeZone timeZone1 = dateTimeZone0.toTimeZone();
      assertFalse(timeZone1.equals((Object)timeZone0));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-763), "EAT");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(578, set0.size());
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(fixedDateTimeZone0);
      
      ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-763));
      String string0 = dateTimeZone0.getShortName(255L);
      assertEquals("-00:00:00.763", string0);
  }
}
