/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:12:10 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3272);
      assertEquals("+00:00:03.272", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.272", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(0L, true);
      assertEquals("+00:00:03.272", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.272", dateTimeZone0.toString());
      assertEquals((-3272L), long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1033);
      assertEquals("+00:00:01.033", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.033", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 1033, true);
      assertEquals("+00:00:01.033", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.033", dateTimeZone0.getID());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+18:00", dateTimeZone0.getID());
      assertEquals("+18:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
      assertEquals("-23:59:59.999", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 59);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:59", dateTimeZone0.getID());
      assertEquals("+01:59", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(23);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+23:00", dateTimeZone0.toString());
      assertEquals("+23:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      assertEquals("-23:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-18:00");
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-18:00", dateTimeZone0.toString());
      assertEquals("-18:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1528);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.528", dateTimeZone0.toString());
      assertEquals("+00:00:01.528", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      dateTimeZone0.hashCode();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.528", dateTimeZone0.toString());
      assertEquals("+00:00:01.528", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("America/Los_Angeles");
      assertEquals("America/Los_Angeles", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("America/Los_Angeles", timeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone1.getID());
      assertEquals("America/Los_Angeles", dateTimeZone1.toString());
      assertNotNull(dateTimeZone1);
      
      boolean boolean0 = dateTimeZone1.isLocalDateTimeGap(localDateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("America/Los_Angeles", timeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone1.getID());
      assertEquals("America/Los_Angeles", dateTimeZone1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3272);
      assertEquals("+00:00:03.272", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.272", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("+00:00:03.272", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.272", dateTimeZone0.toString());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(3272, timeZone0.getRawOffset());
      assertEquals("+00:00:03.272", timeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=+00:00:03.272,offset=3272,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2338));
      assertEquals("-00:00:02.338", dateTimeZone0.toString());
      assertEquals("-00:00:02.338", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("-00:00:02.338", dateTimeZone0.toString());
      assertEquals("-00:00:02.338", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("-00:00:02.338", timeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:02.338,offset=-2338,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals((-2338), timeZone0.getRawOffset());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 45);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:45", dateTimeZone0.getID());
      assertEquals("+00:45", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.previousTransition(0L);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:45", dateTimeZone0.getID());
      assertEquals("+00:45", dateTimeZone0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1528);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.528", dateTimeZone0.toString());
      assertEquals("+00:00:01.528", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.previousTransition(1528);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.528", dateTimeZone0.toString());
      assertEquals("+00:00:01.528", dateTimeZone0.getID());
      assertEquals(1528L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.UTC.previousTransition((-6539936L));
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals((-6539936L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.nextTransition(0L);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.nextTransition(3677);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3677L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(16, 16);
      assertEquals("+16:16", dateTimeZone0.toString());
      assertEquals("+16:16", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.UTC.nextTransition((-283L));
      assertEquals("+16:16", dateTimeZone0.toString());
      assertEquals("+16:16", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-283L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1603, "VST");
      assertEquals(1603, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=1603,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("VST", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals(1603, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=1603,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("VST", simpleTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertEquals(1603, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=1603,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("VST", simpleTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getStandardOffset(1229L);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3272);
      assertEquals("+00:00:03.272", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.272", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getStandardOffset(3272);
      assertEquals("+00:00:03.272", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.272", dateTimeZone0.getID());
      assertEquals(3272, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-49987981));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-13:53:07.981", dateTimeZone0.getID());
      assertEquals("-13:53:07.981", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getStandardOffset((-49987981));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-13:53:07.981", dateTimeZone0.getID());
      assertEquals("-13:53:07.981", dateTimeZone0.toString());
      assertEquals((-49987981), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1527);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.527", dateTimeZone0.toString());
      assertEquals("+00:00:01.527", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.527", dateTimeZone0.toString());
      assertEquals("+00:00:01.527", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((long) 1527, (Chronology) islamicChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.527", dateTimeZone0.toString());
      assertEquals("+00:00:01.527", dateTimeZone0.getID());
      assertEquals((-1527L), dateMidnight0.getMillis());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateMidnight0);
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.527", dateTimeZone0.toString());
      assertEquals("+00:00:01.527", dateTimeZone0.getID());
      assertEquals((-1527L), dateMidnight0.getMillis());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1527, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2338));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.338", dateTimeZone0.toString());
      assertEquals("-00:00:02.338", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight((-2208L));
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.338", dateTimeZone0.toString());
      assertEquals("-00:00:02.338", dateTimeZone0.getID());
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals((-2338), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getOffset(1671L);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(460);
      assertEquals("+00:00:00.460", dateTimeZone0.getID());
      assertEquals("+00:00:00.460", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getOffset((-2254L));
      assertEquals("+00:00:00.460", dateTimeZone0.getID());
      assertEquals("+00:00:00.460", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(460, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-18));
      assertEquals("-18:00", dateTimeZone0.toString());
      assertEquals("-18:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getOffset(1271L);
      assertEquals("-18:00", dateTimeZone0.toString());
      assertEquals("-18:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-64800000), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(45);
      assertEquals("+00:00:00.045", dateTimeZone0.toString());
      assertEquals("+00:00:00.045", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getNameKey(45);
      assertEquals("+00:00:00.045", dateTimeZone0.toString());
      assertEquals("+00:00:00.045", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getNameKey(3329);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(string0);
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone0, 3600000);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 790L);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(790L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getID();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(string0);
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3677);
      assertEquals("+00:00:03.677", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.677", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.equals(dateTimeZone0);
      assertEquals("+00:00:03.677", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.677", dateTimeZone0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2147057559, "VST");
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=2147057559,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2147057559, simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=2147057559,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2147057559, simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      
      boolean boolean0 = dateTimeZone1.equals(dateTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=2147057559,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2147057559, simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertUTCToLocal(0L);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 1, true, 30L);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(16, 16);
      assertEquals("+16:16", dateTimeZone0.getID());
      assertEquals("+16:16", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(385L, false, 5097600000L);
      assertEquals("+16:16", dateTimeZone0.getID());
      assertEquals("+16:16", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-58559615L), long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(460);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.460", dateTimeZone0.toString());
      assertEquals("+00:00:00.460", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.UTC.convertLocalToUTC((-1390L), false);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.460", dateTimeZone0.toString());
      assertEquals("+00:00:00.460", dateTimeZone0.getID());
      assertEquals((-1390L), long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 45);
      assertEquals("+00:45", dateTimeZone0.toString());
      assertEquals("+00:45", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.adjustOffset(0, false);
      assertEquals("+00:45", dateTimeZone0.toString());
      assertEquals("+00:45", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.adjustOffset(1L, true);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(13, 13);
      assertEquals("+13:13", dateTimeZone0.getID());
      assertEquals("+13:13", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.adjustOffset((-42521587200000L), false);
      assertEquals("+13:13", dateTimeZone0.getID());
      assertEquals("+13:13", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-42521587200000L), long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(1229L, false);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(1229L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3269), "VST");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("VST", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-3269,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-3269), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("VST", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-3269,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-3269), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertUTCToLocal((-2643L));
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("VST", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-3269,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-3269), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals(25197357L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getName((long) 0, (Locale) null);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = dateTimeZone0.getShortName((-1844L), locale0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(string0);
      assertEquals("+01:01", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getShortName((-2270L), (Locale) null);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(string0);
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-9), 1);
      assertEquals("-09:01", dateTimeZone0.toString());
      assertEquals("-09:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-51890869), (-51890869));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -51890869
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("Year is too small: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Year is too small: ' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      assertEquals("VST", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("VST", timeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1059));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.059", dateTimeZone0.toString());
      assertEquals("-00:00:01.059", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1504));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.504", dateTimeZone0.getID());
      assertEquals("-00:00:01.504", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-1504), true);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.504", dateTimeZone0.getID());
      assertEquals("-00:00:01.504", dateTimeZone0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60, "VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
      assertEquals(28800000, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(fixedDateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(5976960L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-158));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal((-158));
      assertEquals((-158), int0);
      assertEquals("-00:00:00.158", cachedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      dateTimeZone0.UTC.getOffset((ReadableInstant) null);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = dateTimeZone0.getName((long) 1, locale0);
      assertEquals("+00:00:00.001", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2000);
      assertEquals("+00:00:02", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-222504020), "-DateTimeZone.setProvider");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '-DateTimeZone.setProvider' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("-18:00", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(2147003226);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 2147003226
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-98404372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -98404372
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-9));
      boolean boolean0 = dateTimeZone0.isStandardOffset(724L);
      assertTrue(boolean0);
      assertEquals("-09:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(1, 3660000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 3660000
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(1932, 1932);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 1932
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-2776));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -2776
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-3608));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -3608
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 0, true, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:00.001");
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      long long0 = dateTimeZone0.convertUTCToLocal((-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      //  // Unstable assertion: assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, (-1028L));
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals((-1028L), long0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      String string0 = fixedDateTimeZone0.toString();
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getName(1229L);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT+000");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(43, "VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("Asia/Ho_Chi_Minh", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Argentina/Buenos_Aires");
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2147057559, "VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal((-1220428800001L));
      assertEquals(28800000, int0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(578, set0.size());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      String string0 = dateTimeZone0.getShortName((long) 1);
      assertEquals("+00:00:00.001", string0);
  }
}
