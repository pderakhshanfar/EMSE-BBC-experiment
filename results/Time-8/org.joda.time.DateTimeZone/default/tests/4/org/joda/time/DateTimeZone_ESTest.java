/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 18:19:22 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC((-1980000L), true);
      assertEquals((-5580000L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      assertNotNull(dateTimeZone0);
      assertEquals("CET", dateTimeZone0.toString());
      assertEquals("CET", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffsetFromLocal(9237600001L);
      assertEquals(3600000, int0);
      assertEquals("CET", dateTimeZone0.toString());
      assertEquals("CET", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertNotNull(dateTimeZone0);
      assertEquals("-23:59:59.999", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(15, 59);
      assertNotNull(dateTimeZone0);
      assertEquals("+15:59", dateTimeZone0.getID());
      assertEquals("+15:59", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(23);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+23:00", dateTimeZone0.getID());
      assertEquals("+23:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-1123));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1123
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 15);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:15", dateTimeZone0.toString());
      assertEquals("+00:15", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      dateTimeZone0.hashCode();
      assertEquals("+00:15", dateTimeZone0.toString());
      assertEquals("+00:15", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(1, timeZone0.getRawOffset());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("+00:00:00.001", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-4750));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:04.750", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:04.750", dateTimeZone0.getID());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("-00:00:04.750", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:04.750", dateTimeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("-00:00:04.750", timeZone0.getID());
      assertEquals((-4750), timeZone0.getRawOffset());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:04.750,offset=-4750,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.previousTransition(0L);
      assertEquals(0L, long0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 0);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.previousTransition(365L);
      assertEquals(365L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1320));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.320", dateTimeZone0.toString());
      assertEquals("-00:00:01.320", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.UTC.previousTransition((-1320));
      assertEquals((-1320L), long0);
      assertEquals("-00:00:01.320", dateTimeZone0.toString());
      assertEquals("-00:00:01.320", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.UTC.nextTransition(0L);
      assertEquals(0L, long0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.nextTransition(1000L);
      assertEquals(1000L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("GMT");
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/GMT", dateTimeZone0.toString());
      assertEquals("Etc/GMT", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.nextTransition((-342));
      assertEquals((-342L), long0);
      assertEquals("Etc/GMT", dateTimeZone0.toString());
      assertEquals("Etc/GMT", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      boolean boolean0 = fixedDateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(58, "CTT");
      assertNotNull(simpleTimeZone0);
      assertEquals(58, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=CTT,offset=58,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("CTT", simpleTimeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(58, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=CTT,offset=58,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("CTT", simpleTimeZone0.getID());
      assertEquals("Asia/Shanghai", dateTimeZone0.getID());
      assertEquals("Asia/Shanghai", dateTimeZone0.toString());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertEquals(58, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=CTT,offset=58,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("CTT", simpleTimeZone0.getID());
      assertEquals("Asia/Shanghai", dateTimeZone0.getID());
      assertEquals("Asia/Shanghai", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getStandardOffset(336);
      assertEquals(0, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 15);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:15", dateTimeZone0.toString());
      assertEquals("+00:15", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.getStandardOffset(0);
      assertEquals(900000, int0);
      assertEquals("+00:15", dateTimeZone0.toString());
      assertEquals("+00:15", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3082));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:03.082", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.082", dateTimeZone0.toString());
      
      int int0 = dateTimeZone0.getStandardOffset((-3082));
      assertEquals((-3082), int0);
      assertEquals("-00:00:03.082", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.082", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(4);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertEquals("+04:00", dateTimeZone0.toString());
      
      DateMidnight dateMidnight0 = new DateMidnight(82801280L);
      assertNotNull(dateMidnight0);
      assertEquals(0L, dateMidnight0.getMillis());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertEquals(14400000, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:00", dateTimeZone0.getID());
      assertEquals("+04:00", dateTimeZone0.toString());
      assertEquals(0L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1320));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.320", dateTimeZone0.toString());
      assertEquals("-00:00:01.320", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      Instant instant0 = new Instant((long) (-1320));
      assertNotNull(instant0);
      assertEquals((-1320L), instant0.getMillis());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) instant0);
      assertEquals((-1320), int0);
      assertEquals("-00:00:01.320", dateTimeZone0.toString());
      assertEquals("-00:00:01.320", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-1320L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      int int0 = dateTimeZone0.UTC.getOffset((-2613L));
      assertEquals(0, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 0);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset((long) 0);
      assertEquals(3600000, int0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1209));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.209", dateTimeZone0.toString());
      assertEquals("-00:00:01.209", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset((long) (-1209));
      assertEquals((-1209), int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.209", dateTimeZone0.toString());
      assertEquals("-00:00:01.209", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.002", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.002", dateTimeZone0.toString());
      
      String string0 = dateTimeZone0.getNameKey((-2));
      assertNull(string0);
      assertEquals("-00:00:00.002", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.002", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      String string0 = dateTimeZone0.UTC.getNameKey(0L);
      assertEquals("UTC", string0);
      assertNotNull(string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 15);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:15", dateTimeZone0.getID());
      assertEquals("+00:15", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotNull(dateTimeZone1);
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 0);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(900000L, long0);
      assertEquals("+00:15", dateTimeZone0.getID());
      assertEquals("+00:15", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      String string0 = dateTimeZone0.getID();
      assertEquals("Etc/UTC", string0);
      assertNotNull(string0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2759));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.759", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.759", dateTimeZone0.toString());
      
      boolean boolean0 = dateTimeZone0.equals(dateTimeZone0);
      assertTrue(boolean0);
      assertEquals("-00:00:02.759", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.759", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotNull(dateTimeZone1);
      assertEquals("+00:00:00.001", dateTimeZone1.toString());
      assertEquals("+00:00:00.001", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.equals(dateTimeZone1);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(boolean0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone1.toString());
      assertEquals("+00:00:00.001", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertUTCToLocal(1);
      assertEquals(1L, long0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.060", dateTimeZone0.toString());
      assertEquals("+00:00:00.060", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 60, false, (long) 60);
      assertEquals(0L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.060", dateTimeZone0.toString());
      assertEquals("+00:00:00.060", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.convertLocalToUTC(3600768L, true, (-4427L));
      assertEquals(3600768L, long0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-19));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.019", dateTimeZone0.toString());
      assertEquals("-00:00:00.019", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-19), false);
      assertEquals(0L, long0);
      assertEquals("-00:00:00.019", dateTimeZone0.toString());
      assertEquals("-00:00:00.019", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 15);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:15", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:15", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.adjustOffset(0, false);
      assertEquals(0L, long0);
      assertEquals("+00:15", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:15", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "VST", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      assertNotNull(simpleTimeZone0);
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      long long0 = fixedDateTimeZone0.convertLocalToUTC(46L, false);
      assertEquals(46L, long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      assertNotNull(dateTimeZone0);
      assertEquals("CET", dateTimeZone0.toString());
      assertEquals("CET", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC(1L, false, 1L);
      assertEquals((-3599999L), long0);
      assertEquals("CET", dateTimeZone0.toString());
      assertEquals("CET", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-23), 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:01", dateTimeZone0.toString());
      assertEquals("-23:01", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertUTCToLocal(335L);
      assertEquals((-82859665L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:01", dateTimeZone0.toString());
      assertEquals("-23:01", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertUTCToLocal(0L);
      assertEquals(0L, long0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 0);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      String string0 = dateTimeZone0.getShortName((-685L), locale0);
      assertEquals("+01:00", string0);
      assertNotNull(string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      String string0 = fixedDateTimeZone0.getShortName((-1954L), (Locale) null);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(25);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.025", dateTimeZone0.toString());
      assertEquals("+00:00:00.025", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(25);
      assertNotNull(dateTimeZone1);
      assertEquals("+00:00:00.025", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.025", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-122607198), 2312);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -122607198
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("`S@al~Lzl6\"<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '`S@al~Lzl6\"<' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.adjustOffset(899518L, false);
      assertEquals(899518L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-11));
      long long0 = dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, (-11));
      assertEquals((-11L), long0);
      assertEquals("-00:00:00.011", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-19));
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      long long0 = dateTimeZone0.convertLocalToUTC(1L, true);
      assertEquals((-3599999L), long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 15);
      LocalDateTime localDateTime0 = new LocalDateTime((-900000L), dateTimeZone0);
      assertEquals("+00:15", dateTimeZone0.toString());
      assertEquals("+00:15", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854774807L);
      assertEquals(28800000, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal((-82800000L));
      assertEquals("Etc/UTC", cachedDateTimeZone0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-23), 1);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal((-813L));
      assertEquals((-82860000), int0);
      assertEquals("-23:01", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      boolean boolean0 = dateTimeZone0.isStandardOffset(86399999);
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      int int0 = fixedDateTimeZone0.UTC.getOffset((ReadableInstant) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = DateTime.now();
      dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-23), 1);
      String string0 = dateTimeZone0.getName((long) (-23), (Locale) null);
      assertEquals("-23:01", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      String string0 = dateTimeZone0.getName((-2922L), locale0);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-11));
      String string0 = dateTimeZone0.getShortName((long) (-11));
      assertEquals("-00:00:00.011", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      // Undeclared exception!
      try { 
        dateTimeZone0.convertUTCToLocal(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-145), "-G3yrxOC:;R}7PxM%M");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '-G3yrxOC:;R}7PxM%M' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("-18:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(fixedDateTimeZone0, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(236548278);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 236548278
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-292269358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -292269358
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, 131);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 131
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(1000, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 1000
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-23:01");
      assertNotNull(dateTimeZone0);
      assertEquals("-23:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:00.046");
      assertEquals("+00:00:00.046", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      long long0 = dateTimeZone0.adjustOffset((-2613L), false);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals((-2613L), long0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      //  // Unstable assertion: assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-23), 1);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      String string0 = cachedDateTimeZone0.toString();
      assertEquals("-23:01", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      String string0 = dateTimeZone0.getName((long) 1);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 15);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+00:15", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/St_Johns");
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("America/St_Johns", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-2021297536));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -2021297536
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(578, set0.size());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      dateTimeZone0.UTC.writeReplace();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }
}
