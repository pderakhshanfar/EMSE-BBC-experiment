/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:05:59 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = fixedDateTimeZone0.convertLocalToUTC((long) 3407, false);
      assertEquals(3407L, long0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Guadalcanal");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      
      DateMidnight dateMidnight0 = new DateMidnight((-382L), dateTimeZone0);
      assertNotNull(dateMidnight0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals((-39600000L), dateMidnight0.getMillis());
      
      DateMidnight dateMidnight1 = dateMidnight0.withYear(20);
      assertNotNull(dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals((-39600000L), dateMidnight0.getMillis());
      assertEquals((-61536105588000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      assertNotNull(dateTimeZone0);
      assertEquals("CET", dateTimeZone0.getID());
      assertEquals("CET", dateTimeZone0.toString());
      
      int int0 = dateTimeZone0.getOffsetFromLocal((-9223372036854775808L));
      assertEquals(3600000, int0);
      assertEquals("CET", dateTimeZone0.getID());
      assertEquals("CET", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertNotNull(dateTimeZone0);
      assertEquals("-23:59:59.999", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      assertNotNull(dateTimeZone0);
      assertEquals("-23:00", dateTimeZone0.getID());
      assertEquals("-23:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:02.933");
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.933", dateTimeZone0.getID());
      assertEquals("+00:00:02.933", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      fixedDateTimeZone0.hashCode();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      assertNotNull(dateTimeZone0);
      assertEquals("CET", dateTimeZone0.toString());
      assertEquals("CET", dateTimeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localDateTime0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("CET", dateTimeZone0.toString());
      assertEquals("CET", dateTimeZone0.getID());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(578);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
      assertEquals("+00:00:00.578", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals(578, timeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=+00:00:00.578,offset=578,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("0G");
      assertNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.UTC.previousTransition(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-6), 1);
      assertNotNull(dateTimeZone0);
      assertEquals("-06:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-06:01", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.UTC.previousTransition(1);
      assertEquals(1L, long0);
      assertEquals("-06:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-06:01", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.UTC.previousTransition((-1570L));
      assertEquals((-1570L), long0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.nextTransition(0L);
      assertEquals(0L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      assertNotNull(dateTimeZone0);
      assertEquals("CET", dateTimeZone0.getID());
      assertEquals("CET", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.nextTransition(1175L);
      assertEquals(228877200000L, long0);
      assertEquals("CET", dateTimeZone0.getID());
      assertEquals("CET", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      assertNotNull(dateTimeZone0);
      assertEquals("CET", dateTimeZone0.toString());
      assertEquals("CET", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.UTC.nextTransition((-2266L));
      assertEquals((-2266L), long0);
      assertEquals("CET", dateTimeZone0.toString());
      assertEquals("CET", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(578);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      assertNotNull(dateTimeZone0);
      assertEquals("CET", dateTimeZone0.getID());
      assertEquals("CET", dateTimeZone0.toString());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertEquals("CET", dateTimeZone0.getID());
      assertEquals("CET", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      int int0 = fixedDateTimeZone0.getStandardOffset(24L);
      assertEquals(0, int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(578);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
      
      int int0 = dateTimeZone0.getStandardOffset(1);
      assertEquals(578, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-6), 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-06:01", dateTimeZone0.getID());
      assertEquals("-06:01", dateTimeZone0.toString());
      
      int int0 = dateTimeZone0.getStandardOffset(1L);
      assertEquals((-21660000), int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-06:01", dateTimeZone0.getID());
      assertEquals("-06:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      
      Instant instant0 = new Instant((Object) null);
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) instant0);
      assertEquals(3660000, int0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-6), 1);
      assertNotNull(dateTimeZone0);
      assertEquals("-06:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-06:01", dateTimeZone0.getID());
      
      DateMidnight dateMidnight0 = new DateMidnight(3660000L);
      assertNotNull(dateMidnight0);
      assertEquals(0L, dateMidnight0.getMillis());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertEquals((-21660000), int0);
      assertEquals("-06:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-06:01", dateTimeZone0.getID());
      assertEquals(0L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.getOffset((-607L));
      assertEquals(0, int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-6), 1);
      assertNotNull(dateTimeZone0);
      assertEquals("-06:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-06:01", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset((long) (-6));
      assertEquals((-21660000), int0);
      assertEquals("-06:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-06:01", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      
      String string0 = dateTimeZone0.getNameKey((-2103L));
      assertNull(string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      assertNotNull(dateTimeZone0);
      assertEquals("CET", dateTimeZone0.getID());
      assertEquals("CET", dateTimeZone0.toString());
      
      String string0 = dateTimeZone0.UTC.getNameKey(9223372036854775805L);
      assertNotNull(string0);
      assertEquals("UTC", string0);
      assertEquals("CET", dateTimeZone0.getID());
      assertEquals("CET", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      long long0 = fixedDateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, 0);
      assertEquals(0L, long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399974);
      assertNotNull(dateTimeZone0);
      assertEquals("+23:59:59.974", dateTimeZone0.getID());
      assertEquals("+23:59:59.974", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      boolean boolean0 = dateTimeZone0.equals(dateTimeZone0);
      assertTrue(boolean0);
      assertEquals("+23:59:59.974", dateTimeZone0.getID());
      assertEquals("+23:59:59.974", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      boolean boolean0 = dateTimeZone0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.UTC.convertUTCToLocal(0L);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(578);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertUTCToLocal(575L);
      assertEquals(1153L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = fixedDateTimeZone0.convertUTCToLocal((-3659424L));
      assertEquals((-3659424L), long0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.UTC.convertLocalToUTC((long) 0, false, (long) 0);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.convertLocalToUTC(3667L, true, 3660000L);
      assertEquals(3667L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC((-146L), false, (-2615L));
      assertEquals((-146L), long0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2936));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.936", dateTimeZone0.toString());
      assertEquals("-00:00:02.936", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-2936), false);
      assertEquals(0L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.936", dateTimeZone0.toString());
      assertEquals("-00:00:02.936", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399974);
      assertNotNull(dateTimeZone0);
      assertEquals("+23:59:59.974", dateTimeZone0.getID());
      assertEquals("+23:59:59.974", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.adjustOffset(0, true);
      assertEquals(0L, long0);
      assertEquals("+23:59:59.974", dateTimeZone0.getID());
      assertEquals("+23:59:59.974", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Cairo");
      assertNotNull(dateTimeZone0);
      assertEquals("Africa/Cairo", dateTimeZone0.toString());
      assertEquals("Africa/Cairo", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      String string0 = dateTimeZone0.getName(455L, (Locale) null);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      
      String string0 = dateTimeZone0.getShortName((long) 1, (Locale) null);
      assertNotNull(string0);
      assertEquals("+01:01", string0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-98447026), (-98447026));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -98447026
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("No interval converter found for type: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'No interval converter found for type: ' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Guadalcanal");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.getID());
      
      long long0 = cachedDateTimeZone0.adjustOffset((-9223372036854775808L), false);
      assertEquals((-9223372036854775808L), long0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Cairo");
      assertNotNull(dateTimeZone0);
      assertEquals("Africa/Cairo", dateTimeZone0.toString());
      assertEquals("Africa/Cairo", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.adjustOffset((-9223372036854775772L), true);
      assertEquals((-9223372036854775772L), long0);
      assertEquals("Africa/Cairo", dateTimeZone0.toString());
      assertEquals("Africa/Cairo", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      assertNotNull(dateTimeZone0);
      assertEquals("CET", dateTimeZone0.getID());
      assertEquals("CET", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.adjustOffset(9223372036854775805L, true);
      assertEquals(9223372036854775805L, long0);
      assertEquals("CET", dateTimeZone0.getID());
      assertEquals("CET", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      boolean boolean0 = fixedDateTimeZone0.UTC.isLocalDateTimeGap((LocalDateTime) null);
      assertFalse(boolean0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      assertNotNull(dateTimeZone0);
      assertEquals("CET", dateTimeZone0.toString());
      assertEquals("CET", dateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = new LocalDateTime(9223372036854775805L);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap(localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-6), 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-06:01", dateTimeZone0.getID());
      assertEquals("-06:01", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 1);
      assertEquals(1L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-06:01", dateTimeZone0.getID());
      assertEquals("-06:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      long long0 = fixedDateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, (-3250L));
      assertEquals((-3250L), long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+13:00", dateTimeZone0.toString());
      assertEquals("+13:00", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 13, false);
      assertEquals((-46799987L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+13:00", dateTimeZone0.toString());
      assertEquals("+13:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Guadalcanal");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        cachedDateTimeZone0.convertLocalToUTC((-9223372036854775808L), true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Guadalcanal");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        cachedDateTimeZone0.convertLocalToUTC((-9223372036854775808L), false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      assertNotNull(dateTimeZone0);
      assertEquals("CET", dateTimeZone0.toString());
      assertEquals("CET", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC(228877200000L, true);
      assertEquals(228873600000L, long0);
      assertEquals("CET", dateTimeZone0.toString());
      assertEquals("CET", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      assertNotNull(dateTimeZone0);
      assertEquals("CET", dateTimeZone0.getID());
      assertEquals("CET", dateTimeZone0.toString());
      
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(9223372036854775807L, dateTimeZone0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Guadalcanal");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.toString());
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(9223372036854775794L);
      assertEquals(38388000, int0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", cachedDateTimeZone0.toString());
      assertEquals("Etc/UTC", cachedDateTimeZone0.getID());
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, int0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", cachedDateTimeZone0.toString());
      assertEquals("Etc/UTC", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1000, "PST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(1000);
      assertEquals((-28800000), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Cairo");
      int int0 = dateTimeZone0.getOffsetFromLocal((-9223372036854775772L));
      assertEquals(7200000, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Guadalcanal");
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal((-9223372036854775808L));
      assertEquals(38388000, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset(5097600000L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      boolean boolean0 = dateTimeZone0.isStandardOffset(9223372036854775807L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeZone0.UTC.getOffset((ReadableInstant) null);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(578);
      Locale locale0 = Locale.FRANCE;
      String string0 = dateTimeZone0.getName(0L, locale0);
      assertEquals("+00:00:00.578", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      Locale locale0 = Locale.JAPAN;
      String string0 = dateTimeZone0.getShortName((long) 1000, locale0);
      assertEquals("+00:00:01", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("-18:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.US;
      String string0 = dateTimeZone0.getShortName((long) 0, locale0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(string0);
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+18:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-14));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '-00:00:00.014' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("Etc/UTC", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(292278993);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 292278993
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-198655376));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -198655376
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-14), 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 60
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(974, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 974
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-2936));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -2936
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      assertEquals("+00:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      String string0 = dateTimeZone0.getID();
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(3660000L);
      assertEquals(0L, dateMidnight0.getMillis());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      String string0 = dateTimeZone0.toString();
      assertEquals("Etc/UTC", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      String string0 = dateTimeZone0.getName(3600000L);
      assertEquals("+00:00", string0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-06:01");
      assertEquals("-06:01", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("CET");
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'CET' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(23);
      int int0 = dateTimeZone0.getOffset((long) 23);
      assertEquals(82800000, int0);
      assertEquals("+23:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Cairo");
      LocalDate localDate0 = LocalDate.now();
      DateMidnight dateMidnight0 = localDate0.toDateMidnight(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear((-519));
      assertEquals(1392328800000L, dateMidnight0.getMillis());
      assertEquals((-78541063509000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(578, set0.size());
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(fixedDateTimeZone0);
      
      ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getShortName(991L);
      assertEquals("+00:00", string0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(string0);
  }
}
