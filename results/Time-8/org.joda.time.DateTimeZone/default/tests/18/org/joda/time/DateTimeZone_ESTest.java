/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:13:04 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      assertNotNull(timeZone0);
      assertEquals("VST", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("VST", timeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.adjustOffset(9223372036854775805L, false);
      assertEquals(9223372036854775805L, long0);
      assertEquals("VST", timeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2623);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:02.623", dateTimeZone0.toString());
      assertEquals("+00:00:02.623", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      assertNotNull(dateMidnight0);
      assertEquals("+00:00:02.623", dateTimeZone0.toString());
      assertEquals("+00:00:02.623", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392335997377L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Asia/Yerevan");
      assertNotNull(timeZone0);
      assertEquals("Asia/Yerevan", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Yerevan", timeZone0.getID());
      assertEquals("Asia/Yerevan", dateTimeZone0.toString());
      assertEquals("Asia/Yerevan", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffsetFromLocal(3599985L);
      assertEquals(14400000, int0);
      assertEquals("Asia/Yerevan", timeZone0.getID());
      assertEquals("Asia/Yerevan", dateTimeZone0.toString());
      assertEquals("Asia/Yerevan", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      assertNotNull(dateTimeZone0);
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertNotNull(dateTimeZone0);
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:59:59.999", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 59);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:59", dateTimeZone0.getID());
      assertEquals("+01:59", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(23);
      assertNotNull(dateTimeZone0);
      assertEquals("+23:00", dateTimeZone0.toString());
      assertEquals("+23:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:01", dateTimeZone0.getID());
      assertEquals("+00:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      dateTimeZone0.hashCode();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3167), "VST");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("VST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-3167,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-3167), simpleTimeZone0.getRawOffset());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("VST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-3167,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-3167), simpleTimeZone0.getRawOffset());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) (-3167));
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("VST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-3167,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-3167), simpleTimeZone0.getRawOffset());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2725);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:02.725", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.725", dateTimeZone0.getID());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("+00:00:02.725", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.725", dateTimeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(2725, timeZone0.getRawOffset());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=+00:00:02.725,offset=2725,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("+00:00:02.725", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3055));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:03.055", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.055", dateTimeZone0.getID());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("-00:00:03.055", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.055", dateTimeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals((-3055), timeZone0.getRawOffset());
      assertEquals("-00:00:03.055", timeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:03.055,offset=-3055,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("UTC", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.previousTransition(0L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.previousTransition(9223372036854775807L);
      assertEquals(9223372036854775807L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      assertNotNull(dateTimeZone0);
      assertEquals("America/Indiana/Indianapolis", dateTimeZone0.toString());
      assertEquals("America/Indiana/Indianapolis", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.previousTransition((-2185L));
      assertEquals((-5767200001L), long0);
      assertEquals("America/Indiana/Indianapolis", dateTimeZone0.toString());
      assertEquals("America/Indiana/Indianapolis", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2725);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:02.725", dateTimeZone0.getID());
      assertEquals("+00:00:02.725", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.nextTransition(0L);
      assertEquals(0L, long0);
      assertEquals("+00:00:02.725", dateTimeZone0.getID());
      assertEquals("+00:00:02.725", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1074));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.074", dateTimeZone0.toString());
      assertEquals("-00:00:01.074", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.nextTransition(462L);
      assertEquals(462L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.074", dateTimeZone0.toString());
      assertEquals("-00:00:01.074", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.nextTransition((-1038L));
      assertEquals((-1038L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      boolean boolean0 = fixedDateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(58, "MST");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(58, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=MST,offset=58,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("MST", simpleTimeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(58, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=MST,offset=58,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("MST", simpleTimeZone0.getID());
      assertEquals("America/Denver", dateTimeZone0.toString());
      assertEquals("America/Denver", dateTimeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(58, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=MST,offset=58,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("MST", simpleTimeZone0.getID());
      assertEquals("America/Denver", dateTimeZone0.toString());
      assertEquals("America/Denver", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.getStandardOffset(100000000000000L);
      assertEquals(0, int0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3167), "VST");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-3167,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-3167), simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-3167,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-3167), simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getStandardOffset((-3167));
      assertEquals(25200000, int0);
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-3167,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-3167), simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1074));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.074", dateTimeZone0.toString());
      assertEquals("-00:00:01.074", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.getStandardOffset(462L);
      assertEquals((-1074), int0);
      assertEquals("-00:00:01.074", dateTimeZone0.toString());
      assertEquals("-00:00:01.074", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3156);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:03.156", dateTimeZone0.getID());
      assertEquals("+00:00:03.156", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateMidnight dateMidnight0 = new DateMidnight((-1L), dateTimeZone0);
      assertNotNull(dateMidnight0);
      assertEquals("+00:00:03.156", dateTimeZone0.getID());
      assertEquals("+00:00:03.156", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-3156L), dateMidnight0.getMillis());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertEquals(3156, int0);
      assertEquals("+00:00:03.156", dateTimeZone0.getID());
      assertEquals("+00:00:03.156", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-3156L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-8));
      assertNotNull(dateTimeZone0);
      assertEquals("-08:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-08:00", dateTimeZone0.getID());
      
      DateMidnight dateMidnight0 = new DateMidnight((long) (-8));
      assertNotNull(dateMidnight0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertEquals((-28800000), int0);
      assertEquals("-08:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-08:00", dateTimeZone0.getID());
      assertEquals((-86400000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset((long) 0);
      assertEquals(0, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3156);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:03.156", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.156", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset((long) 4);
      assertEquals(3156, int0);
      assertEquals("+00:00:03.156", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.156", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-465));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.465", dateTimeZone0.toString());
      assertEquals("-00:00:00.465", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset((long) (-465));
      assertEquals((-465), int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.465", dateTimeZone0.toString());
      assertEquals("-00:00:00.465", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertNotNull(dateTimeZone0);
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      
      String string0 = dateTimeZone0.getNameKey((byte) (-100));
      assertNull(string0);
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertEquals("-01:00", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0L);
      assertEquals(0L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertEquals("-01:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(7593750);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:06:33.750", dateTimeZone0.toString());
      assertEquals("+02:06:33.750", dateTimeZone0.getID());
      
      String string0 = dateTimeZone0.getID();
      assertEquals("+02:06:33.750", string0);
      assertNotNull(string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:06:33.750", dateTimeZone0.toString());
      assertEquals("+02:06:33.750", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone0);
      assertTrue(boolean0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(578);
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.578", dateTimeZone1.toString());
      assertEquals("+00:00:00.578", dateTimeZone1.getID());
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.equals(dateTimeZone1);
      assertFalse(boolean0);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.578", dateTimeZone1.toString());
      assertEquals("+00:00:00.578", dateTimeZone1.getID());
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2623);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:02.623", dateTimeZone0.getID());
      assertEquals("+00:00:02.623", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.convertUTCToLocal((-2623L));
      assertEquals(0L, long0);
      assertEquals("+00:00:02.623", dateTimeZone0.getID());
      assertEquals("+00:00:02.623", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2725);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.725", dateTimeZone0.toString());
      assertEquals("+00:00:02.725", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.UTC.convertUTCToLocal(2725);
      assertEquals(2725L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.725", dateTimeZone0.toString());
      assertEquals("+00:00:02.725", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(7593750);
      assertNotNull(dateTimeZone0);
      assertEquals("+02:06:33.750", dateTimeZone0.toString());
      assertEquals("+02:06:33.750", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 7593750, true, (-2737L));
      assertEquals(0L, long0);
      assertEquals("+02:06:33.750", dateTimeZone0.toString());
      assertEquals("+02:06:33.750", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC(8175L, true, 8175L);
      assertEquals(8175L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC((-1739L), true, 43200000L);
      assertEquals((-1739L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1074));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.074", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.074", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-1074), false);
      assertEquals(0L, long0);
      assertEquals("-00:00:01.074", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.074", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3156);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:03.156", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.156", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.adjustOffset(0, false);
      assertEquals(0L, long0);
      assertEquals("+00:00:03.156", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.156", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = fixedDateTimeZone0.adjustOffset((-3L), true);
      assertEquals((-3L), long0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      assertNotNull(timeZone0);
      assertEquals("VST", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("VST", timeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone1);
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      
      // Undeclared exception!
      try { 
        dateTimeZone1.getMillisKeepLocal(dateTimeZone0, (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.convertLocalToUTC((-824L), false);
      assertEquals((-824L), long0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      assertNotNull(timeZone0);
      assertEquals("VST", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("VST", timeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775808L), true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("MST");
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("MST", dateTimeZone0.toString());
      assertEquals("MST", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertUTCToLocal(59);
      assertEquals((-25199941L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("MST", dateTimeZone0.toString());
      assertEquals("MST", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      String string0 = dateTimeZone0.getShortName((-1074L), locale0);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:01", dateTimeZone0.getID());
      assertEquals("-01:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-100722684), (-2146803633));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -100722684
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(3091, 3091);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 3091
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("F6BD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'F6BD' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2639);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:02.639", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.639", dateTimeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.UTC.isLocalDateTimeGap((LocalDateTime) null);
      assertFalse(boolean0);
      assertEquals("+00:00:02.639", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.639", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      assertNotNull(timeZone0);
      assertEquals("VST", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("VST", timeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 1L);
      assertEquals(1L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((byte) (-23));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:00", dateTimeZone0.getID());
      assertEquals("-23:00", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) (byte) (-122), true);
      assertEquals(82799878L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:00", dateTimeZone0.getID());
      assertEquals("-23:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("AST");
      assertNotNull(timeZone0);
      assertEquals("AST", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("AST", timeZone0.getID());
      assertEquals("America/Anchorage", dateTimeZone0.toString());
      assertEquals("America/Anchorage", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775791L), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal instant due to time zone offset transition (daylight savings time 'gap'): -292275055-05-16T16:47:04.209 (America/Anchorage)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Indiana/Indianapolis");
      assertNotNull(dateTimeZone0);
      assertEquals("America/Indiana/Indianapolis", dateTimeZone0.getID());
      assertEquals("America/Indiana/Indianapolis", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone1);
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      
      long long0 = dateTimeZone1.getMillisKeepLocal(dateTimeZone0, (-5767200001L));
      assertEquals((-5749200001L), long0);
      assertEquals("America/Indiana/Indianapolis", dateTimeZone0.getID());
      assertEquals("America/Indiana/Indianapolis", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("AST");
      assertNotNull(timeZone0);
      assertEquals("AST", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("AST", timeZone0.getID());
      assertEquals("America/Anchorage", dateTimeZone0.getID());
      assertEquals("America/Anchorage", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775773L, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal instant due to time zone offset transition (daylight savings time 'gap'): 292278994-08-17T07:12:55.773 (America/Anchorage)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ACT");
      assertNotNull(timeZone0);
      assertEquals("ACT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("ACT", timeZone0.getID());
      assertEquals("Australia/Darwin", dateTimeZone0.getID());
      assertEquals("Australia/Darwin", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775808L), false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2678);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:02.678", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.678", dateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(9223372036854775807L, dateTimeZone0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(fixedDateTimeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", cachedDateTimeZone0.toString());
      assertEquals("UTC", cachedDateTimeZone0.getID());
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(9223372036854775807L);
      assertEquals(0, int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", cachedDateTimeZone0.toString());
      assertEquals("UTC", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      assertNotNull(dateTimeZone0);
      assertEquals("-01:00", dateTimeZone0.getID());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("-01:00", dateTimeZone0.getID());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", cachedDateTimeZone0.toString());
      assertEquals("-01:00", cachedDateTimeZone0.getID());
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal((-1));
      assertEquals((-3600000), int0);
      assertEquals("-01:00", dateTimeZone0.getID());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", cachedDateTimeZone0.toString());
      assertEquals("-01:00", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      boolean boolean0 = dateTimeZone0.isStandardOffset(100L);
      assertTrue(boolean0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals(0, int0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3156);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.156", dateTimeZone0.getID());
      assertEquals("+00:00:03.156", dateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      int int0 = dateTimeZone0.UTC.getOffset((ReadableInstant) dateTime0);
      assertEquals(0, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:03.156", dateTimeZone0.getID());
      assertEquals("+00:00:03.156", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(59, "MST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      String string0 = dateTimeZone0.getName((long) 59);
      assertEquals("-07:00", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1074));
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = dateTimeZone0.getName((-5577L), locale0);
      assertEquals("-00:00:01.074", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1074));
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = dateTimeZone0.getShortName((long) (-1074), locale0);
      assertEquals("-00:00:01.074", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3000);
      assertEquals("+00:00:03", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("-01:00", dateTimeZone0.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(46, "");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(4);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("+04:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1656), "MST");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'MST' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("UTC");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 2147483647
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-2145469122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -2145469122
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      String string0 = dateTimeZone0.getShortName(748L, (Locale) null);
      assertEquals("+02:00", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(2, 6292);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 6292
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours(89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 89
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-2808));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -2808
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      String string0 = dateTimeZone0.getNameKey(15778800000L);
      assertNotNull(string0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-00:00:01.074");
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.074", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:03.156");
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:03.156", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      String string0 = dateTimeZone0.getName(86400L, (Locale) null);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-8));
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("-08:00", dateTimeZone0.toString());
      assertEquals("-08:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.toString();
      assertEquals("Etc/UTC", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(59, "MST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("America/Denver", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("-01:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(59, "MST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(578, set0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getShortName((-1055L));
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }
}
