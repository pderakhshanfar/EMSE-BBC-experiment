/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:07:22 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(17971875);
      assertNotNull(dateTimeZone0);
      assertEquals("+04:59:31.875", dateTimeZone0.toString());
      assertEquals("+04:59:31.875", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.convertLocalToUTC(1109L, false);
      assertEquals("+04:59:31.875", dateTimeZone0.toString());
      assertEquals("+04:59:31.875", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-17970766L), long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      assertNotNull(dateTimeZone0);
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertNotNull(dateTimeZone0);
      assertEquals("-23:59:59.999", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 23);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:23", dateTimeZone0.getID());
      assertEquals("+00:23", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 59);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:59", dateTimeZone0.toString());
      assertEquals("+01:59", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(23);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+23:00", dateTimeZone0.getID());
      assertEquals("+23:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-23), (-23));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -23
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      dateTimeZone0.hashCode();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(17971875);
      assertNotNull(dateTimeZone0);
      assertEquals("+04:59:31.875", dateTimeZone0.toString());
      assertEquals("+04:59:31.875", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("+04:59:31.875", dateTimeZone0.toString());
      assertEquals("+04:59:31.875", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:59:31.875", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=+04:59:31.875,offset=17971875,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals(17971875, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-375));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.375", dateTimeZone0.toString());
      assertEquals("-00:00:00.375", dateTimeZone0.getID());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.375", dateTimeZone0.toString());
      assertEquals("-00:00:00.375", dateTimeZone0.getID());
      assertEquals((-375), timeZone0.getRawOffset());
      assertEquals("-00:00:00.375", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:00.375,offset=-375,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.previousTransition(0L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.previousTransition(100000000000L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(100000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-375));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.375", dateTimeZone0.toString());
      assertEquals("-00:00:00.375", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.previousTransition((-375));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.375", dateTimeZone0.toString());
      assertEquals("-00:00:00.375", dateTimeZone0.getID());
      assertEquals((-375L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      long long0 = fixedDateTimeZone0.UTC.nextTransition(0L);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(17971875);
      assertNotNull(dateTimeZone0);
      assertEquals("+04:59:31.875", dateTimeZone0.getID());
      assertEquals("+04:59:31.875", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.nextTransition(2487L);
      assertEquals("+04:59:31.875", dateTimeZone0.getID());
      assertEquals("+04:59:31.875", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2487L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.nextTransition((-1384L));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals((-1384L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-796));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.796", dateTimeZone0.toString());
      assertEquals("-00:00:00.796", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertEquals("-00:00:00.796", dateTimeZone0.toString());
      assertEquals("-00:00:00.796", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Chicago");
      assertNotNull(dateTimeZone0);
      assertEquals("America/Chicago", dateTimeZone0.toString());
      assertEquals("America/Chicago", dateTimeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertEquals("America/Chicago", dateTimeZone0.toString());
      assertEquals("America/Chicago", dateTimeZone0.getID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.UTC.getStandardOffset(8568334592L);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getStandardOffset((-687L));
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
      assertEquals(41400000, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Chicago");
      assertNotNull(dateTimeZone0);
      assertEquals("America/Chicago", dateTimeZone0.toString());
      assertEquals("America/Chicago", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getStandardOffset((-21600000));
      assertEquals("America/Chicago", dateTimeZone0.toString());
      assertEquals("America/Chicago", dateTimeZone0.getID());
      assertEquals((-21600000), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(1);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffsetFromLocal(0L);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals(3660000, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      assertEquals((-2580), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(527);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.527", dateTimeZone0.toString());
      assertEquals("+00:00:00.527", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.527", dateTimeZone0.toString());
      assertEquals("+00:00:00.527", dateTimeZone0.getID());
      assertEquals(527, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Chicago");
      assertNotNull(dateTimeZone0);
      assertEquals("America/Chicago", dateTimeZone0.toString());
      assertEquals("America/Chicago", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals("America/Chicago", dateTimeZone0.toString());
      assertEquals("America/Chicago", dateTimeZone0.getID());
      assertEquals((-21600000), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.UTC.getOffset(12763L);
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset(10000000L);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals(3660000, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Chicago");
      assertNotNull(dateTimeZone0);
      assertEquals("America/Chicago", dateTimeZone0.getID());
      assertEquals("America/Chicago", dateTimeZone0.toString());
      
      int int0 = dateTimeZone0.getOffset((-687L));
      assertEquals("America/Chicago", dateTimeZone0.getID());
      assertEquals("America/Chicago", dateTimeZone0.toString());
      assertEquals((-21600000), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      
      String string0 = dateTimeZone0.getNameKey(0L);
      assertNull(string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      String string0 = dateTimeZone0.getNameKey(2580L);
      assertNotNull(string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone1);
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      long long0 = dateTimeZone1.getMillisKeepLocal(dateTimeZone0, 1L);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(0L, long0);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, (-3900L));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals((-3900L), long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      
      String string0 = dateTimeZone0.getID();
      assertNotNull(string0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      boolean boolean0 = dateTimeZone0.equals(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      boolean boolean0 = dateTimeZone0.equals(uTCProvider0);
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = fixedDateTimeZone0.convertUTCToLocal(0L);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(17971875);
      assertNotNull(dateTimeZone0);
      assertEquals("+04:59:31.875", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:59:31.875", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false, (-627L));
      assertEquals("+04:59:31.875", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+04:59:31.875", dateTimeZone0.getID());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = fixedDateTimeZone0.convertLocalToUTC(21600000L, false, 2580L);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(21600000L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.UTC.convertLocalToUTC((long) (-2580), false, 2037L);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      assertEquals((-2580L), long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Chicago");
      assertNotNull(dateTimeZone0);
      assertEquals("America/Chicago", dateTimeZone0.getID());
      assertEquals("America/Chicago", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC(4294967295L, false);
      assertEquals("America/Chicago", dateTimeZone0.getID());
      assertEquals("America/Chicago", dateTimeZone0.toString());
      assertEquals(4316567295L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = fixedDateTimeZone0.adjustOffset(13804L, false);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(13804L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.UTC.adjustOffset((-2580), false);
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      assertEquals((-2580L), long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-1473), (-1473));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -1473
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(58, 58);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 58
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("q^Z?F&:D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'q^Z?F&:D' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.UTC.adjustOffset(0L, false);
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 259200000L);
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(259197420L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-358));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.358", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.358", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC((-2580L), false);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Chicago");
      assertNotNull(dateTimeZone0);
      assertEquals("America/Chicago", dateTimeZone0.getID());
      assertEquals("America/Chicago", dateTimeZone0.toString());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals("America/Chicago", dateTimeZone0.getID());
      assertEquals("America/Chicago", dateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localDateTime0);
      assertEquals("America/Chicago", dateTimeZone0.getID());
      assertEquals("America/Chicago", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.convertUTCToLocal(936L);
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-1644L), long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      boolean boolean0 = dateTimeZone0.isStandardOffset((-21602081L));
      assertTrue(boolean0);
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      boolean boolean0 = dateTimeZone0.isStandardOffset(63072000000L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateMidnight dateMidnight0 = DateMidnight.now();
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertEquals(0, int0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      String string0 = dateTimeZone0.getName((-1545L), (Locale) null);
      assertEquals("-00:00:02.580", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      String string0 = dateTimeZone0.getShortName((long) (-2580), (Locale) null);
      assertEquals("-00:00:02.580", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      Locale locale0 = Locale.US;
      String string0 = dateTimeZone0.UTC.getShortName(0L, locale0);
      assertEquals("+00:00", string0);
      assertEquals("-00:00:02.580", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12825000);
      assertEquals("+03:33:45", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = new Locale("YearMonthDay", "Fixing duplicate recurrent name key - ", "YearMonthDay");
      String string0 = dateTimeZone0.UTC.getName((long) 0, locale0);
      assertNotNull(string0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(57, "zc'5_4HsB");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'zc'5_4HsB' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("-01:00", dateTimeZone0.getID());
      assertEquals("-01:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("Etc/UTC", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Chicago");
      TimeZone timeZone0 = dateTimeZone0.UTC.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(292272984);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 292272984
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-1093042033));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -1093042033
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), 45);
      assertEquals("-01:45", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, 1066);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 1066
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours(690562340);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 690562340
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-389));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -389
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-00:00:02.580");
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.580", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      long long0 = dateTimeZone0.convertLocalToUTC((-2540L), true);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals((-2540L), long0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DateTimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2580));
      String string0 = dateTimeZone0.toString();
      assertEquals("-00:00:02.580", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getName(0L);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("+00:00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:00.001");
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "MIT");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("Pacific/Apia", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      long long0 = dateTimeZone0.convertUTCToLocal(1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Honolulu");
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      dateTimeZone0.UTC.writeReplace();
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.UTC.getShortName(1000000000000L);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }
}
