/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 01:09:33 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Denver");
      long long0 = dateTimeZone0.adjustOffset(9223372036854775802L, true);
      assertEquals(9223372036854775802L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2000, "America/Los_Angeles");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) islamicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(1);
      assertEquals((-41471885222000L), dateMidnight1.getMillis());
      assertEquals(1392364800000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775727L), true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1660));
      DateTimeZone.setDefault(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(13, 59);
      assertEquals("+13:59", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(23, 1);
      assertEquals("+23:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-712));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -712
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3069));
      dateTimeZone0.hashCode();
      assertEquals("-00:00:03.069", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("+00:00:00.003", dateTimeZone0.toString());
      assertEquals("java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      dateTimeZone0.previousTransition(0L);
      assertEquals("+01:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      dateTimeZone0.previousTransition(4);
      assertEquals("+01:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-27));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.previousTransition((-979L));
      assertEquals("-00:00:00.027", cachedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      dateTimeZone0.nextTransition(0L);
      assertEquals("+01:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.nextTransition(68400256L);
      assertEquals(68400256L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.nextTransition((-1663L));
      assertEquals((-1663L), long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      dateTimeZone0.isFixed();
      assertEquals("+00:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(543, "WET");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      dateTimeZone0.getStandardOffset(0L);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      int int0 = dateTimeZone0.getStandardOffset((-2313L));
      assertEquals("+00:00:00.003", dateTimeZone0.toString());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1660));
      int int0 = dateTimeZone0.getStandardOffset(39291904L);
      assertEquals((-1660), int0);
      assertEquals("-00:00:01.660", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 4);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      DateTime dateTime0 = new DateTime((Chronology) zonedChronology0);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals("+00:00:00.004", dateTimeZone0.toString());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1660));
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) copticChronology0);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals((-1660), int0);
      assertEquals("-00:00:01.660", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      dateTimeZone0.getOffset((long) 0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1287);
      int int0 = dateTimeZone0.getOffset((long) 1287);
      assertEquals(1287, int0);
      assertEquals("+00:00:01.287", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3078));
      int int0 = dateTimeZone0.getOffset((long) 0);
      assertEquals("-00:00:03.078", dateTimeZone0.toString());
      assertEquals((-3078), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      dateTimeZone0.getNameKey(3030L);
      assertEquals("+00:00:00.004", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      String string0 = fixedDateTimeZone0.getNameKey((-991));
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1383));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      long long0 = cachedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, 1382L);
      assertEquals("-00:00:01.383", cachedDateTimeZone0.toString());
      assertEquals(1382L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, (-4294967296L));
      assertEquals((-4294967296L), long0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-27));
      String string0 = dateTimeZone0.getID();
      assertEquals("-00:00:00.027", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1660));
      dateTimeZone0.equals(dateTimeZone0);
      assertEquals("-00:00:01.660", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      long long0 = dateTimeZone0.convertUTCToLocal(0L);
      assertEquals(0L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3069));
      long long0 = dateTimeZone0.UTC.convertUTCToLocal((-3069));
      assertEquals((-3069L), long0);
      assertEquals("-00:00:03.069", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1383));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      long long0 = cachedDateTimeZone0.convertLocalToUTC((long) (-1383), false, 1382L);
      assertEquals("-00:00:01.383", cachedDateTimeZone0.getID());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-27));
      long long0 = dateTimeZone0.convertLocalToUTC((long) 23, true, 0L);
      assertEquals(50L, long0);
      assertEquals("-00:00:00.027", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(23);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      long long0 = cachedDateTimeZone0.convertLocalToUTC((long) 1, true, (-1210L));
      assertEquals("+00:00:00.023", cachedDateTimeZone0.toString());
      assertEquals((-22L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1660));
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-1660), false);
      assertEquals("-00:00:01.660", dateTimeZone0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      long long0 = dateTimeZone0.UTC.convertLocalToUTC(100000000L, true);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(100000000L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.adjustOffset(0, true);
      assertEquals(0L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Denver");
      LocalDateTime localDateTime0 = new LocalDateTime(9223372036854775802L);
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap(localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(4);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      // Undeclared exception!
      try { 
        dateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, 9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-551));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -551
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      long long0 = dateTimeZone0.convertLocalToUTC((-1406L), false);
      assertEquals((-1406L), long0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Denver");
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775802L, false, 1073L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3600000);
      long long0 = dateTimeZone0.convertUTCToLocal((-773L));
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(3599227L, long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-27));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(404L);
      assertEquals("-00:00:00.027", cachedDateTimeZone0.toString());
      assertEquals((-27), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-23), 23);
      assertEquals("-23:23", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("wInr0DeH|21");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'wInr0DeH|21' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Cairo");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = islamicChronology0.withUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(9223372036854775807L, chronology0);
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap(localDateTime0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("EET");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      long long0 = dateTimeZone0.adjustOffset((-9223372036854775788L), true);
      assertEquals((-9223372036854775788L), long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Asia/Dhaka");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      long long0 = dateTimeZone0.adjustOffset(9223372036854775807L, true);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-27));
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals("-00:00:00.027", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      long long0 = dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 0L);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      long long0 = dateTimeZone0.convertLocalToUTC(0L, true);
      assertEquals((-3660000L), long0);
      assertEquals("+01:01", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Denver");
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775802L, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Guadalcanal");
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775769L), false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Guadalcanal");
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775769L), true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      // Undeclared exception!
      try { 
        dateTimeZone0.convertUTCToLocal(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3191, "VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(961L);
      assertEquals(25200000, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(543, "WET");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal((-1051L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Guadalcanal");
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775800L);
      assertEquals(38388000, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Auckland");
      int int0 = dateTimeZone0.getOffsetFromLocal((-9223372036854775727L));
      assertEquals(43200000, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Denver");
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775802L);
      assertEquals((-25196000), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Guadalcanal");
      int int0 = dateTimeZone0.getOffsetFromLocal((-9223372036854775769L));
      assertEquals(38388000, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-19));
      boolean boolean0 = dateTimeZone0.isStandardOffset((-19));
      assertTrue(boolean0);
      assertEquals("-19:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(543, "WET");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      boolean boolean0 = dateTimeZone0.isStandardOffset(9223372036854775807L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      DateMidnight dateMidnight0 = new DateMidnight((long) 3);
      dateTimeZone0.UTC.getOffset((ReadableInstant) dateMidnight0);
      assertEquals("+00:00:00.003", dateTimeZone0.getID());
      assertEquals("+00:00:00.003", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3058));
      String string0 = dateTimeZone0.getName((-1683L), (Locale) null);
      assertEquals("-00:00:03.058", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1287);
      Locale locale0 = Locale.KOREA;
      String string0 = dateTimeZone0.UTC.getName((long) 1287, locale0);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("+00:00:01.287", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      String string0 = dateTimeZone0.getShortName((long) 1, (Locale) null);
      assertEquals("+00:01", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      Locale locale0 = Locale.UK;
      String string0 = dateTimeZone0.getShortName((-1040L), locale0);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      assertEquals("+00:00:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("EET");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT-00");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1660));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '-00:00:01.660' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(2147483548);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 2147483548
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-1103459416));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -1103459416
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(1, 519);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 519
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(1008, 1008);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 1008
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-509), 3600);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -509
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-00:00:03.078");
      assertEquals("-00:00:03.078", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:00.004");
      assertEquals("+00:00:00.004", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("+00:00");
      assertNotSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(6);
      String string0 = dateTimeZone0.toString();
      assertEquals("+06:00", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      String string0 = dateTimeZone0.getName(23L);
      assertEquals("+00:00", string0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+00:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(fixedDateTimeZone0);
      TimeZone timeZone0 = cachedDateTimeZone0.toTimeZone();
      assertEquals("UTC", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-19));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("-19:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone1);
      assertEquals("-19:00", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Denver");
      LocalDateTime localDateTime0 = new LocalDateTime();
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertNotNull(dateTimeZone0);
      
      dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      boolean boolean0 = fixedDateTimeZone0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      String string0 = dateTimeZone0.getShortName((long) 0);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
  }
}
