/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 08:50:03 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Kolkata");
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.adjustOffset((-764145000000L), true);
      assertEquals((-764145000000L), long0);
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VST");
      assertNotNull(timeZone0);
      assertEquals("VST", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("VST", timeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.adjustOffset(9223372036854775807L, true);
      assertEquals(9223372036854775807L, long0);
      assertEquals("VST", timeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Los_Angeles");
      assertNotNull(dateTimeZone0);
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC((-514L), false);
      assertEquals(28799486L, long0);
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Apia");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Apia", dateTimeZone0.toString());
      assertEquals("Pacific/Apia", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775808L), true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(413, "NST");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=NST,offset=413,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("NST", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(413, simpleTimeZone0.getRawOffset());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=NST,offset=413,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("NST", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(413, simpleTimeZone0.getRawOffset());
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC(1337L, true, (long) (-2207));
      assertEquals((-43198663L), long0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=NST,offset=413,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("NST", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(413, simpleTimeZone0.getRawOffset());
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+20:00", dateTimeZone0.toString());
      assertEquals("+20:00", dateTimeZone0.getID());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+20:00", dateTimeZone0.toString());
      assertEquals("+20:00", dateTimeZone0.getID());
      assertEquals("GMT+20:00", timeZone0.getID());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+20:00", dateTimeZone0.toString());
      assertEquals("+20:00", dateTimeZone0.getID());
      assertEquals("GMT+20:00", timeZone0.getID());
      assertEquals("+20:00", dateTimeZone1.toString());
      assertEquals("+20:00", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:59:59.999", dateTimeZone0.toString());
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 59);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:59", dateTimeZone0.getID());
      assertEquals("+01:59", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(23, (-205));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -205
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((byte) (-23));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:00", dateTimeZone0.toString());
      assertEquals("-23:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:02.050");
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:02.050", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.050", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      dateTimeZone0.hashCode();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2207));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.207", dateTimeZone0.toString());
      assertEquals("-00:00:02.207", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("-00:00:02.207", dateTimeZone0.toString());
      assertEquals("-00:00:02.207", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:02.207,offset=-2207,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals((-2207), timeZone0.getRawOffset());
      assertEquals("-00:00:02.207", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.previousTransition(0);
      assertEquals(0L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.previousTransition(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1L, long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(413, "NST");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(413, simpleTimeZone0.getRawOffset());
      assertEquals("NST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=NST,offset=413,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(413, simpleTimeZone0.getRawOffset());
      assertEquals("NST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=NST,offset=413,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.previousTransition(1337L);
      assertEquals((-923304600001L), long0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(413, simpleTimeZone0.getRawOffset());
      assertEquals("NST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=NST,offset=413,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = fixedDateTimeZone0.nextTransition(0L);
      assertEquals(0L, long0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.nextTransition(43200000L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(43200000L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      long long0 = fixedDateTimeZone0.nextTransition((-935L));
      assertEquals((-935L), long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1000, "NST");
      assertNotNull(simpleTimeZone0);
      assertEquals("NST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=NST,offset=1000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1000, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("NST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=NST,offset=1000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1000, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertEquals("NST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=NST,offset=1000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1000, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      int int0 = fixedDateTimeZone0.getStandardOffset(251L);
      assertEquals(0, int0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(413);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.413", dateTimeZone0.toString());
      assertEquals("+00:00:00.413", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getStandardOffset(3);
      assertEquals(413, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.413", dateTimeZone0.toString());
      assertEquals("+00:00:00.413", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2207));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.207", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.207", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getStandardOffset(680L);
      assertEquals((-2207), int0);
      assertEquals("-00:00:02.207", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.207", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((byte) (-19));
      assertNotNull(dateTimeZone0);
      assertEquals("-19:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-19:00", dateTimeZone0.getID());
      
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertEquals((-68400000), int0);
      assertEquals("-19:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-19:00", dateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(413);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.413", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.413", dateTimeZone0.toString());
      
      int int0 = dateTimeZone0.UTC.getOffset(1602L);
      assertEquals(0, int0);
      assertEquals("+00:00:00.413", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.413", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(413);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.413", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.413", dateTimeZone0.toString());
      
      int int0 = dateTimeZone0.getOffset(763L);
      assertEquals(413, int0);
      assertEquals("+00:00:00.413", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.413", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2207));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:02.207", dateTimeZone0.toString());
      assertEquals("-00:00:02.207", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.getOffset(4282L);
      assertEquals((-2207), int0);
      assertEquals("-00:00:02.207", dateTimeZone0.toString());
      assertEquals("-00:00:02.207", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12825000);
      assertNotNull(dateTimeZone0);
      assertEquals("+03:33:45", dateTimeZone0.getID());
      assertEquals("+03:33:45", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      String string0 = dateTimeZone0.getNameKey((-846L));
      assertNull(string0);
      assertEquals("+03:33:45", dateTimeZone0.getID());
      assertEquals("+03:33:45", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(413, "NST");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=NST,offset=413,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(413, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("NST", simpleTimeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=NST,offset=413,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(413, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("NST", simpleTimeZone0.getID());
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
      
      String string0 = dateTimeZone0.getNameKey(413);
      assertEquals("NZST", string0);
      assertNotNull(string0);
      assertEquals("java.util.SimpleTimeZone[id=NST,offset=413,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(413, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("NST", simpleTimeZone0.getID());
      assertEquals("Pacific/Auckland", dateTimeZone0.getID());
      assertEquals("Pacific/Auckland", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone1.toString());
      assertEquals("+00:00:00.001", dateTimeZone1.getID());
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      
      long long0 = dateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone1.toString());
      assertEquals("+00:00:00.001", dateTimeZone1.getID());
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(413);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.413", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.413", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-2207));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-00:00:02.207", dateTimeZone1.toString());
      assertEquals("-00:00:02.207", dateTimeZone1.getID());
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (-935L));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertEquals(1685L, long0);
      assertEquals("+00:00:00.413", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.413", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-00:00:02.207", dateTimeZone1.toString());
      assertEquals("-00:00:02.207", dateTimeZone1.getID());
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      String string0 = fixedDateTimeZone0.getID();
      assertEquals("UTC", string0);
      assertNotNull(string0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((byte) (-10));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-10:00", dateTimeZone0.toString());
      assertEquals("-10:00", dateTimeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.equals(dateTimeZone0);
      assertTrue(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-10:00", dateTimeZone0.toString());
      assertEquals("-10:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Kolkata");
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      assertNotNull(defaultNameProvider0);
      
      boolean boolean0 = dateTimeZone0.equals(defaultNameProvider0);
      assertFalse(boolean0);
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((byte)0);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.UTC.convertUTCToLocal((byte)0);
      assertEquals(0L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2207));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.207", dateTimeZone0.toString());
      assertEquals("-00:00:02.207", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertUTCToLocal(2592000000L);
      assertEquals(2591997793L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.207", dateTimeZone0.toString());
      assertEquals("-00:00:02.207", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = fixedDateTimeZone0.convertUTCToLocal((-4294967296L));
      assertEquals((-4294967296L), long0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(578);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 578, true, 0L);
      assertEquals(0L, long0);
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(454);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.454", dateTimeZone0.toString());
      assertEquals("+00:00:00.454", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.convertLocalToUTC(1337L, true, (long) (-2207));
      assertEquals(883L, long0);
      assertEquals("+00:00:00.454", dateTimeZone0.toString());
      assertEquals("+00:00:00.454", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.adjustOffset(0L, true);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Kolkata");
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      
      DateTimeUtils.setCurrentMillisFixed(9223372036854775807L);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap(localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(413, "America/Los_Angeles");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(413, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=413,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(413, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=413,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Kolkata");
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC((-764144999965L), true, (-1535L));
      assertEquals((-764168399965L), long0);
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+20:00", dateTimeZone0.toString());
      assertEquals("+20:00", dateTimeZone0.getID());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+20:00", dateTimeZone0.toString());
      assertEquals("+20:00", dateTimeZone0.getID());
      
      DateMidnight dateMidnight0 = new DateMidnight((long) 20, (Chronology) iSOChronology0);
      assertNotNull(dateMidnight0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+20:00", dateTimeZone0.toString());
      assertEquals("+20:00", dateTimeZone0.getID());
      assertEquals((-72000000L), dateMidnight0.getMillis());
      
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((long) 39, 39);
      assertSame(dateMidnight0, dateMidnight1);
      assertSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+20:00", dateTimeZone0.toString());
      assertEquals("+20:00", dateTimeZone0.getID());
      assertEquals((-72000000L), dateMidnight0.getMillis());
      assertEquals((-72000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2795, "VST");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2795, simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=2795,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2795, simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=2795,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffsetFromLocal(2795);
      assertEquals(25200000, int0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2795, simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=2795,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(fixedDateTimeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", cachedDateTimeZone0.toString());
      assertEquals("UTC", cachedDateTimeZone0.getID());
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal((-1694L));
      assertEquals(0, int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", cachedDateTimeZone0.toString());
      assertEquals("UTC", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string0 = dateTimeZone0.getName(3600000L, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2029);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.029", dateTimeZone0.toString());
      assertEquals("+00:00:02.029", dateTimeZone0.getID());
      
      String string0 = dateTimeZone0.getName((-72000000L), (Locale) null);
      assertEquals("+00:00:02.029", string0);
      assertNotNull(string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.029", dateTimeZone0.toString());
      assertEquals("+00:00:02.029", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((byte) (-19), 46);
      assertNotNull(dateTimeZone0);
      assertEquals("-19:46", dateTimeZone0.toString());
      assertEquals("-19:46", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-24589507), 3653);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -24589507
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("zcu2Jn2*1Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'zcu2Jn2*1Q' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Apia");
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Apia", dateTimeZone0.toString());
      assertEquals("Pacific/Apia", dateTimeZone0.getID());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals("Pacific/Apia", dateTimeZone0.toString());
      assertEquals("Pacific/Apia", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Kolkata");
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.adjustOffset((-764145000001L), true);
      assertEquals((-764141400001L), long0);
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Kolkata");
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.adjustOffset((-764144999965L), false);
      assertEquals((-764148599965L), long0);
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Kolkata");
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.adjustOffset((-764148600000L), false);
      assertEquals((-764148600000L), long0);
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "America/New_York");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("America/New_York", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/New_York,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("America/New_York", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/New_York,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/New_York", dateTimeZone0.getID());
      assertEquals("America/New_York", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.adjustOffset(9223372036854775807L, true);
      assertEquals(9223372036854775807L, long0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("America/New_York", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/New_York,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/New_York", dateTimeZone0.getID());
      assertEquals("America/New_York", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Kolkata");
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.adjustOffset((-764148600028L), false);
      assertEquals((-764148600028L), long0);
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(454);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.454", dateTimeZone0.getID());
      assertEquals("+00:00:00.454", dateTimeZone0.toString());
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
      assertFalse(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.454", dateTimeZone0.getID());
      assertEquals("+00:00:00.454", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2207));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.207", dateTimeZone0.getID());
      assertEquals("-00:00:02.207", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-2207), true);
      assertEquals(0L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.207", dateTimeZone0.getID());
      assertEquals("-00:00:02.207", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Kolkata");
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC((-764144999965L), false);
      assertEquals((-764168399965L), long0);
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "America/New_York");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("America/New_York", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/New_York,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("America/New_York", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/New_York,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/New_York", dateTimeZone0.getID());
      assertEquals("America/New_York", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12825000);
      assertNotNull(dateTimeZone0);
      assertEquals("+03:33:45", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+03:33:45", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertUTCToLocal(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2207));
      long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 413);
      assertEquals("-00:00:02.207", dateTimeZone0.getID());
      assertEquals((-1794L), long0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(746, "VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
      assertEquals(28800000, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1000, "NST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withYear(1000);
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1686), "America/New_York");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal((-611L));
      assertEquals((-18000000), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Kolkata");
      int int0 = dateTimeZone0.getOffsetFromLocal((-764144999965L));
      assertEquals(23400000, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1686), "America/New_York");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
      assertEquals((-17762000), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      boolean boolean0 = dateTimeZone0.UTC.isStandardOffset(86400L);
      assertTrue(boolean0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(454, "NST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      boolean boolean0 = dateTimeZone0.isStandardOffset(454);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = new DateMidnight((long) 20, (Chronology) iSOChronology0);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertEquals((-72000000L), dateMidnight0.getMillis());
      assertEquals("+20:00", dateTimeZone0.toString());
      assertEquals(72000000, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(413);
      String string0 = dateTimeZone0.getShortName((-3301L), (Locale) null);
      assertEquals("+00:00:00.413", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(413, "NST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      Locale locale0 = Locale.ROOT;
      String string0 = dateTimeZone0.getShortName(2093L, locale0);
      assertNotNull(string0);
      assertEquals("+12:00", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(454, "NST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(578);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '+00:00:00.578' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "GMT+00");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(511708224L, false);
      assertEquals(511708224L, long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      dateTimeZone0.UTC.getOffset((ReadableInstant) null);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 2147483647
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-1796559754));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -1796559754
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, 795);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 795
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-79236719));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -79236719
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(99, 99);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 99
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-1079));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -1079
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      assertEquals("+00:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-00:00:00.068");
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.068", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeZone.forID("+00:00");
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((byte) (-68));
      String string0 = dateTimeZone0.toString();
      assertEquals("-00:00:00.068", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      String string0 = dateTimeZone0.getName((long) 1);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((byte) (-10));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("-10:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(454, "NST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("Pacific/Auckland", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1000, "NST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(578, set0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(fixedDateTimeZone0);
      
      ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((byte)0);
      String string0 = dateTimeZone0.getShortName((long) (byte)0);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
  }
}
