/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 08:54:07 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xArray cannot be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x7f;C6X<P7W_|F+U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xeaJx\"}hV-0~Dt+'JP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0y/X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-67), (byte) (-89), (byte) (-67));
      assertEquals((byte) (-67), byte0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1), (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short short0 = NumberUtils.max((short)21, (short)21, (short) (-1406));
      assertEquals((short)21, short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = NumberUtils.max(57, (-3063), (-3063));
      assertEquals(57, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = NumberUtils.max(1L, 1195L, 1L);
      assertEquals(1195L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = NumberUtils.max(94L, 94L, 94L);
      assertEquals(94L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)40, (byte)57, (byte)40);
      assertEquals((byte)40, byte0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (-1);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-119);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[2] = (short)43;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)43, short0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[2] = 953;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(953, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 102;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x0xY] UcL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0xY] UcL\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = NumberUtils.toShort("", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = NumberUtils.toShort("");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      short short0 = NumberUtils.toShort("2");
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = NumberUtils.toLong("$2qA#<N/.", (-2380L));
      assertEquals((-2380L), long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = NumberUtils.toLong("3");
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = NumberUtils.toLong("-2");
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = NumberUtils.toInt("-0XTv*\"D7", (-3109));
      assertEquals((-3109), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = NumberUtils.toInt("3");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = NumberUtils.toFloat("Array cannot be empty.", (float) (byte)0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = NumberUtils.toFloat("dK,*>tG", (-1.4324932F));
      assertEquals((-1.4324932F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = NumberUtils.toFloat("3");
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-1F");
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = NumberUtils.toDouble("irjSRf5Id<\"@d&+$zoY", (double) 108.0F);
      assertEquals(108.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = NumberUtils.toDouble("kcK8A!DW");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = NumberUtils.toDouble("1");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("0xSearch and Replace array lengths don't match: ", (byte) (-6));
      assertEquals((byte) (-6), byte0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("40");
      assertEquals((byte)40, byte0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-4");
      assertEquals((byte) (-4), byte0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)50;
      shortArray0[1] = (short) (byte)50;
      shortArray0[2] = (short) (byte)50;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)50, short0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-44);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-44), short0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)50;
      longArray0[1] = (long) (short)50;
      longArray0[2] = (long) (short)50;
      longArray0[3] = (long) (short)50;
      longArray0[4] = (long) (short)50;
      longArray0[5] = (long) (short)50;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(50L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)399;
      intArray0[1] = (int) (short)399;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(399, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1984);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1984), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)91;
      floatArray0[1] = (float) (byte)91;
      floatArray0[2] = 108.0F;
      floatArray0[3] = (float) 108;
      floatArray0[4] = (float) 108;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(91.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-1.0F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3L;
      doubleArray0[1] = (double) (byte)3;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-1.0);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)63;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)60, byte0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-10), byte0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-3216), (short) (-507), (short) (-3216));
      assertEquals((short) (-3216), short0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = NumberUtils.min(68, 68, 68);
      assertEquals(68, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float float0 = NumberUtils.min(317.0F, 317.0F, 317.0F);
      assertEquals(317.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float float0 = NumberUtils.min((float) (-584L), 2429.6F, 0.0F);
      assertEquals((-584.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = NumberUtils.min(1.0, 779.43696, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = NumberUtils.min(1.0, (double) (byte)11, 1361.81077549);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1442);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1442), short0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[2] = 1L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1488);
      longArray0[1] = (long) (-1488);
      longArray0[2] = (-2362L);
      longArray0[3] = (long) (-1488);
      longArray0[4] = (long) (-1488);
      longArray0[5] = (long) (-1488);
      longArray0[6] = (long) (-1488);
      longArray0[7] = (long) (-1488);
      longArray0[8] = (long) (-1488);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1488L), long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1488);
      intArray0[1] = (-1488);
      intArray0[2] = (-1488);
      intArray0[3] = (-1488);
      intArray0[4] = (-1488);
      intArray0[5] = (-1488);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-1488), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 223.3256F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(223.3256F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1488);
      floatArray0[1] = (float) (-1488);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1488.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 2305.329;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(2305.329, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1494.43F);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1494.4300537109375), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-27);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-27), byte0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = NumberUtils.max((long) (byte) (-76), 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = NumberUtils.max(3842, 3842, 3842);
      assertEquals(3842, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = NumberUtils.max((-1494.0F), 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float float0 = NumberUtils.max((float) (-1984), (float) (-1984), (float) (-1984));
      assertEquals((-1984.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = NumberUtils.max((double) (-1984), 0.0, (double) (-1984));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = NumberUtils.max((-296.519), (-2352.1956914), (-2352.1956914));
      assertEquals((-296.519), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("08");
      assertEquals((byte)8, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Long long0 = NumberUtils.createLong("3");
      assertEquals(3L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0xBD");
      assertEquals(189, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0x1F");
      assertEquals((-31), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("2");
      assertEquals(2.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-1F");
      assertEquals((-1.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("1F");
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("48");
      assertEquals((short)48, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-2");
      assertEquals((short) (-2), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("51");
      assertEquals((short)51, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("EeQ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"EeQ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("[Klyz2lf^L-\"gPLa");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("Strings must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("/k WeX6JCj");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("-0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0X-0X-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-2");
      assertEquals((byte) (-2), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0x1F");
      assertEquals((-31L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger(" vs ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" vs \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-1F");
      assertEquals((-1.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      short short0 = NumberUtils.toShort("uH{GJZ|no6u)}oP", (short) (-2201));
      assertEquals((short) (-2201), short0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("3", (byte)0);
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = NumberUtils.toDouble("qG9wEnCe$+vb_", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, 2382.2122F);
      assertEquals(2382.2122F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = NumberUtils.toLong("J", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = NumberUtils.toInt("ib", (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5eI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("9L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5e.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--^{B|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4Ee6>>LEd");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("35eL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9e| )q,w@>K(JN&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x-0XO!6BQ4^A[GA0-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x1F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0x1F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-89), (byte) (-89), (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-89), (byte) (-67), (byte) (-89));
      assertEquals((byte) (-67), byte0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)106, (byte)106, (byte)106);
      assertEquals((byte)106, byte0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-2471), (short) (-4978), (short) (-1592));
      assertEquals((short) (-1592), short0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = NumberUtils.max((-1), (-1), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = NumberUtils.max((-532), (-22), (-945));
      assertEquals((-22), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = NumberUtils.max((-1423L), (long) (-1488), (-1423L));
      assertEquals((-1423L), long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)102, (byte)102, (byte)65);
      assertEquals((byte)65, byte0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte) (-6), (byte)8);
      assertEquals((byte) (-6), byte0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      short short0 = NumberUtils.min((short)760, (short) (byte)0, (short)1735);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short short0 = NumberUtils.min((short)2702, (short)2702, (short)108);
      assertEquals((short)108, short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte)75, 0, (-792));
      assertEquals((-792), int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = NumberUtils.min(0, 1431655765, 1431655765);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = NumberUtils.min(0L, 1565L, (-715L));
      assertEquals((-715L), long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)3, 0L, 3L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long long0 = NumberUtils.min(1809L, 1809L, 1809L);
      assertEquals(1809L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1164.9352F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1409);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)76;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)76, byte0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-32255);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-67);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-2914L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)91;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 516.9159;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)662;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 76;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[6] = (-1327L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1327L), long0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        NumberUtils.createNumber("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".8");
      assertEquals(0.8F, number0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0.");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber("pGUeUAkKuWm7]EE-1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-2znZC]<j95yL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -2znZC]<j95yL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-9L");
      assertEquals((-9L), number0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        NumberUtils.createNumber("bEl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // bEl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber("D9+W.l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D9+W.l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0f");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0d");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("9L");
      assertEquals(9L, number0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1F");
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3D");
      assertEquals(3.0, number0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0eHV3FbZOz*FW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0eHV3FbZOz*FW is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("}eeq{ehJlYwMugE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // }eeq{ehJlYwMugE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0EF%aD!zJZN&;EK<c3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.math.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.math.NumberUtils is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        NumberUtils.createNumber("QCINk.-ys4)HMWE|keW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // QCINk.-ys4)HMWE|keW is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xArray cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Array cannot be empty.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--1~sO|,");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)1171);
      assertEquals((short)1171, short0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (-873.11910916));
      assertEquals((-873.11910916), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (long) (short)399);
      assertEquals(399L, long0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (int) (byte)11);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      short short0 = NumberUtils.toShort("-1");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int int0 = NumberUtils.toInt("-1");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      long long0 = NumberUtils.toLong("-0x");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double double0 = NumberUtils.max((-1.0), (double) (byte)23, 3636.493986041027);
      assertEquals(3636.493986041027, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("Array cannot be empty.");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((-1423L), (long) numberUtils0.INTEGER_ZERO, (long) numberUtils0.INTEGER_ONE);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double double0 = NumberUtils.min(16.0, (-1317.9085286920094), 286.97690444005);
      assertEquals((-1317.9085286920094), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-1");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 0.0F, 2722.65F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      float float0 = NumberUtils.max((-1494.43F), 2565.0F, 0.0F);
      assertEquals(2565.0F, float0, 0.01F);
  }
}
