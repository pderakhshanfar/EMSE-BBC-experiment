/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 09:07:44 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x96");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0z|E6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)127, (byte)0, (byte)127);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-1), (short)262, (short) (byte)0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = NumberUtils.min(1L, 1L, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = NumberUtils.min(0L, 0L, 1470L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 818L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(818L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-881.5650744385);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-881.5650744385), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-31384);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-31384), short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        NumberUtils.createNumber("OvX5RFC)5a0iF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // OvX5RFC)5a0iF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short short0 = NumberUtils.toShort("--)~_*k~;m4Ihzi2", (short) (-1454));
      assertEquals((short) (-1454), short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short short0 = NumberUtils.toShort("jqzRP\"hc*2");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short short0 = NumberUtils.toShort("48");
      assertEquals((short)48, short0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = NumberUtils.toLong("0mSfY6e; i0OR", (long) (short) (-1454));
      assertEquals((-1454L), long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = NumberUtils.toLong("3");
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = NumberUtils.toLong("-7");
      assertEquals((-7L), long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = NumberUtils.toInt("KqC#Q5gfyoLi_RrYs", (-3377));
      assertEquals((-3377), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = NumberUtils.toInt("32");
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = NumberUtils.toInt("-7");
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = NumberUtils.toFloat("Z$2>z", (float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = NumberUtils.toFloat("0/MQW'W'", (float) 173L);
      assertEquals(173.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float float0 = NumberUtils.toFloat("0X");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = NumberUtils.toDouble("C94,@op9n8", (-2924.24214));
      assertEquals((-2924.24214), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = NumberUtils.toDouble("2");
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-5");
      assertEquals((-5.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("$$X8W0u4Ej1qb)", (byte)59);
      assertEquals((byte)59, byte0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("0x0cZEx+4~?xFn");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("4");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)679;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)679, short0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short) (-657);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-657), short0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 68L;
      longArray0[1] = 1L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-3657L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-3657L), long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 133;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(133, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-807);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-807), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = 288.4681F;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = 288.4681F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-83.04265F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-83.04265F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1931.0F;
      doubleArray0[1] = (double) 1931.0F;
      doubleArray0[2] = (double) 1931.0F;
      doubleArray0[3] = (double) 1931.0F;
      doubleArray0[4] = (double) 1931.0F;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1931.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)108;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-40), byte0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      short short0 = NumberUtils.min((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = NumberUtils.min(1422L, 3125L, (long) (byte) (-1));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = NumberUtils.min(84, 40, 2208);
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float float0 = NumberUtils.min(3427.0F, 3427.0F, 3427.0F);
      assertEquals(3427.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = NumberUtils.min(4495.858F, (-1.0F), (float) (-1454));
      assertEquals((-1454.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, (double) 0L, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = NumberUtils.min((double) 288.4681F, (double) 288.4681F, (double) (short)462);
      assertEquals(288.4681091308594, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)65, (byte)65, (byte)103);
      assertEquals((byte)65, byte0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3835);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-3835), short0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-26);
      longArray0[1] = (long) (byte) (-26);
      longArray0[2] = (long) (byte) (-26);
      longArray0[3] = (long) (byte) (-26);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-26L), long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2224);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-2224), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-18);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-18.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1660.5128896176407;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1660.5128896176407, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)59;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)59, byte0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-122), byte0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = NumberUtils.max(0L, (-1226L), (-1226L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = NumberUtils.max(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float float0 = NumberUtils.max((float) (short) (-4897), (-1.0F), 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float float0 = NumberUtils.max(623.0F, (-679.0F), (float) (short) (-173));
      assertEquals(623.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = NumberUtils.max(0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = NumberUtils.max((-4790.95918206), (-967.0), (-2517.995));
      assertEquals((-967.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)127);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("08");
      assertEquals((short)8, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0Xf");
      assertEquals(15L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0x0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("48");
      assertEquals(48, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-3");
      assertEquals((-3.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("5");
      assertEquals(5.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-3");
      assertEquals((-3.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-05");
      assertEquals((short) (-5), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("3");
      assertEquals((short)3, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-7");
      assertEquals((byte) (-7), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("0z|E6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"z|E6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("JhNG4@]j5j2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Jh\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal(" 5zan7#f(w)czm=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("00");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("`Ta|UKHhD;O~(A5'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("+8");
      assertEquals((short)8, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0X2");
      assertEquals((-2L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0XC");
      assertEquals((-12), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("00");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("32");
      assertEquals(32.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      short short0 = NumberUtils.toShort("", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("tY2lD rVC5HjIg_", (byte) (-26));
      assertEquals((byte) (-26), byte0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", (double) 46);
      assertEquals(46.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = NumberUtils.toLong("Z$2>z", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = NumberUtils.toInt("nrdpU8lZ", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--)~_*k~;m4Ihzi2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+9^L&U@S,=i<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("ecY8-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5E.jlIR+Uozj-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0El");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xay,c9I5+Bh]8PeI`t0-i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xA blank string is not a valid number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-117), (byte) (-22), (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte) (-9));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-847), (short) (-2188), (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-2674), (short)391, (short) (-3345));
      assertEquals((short)391, short0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-17), (short) (-17), (short) (-17));
      assertEquals((short) (-17), short0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = NumberUtils.max((-1771), (-1771), 88);
      assertEquals(88, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = NumberUtils.max((int) (short)0, 76, 1);
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = NumberUtils.max((int) (short) (-17), (-1720), (-1720));
      assertEquals((-17), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 1L, 2170L);
      assertEquals(2170L, long0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = NumberUtils.max((-1L), (-1L), (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)84, (byte)126, (byte) (-3));
      assertEquals((byte) (-3), byte0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte) (-12), (byte)0);
      assertEquals((byte) (-12), byte0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-1), (short) (-4897), (short) (-1263));
      assertEquals((short) (-4897), short0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short short0 = NumberUtils.min((short)3256, (short)3256, (short)76);
      assertEquals((short)76, short0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, (-4384));
      assertEquals((-4384), int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = NumberUtils.min(1, (int) (byte)0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = NumberUtils.min((int) (short) (-1), 0, 1050);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = NumberUtils.min(2170L, 1639L, (long) (byte)41);
      assertEquals(41L, long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[] floatArray0 = new float[22];
      floatArray0[2] = 2331.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(2331.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[4] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2977.2971777012267);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-22);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short) (byte)50;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)50, short0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = 597;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(597, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-2645L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)73;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2659.89;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2325;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 4768;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 68L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("7.");
      assertEquals(7.0F, number0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("+0.");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0EO9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        NumberUtils.createNumber("meE1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"meE1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("5d");
      assertEquals(5.0, number0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0f");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0g,49`A!9l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -0g,49`A!9l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0L");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-6L");
      assertEquals((-6L), number0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        NumberUtils.createNumber("m3!t.ZL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // m3!t.ZL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("53f");
      assertEquals(53.0F, number0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("j#D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // j#D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0eY");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0eY is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.F");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("`7CF&Dpqe8Ha2uE}W}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // `7CF&Dpqe8Ha2uE}W} is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        NumberUtils.createNumber("YPgj.r&]/~v(hIE,OXA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // YPgj.r&]/~v(hIE,OXA is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      try { 
        NumberUtils.createNumber("L.E^y<H@L%s#3mrre");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // L.E^y<H@L%s#3mrre is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0XAborting to protect against StackOverflowError - output of one loop is the input of another");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Aborting to protect against StackOverflowError - output of one loop is the input of another\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X-0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x-0xw&';-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--)~_*k~;m4Ihzi2");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)2);
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, 539L);
      assertEquals(539L, long0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      short short0 = NumberUtils.toShort("-6");
      assertEquals((short) (-6), short0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      float float0 = NumberUtils.toFloat("4");
      assertEquals(4.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      long long0 = NumberUtils.toLong("-");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double double0 = NumberUtils.max(1.0, (-822.64750582328), (-822.64750582328));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-4");
      assertEquals((byte) (-4), byte0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double double0 = NumberUtils.min(2790.3883, 0.0, (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 1520.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      float float0 = NumberUtils.max((float) (short) (-4897), (float) (short) (-1), (float) (short) (-1));
      assertEquals((-1.0F), float0, 0.01F);
  }
}
