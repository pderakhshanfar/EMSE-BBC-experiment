/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 07:00:22 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xBf0a=Gno ^y< [>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      short short0 = NumberUtils.min((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte)0, 168, 1217);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short short0 = NumberUtils.toShort("b21=1,o_V+RGJu1D8", (short) (-1506));
      assertEquals((short) (-1506), short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short short0 = NumberUtils.toShort("4");
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = NumberUtils.toLong("d}", (long) (short)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = NumberUtils.toLong("+2");
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = NumberUtils.toInt("-0x", (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = NumberUtils.toInt("-pF{*}=t_", (int) (byte) (-92));
      assertEquals((-92), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = NumberUtils.toInt("4");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", 1319.1052F);
      assertEquals(1319.1052F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-0X`|;Zl2SM2", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float float0 = NumberUtils.toFloat("5f");
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = NumberUtils.toDouble("9d");
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("--", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("b$A5-nY2_NkL+o", (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("59");
      assertEquals((byte)59, byte0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1415;
      shortArray0[1] = (short)244;
      shortArray0[2] = (short)204;
      shortArray0[3] = (short)100;
      shortArray0[4] = (short)3074;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)100, short0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)99;
      longArray0[1] = (long) (byte)99;
      longArray0[2] = (long) (byte)99;
      longArray0[3] = (long) (byte)99;
      longArray0[4] = (long) (byte)99;
      longArray0[5] = (long) (byte)99;
      longArray0[6] = (long) (byte)99;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-1889);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1889), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 5058.294921875;
      doubleArray0[1] = (double) 5058.295F;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(5058.294921875, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)3;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-2097), (short)0, (short) (byte)69);
      assertEquals((short) (-2097), short0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = NumberUtils.min((long) 0, (long) 0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte)108, 45, (int) (byte)78);
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float float0 = NumberUtils.min(5058.295F, 5058.295F, 5058.295F);
      assertEquals(5058.295F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = NumberUtils.min((float) (byte)56, (float) (byte)68, (-2652.087F));
      assertEquals((-2652.087F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = NumberUtils.min(2850.683510398172, (double) 0.0F, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = NumberUtils.min(1.0, 0.0, (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2842);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-2842), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[6];
      floatArray0[5] = (float) numberUtils0.FLOAT_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-29);
      floatArray0[1] = (float) (byte) (-36);
      floatArray0[2] = (float) (byte) (-29);
      floatArray0[3] = (float) (byte) (-36);
      floatArray0[4] = (float) (byte) (-29);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-29.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1922);
      doubleArray0[1] = (double) (short) (-1922);
      doubleArray0[2] = (double) (short) (-1922);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1922.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.BYTE_ZERO, (short)0, (short) (-1427));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1922), (short) (-1922), (short) (-1922));
      assertEquals((short) (-1922), short0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = NumberUtils.max((-252L), (-252L), (-252L));
      assertEquals((-252L), long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = NumberUtils.max(0, 0, (-2749));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = NumberUtils.max((-1609), (-1609), (-1609));
      assertEquals((-1609), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float float0 = NumberUtils.max((-5262.414F), 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float float0 = NumberUtils.max((float) (byte) (-5), (float) (-5), (-2014.6619F));
      assertEquals((-5.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = NumberUtils.max((double) (-2286L), (double) 0L, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = NumberUtils.max((-1.0), (-1.0), (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-21), (byte) (-21), (byte) (-69));
      assertEquals((byte) (-21), byte0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Long long0 = NumberUtils.createLong("9");
      assertEquals(9L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0xe");
      assertEquals((-14L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("3");
      assertEquals(3, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0x5f");
      assertEquals((-95), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-0");
      assertEquals(-0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("9d");
      assertEquals(9.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("4");
      assertEquals(4.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("930");
      assertEquals((byte) (-94), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("2");
      assertEquals((short)2, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("-0xBf0a=Gno ^y< [>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Bf0a=Gno ^y< [>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("o9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("Aborting to protect against StackOverflowError - output of one loop is the input of another");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("vhyM)N$\"kieHlG9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("..");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("8");
      assertEquals((byte)8, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      short short0 = NumberUtils.toShort("d}", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("0x;x-0`|;l2SM2", (byte)99);
      assertEquals((byte)99, byte0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = NumberUtils.toDouble("6HoXi", 4316.91481706);
      assertEquals(4316.91481706, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float float0 = NumberUtils.toFloat("^$(2{;\"ZX", (float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (long) (-1191));
      assertEquals((-1191L), long0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = NumberUtils.toLong("", 3048L);
      assertEquals(3048L, long0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = NumberUtils.toInt("0xe", 1052);
      assertEquals(1052, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("9l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E-tehV06}y^_Ke");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+S:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("ep5o1aTV!p1DX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("7ee#h~=elf)-Vp.lu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("7E.yb(e(o0:NIM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0eR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x(8e1%cv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xAborting to prtect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0{Y7yeV6buVjm(P?$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-1), (byte) (-1), (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-18), (byte)69, (byte)69);
      assertEquals((byte)69, byte0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)126, (byte) (-18), (byte)79);
      assertEquals((byte)126, byte0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short)0, (short)802);
      assertEquals((short)802, short0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1), (short)254, (short)254);
      assertEquals((short)254, short0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      short short0 = NumberUtils.max((short)21845, (short)45, (short) (-246));
      assertEquals((short)21845, short0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) (byte) (-1), (int) numberUtils0.SHORT_ZERO, 175);
      assertEquals(175, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = NumberUtils.max(32, 2, 2);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = NumberUtils.max((-1659L), 0L, (-4658L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max(0L, (long) (byte) (-1), (long) numberUtils0.BYTE_ONE);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte) (-98));
      assertEquals((byte) (-98), byte0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)68, (byte)56, (byte)68);
      assertEquals((byte)56, byte0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_MINUS_ONE, (byte)10, (byte)65);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      short short0 = NumberUtils.min((short)1613, (short)65, (short)8);
      assertEquals((short)8, short0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = NumberUtils.min((int) (short)1415, (int) (short)204, (-2993));
      assertEquals((-2993), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = NumberUtils.min((-1L), 128L, (-25L));
      assertEquals((-25L), long0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = NumberUtils.min((-1L), (-2685L), 0L);
      assertEquals((-2685L), long0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((long) numberUtils0.LONG_ONE, (long) numberUtils0.SHORT_ONE, 811L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1506);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[4] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)89;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)89, byte0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)1769;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1769, short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[3] = 16;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[2] = 907L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(907L, long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 3369.42F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[5] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-94);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-94), byte0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short) (-1551);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1551), short0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-1506L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1506L), long0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("5e9");
      assertEquals(5.0E9F, number0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      try { 
        NumberUtils.createNumber("{e*n:M[^|k|Er3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{e*n:\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0f");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0<>x/2Sa`/TDqggbl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -0<>x/2Sa`/TDqggbl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-09l");
      assertEquals((byte) (-9), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Strings must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("09l");
      assertEquals((short)9, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("9d");
      assertEquals(9.0, number0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        NumberUtils.createNumber("P.HQ&iL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // P.HQ&iL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        NumberUtils.createNumber("6nAf92=Fc3dOp:i)5QF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 6nAf92=Fc3dOp:i)5QF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        NumberUtils.createNumber(";U-d9{DsD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ;U-d9{DsD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e!<%\"Z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e!<%\"Z is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0e9");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber(";\"Zj`pEGAe0;jyh");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ;\"Zj`pEGAe0;jyh is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("5f");
      assertEquals(5.0F, number0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.math.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.math.NumberUtils is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        NumberUtils.createNumber("103|geewit.F)QE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 103|geewit.F)QE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0Xg_a?pxG");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-g_a?pxG\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X{vOv8C<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{vOv8C<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xAborting to prtect against StackOverflowError - output of one loop is the input of another");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Aborting to prtect against StackOverflowError - output of one loop is the input of another\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x;x-0`|;l2SM2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";x-0`|;l2SM2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)1180);
      assertEquals((short)1180, short0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)65);
      assertEquals((byte)65, byte0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 773);
      assertEquals(773, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      short short0 = NumberUtils.toShort("e");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float float0 = NumberUtils.toFloat(";#5|");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = NumberUtils.toInt("5f");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double double0 = NumberUtils.max((-318.52671619), 1.0, (double) 0.0F);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("~Q2X@dV:i2!Q");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) (long)numberUtils0.LONG_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double double0 = NumberUtils.min(1346.77756, 1.0, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-0x5f");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      float float0 = NumberUtils.max(22.3F, (-4476.98F), (float) 0);
      assertEquals(22.3F, float0, 0.01F);
  }
}
