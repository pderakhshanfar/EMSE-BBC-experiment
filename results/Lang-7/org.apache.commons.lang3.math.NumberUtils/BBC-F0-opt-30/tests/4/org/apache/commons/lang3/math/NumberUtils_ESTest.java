/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 11:17:49 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xA b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x9'tiU MK8PahIC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0x,-xJvMvV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0GAKJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)126, (byte)46, (byte)9);
      assertEquals((byte)126, byte0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = NumberUtils.max((short)1933, (short)147, (short) (-1004));
      assertEquals((short)1933, short0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = NumberUtils.max(1130, 1829, (-1026));
      assertEquals(1829, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((-788), (-788), (int) numberUtils0.BYTE_ONE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = NumberUtils.max((-515L), (-1047L), (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = NumberUtils.min(1829, 1829, (-1026));
      assertEquals((-1026), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = NumberUtils.min((-3771L), (long) (short)0, (-1L));
      assertEquals((-3771L), long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        NumberUtils.createNumber("(?: s|[s&&[^ ]])s*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // (?: s|[s&&[^ ]])s* is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X&YAhE. ,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-&YAhE. ,\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        NumberUtils.createNumber("$\"8E3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short short0 = NumberUtils.toShort("", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = NumberUtils.toShort("71");
      assertEquals((short)71, short0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = NumberUtils.toShort("-06");
      assertEquals((short) (-6), short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = NumberUtils.toLong("Minimum abbreviation width with offset is 7", (long) (short)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = NumberUtils.toLong("-0x", 513L);
      assertEquals(513L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = NumberUtils.toLong("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = NumberUtils.toLong("6");
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = NumberUtils.toInt("WEHlf)o[r`Xj(", 496);
      assertEquals(496, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = NumberUtils.toInt("yS]2WIRW?4i8W)R{Y");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = NumberUtils.toInt("-06");
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = NumberUtils.toFloat("@/nCD%lfAE", 3336.0F);
      assertEquals(3336.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", (-2241.419F));
      assertEquals((-2241.419F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = NumberUtils.toFloat("");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-06");
      assertEquals((-6.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = NumberUtils.toDouble("5");
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-06");
      assertEquals((-6.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("0X", (byte) (-96));
      assertEquals((byte) (-96), byte0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("5");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-8");
      assertEquals((byte) (-8), byte0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)517;
      shortArray0[1] = (short)517;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)517, short0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1508);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1508), short0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)4118;
      longArray0[1] = (long) (short)4118;
      longArray0[2] = (long) (short)4118;
      longArray0[3] = (long) (short)4118;
      longArray0[4] = (long) (short)4118;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(4118L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 91;
      intArray0[1] = 332;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(91, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)1970;
      floatArray0[1] = (float) (short)45;
      floatArray0[2] = (float) (short)3918;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(45.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 134.0;
      doubleArray0[1] = 441.4914501352103;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(134.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short short0 = NumberUtils.min((short) (byte)0, (short) (byte)0, (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = NumberUtils.min(0L, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = NumberUtils.min(164L, 164L, 164L);
      assertEquals(164L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = NumberUtils.min(45, 102, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = NumberUtils.min(5790, 2049, 1082);
      assertEquals(1082, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = NumberUtils.min(1677.8F, 2905.0283F, 1804.804F);
      assertEquals(1677.8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, (float) (-1026), (-1.0F));
      assertEquals((-1026.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = NumberUtils.min((double) (byte)0, (double) (byte)0, 3185.854488773);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = NumberUtils.min((double) 2049.0F, (double) 2049.0F, (double) 2049.0F);
      assertEquals(2049.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = NumberUtils.min((double) (byte)0, (-0.9116911851634403), (double) (byte)0);
      assertEquals((-0.9116911851634403), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)43, (byte)0, (byte)16);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-774);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-774), short0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-96);
      longArray0[1] = (long) (byte) (-96);
      longArray0[2] = (long) (byte) (-96);
      longArray0[3] = (long) (byte) (-96);
      longArray0[4] = (long) (byte) (-96);
      longArray0[5] = (long) (byte) (-96);
      longArray0[6] = (long) (byte) (-96);
      longArray0[7] = (long) (byte) (-96);
      longArray0[8] = (long) (byte) (-96);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-96L), long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-3278);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-3278), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2912.0F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-2912.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2715.2389046945);
      doubleArray0[1] = (double) (short) (-3278);
      doubleArray0[2] = (double) (short) (-1819);
      doubleArray0[3] = (double) (-515L);
      doubleArray0[4] = (double) (short) (-901);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-515.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-115), byte0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1057), (short) (-1004), (short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = NumberUtils.max(0, (-2373), (int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((-1586), (int) numberUtils0.BYTE_MINUS_ONE, (int) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float float0 = NumberUtils.max(0.0F, (-1532.0F), (-1539.1788F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = NumberUtils.max((-1.0F), (-4779.1367F), (float) (-1026));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = NumberUtils.max((double) 0, (-1.0), (double) (short) (-774));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = NumberUtils.max((-1.0), (-1707.301), (-1707.301));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-54), (byte) (-54), (byte) (-54));
      assertEquals((byte) (-54), byte0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("09");
      assertEquals((short)9, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-08");
      assertEquals((byte) (-8), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0xC");
      assertEquals(12L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0Xf");
      assertEquals((-15L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0X0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0xC");
      assertEquals(12, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-0");
      assertEquals(-0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("3");
      assertEquals(3.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-6");
      assertEquals((-6.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("82");
      assertEquals(82.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-06");
      assertEquals((-6.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-06");
      assertEquals((byte) (-6), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-8");
      assertEquals((byte) (-8), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("2yk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2yk\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("CdqJmP][3=)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("-8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("6");
      assertEquals((byte)6, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("6");
      assertEquals((short)6, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("--VPaMRK9IX=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0x6F");
      assertEquals((-111), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = NumberUtils.createDouble(".0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("(?: s|[s&&[^ ]])s*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      short short0 = NumberUtils.toShort("", (short) (-429));
      assertEquals((short) (-429), short0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-0xzh4yY0?K[h;tUZ ", (double) (-3048L));
      assertEquals((-3048.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", (float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = NumberUtils.toLong("Os", (-3048L));
      assertEquals((-3048L), long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = NumberUtils.toInt("-0xzh4yY0?K[h;tUZ ", (-545));
      assertEquals((-545), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("6F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("6D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-06");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--&YAhE. ,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4E+Tg~5,R/,3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e'n;wdBJ/Bb)JO5*#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0Ee:P{<td*yvWoyy");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xfBx#&%PT?F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xa,T{3rm*HP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x6F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(" is not a valid number.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0Ex");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)10, (byte)10, (byte)46);
      assertEquals((byte)46, byte0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-1), (byte)47, (byte) (-1));
      assertEquals((byte)47, byte0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      short short0 = NumberUtils.max((short) (byte)0, (short) (byte)0, (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = NumberUtils.max((-3771L), (long) (short) (-1382), (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 3827L, (long) (short) (-1057));
      assertEquals(3827L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)7, (byte)1, (byte) (-80));
      assertEquals((byte) (-80), byte0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)47, (byte)120, (byte)77);
      assertEquals((byte)47, byte0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short short0 = NumberUtils.min((short)2, (short)2, (short) (-2731));
      assertEquals((short) (-2731), short0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      short short0 = NumberUtils.min((short)2653, (short)2621, (short)2653);
      assertEquals((short)2621, short0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-1408), (short) (-1), (short) (-780));
      assertEquals((short) (-1408), short0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = NumberUtils.min((-1014), 43, 1685);
      assertEquals((-1014), int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = NumberUtils.min((-1385L), (-2065L), (-17205L));
      assertEquals((-17205L), long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 642.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(642.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[5] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 1299.25552174228;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1299.25552174228, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)68;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)68, byte0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)3;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = (int) (short)517;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(517, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[2] = 2795L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(2795L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[21];
      floatArray0[3] = (-2814.4F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-2814.4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[21];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (-1240.42041420243);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1240.42041420243), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-51);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-51), byte0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)121;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = (-2143008007);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-2143008007), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-1664L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1664L), long0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        NumberUtils.createNumber("D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".4");
      assertEquals(0.4F, number0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber("zHJe~8E\"[;0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"zH\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("6D");
      assertEquals(6.0, number0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0L");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-!0x0L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -!0x0L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Strings must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        NumberUtils.createNumber(",D.Ax|r71X)RrL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ,D.Ax|r71X)RrL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("RjTvWEA;@^gZV@bQJ_f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // RjTvWEA;@^gZV@bQJ_f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        NumberUtils.createNumber("&Bd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // &Bd is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("6F");
      assertEquals(6.0F, number0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0E8");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Minimum abbzeviation Eidth is 4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Minimum abbzeviation Eidth is 4 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      try { 
        NumberUtils.createNumber("QCO.-[E^*B^rb9}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // QCO.-[E^*B^rb9} is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      try { 
        NumberUtils.createNumber("&YAhE. ,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // &YAhE. , is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Z{]yV7K2D_EOe+.;N.d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Z{]yV7K2D_EOe+.;N.d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xzh4yY0?K[h;tUZ ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-zh4yY0?K[h;tUZ \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X=eu");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=eu\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0xC");
      assertNotNull(number0);
      assertEquals(12, number0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0Ex");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0Ex is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short) (byte)47);
      assertEquals((short)47, short0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)88);
      assertEquals((byte)88, byte0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 2846.249379773722);
      assertEquals(2846.249379773722, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (float) (byte)0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (-477L));
      assertEquals((-477L), long0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      short short0 = NumberUtils.toShort("-0X");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      float float0 = NumberUtils.toFloat("6F");
      assertEquals(6.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = NumberUtils.toInt("3");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      long long0 = NumberUtils.toLong("-3");
      assertEquals((-3L), long0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double double0 = NumberUtils.max(2754.231085, 0.0, 2754.231085);
      assertEquals(2754.231085, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("U");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-0");
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.min((float) numberUtils0.BYTE_ONE, 1172.4324F, (float) numberUtils0.BYTE_ZERO);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      float float0 = NumberUtils.max((-947.4696F), 0.0F, 200.71F);
      assertEquals(200.71F, float0, 0.01F);
  }
}
