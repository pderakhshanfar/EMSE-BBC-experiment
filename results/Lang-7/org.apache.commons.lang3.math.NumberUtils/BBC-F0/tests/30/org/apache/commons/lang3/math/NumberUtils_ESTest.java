/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:53:10 GMT 2020
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xF0cw)o+ifR<?)L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0yx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = NumberUtils.max((long) (short) (-3939), 0L, (long) (short) (-3939));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = NumberUtils.min((long) (-1338), 0L, (long) (-1338));
      assertEquals((-1338L), long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = 3809.57F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(3809.57F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)21, byte0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        NumberUtils.createNumber("F0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short short0 = NumberUtils.toShort("b", (short) (-3939));
      assertEquals((short) (-3939), short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = NumberUtils.toShort("1");
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = NumberUtils.toLong("PRu#mw8B|-v93", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = NumberUtils.toLong("1");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = NumberUtils.toInt("A blank str*ng i( not a valid number", 8);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", (-40.244F));
      assertEquals((-40.244F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float float0 = NumberUtils.toFloat("1");
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = NumberUtils.toDouble("z%.29kj\"", (-6.0));
      assertEquals((-6.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = NumberUtils.toDouble("6d");
      assertEquals(6.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte) (-3));
      assertEquals((byte) (-3), byte0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("1");
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)13668;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)13668, short0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[2] = (short) (-4436);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-4436), short0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[1] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[2] = 1084L;
      longArray0[3] = (long) (byte)124;
      longArray0[4] = (long) (byte)124;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-156L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-156L), long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 70;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-794);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-794), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)5;
      floatArray0[1] = 3243.664F;
      floatArray0[2] = (float) (byte)113;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (-1589.6586F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1589.6586F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2662L);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-2662.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)22;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)22, byte0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-1);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      short short0 = NumberUtils.min((short)484, (short)484, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-411), (short) (-411), (short) (-411));
      assertEquals((short) (-411), short0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = NumberUtils.min(0L, 2176L, 242L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = NumberUtils.min(6333L, 6333L, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = NumberUtils.min(0, 1, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float float0 = NumberUtils.min((float) (byte)0, 1807.7189F, (float) (byte)0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = NumberUtils.min((float) 1L, 1.0F, 118.7885F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, 936.67888257, 936.67888257);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = NumberUtils.min((-2871.0), (-2375.0), 3398.2498913587465);
      assertEquals((-2871.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)88, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)528;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)528, short0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-114);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-114), short0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2732L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(2732L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-2662L);
      longArray0[1] = (-2942L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-2662L), long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-648);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-648), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2511);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-2511.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 720.70099875;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(720.70099875, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2517);
      doubleArray0[1] = (double) (-2517);
      doubleArray0[2] = (double) (-2517);
      doubleArray0[3] = (double) (-2517);
      doubleArray0[4] = (double) (-2517);
      doubleArray0[5] = (double) (-2517);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-2517.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-89);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-89), byte0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-519), (short) (-519), (short) (-519));
      assertEquals((short) (-519), short0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = NumberUtils.max((-1872L), (-39L), (long) (byte) (-39));
      assertEquals((-39L), long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = NumberUtils.max((-2607), 0, (-1507));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = NumberUtils.max((-2511), (-2511), (-1338));
      assertEquals((-1338), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = NumberUtils.max(1.0F, 83.0F, 1.0F);
      assertEquals(83.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float float0 = NumberUtils.max((-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = NumberUtils.max((-1677.50792448), (-1067.33199163), 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = NumberUtils.max((-3804.2599494289), (-1549.52303), (-3804.2599494289));
      assertEquals((-1549.52303), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-19), (byte)0, (byte) (-19));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-50), (byte) (-50), (byte) (-50));
      assertEquals((byte) (-50), byte0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Long long0 = NumberUtils.createLong("1");
      assertEquals(1L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0xd");
      assertEquals((-13L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0xd");
      assertEquals((-13), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("8");
      assertEquals(8.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("1");
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("1");
      assertEquals((byte)1, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("1");
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("*q}`olGZYY=L9#d5D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*q}`olGZYY=L9#d5D\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("oT+:m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("u#v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("1");
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("O?*V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-0");
      assertEquals(-0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      short short0 = NumberUtils.toShort("]", (short)68);
      assertEquals((short)68, short0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("", (byte)75);
      assertEquals((byte)75, byte0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (double) 1807.7189F);
      assertEquals(1807.7188720703125, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = NumberUtils.toDouble("F0cw)o+ifR<?)L", (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float float0 = NumberUtils.toFloat("F0cw)o+ifR<?)L", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (long) (byte) (-41));
      assertEquals((-41L), long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = NumberUtils.toInt("", (int) (byte) (-3));
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("6d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("31l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--0xgMl#]v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+s8inLT`OO([SB/ZF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E{UmQ10");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8E0..|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3e35'BugM)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xfbyP0U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xA%eiG~@?,r}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xd");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x9^VQwiTt(k/;ZA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)116, (byte) (-9), (byte) (-99));
      assertEquals((byte)116, byte0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-110), (byte)43, (byte)124);
      assertEquals((byte)124, byte0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      short short0 = NumberUtils.max((short)2144, (short)3085, (short)940);
      assertEquals((short)3085, short0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      short short0 = NumberUtils.max((short)102, (short)3, (short)881);
      assertEquals((short)881, short0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = NumberUtils.max((int) (short) (-2155), 76, 76);
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = NumberUtils.max((-375), (-3551), (int) (byte)21);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((long) numberUtils0.INTEGER_ONE, (-156L), 974L);
      assertEquals(974L, long0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-34), (byte)7, (byte) (-112));
      assertEquals((byte) (-112), byte0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)97, (byte)32, (byte)76);
      assertEquals((byte)32, byte0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-34), (byte) (-34), (byte)74);
      assertEquals((byte) (-34), byte0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short short0 = NumberUtils.min((short)3085, (short)657, (short)3085);
      assertEquals((short)657, short0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      short short0 = NumberUtils.min((short)519, (short)881, (short) (byte)124);
      assertEquals((short)124, short0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = NumberUtils.min(696, 696, 120);
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = NumberUtils.min((-2511), (-2511), (-2511));
      assertEquals((-2511), int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = NumberUtils.min((long) 0, (long) (byte) (-39), (long) 0);
      assertEquals((-39L), long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[6] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2517);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-35);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 2146663330;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2146663330, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-94);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 64.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[5] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1.0F;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)4;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)8;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)97;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        NumberUtils.createNumber("...");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      try { 
        NumberUtils.createNumber("C>g1I!E3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("31l");
      assertEquals(31L, number0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-;0xVv=R2l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -;0xVv=R2l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      try { 
        NumberUtils.createNumber("f8zU;_V.vBConTjl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f8zU;_V.vBConTjl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      try { 
        NumberUtils.createNumber("mp[]m_Ngn-$X(f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // mp[]m_Ngn-$X(f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        NumberUtils.createNumber("+s8inLT`OO([SB/ZF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // +s8inLT`OO([SB/ZF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0..|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0..| is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        NumberUtils.createNumber("oE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // oE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        NumberUtils.createNumber("'V&V$)?rE7&I$esy");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 'V&V$)?rE7&I$esy is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Q.E)qQE`~ +~PTKnH,D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Q.E)qQE`~ +~PTKnH,D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("5.");
      assertEquals(5.0F, number0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Yf.b/Eex.>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Yf.b/Eex.> is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X8>Wi*Pg/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-8>Wi*Pg/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X\"$rH-W8TJ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"$rH-W8TJ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xU");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-U\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x-0xU");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--U");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("6d");
      assertEquals(6.0, number0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("#<.)w3rx?zT:IGsSUE");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (float) (byte)118);
      assertEquals(118.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      long long0 = NumberUtils.toLong(">g1I!E3", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      short short0 = NumberUtils.toShort("kzwB>>");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      float float0 = NumberUtils.toFloat("org.apache.commons.lang3.math.NumberUtils");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = NumberUtils.toInt("1");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double double0 = NumberUtils.max(0.0, 272.3310777712, 0.0);
      assertEquals(272.3310777712, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.BYTE_ZERO, (-2034), (int) numberUtils0.INTEGER_MINUS_ONE);
      assertEquals((-2034), int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double double0 = NumberUtils.min(21.0, 1.0, 771.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      float float0 = NumberUtils.min((-1205.0F), (-133.8F), (-133.8F));
      assertEquals((-1205.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }
}
