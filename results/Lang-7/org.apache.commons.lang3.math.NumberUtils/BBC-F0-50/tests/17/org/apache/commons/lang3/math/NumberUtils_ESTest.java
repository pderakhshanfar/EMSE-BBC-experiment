/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:08:16 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xArray cannot be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xf?L5/iq6n<~OUHYY2y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xa=g+RCt]kT[Q8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0y)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)100, (byte)118, (byte)118);
      assertEquals((byte)118, byte0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = NumberUtils.max(17, 17, 17);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = NumberUtils.max((-4021L), (-2088L), (-4147L));
      assertEquals((-2088L), long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = NumberUtils.max((-57L), (-2739L), 150L);
      assertEquals(150L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-24), (byte) (-24), (byte)1);
      assertEquals((byte) (-24), byte0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)1, (byte)42, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-2534), (short)3777, (short)0);
      assertEquals((short) (-2534), short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = NumberUtils.min((int) (short) (-1067), 45, (int) (short) (-1067));
      assertEquals((-1067), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = NumberUtils.min(405, 1190, 71);
      assertEquals(71, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[3] = (short)3;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 359;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(359L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = (int) (short)477;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // - is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x\rxcd_}5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\rxcd_}5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short short0 = NumberUtils.toShort("GHZ<L#kJ%Y(_s`Mn", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      short short0 = NumberUtils.toShort("d/w5^se", (short) (-2877));
      assertEquals((short) (-2877), short0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short short0 = NumberUtils.toShort("8");
      assertEquals((short)8, short0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short short0 = NumberUtils.toShort("-5");
      assertEquals((short) (-5), short0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = NumberUtils.toLong("NN22?$djSp] 74s)>U", (-746L));
      assertEquals((-746L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = NumberUtils.toLong("2");
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = NumberUtils.toLong("-5");
      assertEquals((-5L), long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = NumberUtils.toInt("-&w?#:+qs", 100);
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = NumberUtils.toInt("6");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = NumberUtils.toInt("-3");
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = NumberUtils.toFloat("0xArray cannot be empty.", 2974.0F);
      assertEquals(2974.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float float0 = NumberUtils.toFloat("6.");
      assertEquals(6.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-5");
      assertEquals((-5.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = NumberUtils.toDouble("q", (double) (byte)0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = NumberUtils.toDouble("70");
      assertEquals(70.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-5");
      assertEquals((-5.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("v-,~i;=o", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("", (byte) (-76));
      assertEquals((byte) (-76), byte0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("2");
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-5");
      assertEquals((byte) (-5), byte0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-1419);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1419), short0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)2954;
      longArray0[1] = 1L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-2454);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-2454), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 656.904F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(656.904F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)1;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte)94;
      byteArray0[8] = (byte)94;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)94, byte0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short short0 = NumberUtils.min((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((long) numberUtils0.BYTE_ZERO, (long) numberUtils0.INTEGER_ZERO, 1905L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = NumberUtils.min(1L, 1L, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = NumberUtils.min((-539), (-1495), 3083);
      assertEquals((-1495), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = NumberUtils.min(2751.0F, (float) (-4311L), (-134.0F));
      assertEquals((-4311.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, 2078.177902, 1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = NumberUtils.min((double) (-1L), (-1405.3), (double) (byte)0);
      assertEquals((-1405.3), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)2, (byte)2, (byte)2);
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-86);
      shortArray0[1] = (short) (byte) (-86);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-86), short0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-4311L);
      longArray0[1] = (-4311L);
      longArray0[2] = (-4311L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-4311L), long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)2974;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2974, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-8175);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-8175), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-86);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-86.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)101;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(101.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-12), byte0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1), (short) (-773), (short) (-773));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = NumberUtils.max((-545L), (-545L), (-545L));
      assertEquals((-545L), long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = NumberUtils.max((-532), (int) (short) (-773), (int) (short) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.max((-3112.9F), (float) 0, (float) numberUtils0.BYTE_MINUS_ONE);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.max((-3112.9F), (-1.0F), (float) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = NumberUtils.max(0.0, (double) 1L, 1353.68457368479);
      assertEquals(1353.68457368479, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = NumberUtils.max((-2284.0), (-1001.0058240801638), (-4382.0));
      assertEquals((-1001.0058240801638), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)2, (byte)0, (byte)0);
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("082");
      assertEquals((short)82, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0x7D");
      assertEquals((-125L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("00");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0x8");
      assertEquals(8, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0xC");
      assertEquals((-12), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0d");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("2.");
      assertEquals(2.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-0");
      assertEquals(-0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = NumberUtils.createDouble(" -07F");
      assertEquals((-7.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("5");
      assertEquals((byte)5, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-5");
      assertEquals((byte) (-5), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("6.");
      assertEquals((short)6, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-5");
      assertEquals((byte) (-5), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("k.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"k.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("Strings must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("M7Gfp9?#,fWo2\"hT\"X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("e#thdSdQ2nUrd=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e#thd\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("-0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("-0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0XC");
      assertEquals(12L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("7D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7D\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("7D");
      assertEquals(7.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-3");
      assertEquals((-3.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      short short0 = NumberUtils.toShort("e#thdSdQ2nUrd=", (short)477);
      assertEquals((short)477, short0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("p{InCombiningDiacriticalMarks}+", (byte)118);
      assertEquals((byte)118, byte0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (double) (byte) (-101));
      assertEquals((-101.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", 1802.39129);
      assertEquals(1802.39129, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float float0 = NumberUtils.toFloat(",!Y", (float) (-24));
      assertEquals((-24.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = NumberUtils.toLong("8VA_438f\"oo", (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (-104776951));
      assertEquals((-104776951), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = NumberUtils.toInt("0X", (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("7D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("---0Xa=g+RCt]kT[Q8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("eI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("63eEK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".2L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+xuc");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0ej");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9JI)4z?=eiA=j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xd*rb\"r~_@Qj_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xF");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("07F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-86), (byte) (-86), (byte) (-58));
      assertEquals((byte) (-58), byte0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-96), (byte)0, (byte) (-96));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1), (short)856, (short)101);
      assertEquals((short)856, short0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = NumberUtils.max(43, 602, 1253);
      assertEquals(1253, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      int int0 = NumberUtils.max((-13), (int) byte0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = NumberUtils.max(1, (int) (byte)0, (int) (byte)0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = NumberUtils.max((-834L), 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)76, (byte)64, (byte) (-30));
      assertEquals((byte) (-30), byte0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-134), (short) (-134), (short) (-2534));
      assertEquals((short) (-2534), short0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      short short0 = NumberUtils.min((short)12842, (short) (-1009), (short)50);
      assertEquals((short) (-1009), short0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short short0 = NumberUtils.min((short)1, (short)1, (short)1);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = NumberUtils.min(466, 0, 2393);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, 608);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = NumberUtils.min((-22L), 0L, (-4311L));
      assertEquals((-4311L), long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = NumberUtils.min(1254L, (-3782L), 1L);
      assertEquals((-3782L), long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-503.5643F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[7] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)39;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)39, byte0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2285);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-1067);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-277L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (-1698.8685F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1698.8685F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3337.4978F;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-53);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-53), byte0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2832;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[4] = (long) (byte) (-118);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-118L), long0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("2.");
      assertEquals(2.0F, number0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        NumberUtils.createNumber("tPiO9sJi~EAr3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-X1L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -X1L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-613L");
      assertEquals((-613L), number0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("M\"4N5`kEc/T0@l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // M\"4N5`kEc/T0@l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        NumberUtils.createNumber("T./M (l2A8n+YL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // T./M (l2A8n+YL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("^KvJU7nSN~Ql");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ^KvJU7nSN~Ql is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0d");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("7F");
      assertEquals(7.0F, number0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("7D");
      assertEquals(7.0, number0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0ejy)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0ejy) is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      try { 
        NumberUtils.createNumber("6'h(ySd@Ee:%TG");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 6'h(ySd@Ee:%TG is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      try { 
        NumberUtils.createNumber("eCE3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"eCE3\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.math.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.math.NumberUtils is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      try { 
        NumberUtils.createNumber("kQ.u.hAb=kE'6dye=*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // kQ.u.hAb=kE'6dye=* is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".0");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0Xa=g+RCt]kT[Q8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-a=g+RCt]kT[Q8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--A blank string is not a valid number");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1L");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)70);
      assertEquals((short)70, short0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)127);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, 808L);
      assertEquals(808L, long0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      short short0 = NumberUtils.toShort("0F");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      long long0 = NumberUtils.toLong("0ej");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double double0 = NumberUtils.max(0.0, 0.0, (-1.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("0X");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ZERO, (short) numberUtils0.BYTE_ONE, (short)10);
      assertEquals((short)10, short0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      double double0 = NumberUtils.min((double) 493, (double) 493, (double) 493);
      assertEquals(493.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      float float0 = NumberUtils.min(1825.1019F, 1825.1019F, 1825.1019F);
      assertEquals(1825.1019F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      float float0 = NumberUtils.max((float) (short) (-8175), (float) (short)2832, (-665.189F));
      assertEquals(2832.0F, float0, 0.01F);
  }
}
