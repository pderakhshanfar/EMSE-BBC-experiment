/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 00:25:02 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0yph;o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)119, (byte) (-98), (byte)119);
      assertEquals((byte)119, byte0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short short0 = NumberUtils.max((short)43, (short)0, (short)43);
      assertEquals((short)43, short0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.SHORT_ONE, (int) numberUtils0.SHORT_ONE, (int) numberUtils0.SHORT_ONE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = NumberUtils.min((-1L), 0L, (long) (byte) (-1));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 730;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        NumberUtils.createNumber("+v~A*.5U4c{!T");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // +v~A*.5U4c{!T is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = NumberUtils.toShort("IIE!{Vg)%7bEm", (short) (-627));
      assertEquals((short) (-627), short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short short0 = NumberUtils.toShort("5");
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = NumberUtils.toLong("ui5G-W", 1129L);
      assertEquals(1129L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = NumberUtils.toLong(".");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = NumberUtils.toLong("7");
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = NumberUtils.toInt("F_W';9F6&#", (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = NumberUtils.toInt("53");
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = NumberUtils.toInt("-4");
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float float0 = NumberUtils.toFloat("4#L<Em;IoHG@_tIyrx_", (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float float0 = NumberUtils.toFloat("0x", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float float0 = NumberUtils.toFloat("");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = NumberUtils.toFloat("4");
      assertEquals(4.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = NumberUtils.toDouble("ynG1ZXFF^z", 302.63);
      assertEquals(302.63, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = NumberUtils.toDouble("0x");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-4");
      assertEquals((-4.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("TIuN-e)@~tpZ}}CZF2", (byte)48);
      assertEquals((byte)48, byte0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("7");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-115);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-115), short0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)57;
      longArray0[1] = (long) (short)57;
      longArray0[2] = (long) (short)57;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(57L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-525L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-525L), long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2288;
      intArray0[1] = 4;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2642);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-2642), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 532.325F;
      floatArray0[1] = (float) (byte)10;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(10.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1848.69273);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1848.69273), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      short short0 = NumberUtils.min((short) (byte)0, (short) (byte)0, (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)13, (long) (short)13, 380L);
      assertEquals(13L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 0.0F, (float) (short)108);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float float0 = NumberUtils.min((float) (short)310, (float) (byte) (-73), 1952.0F);
      assertEquals((-73.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = NumberUtils.min(15045.0, (double) (byte)0, (double) (byte)0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = NumberUtils.min(1026.4386772969, 676.219892693986, 676.219892693986);
      assertEquals(676.219892693986, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = NumberUtils.min((double) (-1347.9294F), (-2688.3319477715), (-3146.51112690245));
      assertEquals((-3146.51112690245), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)471;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)471, short0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1184);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1184), short0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-498L);
      longArray0[1] = (-498L);
      longArray0[2] = (-1361L);
      longArray0[3] = (-498L);
      longArray0[4] = (-498L);
      longArray0[5] = (-498L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-498L), long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1389);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-1389), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-627);
      floatArray0[1] = (float) (short) (-115);
      floatArray0[2] = (float) (short) (-627);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-115.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-106);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-106.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-62), byte0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-528), (short) (-62), (short) (-528));
      assertEquals((short) (-62), short0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = NumberUtils.max((-2837), (-2837), (-620));
      assertEquals((-620), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = NumberUtils.max(532.325F, (-3366.37F), 532.325F);
      assertEquals(532.325F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = NumberUtils.max((-933.5868F), (-933.5868F), (-933.5868F));
      assertEquals((-933.5868F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = NumberUtils.max((double) 0L, 0.0, 1623.6382);
      assertEquals(1623.6382, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = NumberUtils.max((-1.0), (-1.0), (double) (-933.5868F));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-13), (byte) (-13), (byte) (-13));
      assertEquals((byte) (-13), byte0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("08");
      assertEquals((short)8, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-08");
      assertEquals((short) (-8), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Long long0 = NumberUtils.createLong("03");
      assertEquals(3L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0Xf");
      assertEquals((-15L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("7");
      assertEquals(7, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("1d");
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-5");
      assertEquals((-5.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("50");
      assertEquals(50.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-5");
      assertEquals((-5.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("5");
      assertEquals((short)5, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("54");
      assertEquals((short)54, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-4");
      assertEquals((short) (-4), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("qTqSQDt|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"qTqSQDt|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("Gj=I");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Gj=I\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("ui5G-W");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("50");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("Threshold must not be negative");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-5");
      assertEquals((short) (-5), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0xe");
      assertEquals((-14), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble(")uw9.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("-0xe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)969);
      assertEquals((short)969, short0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short short0 = NumberUtils.toShort(" ", (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("F_W';9F6&#", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte) (-46));
      assertEquals((byte) (-46), byte0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = NumberUtils.toDouble("4;li~>b", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float float0 = NumberUtils.toFloat("The Array must not be null", 339.5195F);
      assertEquals(339.5195F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = NumberUtils.toLong("0", (long) (short)8192);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = NumberUtils.toInt("0-:", 561);
      assertEquals(561, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("50e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("03");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0eQPTS9%1=hgN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+8Cq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e\"R0'qo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("00eE@i^F*R'?x?Zxg}%5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("84e.X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4el");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xArray cannot be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9pB@g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xaJn0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--0x(/r:$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)48, (byte)48, (byte)100);
      assertEquals((byte)100, byte0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-73), (byte)0, (byte) (-73));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-528), (short)0, (short) (-528));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short short0 = NumberUtils.max((short)656, (short)656, (short)4569);
      assertEquals((short)4569, short0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = NumberUtils.max((int) (short) (-3034), (-232614909), 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = NumberUtils.max(2586, 2805, (-3862));
      assertEquals(2805, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = NumberUtils.max(0, (-925), (-925));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = NumberUtils.max((-625L), (-625L), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = NumberUtils.max(1L, (long) (short)57, 57L);
      assertEquals(57L, long0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = NumberUtils.max((-1L), (-525L), (-525L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)28, (byte)28, (byte) (-72));
      assertEquals((byte) (-72), byte0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)115, (byte)61, (byte)61);
      assertEquals((byte)61, byte0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)24, (byte)24);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short short0 = NumberUtils.min((short)65, (short)65, (short)2);
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short short0 = NumberUtils.min((short)64, (short) (-3250), (short)56);
      assertEquals((short) (-3250), short0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-528), (short)0, (short)0);
      assertEquals((short) (-528), short0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = NumberUtils.min(64, (int) (byte)0, (-6254807));
      assertEquals((-6254807), int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = NumberUtils.min(2231, 49, (int) (byte)61);
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = NumberUtils.min((-1), (int) (byte)0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)0, (long) (short)13, 380L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = NumberUtils.min(1L, 0L, (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-108);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[5] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = 3080.6305047662;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(3080.6305047662, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[7] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)106;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)106, byte0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-127);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 70;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = 2738L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(2738L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[2] = (-3132.99F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-3132.99F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2099.515774804;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-124);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-124), byte0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)45;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 4206;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".0");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("37.");
      assertEquals(37.0F, number0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0ExH@UF*Rd?xW=Z(;}5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("9d");
      assertEquals(9.0, number0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1f");
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-4l");
      assertEquals((-4L), number0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("4l");
      assertEquals(4L, number0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("5.Hr#9<L2OqIif L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 5.Hr#9<L2OqIif L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("k/`QiF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // k/`QiF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        NumberUtils.createNumber("xX[HqRTbuwWD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // xX[HqRTbuwWD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Ubgg-I4H^om1A6euj<E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Ubgg-I4H^om1A6euj<E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0eQPTS9%1=hgN");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0eQPTS9%1=hgN is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        NumberUtils.createNumber(")OIt>ur.&x!KrWe>E_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // )OIt>ur.&x!KrWe>E_ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        NumberUtils.createNumber("*n@YFE=seF5ZU.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.0");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0XPXeVwF][>!CJ<kuFW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-PXeVwF][>!CJ<kuFW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X}oWa>w6M");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}oWa>w6M\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--#X=3bBN");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0f");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (-2650.2711914434562));
      assertEquals((-2650.2711914434562), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, 604.0F);
      assertEquals(604.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (int) (short) (-30766));
      assertEquals((-30766), int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      short short0 = NumberUtils.toShort("-4");
      assertEquals((short) (-4), short0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-4");
      assertEquals((-4.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = NumberUtils.toInt("['<Ey `I`ekh");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      long long0 = NumberUtils.toLong("-4");
      assertEquals((-4L), long0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double double0 = NumberUtils.max((double) (-2626), 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-4");
      assertEquals((byte) (-4), byte0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double double0 = NumberUtils.toDouble("03");
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      float float0 = NumberUtils.min((float) (byte)49, 2740.115F, 89.0F);
      assertEquals(49.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      float float0 = NumberUtils.max((-2231.26F), 0.0F, (-2231.26F));
      assertEquals(0.0F, float0, 0.01F);
  }
}
