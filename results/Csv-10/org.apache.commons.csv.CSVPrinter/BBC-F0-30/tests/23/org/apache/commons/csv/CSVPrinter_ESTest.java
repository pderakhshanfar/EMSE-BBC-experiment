/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 07:09:54 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AI5<^-m/8P!%lw\",");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("AI5<^-m/8P!%lw\",", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("", stringWriter0.toString());
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("AI5<^-m/8P!%lw\",", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("\"AI5<^-m/8P!%lw\"\",\"\r\n\"AI5<^-m/8P!%lw\"\",\"\r\n\"AI5<^-m/8P!%lw\"\",\"\r\n\"AI5<^-m/8P!%lw\"\",\"\r\n\"AI5<^-m/8P!%lw\"\",\"\r\n\"AI5<^-m/8P!%lw\"\",\"\r\n\"AI5<^-m/8P!%lw\"\",\"\r\n", stringWriter0.toString());
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("AI5<^-m/8P!%lw\",", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0Yl5[iO6qKrLOp-(b@");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("0Yl5[iO6qKrLOp-(b@", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("", stringWriter0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("0Yl5[iO6qKrLOp-(b@", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("0Yl5[iO6qKrLOp-(b@\r\n0Yl5[iO6qKrLOp-(b@\r\n0Yl5[iO6qKrLOp-(b@\r\n0Yl5[iO6qKrLOp-(b@\r\n0Yl5[iO6qKrLOp-(b@\r\n0Yl5[iO6qKrLOp-(b@\r\n0Yl5[iO6qKrLOp-(b@\r\n", stringWriter0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("0Yl5[iO6qKrLOp-(b@", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNotNull(cSVFormat0);
      
      Character character0 = Character.valueOf('\"');
      assertNotNull(character0);
      assertEquals('\"', (char)character0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('\"');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isQuoting());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\"", cSVFormat2.getRecordSeparator());
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isQuoting());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\"", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals("\"", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getEscape());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat3);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isQuoting());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\"", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals("\"", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getEscape());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringBuffer0;
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertEquals(42, stringBuffer0.length());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat2.getEscape());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isQuoting());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\"", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat3.isQuoting());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertEquals("\"", cSVFormat3.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat3.getEscape());
      assertEquals(Quote.NONE, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000004\torg.apache.commons.csv.CSVFormat@0000000003\t\torg.apache.commons.csv.CSVFormat@0000000003\t\torg.apache.commons.csv.CSVFormat@0000000003");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals(1596, stringBuffer0.length());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNotNull(cSVFormat0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      assertEquals(0, byteArray0.length);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      assertEquals(0, byteArray0.length);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNotNull(cSVPrinter0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVFormat0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVPrinter0);
      
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNotNull(cSVFormat0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(cSVPrinter0);
      
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertNotNull(cSVPrinter0);
      assertEquals(1, charArray0.length);
      
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNotNull(cSVFormat0);
      
      PipedReader pipedReader0 = new PipedReader(585);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[7];
      pipedReader0.close();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVPrinter0);
      
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EOF");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      assertEquals("EOF", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("EOF", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVPrinter0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNotNull(cSVFormat0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("f/7q{_^6B[w52[]", "f/7q{_^6B[w52[]");
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("f/7q{_^6B[w52[]", sQLTransientConnectionException0.getMessage());
      assertEquals("f/7q{_^6B[w52[]", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: f/7q{_^6B[w52[]", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("f/7q{_^6B[w52[]", sQLTransientConnectionException0.getMessage());
      assertEquals("f/7q{_^6B[w52[]", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: f/7q{_^6B[w52[]", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: f/7q{_^6B[w52[]", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: java.sql.SQLTransientConnectionException: f/7q{_^6B[w52[]", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)sQLTransientConnectionException0.initCause(sQLWarning0);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("f/7q{_^6B[w52[]", sQLTransientConnectionException0.getMessage());
      assertEquals("f/7q{_^6B[w52[]", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: f/7q{_^6B[w52[]", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: f/7q{_^6B[w52[]", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: java.sql.SQLTransientConnectionException: f/7q{_^6B[w52[]", sQLWarning0.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("f/7q{_^6B[w52[]", sQLTransientConnectionException1.getSQLState());
      assertEquals("f/7q{_^6B[w52[]", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: f/7q{_^6B[w52[]", sQLTransientConnectionException1.toString());
      assertNotNull(sQLTransientConnectionException1);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("!");
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("!", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: !", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.length());
      assertNotNull(charBuffer0);
      assertEquals(9, charArray0.length);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.length());
      assertNotNull(cSVPrinter0);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("IL|fw,%kaC`tz~qLa}");
      assertNotNull(mockPrintStream0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      assertNotNull(outputStreamWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNotNull(cSVFormat0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNotNull(cSVPrinter0);
      
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[7];
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000002");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CharBuffer charBuffer0 = CharBuffer.allocate(86);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(86, charBuffer0.capacity());
      assertEquals(86, charBuffer0.remaining());
      assertEquals(86, charBuffer0.length());
      assertEquals(86, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getCommentStart());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(86, charBuffer0.capacity());
      assertEquals(86, charBuffer0.remaining());
      assertEquals(86, charBuffer0.length());
      assertEquals(86, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNotNull(cSVFormat0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("tLTNB'?aFotP");
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNotNull(cSVPrinter0);
      
      Object[] objectArray0 = new Object[8];
      pipedWriter0.close();
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNotNull(cSVFormat0);
      
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      assertEquals(9, charArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(9, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.capacity());
      assertEquals(9, charBuffer1.length());
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(9, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.capacity());
      assertEquals(9, charBuffer1.length());
      assertNotNull(cSVPrinter0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) stack0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVPrinter0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNotNull(cSVFormat0);
      
      pipedReader0.close();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNotNull(cSVPrinter0);
      
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>(32);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('r');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('r', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      assertEquals(9, charArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(9, charBuffer1.length());
      assertEquals(9, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat1.getNullString());
      assertEquals('r', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(9, charBuffer1.length());
      assertEquals(9, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("org.apache.commons.csv.CSVFormat@0000000003iiiiiiiorg.apache.commons.csv.CSVFormat@0000000003");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('?');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('/', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('?', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('/', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertEquals('/', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('?', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("(i?e)sO&B]hY`za");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\u0082');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\u0082', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\u0082', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\u0082');
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\u0082', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNotNull(cSVFormat0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "'");
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("'", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\u0082', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("'", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertNotNull(cSVPrinter0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(bufferedInputStream0);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.print(bufferedInputStream0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNotNull(cSVFormat0);
      
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.limit());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      assertEquals(9, charArray0.length);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.limit());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(cSVPrinter0);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNotNull(cSVFormat0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNotNull(cSVPrinter0);
      
      SQLException sQLException0 = new SQLException(":J<r[bh0Pl[$V/J");
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: :J<r[bh0Pl[$V/J", sQLException0.toString());
      assertEquals(":J<r[bh0Pl[$V/J", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: :J<r[bh0Pl[$V/J", sQLException0.toString());
      assertEquals(":J<r[bh0Pl[$V/J", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLException: :J<r[bh0Pl[$V/J", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLException: :J<r[bh0Pl[$V/J", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      try { 
        cSVPrinter0.print(sQLTransactionRollbackException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('m', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('m');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('m', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getRecordSeparator());
      assertEquals('m', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals('m', (char)cSVFormat1.getCommentStart());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the delimiter cannot be the same ('m')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      PipedReader pipedReader0 = new PipedReader(585);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVPrinter0);
      
      SQLException sQLException0 = new SQLException("C");
      assertEquals("C", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: C", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      cSVPrinter0.printRecord((Iterable<?>) sQLException0);
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("C", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: C", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNotNull(cSVPrinter0);
      
      cSVPrinter0.println();
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('y');
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('y', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('y', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertNotNull(cSVPrinter0);
      
      cSVPrinter0.println();
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('y', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9uJ!gTfF.O=Y");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("9uJ!gTfF.O=Y", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("", stringWriter0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("9uJ!gTfF.O=Y", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.print((Object) null);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("9uJ!gTfF.O=Y", stringWriter0.toString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("9uJ!gTfF.O=Y", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNotNull(cSVPrinter0);
      
      cSVPrinter0.print((Object) null);
      assertEquals("\"\"", stringWriter0.toString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EOF");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("EOF", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("EOF", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVPrinter0);
      
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(27).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("EOF", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("EOF", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(30L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNotNull(cSVFormat0);
      
      PipedReader pipedReader0 = new PipedReader(585);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertNotNull(cSVPrinter0);
      
      LinkedHashSet<CharArrayWriter> linkedHashSet0 = new LinkedHashSet<CharArrayWriter>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) linkedHashSet0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1779);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1779, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1779, charBuffer0.limit());
      assertEquals(1779, charBuffer0.capacity());
      assertEquals(1779, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNotNull(cSVFormat0);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1779, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1779, charBuffer0.limit());
      assertEquals(1779, charBuffer0.capacity());
      assertEquals(1779, charBuffer0.length());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNotNull(cSVPrinter0);
      
      PriorityQueue<BufferedInputStream> priorityQueue0 = new PriorityQueue<BufferedInputStream>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      boolean boolean0 = priorityQueue0.add(bufferedInputStream0);
      assertTrue(priorityQueue0.contains(bufferedInputStream0));
      assertEquals(1, priorityQueue0.size());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(boolean0);
      
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      assertTrue(priorityQueue0.contains(bufferedInputStream0));
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1739, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(40, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1779, charBuffer0.limit());
      assertEquals(1779, charBuffer0.capacity());
      assertEquals(1739, charBuffer0.remaining());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\u0082');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\u0082', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\u0082', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printComment("\r\n");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("\u0082 \r\n\u0082 \r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getEscape());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\u0082', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\u0082');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('\u0082', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('\u0082', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printComment("\r6\n");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("\u0082 \r\n\u0082 6\r\n\u0082 \r\n", stringWriter0.toString());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('\u0082', (char)cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EOF");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('e');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('e', (char)cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      assertEquals("EOF", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("EOF", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('e', (char)cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      MockFileReader mockFileReader0 = new MockFileReader(mockFile0);
      assertNotNull(mockFileReader0);
      
      cSVPrinter0.print(mockFileReader0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("EOF", mockFile0.getName());
      assertEquals(59L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("EOF", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('e', (char)cSVFormat1.getCommentStart());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertNotNull(cSVFormat0);
      
      PipedReader pipedReader0 = new PipedReader(585);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertNotNull(cSVPrinter0);
      
      cSVPrinter0.printComment("R?/BX?P");
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoting());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('G');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('G', (char)cSVFormat1.getCommentStart());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("", stringWriter0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('G', (char)cSVFormat1.getCommentStart());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printComment("\r");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("G \nG \n", stringWriter0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('G', (char)cSVFormat1.getCommentStart());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertTrue(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("m ");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("m ", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Object[] objectArray0 = new Object[8];
      String string0 = cSVFormat1.format(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("m ", cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotNull(string0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("\"m \",\"m \",\"m \",\"m \",\"m \",\"m \",\"m \",\"m \"", string0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('9');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('9', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      PipedReader pipedReader0 = new PipedReader(585);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('9', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      TreeSet<CharArrayWriter> treeSet0 = new TreeSet<CharArrayWriter>();
      assertNotNull(treeSet0);
      
      Object[] objectArray0 = new Object[9];
      CSVPrinter cSVPrinter1 = cSVFormat1.print(pipedWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('9', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) treeSet0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[5] = (Object) pipedWriter0;
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('9', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('9', cSVFormat2.getDelimiter());
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      
      CSVPrinter cSVPrinter2 = cSVFormat2.print(pipedWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('9', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('9', cSVFormat2.getDelimiter());
      assertNotNull(cSVPrinter2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      
      cSVPrinter2.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals('9', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.isEscaping());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoting());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertNull(cSVFormat2.getEscape());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertEquals('9', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[63];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"\",org.apache.commons.csv.CSVFormat@0000000002,,,,,,,,,,,,,,,,,org.apache.commons.csv.CSVFormat@0000000002,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals("", stringWriter0.toString());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVPrinter0.printRecord(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(63, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals("}", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      String string0 = cSVFormat1.format(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isNullHandling());
      assertEquals("}", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotNull(string0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("\"}\"\t}\t}\t}\t}\t}\t}", string0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[q\"Ed;htg!}X)");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("[q\"Ed;htg!}X)", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      Object[] objectArray0 = new Object[8];
      String string0 = cSVFormat1.format(objectArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertTrue(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("[q\"Ed;htg!}X)", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNotNull(string0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("\"[q\"\"Ed;htg!}X)\"\t\"[q\"\"Ed;htg!}X)\"\t\"[q\"\"Ed;htg!}X)\"\t\"[q\"\"Ed;htg!}X)\"\t\"[q\"\"Ed;htg!}X)\"\t\"[q\"\"Ed;htg!}X)\"\t\"[q\"\"Ed;htg!}X)\"\t\"[q\"\"Ed;htg!}X)\"", string0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[63];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"\",org.apache.commons.csv.CSVFormat@0000000002,,,,,,,,,,,,,,,,,org.apache.commons.csv.CSVFormat@0000000002,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Object[] objectArray0 = new Object[7];
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\"\"\t\"\"\t\"\"\t\"\"\t\"\"\t\"\"\t\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Integer integer0 = new Integer(32);
      cSVPrinter0.print(integer0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Xes\"2F77.xQJ", true);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[45];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000002\t\t\t\t\t\torg.apache.commons.csv.CSVFormat@0000000002");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EOF");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('1');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(52L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('s');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientConnectionException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("?H>i5q");
      Object[] objectArray0 = new Object[8];
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\"?H>i5q\"\t?H>i5q\t?H>i5q\t?H>i5q\t?H>i5q\t?H>i5q\t?H>i5q\t?H>i5q", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("IL|fw,%kaC`tz~qLa}");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuffer0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('y');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(mockPrintWriter0, appendable0);
  }
}
