/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 07:04:31 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Stack;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ATQGZ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('|');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('e');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "~PoKRT\"~");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "WqJ3r$8@\"'+.T+0S5/");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(2893);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[7];
      charBuffer0.flip();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      File file0 = MockFile.createTempFile("~PoKR T8\"'~", "9j`G@yb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EFTsmnzsB]n(g|Tlj,");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      sQLDataException0.initCause(sQLIntegrityConstraintViolationException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      SQLDataException sQLDataException0 = new SQLDataException();
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SQLDataException sQLDataException0 = new SQLDataException();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(17);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("EO m");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(44);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      SQLDataException sQLDataException0 = new SQLDataException();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(110);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EFTsmnzsB]n(g|Tlj,");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("ss~FO|<:p_O%wAE.U");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[11];
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" SurroundingSpaces:ignored", sQLDataException0);
      sQLDataException0.initCause(sQLTimeoutException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      ArrayList<BufferedOutputStream> arrayList0 = new ArrayList<BufferedOutputStream>();
      Vector<BufferedOutputStream> vector0 = new Vector<BufferedOutputStream>(arrayList0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("format");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Stack<Console> stack0 = new Stack<Console>();
      HashSet<Object> hashSet0 = new HashSet<Object>(stack0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " EmptyLines:ignored");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("out");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('0');
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('u');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("format");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('+');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "~PoKR T8\"'~");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4;", true);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(mockFileOutputStream0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 9);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pipedInputStream0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(filterOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("format");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("format");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      mockFileWriter0.write(2457);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("ss~FO|<:p_O%wAE.U");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLDataException sQLDataException0 = new SQLDataException();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printRecord((Iterable<?>) sQLDataException0);
      assertEquals(38, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("[&_\"uc#qPvj o%{{V");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(" EmptyLines:ignored");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.println();
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EFTsmnzsB]n(g|Tlj,");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1067).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      File file0 = MockFile.createTempFile("~PoKR T8\"'~", "oxD/?CdmlL");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[5FO`,l1dG`X ", (String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("out", sQLSyntaxErrorException0);
      Object[] objectArray0 = new Object[9];
      objectArray0[3] = (Object) sQLFeatureNotSupportedException0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("(<CMKO|c8=msKn:Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) objectArray0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      ArrayList<MockFileInputStream> arrayList0 = new ArrayList<MockFileInputStream>();
      arrayList0.add((MockFileInputStream) null);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertEquals("\n", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('<');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r\n");
      assertEquals(6, charArrayWriter0.size());
      assertEquals("< \n< \n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('j');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("J\r");
      assertEquals(7, charArrayWriter0.size());
      assertEquals("j J\nj \n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('Q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\n");
      assertEquals("Q \r\nQ \r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("format");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('+');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("ss~FO|<:p_O%wAE.U");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.printComment("ss~FO|<:p_O%wAE.U");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('<');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r:");
      assertEquals("< \r\n< :\r\n", charArrayWriter0.toString());
      assertEquals(9, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"Unexpected Quote value: \"\r\n\"Unexpected Quote value: \"\r\n\"Unexpected Quote value: \"\r\n\"Unexpected Quote value: \"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      File file0 = MockFile.createTempFile("~PoKR T8\"'~", "9j`G@yb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) mockPrintStream0;
      CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('\\');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(66L, file0.length());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile(") invalid parse sequence", "(line ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('x');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(") invalid parse sequence", "The header contains duplicate names: ");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLSyntaxErrorException0);
      stack0.add(sQLFeatureNotSupportedException0);
      cSVPrinter0.printRecords((Iterable<?>) stack0);
      assertEquals(103L, file0.length());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("w\r\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      assertEquals("\"w\r\n\"", charArrayWriter0.toString());
      assertEquals(5, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("w.my{\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      assertEquals(8, charArrayWriter0.size());
      assertEquals("\"w.my{\n\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\u2029");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\u2029");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[7];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[LR6nNcemfnLBWLiVCR");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";o1]()PdJ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      assertEquals(11, charArrayWriter0.size());
      assertEquals("\";o1]()PdJ\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\rM\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(31, charArrayWriter0.size());
      assertEquals("\"\rM\n\",\"\rM\n\",\"\rM\n\",\"\rM\n\",\"\rM\n\"\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", charArrayWriter0.toString());
      assertEquals(16, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Byte byte0 = new Byte((byte)1);
      cSVPrinter0.print(byte0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('V');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(49, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      CSVFormat cSVFormat0 = CSVFormat.newFormat(',');
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException(") invalid parse sequence", ")>U,-bd^A<C", 31);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(")>U,-bd^A<C", "Unexpected Quote value: ", (-1830), hashMap0, sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(") invalid parse sequence", sQLClientInfoException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: ) invalid parse sequence", sQLFeatureNotSupportedException0.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      assertEquals(4, charArrayWriter0.size());
      assertEquals("\\r\\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print("w\r\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(98);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("[&_\"uc#qPvj o%{{V");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(916);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile(") invalid parse sequence", "(line ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(appendable0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
