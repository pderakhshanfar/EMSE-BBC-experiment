/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 03:31:08 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter(114);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!\"c~'I{r8 7j,5Y");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "!\"c~'I{r8 7j,5Y";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "!\"c~'I{r8 7j,5Y";
      objectArray0[5] = (Object) "a";
      objectArray0[6] = (Object) "!\"c~'I{r8 7j,5Y";
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)65;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-86);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "}8$>\\0";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}8$>\u0000");
      Locale locale0 = Locale.ROOT;
      String[] stringArray0 = Locale.getISOCountries();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('2');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('2');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar('2');
      cSVFormat5.withNullString("}8$>\u0000");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter1.printRecords((Object[]) stringArray0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('o');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVFormat0.toString();
      cSVPrinter0.close();
      cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("6|osi LT}>}j\"UK");
      Object object0 = new Object();
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Integer integer0 = new Integer((-2671));
      cSVPrinter0.print(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("~Ea.i!)V.^XD");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "~Ea.i!)V.^XD";
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      charArrayWriter0.append((CharSequence) null, 4, 4);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("6|osi LT}>}\"UK");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(78);
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "66osi LH}>}\"UK";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.withNullString("66osi LH}>}\"UK");
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "66osi LH}>}\"UK");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) stringArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('n');
      Character character0 = Character.valueOf('\"');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat2.toString();
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A@ob+ac3Bi$bL");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('n');
      stringWriter1.close();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0, 25, 25);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter2, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      charArrayWriter0.append((CharSequence) null, 4, 4);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(l");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "charet";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('!');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-578), (byte)1);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      CSVParser cSVParser0 = cSVFormat0.parse(inputStreamReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>();
      arrayDeque0.offerFirst(dataInputStream0);
      cSVFormat0.print(charArrayWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat1.withDelimiter('&');
      Character character0 = new Character('&');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      try { 
        cSVPrinter0.printComment("1u%X");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(72);
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      cSVPrinter0.printRecord(objectArray0);
      objectArray0[0] = (Object) cSVFormat1;
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) cSVFormat0;
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      arrayDeque0.offerFirst(dataInputStream0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(pipedWriter0);
      cSVPrinter1.printRecords((Iterable<?>) arrayDeque0);
      PriorityQueue<Long> priorityQueue0 = new PriorityQueue<Long>();
      PriorityQueue<Long> priorityQueue1 = new PriorityQueue<Long>();
      PriorityQueue<Long> priorityQueue2 = new PriorityQueue<Long>(priorityQueue1);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: (line 1) invalid char between encapsulated token and delimiter
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(2837);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      charArrayWriter1.append('~');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("org.apache.commons.csv.CSVParser");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter0.close();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter1, cSVFormat4);
      cSVPrinter1.printComment("");
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) quote0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter(2837);
      assertEquals("", charArrayWriter2.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = stringWriter0.append('!');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat0.toString();
      StringReader stringReader0 = new StringReader("");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 110);
      cSVFormat0.parse(lineNumberReader0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) lineNumberReader0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) lineNumberReader0;
      objectArray0[3] = (Object) lineNumberReader0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[7] = object2;
      cSVPrinter0.close();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "^tt}&O**oUN");
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      CSVFormat.newFormat(';');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.close();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer1, cSVFormat3);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1312);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>();
      arrayDeque0.offerFirst(dataInputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      PriorityQueue<Long> priorityQueue0 = new PriorityQueue<Long>();
      PriorityQueue<Long> priorityQueue1 = new PriorityQueue<Long>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      cSVPrinter0.printComment("$1wmW1]d;n");
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('a');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      Object object0 = new Object();
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) pipedReader0;
      objectArray1[1] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.close();
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(appendable0, pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharBuffer.allocate(1312);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      cSVFormat2.withDelimiter('E');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1312);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      charArrayWriter0.append('s');
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      CSVFormat cSVFormat4 = cSVFormat1.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat4);
      Object object0 = new Object();
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      assertEquals("nulls\n", charArrayWriter1.toString());
      assertEquals("nulls\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(30);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('m');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(30);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      charArrayWriter1.append('!');
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("<rZ|DSzdL(");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat3);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) outputStreamWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "<rZ|DSzdL(";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) outputStreamWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      assertEquals(215, charArrayWriter1.size());
      assertEquals(215, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(6);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('6');
      Character character0 = Character.valueOf('m');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('n');
      File file0 = MockFile.createTempFile("TOKEN", "TOKEN");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.printComment("/|bZ");
      TreeSet<ByteArrayInputStream> treeSet0 = new TreeSet<ByteArrayInputStream>();
      PriorityQueue<ByteArrayInputStream> priorityQueue0 = new PriorityQueue<ByteArrayInputStream>((SortedSet<? extends ByteArrayInputStream>) treeSet0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.close();
      Character character1 = new Character('!');
      Character character2 = Character.valueOf('E');
      cSVFormat0.withEscape(character2);
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      CSVFormat.newFormat(';');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.close();
      Quote quote1 = Quote.NONE;
      CSVFormat cSVFormat4 = cSVFormat0.withQuotePolicy(quote1);
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVPrinter$1");
      cSVFormat4.parse(stringReader0);
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) quote0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
      assertEquals(1185, charBuffer0.length());
      assertEquals(1185, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(30);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('m');
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      cSVPrinter0.printComment("");
      TreeSet<ByteArrayInputStream> treeSet0 = new TreeSet<ByteArrayInputStream>();
      PriorityQueue<ByteArrayInputStream> priorityQueue0 = new PriorityQueue<ByteArrayInputStream>((SortedSet<? extends ByteArrayInputStream>) treeSet0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) treeSet0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) treeSet0;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      Character character0 = new Character('!');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      cSVFormat2.print(outputStreamWriter0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter2.getOut();
      assertEquals(171, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      TreeSet<ByteArrayInputStream> treeSet0 = new TreeSet<ByteArrayInputStream>();
      PriorityQueue<ByteArrayInputStream> priorityQueue0 = new PriorityQueue<ByteArrayInputStream>((SortedSet<? extends ByteArrayInputStream>) treeSet0);
      cSVFormat1.withSkipHeaderRecord(true);
      String string0 = "Nu}+Z~HVc@/G[)>";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Nu}+Z~HVc@/G[)>");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("format");
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      cSVFormat3.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.toString();
      StringReader stringReader0 = new StringReader("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('C');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.parse(pipedReader0);
      cSVFormat0.toString();
      StringReader stringReader0 = new StringReader("F9:gfQ3L8");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.println();
      cSVFormat1.parse(stringReader0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('C');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.parse(pipedReader0);
      cSVFormat0.toString();
      StringReader stringReader0 = new StringReader("F9:gfQ3L8");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = null;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = null;
      objectArray0[4] = (Object) pipedReader0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVPrinter0;
      cSVFormat0.format(objectArray0);
      Object object1 = new Object();
      cSVPrinter0.print(objectArray0[4]);
      cSVPrinter0.println();
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('R');
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('~');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('0');
      cSVFormat1.validate();
      Object object0 = new Object();
      cSVFormat0.withQuoteChar('>');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charArrayWriter1;
      CSVFormat.newFormat('{');
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print((Object) null);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charArrayWriter2);
      cSVPrinter1.printComment("");
      cSVPrinter0.printComment("Lcdd0Fe");
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat.newFormat(';');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.close();
      CSVFormat cSVFormat4 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat4.toString();
      StringReader stringReader0 = new StringReader("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVParser cSVParser0 = cSVFormat4.parse(stringReader0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVParser0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      cSVPrinter0.print(charBuffer0);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      assertEquals(959, charBuffer0.length());
      assertEquals(959, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('~');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("M9OxGqyfcBmoRC&|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat2);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(114).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      assertEquals(3252, charArrayWriter2.size());
      assertEquals(3252, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(97);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      cSVPrinter0.printComment((String) null);
      Object[] objectArray0 = new Object[9];
      TreeSet<ByteArrayInputStream> treeSet0 = new TreeSet<ByteArrayInputStream>();
      PriorityQueue<ByteArrayInputStream> priorityQueue0 = new PriorityQueue<ByteArrayInputStream>((SortedSet<? extends ByteArrayInputStream>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) outputStreamWriter0;
      cSVFormat0.validate();
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      cSVFormat0.withQuoteChar('>');
      objectArray0[5] = (Object) outputStreamWriter0;
      objectArray0[6] = (Object) cSVPrinter0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print(objectArray0[0]);
      cSVPrinter0.printComment((String) null);
      cSVPrinter0.printComment(") EOF reached before encapsulated token finished");
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.print(objectArray0[2]);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("Unexpected Quote value: ");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockFile mockFile0 = new MockFile("u=lGj.", "zCl0");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "zCl0", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      PrintStream printStream1 = mockPrintStream1.printf(locale0, ";+.}LK| 6", objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream1, cSVFormat1);
      cSVFormat0.toString();
      StringReader stringReader0 = new StringReader("u=lGj.");
      stringReader0.skip(0L);
      cSVFormat0.parse(stringReader0);
      Object object1 = new Object();
      Object object2 = new Object();
      CSVPrinter cSVPrinter2 = new CSVPrinter(printStream1, cSVFormat1);
      cSVPrinter2.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter1.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(30);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('!');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("6h6ohsIi H}Y>(}\"UK");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("6h6ohsIi H}Y>(}\"UK");
      assertEquals(74, charArrayWriter2.size());
      assertEquals(74, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('~');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("M9OxGqyfcBmoRC&|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      assertEquals(1367, charArrayWriter2.size());
      assertEquals(1367, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>(1308);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Character character0 = new Character('R');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag("QuoteChar=<");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedInputStream0;
      objectArray0[1] = (Object) uRI0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) arrayDeque0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) uRI0;
      objectArray0[7] = (Object) mockFile0;
      objectArray0[8] = (Object) cSVFormat1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "QuoteChar=<", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVFormat1.toString();
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip((-532L));
      cSVFormat1.parse(stringReader0);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      assertEquals(352L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(6);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      cSVPrinter0.close();
      CSVPrinter cSVPrinter2 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      CSVPrinter cSVPrinter3 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      try { 
        cSVPrinter3.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Character character0 = Character.valueOf('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      cSVFormat2.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) pipedReader0;
      cSVFormat1.format(objectArray0);
      Object object0 = new Object();
      cSVPrinter0.print(objectArray0[3]);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 25);
      cSVPrinter0.print(pushbackInputStream0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
      cSVFormat0.format(objectArray0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        cSVPrinter0.print(cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('$');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Character character0 = new Character('R');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVFormat1.toString();
      StringReader stringReader0 = new StringReader("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      cSVFormat1.parse(stringReader0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) arrayDeque0;
      objectArray0[2] = (Object) arrayDeque0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) stringReader0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = '(';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.toString();
      StringReader stringReader0 = new StringReader("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      cSVFormat1.parse(stringReader0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVFormat1.toString();
      StringReader stringReader0 = new StringReader("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(']');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = 'W';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      charArray0[5] = ']';
      charArray0[6] = ']';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>((Comparator<? super SQLNonTransientConnectionException>) null);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) ']';
      objectArray0[3] = (Object) ']';
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ']';
      objectArray0[6] = (Object) charBuffer0;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withQuoteChar('[');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.close();
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.toString();
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) 'D');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('D');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVFormat2.withSkipHeaderRecord(true);
      Comparator<BufferedWriter> comparator0 = (Comparator<BufferedWriter>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.flush();
      cSVPrinter0.printComment("5 [7)_9TQ:X");
      cSVFormat1.print(charBuffer0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter1.flush();
      cSVPrinter1.close();
      // Undeclared exception!
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.close();
      objectArray0[0] = (Object) cSVPrinter0;
      cSVFormat0.toString();
      StringReader stringReader0 = new StringReader("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      stringReader0.ready();
      cSVFormat0.parse(stringReader0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 'R');
      byte[] byteArray0 = new byte[1];
      pushbackInputStream0.unread(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      arrayDeque0.offerFirst(dataInputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('~');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("M9OxGqyfcBmoRC&|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat2);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(':');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(44);
      cSVFormat2.toString();
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.withSkipHeaderRecord(false);
      CharBuffer charBuffer0 = CharBuffer.allocate(44);
      charArrayWriter0.append((CharSequence) charBuffer0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      Character character0 = new Character('N');
      cSVFormat2.withQuoteChar(character0);
      Character character1 = Character.valueOf('N');
      cSVFormat0.withEscape(character1);
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("%8+O8", "%8+O8");
      treeSet0.pollLast();
      // Undeclared exception!
      try { 
        treeSet0.remove(sQLNonTransientConnectionException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLNonTransientConnectionException cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(':');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(44);
      cSVFormat2.toString();
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.withSkipHeaderRecord(false);
      CharBuffer charBuffer0 = CharBuffer.allocate(44);
      charArrayWriter0.append((CharSequence) charBuffer0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.flush();
      Character character0 = Character.valueOf('N');
      cSVFormat0.withEscape(character0);
      cSVFormat2.format(objectArray0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.flush();
      assertEquals(40, charBuffer0.remaining());
      assertEquals(4, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockFile mockFile0 = new MockFile("u=lGj.", "zCl0");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "zCl0", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      cSVPrinter0.flush();
      PrintStream printStream1 = mockPrintStream1.printf(locale0, ";+.}LK| 6", objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream1, cSVFormat1);
      cSVFormat0.toString();
      StringReader stringReader0 = new StringReader("u=lGj.");
      stringReader0.skip(0L);
      cSVFormat0.parse(stringReader0);
      Object object1 = new Object();
      Object object2 = new Object();
      CSVPrinter cSVPrinter2 = new CSVPrinter(printStream1, cSVFormat1);
      cSVPrinter2.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter1.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVFormat0.toString();
      StringReader stringReader0 = new StringReader("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      StringWriter stringWriter0 = new StringWriter(112);
      StringWriter stringWriter1 = stringWriter0.append(':');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) pipedWriter0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) stringWriter1;
      cSVFormat2.format(objectArray0);
      Object object3 = new Object();
      Float float0 = new Float((double) 112);
      cSVPrinter0.print(float0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter1.getOut();
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      cSVPrinter0.print(cSVFormat1);
      assertEquals('R', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVFormat0.toString();
      StringReader stringReader0 = new StringReader("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      cSVFormat0.parse(stringReader0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character(' ');
      cSVFormat0.withEscape(character0);
      Character.valueOf('A');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('y');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat.newFormat(';');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.close();
      CSVFormat cSVFormat4 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat4.toString();
      StringReader stringReader0 = new StringReader("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVParser cSVParser0 = cSVFormat4.parse(stringReader0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVParser0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      assertEquals(1065, charBuffer0.length());
      assertEquals(247, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":^DW", "The header contains duplicate names: ");
      mockFile0.toURI();
      MockFile mockFile1 = new MockFile(mockFile0, ":^DW");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.append((CharSequence) ":^DW");
      mockPrintStream0.checkError();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('B');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVFormat0.toString();
      StringReader stringReader0 = new StringReader("w62U");
      cSVFormat0.parse(stringReader0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) character0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) "w62U";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      assertEquals(170L, mockFile1.length());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      charArrayWriter1.append('~');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(pipedWriter0);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord(objectArray0);
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":^DW", "The header contains duplicate names: ");
      MockFile mockFile1 = new MockFile(mockFile0, ":^DW");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ":^DW");
      mockPrintStream0.checkError();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('B');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('B');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      cSVFormat1.withSkipHeaderRecord(true);
      PriorityQueue<BufferedWriter> priorityQueue0 = new PriorityQueue<BufferedWriter>(comparator0);
      Vector<BufferedWriter> vector0 = new Vector<BufferedWriter>(priorityQueue0);
      vector0.removeAllElements();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("The header contains duplicate names: ");
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = new Character('R');
      CSVFormat cSVFormat0 = null;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(pipedWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<q,S0TXL.|DGR");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<q,S0TXL.|DGR";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      Object object0 = new Object();
      cSVFormat2.toString();
      cSVPrinter0.print(object0);
      cSVPrinter0.println();
      cSVFormat2.withDelimiter('u');
      CharBuffer.allocate(46);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      MockFile mockFile0 = new MockFile("u=lGj.", "zCl0");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat1 = CSVFormat.newFormat(',');
      cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter1.close();
      Quote quote1 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote1);
      cSVFormat1.toString();
      StringReader stringReader0 = new StringReader("u=lGj.");
      cSVFormat2.parse(stringReader0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.close();
      cSVPrinter1.printComment("INVALID");
      cSVPrinter0.printComment("");
      cSVPrinter1.println();
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('c')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(':');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(44);
      cSVFormat2.toString();
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.withSkipHeaderRecord(false);
      CharBuffer charBuffer0 = CharBuffer.allocate(44);
      charArrayWriter0.append((CharSequence) charBuffer0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVPrinter0.flush();
      Character character0 = new Character('N');
      cSVFormat2.withQuoteChar(character0);
      Character character1 = Character.valueOf('N');
      cSVFormat0.withEscape(character1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(bufferedWriter0);
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>((-2228));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2222);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)0;
      pushbackInputStream0.unread(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      arrayDeque0.offerFirst(dataInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      PriorityQueue<Long> priorityQueue0 = new PriorityQueue<Long>();
      PriorityQueue<Long> priorityQueue1 = new PriorityQueue<Long>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      cSVPrinter0.flush();
  }
}
