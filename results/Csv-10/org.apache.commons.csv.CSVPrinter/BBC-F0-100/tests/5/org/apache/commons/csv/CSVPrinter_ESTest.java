/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 16:10:50 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = new PipedReader(109);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVParser0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('0');
      cSVFormat1.withRecordSeparator('0');
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printComment("The escape character cannot be a line break");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character.valueOf('w');
      String string0 = "OPEqORD";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("OPEqORD");
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat2.print(pipedWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = '';
      charArray0[2] = '@';
      charArray0[3] = 'k';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('+');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) '';
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) '@';
      objectArray0[5] = (Object) charBuffer1;
      cSVPrinter0.printComment(" V+*L=wigz");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      ClassLoader.getSystemClassLoader();
      cSVFormat1.validate();
      cSVFormat0.print(pipedWriter0);
      Character character0 = Character.valueOf('-');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('\u0088');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.csv.CSVFormat@0000000004RRRR");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("V6-ijYLE-&hi%%g9DC");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V6-ijYLE-&hi%%g9DC");
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "V6-ijYLE-&hi%%g9DC");
      stringWriter1.append('=');
      cSVFormat4.validate();
      Float float0 = new Float(1.0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter1);
      cSVPrinter0.print(float0);
      cSVPrinter0.close();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat5.withEscape('=');
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "\"org.apache.commons.csv.CSVFormat@0000000003\"", 24, 22);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6k~7Jri&bSHfOeXL", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character.valueOf('s');
      CSVFormat.newFormat('s');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("6k~7Jri&bSHfOeXL");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVFormat2.withIgnoreEmptyLines(true);
      Float float0 = new Float((double) 's');
      cSVPrinter0.print((Object) null);
      cSVPrinter0.close();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat1.print(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("V6-ijYLE-&hi%%g9DC");
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("V6-ijYLE-&hi%%g9DC");
      cSVFormat3.withDelimiter('u');
      cSVFormat1.withRecordSeparator('u');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-+");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-+");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat3);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("V6-ijYLE-&hi%%g9DC");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "V6-ijYLE-&hi%%g9DC");
      StringWriter stringWriter2 = stringWriter1.append('=');
      cSVFormat4.validate();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter2);
      Vector<MockFileWriter> vector0 = new Vector<MockFileWriter>();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter1);
      cSVFormat4.withIgnoreSurroundingSpaces(false);
      vector0.removeElement(bufferedWriter0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.print(bufferedWriter0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("V6-ijYLE-&hi%%g9DC");
      cSVPrinter0.printRecords(objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.print("V6-ijYLE-&hi%%g9DC");
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6k~7Jri&bSHfOeXL", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('s');
      CSVFormat cSVFormat1 = CSVFormat.newFormat('s');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printComment("6k~7Jri&bSHfOeXL");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6k~7Jri&bSHfOeXL");
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = null;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('X');
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'u';
      charArray0[2] = 'X';
      charArray0[3] = 'u';
      charArray0[4] = 'X';
      charArray0[5] = '{';
      charArray0[6] = 'u';
      charArray0[7] = 'X';
      charArray0[8] = 'X';
      pipedWriter0.write(charArray0);
      Character character0 = Character.valueOf('u');
      cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('R');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      cSVFormat2.withQuoteChar('');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Float float0 = new Float(1471.881082113);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      cSVPrinter0.print(character0);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6k~7Jri&bSHfOeXL", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('s');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) character0;
      objectArray0[8] = (Object) mockPrintStream0;
      cSVFormat0.format(objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" SurroundingSpaces:ignored");
      mockPrintStream0.format("C(3,4i^ITv", objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      EvoSuiteFile evoSuiteFile0 = null;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVPrinter1.printComment("");
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("{s`mcmQYp1(");
      CSVPrinter cSVPrinter2 = cSVFormat2.print(pipedWriter0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      cSVFormat1.withNullString("NullString=<");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      ServiceLoader<SQLNonTransientException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      try { 
        cSVPrinter2.printRecord((Iterable<?>) serviceLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(2837);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CharBuffer.allocate(2837);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('~');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9Ox7qyfcBmoR4&|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat1);
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVPrinter0.printComment("9Ox7qyfcBmoR4&|");
      cSVPrinter0.getOut();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      ServiceLoader<SQLNonTransientException> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      Object[] objectArray0 = new Object[8];
      cSVPrinter0.getOut();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      cSVPrinter0.print((Object) null);
      Object object0 = new Object();
      cSVPrinter0.print(sQLTransientConnectionException0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6k~7Jri&bSHfOeXL", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('s');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat2.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>(39);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter1.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.getOut();
      cSVPrinter1.getOut();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      ServiceLoader.load(class0, (ClassLoader) null);
      cSVPrinter1.printRecord((Iterable<?>) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat0.withNullString("9Ox7qyfcBmoR4&|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      cSVFormat1.withIgnoreEmptyLines(false);
      cSVPrinter0.printComment("F`g^X_h");
      cSVPrinter0.getOut();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      cSVFormat0.withNullString("F`g^X_h");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      ServiceLoader.load(class0, classLoader0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Parameter '");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('A');
      MockPrintStream mockPrintStream0 = new MockPrintStream("$\"X#FUSl}1(*");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "Parameter '";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat0.format(objectArray0);
      Object object1 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.println();
      PipedReader pipedReader0 = new PipedReader(4511);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 4511);
      cSVFormat1.parse(bufferedReader1);
      cSVPrinter0.println();
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) pipedReader0;
      objectArray0[8] = (Object) cSVParser0;
      cSVPrinter0.printRecord(objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat0;
      cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
      cSVFormat2.format(objectArray1);
      cSVPrinter0.println();
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.printRecord(objectArray0);
      Iterable<CharArrayWriter> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6k~7Jri&bSHfOeXL", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('s');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>(97);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      Appendable appendable0 = cSVPrinter0.getOut();
      Appendable appendable1 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) appendable0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) appendable0;
      objectArray0[3] = (Object) appendable1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) quote0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('~');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("9Ox7qyfcBmoR4&|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat2);
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVPrinter0.printComment("9Ox7qyfcBmoR4&|");
      cSVPrinter0.getOut();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      cSVFormat2.withNullString("");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      ServiceLoader<SQLNonTransientException> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[2] = (Object) charArrayWriter1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) classLoader1;
      objectArray0[5] = (Object) classLoader0;
      objectArray0[6] = (Object) charArrayWriter1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('~');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("9Ox7qyfcBmoR4&|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat2);
      cSVFormat2.withIgnoreEmptyLines(true);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(266).when(resultSetMetaData0).getColumnCount();
      Float float0 = new Float((double) 1312);
      cSVPrinter0.print(float0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.close();
      cSVPrinter0.printRecords(resultSet0);
      Iterable<InputStreamReader> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(iterable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('p');
      cSVFormat2.withEscape('p');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) mockFileWriter0;
      objectArray0[5] = (Object) fileDescriptor0;
      cSVFormat2.format(objectArray0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      int int0 = 1388;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1388);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('~');
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat1.withNullString("9Ox7qyfcBmoR4&|");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(624).when(resultSetMetaData0).getColumnCount();
      Float float0 = new Float((double) 1312);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn("The comment start character and the delimiter cannot be the same ('", "9Ox7qyfcBmoR4&|", "9Ox7qyfcBmoR4&|", "'(; 6nyWgkBfZ3Q3o[", "iA(DvD").when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('H');
      Character character0 = Character.valueOf('|');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) pipedWriter0;
      objectArray0[7] = (Object) null;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("");
      cSVFormat3.format(objectArray0);
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.csv.CSVFormat@0000000006");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      try { 
        cSVPrinter0.print(mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(":ikAmY@&s)>)G9&>w8M");
      mockPrintStream0.format(":ikAmY@&s)>)G9&>w8M", objectArray0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('p');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) classLoader0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) classLoader0;
      cSVFormat1.format(objectArray0);
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('u');
      cSVFormat2.withQuoteChar('u');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      cSVFormat1.parse(pipedReader0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object object0 = new Object();
      cSVPrinter1.print((Object) null);
      cSVPrinter1.println();
      cSVPrinter0.flush();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat3.print(pipedWriter0);
      cSVPrinter0.flush();
      stringWriter0.append('(');
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 2853);
      cSVPrinter0.print(bufferedWriter0);
      cSVPrinter1.getOut();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      cSVFormat1.withCommentStart('R');
      cSVFormat0.withNullString("format");
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('.');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Float float0 = new Float(1471.881082113);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JNiQOmNyB-d(6Mc#k", "JNiQOmNyB-d(6Mc#k", sQLTransientException0);
      cSVPrinter0.print(sQLTimeoutException0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('u');
      cSVFormat2.withQuoteChar('u');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
      Object object0 = new Object();
      Float float0 = new Float(0.0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.flush();
      stringWriter0.append('I');
      cSVPrinter0.print(float0);
      cSVPrinter1.getOut();
      cSVPrinter1.printComment("");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('u');
      cSVFormat2.withQuoteChar('u');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
      Object object0 = new Object();
      Float float0 = new Float(0.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3413, 3413);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 27);
      cSVPrinter0.print(bufferedInputStream0);
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVParser0;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) cSVParser0;
      cSVFormat1.format(objectArray0);
      Object object0 = new Object();
      cSVPrinter0.print(objectArray0[2]);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(pipedWriter0);
      cSVPrinter1.flush();
      int int0 = (-1);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('~');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("9Ox7qyfcBmoR4&|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat2);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(624).when(resultSetMetaData0).getColumnCount();
      Float float0 = new Float((double) 1312);
      cSVPrinter0.print(float0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      cSVPrinter0.close();
      // Undeclared exception!
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('~');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("9Ox7qyfcBmoR4&|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat2);
      cSVPrinter0.print("9Ox7qyfcBmoR4&|");
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat2;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charArrayWriter0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.append('U');
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("W_RZ2~LJgV");
      cSVPrinter1.print(sQLInvalidAuthorizationSpecException0);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment((String) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = null;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      char char0 = 'u';
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('u');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('u');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
      Object object0 = new Object();
      cSVPrinter0.print((Object) null);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      // Undeclared exception!
      try { 
        cSVFormat4.print(stringWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('u')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVFormat0.toString();
      StringReader stringReader0 = new StringReader("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) stringReader0;
      objectArray1[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) cSVPrinter0;
      objectArray1[4] = (Object) 'H';
      objectArray1[5] = (Object) stringReader0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2222);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)66;
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>();
      arrayDeque0.offerFirst(dataInputStream0);
      charBuffer0.chars();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("pyw|i1ujnNN");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('~');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("9Ox7qyfcBmoR4&|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat2);
      cSVFormat2.withIgnoreEmptyLines(true);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      cSVPrinter1.println();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter1.flush();
      cSVPrinter0.flush();
      Short short0 = new Short((short)44);
      cSVPrinter0.print(short0);
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      Float float0 = new Float((-458.545));
      SQLWarning sQLWarning0 = new SQLWarning();
      cSVPrinter0.print(sQLWarning0);
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      Object object0 = new Object();
      cSVPrinter0.print("org.apache.commons.csv.CSVFormat@0000000008");
      cSVPrinter0.print(object0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(":ikAmY@&s)>)G9&>w8M");
      mockPrintStream0.format(":ikAmY@&s)>)G9&>w8M", objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2222);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[0] = (byte) (-26);
      byteArray0[2] = (byte)66;
      pushbackInputStream0.unread(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>();
      arrayDeque0.offerFirst(dataInputStream0);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".5j[lDX;+Nw])1PI.");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      Character character0 = new Character('B');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
      Character character1 = Character.valueOf('?');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character1);
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVParser");
      cSVFormat3.withEscape('H');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVFormat3.withSkipHeaderRecord(true);
      Comparator<BufferedWriter> comparator0 = (Comparator<BufferedWriter>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<BufferedWriter> priorityQueue0 = new PriorityQueue<BufferedWriter>(comparator0);
      Vector<BufferedWriter> vector0 = new Vector<BufferedWriter>(priorityQueue0);
      vector0.removeAllElements();
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charArrayWriter1);
      cSVPrinter1.printRecord((Iterable<?>) vector0);
      cSVPrinter1.flush();
      cSVPrinter0.printComment("org.apache.commons.csv.CSVParser");
      cSVPrinter1.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter1.flush();
      cSVPrinter0.close();
      cSVPrinter1.println();
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      cSVPrinter2.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter2.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('/');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat2.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter1.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVFormat0.toString();
      StringReader stringReader0 = new StringReader("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      cSVFormat1.parse(stringReader0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[4] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[5] = (Object) pipedWriter0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('~');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("9Ox7qyfcBmoR4&|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter2, cSVFormat2);
      cSVFormat2.withIgnoreEmptyLines(true);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      Float float0 = new Float((double) 1312);
      cSVPrinter0.print(float0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.close();
      cSVPrinter0.printRecords(resultSet0);
      assertEquals(1339, charArrayWriter2.size());
      assertEquals(1339, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2222);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)66;
      pushbackInputStream0.unread(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>();
      arrayDeque0.offerFirst(dataInputStream0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('D');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar((Character) 'D');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      cSVPrinter0.print(cSVFormat1);
      assertFalse(cSVFormat1.isEscaping());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVFormat0.toString();
      StringReader stringReader0 = new StringReader("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      cSVFormat0.parse(stringReader0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2837);
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      charArrayWriter0.append((CharSequence) charBuffer0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('X');
      char[] charArray0 = new char[0];
      pipedWriter0.write(charArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat3);
      cSVPrinter0.printComment("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      cSVFormat1.withNullString((String) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) classLoader0;
      objectArray0[1] = (Object) pipedReader0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) classLoader0;
      objectArray0[6] = (Object) classLoader0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("");
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(bufferedWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2222);
      byte[] byteArray0 = new byte[9];
      pushbackInputStream0.unread(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      PriorityQueue<Long> priorityQueue0 = new PriorityQueue<Long>();
      PriorityQueue<Long> priorityQueue1 = new PriorityQueue<Long>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) priorityQueue0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) priorityQueue1;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) dataInputStream0;
      objectArray0[5] = (Object) pushbackInputStream0;
      objectArray0[6] = (Object) priorityQueue1;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("");
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(bufferedWriter0);
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>((-2228));
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter1 = new CSVPrinter(bufferedWriter0, cSVFormat0);
      cSVFormat2.toString();
      StringReader stringReader0 = new StringReader("");
      cSVFormat0.parse(stringReader0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringReader0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) stringReader0;
      objectArray0[4] = (Object) stringReader0;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.close();
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(bufferedWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2222);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      PriorityQueue<Long> priorityQueue0 = new PriorityQueue<Long>();
      PriorityQueue<Long> priorityQueue1 = new PriorityQueue<Long>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      cSVPrinter0.flush();
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(appendable0, bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":^DW", "The header contains duplicate names: ");
      MockFile mockFile1 = new MockFile(mockFile0, ":^DW");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ":^DW");
      mockPrintStream0.checkError();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('B');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('B');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      cSVFormat1.withSkipHeaderRecord(true);
      PriorityQueue<BufferedWriter> priorityQueue0 = new PriorityQueue<BufferedWriter>(comparator0);
      Vector<BufferedWriter> vector0 = new Vector<BufferedWriter>(priorityQueue0);
      vector0.removeAllElements();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.flush();
      cSVPrinter0.printComment("The header contains duplicate names: ");
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "out";
      MockFile mockFile0 = new MockFile("out");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.flush();
      mockPrintWriter0.write("");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("<q,S0TXL.|DGR");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<q,S0TXL.|DGR";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat0.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('R');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('u');
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      MockFile mockFile0 = new MockFile("xUx{ak]Ah:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      cSVPrinter0.print(locale_FilteringMode0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("xUx{ak]Ah:");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale_FilteringMode0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "cJ'QhQ";
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) "cJ'QhQ";
      objectArray0[6] = (Object) ":ikAmY@&s)>)G9&>w8M";
      mockPrintStream1.format("cJ'QhQ", objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream1, cSVFormat1);
      cSVPrinter1.println();
      CSVFormat cSVFormat2 = CSVFormat.newFormat('X');
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter2.printRecords(objectArray0);
      ArrayDeque<CharArrayWriter> arrayDeque0 = new ArrayDeque<CharArrayWriter>();
      LinkedHashSet<CharArrayWriter> linkedHashSet0 = new LinkedHashSet<CharArrayWriter>(arrayDeque0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      assertEquals(261L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('c')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(':');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(44);
      cSVFormat2.toString();
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.withSkipHeaderRecord(false);
      CharBuffer charBuffer0 = CharBuffer.allocate(44);
      charArrayWriter0.append((CharSequence) charBuffer0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVPrinter0.flush();
      Character character0 = new Character('N');
      cSVFormat2.withQuoteChar(character0);
      Character character1 = Character.valueOf('N');
      cSVFormat0.withEscape(character1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(bufferedWriter0);
      ArrayDeque<DataInputStream> arrayDeque0 = new ArrayDeque<DataInputStream>((-2228));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2222);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)0;
      pushbackInputStream0.unread(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      arrayDeque0.offerFirst(dataInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      PriorityQueue<Long> priorityQueue0 = new PriorityQueue<Long>();
      PriorityQueue<Long> priorityQueue1 = new PriorityQueue<Long>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      cSVPrinter0.flush();
  }
}
