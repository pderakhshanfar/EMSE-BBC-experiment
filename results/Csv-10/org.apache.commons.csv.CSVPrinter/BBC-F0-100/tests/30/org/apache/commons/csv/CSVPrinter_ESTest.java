/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 16:14:58 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.nio.Buffer;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0?");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      Character character0 = Character.valueOf('^');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      cSVFormat1.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('C');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("org.apache.commons.csv.Lexer");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('?');
      cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      char char0 = '>';
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('>');
      Character character1 = new Character('>');
      cSVFormat2.withCommentStart(character1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = "&t9KJIlVpD6C";
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("&t9KJIlVpD6C");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0081';
      charArray0[1] = '\u0081';
      stringWriter0.write(charArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\u0081');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r");
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(')');
      stringWriter0.write("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("\r:");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9e(ORk'4!b{E");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "/OX[";
      objectArray0[3] = (Object) "/OX[";
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) "/OX[";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A[");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.flush();
      cSVFormat0.withCommentStart('=');
      Object[] objectArray0 = new Object[3];
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Em|ixMMhzmy", "The comment start character cannot be a line break", 1883);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The comment start character cannot be a line break", sQLRecoverableException0);
      cSVPrinter0.printComment("The comment start character cannot be a line break");
      sQLRecoverableException0.initCause(sQLTimeoutException0);
      cSVPrinter0.print(sQLTimeoutException0);
      cSVPrinter0.println();
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      // Undeclared exception!
      cSVPrinter1.printRecord((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("?[^\"s0HXQN2");
      PipedReader pipedReader0 = new PipedReader(1668);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[9];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", batchUpdateException0);
      batchUpdateException0.initCause(sQLTransientException0);
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      stringWriter0.write(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("l8/zR");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 1518);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      CSVParser cSVParser0 = cSVFormat1.parse(inputStreamReader0);
      objectArray0[1] = (Object) "?[~^rs0KXQN2";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) "l8/zR";
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[4];
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ";#W";
      objectArray0[1] = (Object) ";#W";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "]";
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) ";#W";
      objectArray0[8] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "Gu)XY6ii<Xnq0vV{<";
      MockFileWriter mockFileWriter0 = new MockFileWriter("Gu)XY6ii<Xnq0vV{<");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(25).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVFormat0.withSkipHeaderRecord(true);
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(24);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[14];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(";#W");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = 'g';
      cSVFormat0.withEscape('g');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVFormat0.withEscape('g');
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('7');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(114);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) null;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("#%|^dbEZk3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("#%|^dbEZk3");
      cSVFormat0.withEscape('t');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[9];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("");
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Double double0 = new Double((-155.1561549193856));
      cSVPrinter0.print(double0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[1] = 's';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      charBuffer0.read(charBuffer1);
      cSVFormat0.withEscape('&');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('g');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('>');
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("+%kX]~k5RWlPfHZaCl");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(object0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Hd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      mockFileOutputStream0.flush();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('g');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString(";*AndpwD");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[1];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5'eJZf3F0df", true);
      mockFileOutputStream0.flush();
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "iTd");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 'A';
      charArray0[2] = '~';
      charArray0[3] = 'p';
      charArray0[4] = '3';
      charArray0[5] = 'V';
      charArray0[6] = 'd';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer1.flip();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      stringWriter0.append((CharSequence) stringBuffer0);
      cSVFormat0.toString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5'eJZf3F0df", false);
      mockFileOutputStream0.flush();
      Character character0 = new Character('5');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      String string0 = ";*AndpwD";
      cSVFormat2.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Hd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('t');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", true);
      mockFileOutputStream0.flush();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('g');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString(";*AndpwD");
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat3);
      cSVPrinter0.printComment("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Hd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      mockPrintWriter0.print((Object) sQLClientInfoException1);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5'eJZf3F0df");
      cSVFormat1.withEscape('.');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.print(sQLClientInfoException0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter1.println();
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      CSVPrinter cSVPrinter2 = cSVFormat0.print(mockPrintWriter0);
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CSVPrinter cSVPrinter3 = new CSVPrinter(printStream0, cSVFormat2);
      cSVPrinter3.printRecords((Iterable<?>) sQLClientInfoException1);
      cSVPrinter0.print(cSVFormat2);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5'eJZf3F0df", true);
      mockFileOutputStream0.flush();
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JYLAryn", "org.apache.commons.csv.CSVPrinter$1", 4, (Throwable) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("YJ>G* ?!Sc!eGmEb(", "5'eJZf3F0df");
      cSVPrinter0.print(sQLSyntaxErrorException0);
      LinkedHashSet<PushbackInputStream> linkedHashSet0 = new LinkedHashSet<PushbackInputStream>(2, 2);
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Vector<Short> vector0 = new Vector<Short>(arrayList0);
      Short short0 = new Short((short)37);
      vector0.add(short0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("N^SA");
      PrintStream printStream0 = mockPrintStream0.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("N^SA");
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      Quote quote0 = Quote.MINIMAL;
      cSVFormat1.withQuotePolicy(quote0);
      cSVFormat2.withDelimiter('f');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat1);
      Quote quote1 = Quote.MINIMAL;
      cSVFormat2.withQuotePolicy(quote1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) printStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("#0Rc<xbw<-Z");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("#0Rc<xbw<-Z");
      cSVFormat0.withQuoteChar('1');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat3.withIgnoreEmptyLines(false);
      Character character0 = new Character('i');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      cSVPrinter0.printComment("#0Rc<xbw<-Z");
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      arrayList0.add((Float) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      stringWriter0.append((CharSequence) stringBuffer0);
      cSVFormat0.toString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5'eJZf3F0df", false);
      mockFileOutputStream0.flush();
      Character character0 = new Character('5');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter1.printComment("");
      cSVPrinter0.printComment("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 11, (Throwable) null);
      cSVPrinter1.print(sQLIntegrityConstraintViolationException0);
      LinkedHashSet<PushbackInputStream> linkedHashSet0 = new LinkedHashSet<PushbackInputStream>(9, 11);
      cSVPrinter0.printRecords((Iterable<?>) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      cSVFormat0.withEscape('g');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('Q');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("5'eJZf3F0df");
      Character character0 = new Character('g');
      cSVFormat0.withCommentStart((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat2);
      cSVPrinter0.printComment("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      cSVPrinter0.printComment("#2c.K&");
      cSVPrinter0.print((Object) null);
      LinkedHashSet<PushbackInputStream> linkedHashSet0 = new LinkedHashSet<PushbackInputStream>(0, 1252.6194F);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      PipedWriter pipedWriter0 = new PipedWriter();
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('C');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      String string0 = "g~g0 Hnh";
      try { 
        cSVPrinter0.printComment("g~g0 Hnh");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.withRecordSeparator("\u0085");
      Character.valueOf('Q');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('Q');
      cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer0, cSVFormat1);
      cSVPrinter1.printComment("g~g0 Hnh");
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("");
      MockFile mockFile0 = new MockFile("\u0085", "\u0085");
      MockFile mockFile1 = new MockFile(mockFile0, "g~g0 Hnh");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\u0085", false);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat2.print(stringBuffer0);
      ArrayList<StringWriter> arrayList0 = new ArrayList<StringWriter>();
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.printComment("");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Hd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      mockPrintWriter0.print((Object) mockFileOutputStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5'eJZf3F0df");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('3');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("Hd");
      mockFileOutputStream0.flush();
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      mockFileOutputStream0.flush();
      Quote quote1 = Quote.MINIMAL;
      mockPrintStream0.println(5787.7362140267);
      CSVFormat cSVFormat5 = cSVFormat4.withQuotePolicy(quote1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat5);
      cSVPrinter0.printComment("NeKP_VkC_%v[");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) printStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.withRecordSeparator("\u0085");
      Character.valueOf('Q');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('Q');
      cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer0, cSVFormat1);
      cSVPrinter1.printComment("g~g0 Hnh");
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("");
      MockFile mockFile0 = new MockFile("\u0085", "\u0085");
      MockFile mockFile1 = new MockFile(mockFile0, "$4`z't0~,h|[8=&j8-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      cSVPrinter1.print(objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Hd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('y');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      mockPrintWriter0.print((Object) mockFileOutputStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Hd");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('3');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("Hd");
      mockFileOutputStream0.flush();
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      Locale locale0 = Locale.ITALY;
      mockPrintWriter0.printf(locale0, "Hd", objectArray0);
      objectArray0[3] = (Object) printStream0;
      objectArray0[2] = (Object) "Hd";
      objectArray0[3] = (Object) "Hd";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat2;
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(printStream0, cSVFormat2);
      cSVPrinter0.print(cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.flush();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.csv.CSVPrinter$1", "!\"+.5", 9);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Plm_M`", "!\"+.5", sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientException0);
      batchUpdateException0.getNextException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      cSVPrinter0.print(sQLSyntaxErrorException0);
      cSVPrinter0.println();
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.flush();
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('r');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(6);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      cSVPrinter1.print(objectOutputStream0);
      cSVPrinter0.println();
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      cSVFormat1.print(stringWriter0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter3.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.withRecordSeparator("\u0085");
      Character character0 = Character.valueOf('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer0, cSVFormat1);
      cSVFormat1.withIgnoreEmptyLines(false);
      cSVPrinter0.printComment("\u0085");
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printComment("g~g0 Hnh");
      cSVPrinter1.print("\u0085");
      cSVPrinter1.printComment("g~g0 Hnh");
      Class<PipedOutputStream> class0 = PipedOutputStream.class;
      ServiceLoader<PipedOutputStream> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter1.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Hd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      mockPrintWriter0.print((Object) mockFileOutputStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5'eJZf3F0df");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('3');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("Hd");
      mockFileOutputStream0.flush();
      Quote quote0 = Quote.MINIMAL;
      cSVFormat3.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      Locale locale0 = Locale.ITALY;
      mockPrintWriter0.printf(locale0, "Hd", objectArray0);
      objectArray0[1] = (Object) printStream0;
      objectArray0[2] = (Object) "Hd";
      objectArray0[3] = (Object) "5'eJZf3F0df";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVPrinter0.printRecords(objectArray0);
      HashSet<ByteArrayInputStream> hashSet0 = new HashSet<ByteArrayInputStream>(32);
      cSVPrinter0.printRecord((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.withRecordSeparator("\u0085");
      Character character0 = Character.valueOf('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer0, cSVFormat1);
      cSVPrinter0.printComment("\u0085");
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printComment("g~g0 Hnh");
      cSVPrinter1.print("\u0085");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Em|ixMMhzmy", "The comment start character cannot be a line break", 1883);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The comment start character cannot be a line break", sQLRecoverableException0);
      cSVPrinter0.print(sQLTimeoutException0);
      cSVPrinter0.println();
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      cSVPrinter1.printRecord((Iterable<?>) sQLTimeoutException0);
      cSVPrinter0.printRecord((Iterable<?>) sQLTimeoutException0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter1, cSVFormat0);
      cSVPrinter2.print(stringWriter0);
      cSVPrinter2.getOut();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[1] = 's';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withEscape('&');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('g');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedList0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.close();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('Y');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('V');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.close();
      PriorityQueue<PushbackInputStream> priorityQueue0 = new PriorityQueue<PushbackInputStream>();
      ArrayList<PushbackInputStream> arrayList0 = new ArrayList<PushbackInputStream>(priorityQueue0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) appendable0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) priorityQueue0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 's';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
      String string0 = "')";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("')");
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("g~g0 Hnh");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      CSVFormat.newFormat('a');
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[1];
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVPrinter0.getOut();
      cSVPrinter0.getOut();
      LinkedList<MockFileWriter> linkedList0 = new LinkedList<MockFileWriter>();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "Gu)XY6ii<Xnq0vV{<";
      MockFileWriter mockFileWriter0 = new MockFileWriter("Gu)XY6ii<Xnq0vV{<");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(111).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.getOut();
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(boolean0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockFileWriter0);
      cSVFormat0.toString();
      cSVPrinter0.getOut();
      cSVPrinter1.close();
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rHd(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      mockPrintWriter0.print((Object) mockFileOutputStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5'eJZf3F0df");
      mockPrintWriter0.write("5'eJZf3F0df", 0, 0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('3');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("rHd(");
      mockFileOutputStream0.flush();
      Quote quote0 = Quote.MINIMAL;
      cSVFormat3.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter0.close();
      TreeSet<MockFileInputStream> treeSet0 = new TreeSet<MockFileInputStream>((Comparator<? super MockFileInputStream>) null);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "rHd(";
      objectArray0[2] = (Object) "5'eJZf3F0df";
      objectArray0[3] = (Object) mockFileOutputStream0;
      cSVFormat1.format(objectArray0);
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rHd(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      mockPrintWriter0.print((Object) mockFileOutputStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5'eJZf3F0df");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) printStream0;
      objectArray0[1] = (Object) "rHd(";
      objectArray0[2] = (Object) "5'eJZf3F0df";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "rHd(";
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) printStream0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) mockPrintStream0;
      cSVPrinter0.printRecords(objectArray0);
      Vector<BufferedOutputStream> vector0 = new Vector<BufferedOutputStream>();
      PriorityQueue<FilterOutputStream> priorityQueue0 = new PriorityQueue<FilterOutputStream>(vector0);
      PriorityQueue<PushbackInputStream> priorityQueue1 = new PriorityQueue<PushbackInputStream>();
      ArrayList<PushbackInputStream> arrayList0 = new ArrayList<PushbackInputStream>(priorityQueue1);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 's';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("')");
      Character character0 = Character.valueOf('s');
      cSVFormat2.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.println();
      Class<SQLException> class0 = SQLException.class;
      ServiceLoader<SQLException> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '\'';
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) 'v';
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) "')";
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[1] = 's';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withEscape('&');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('g');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '\n';
      objectArray0[1] = (Object) 'v';
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) 'v';
      objectArray0[4] = (Object) '\r';
      objectArray0[5] = (Object) '\r';
      objectArray0[6] = (Object) '\r';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Hd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Character character0 = Character.valueOf('t');
      Quote quote0 = Quote.ALL;
      Quote quote1 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote1);
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('t');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      cSVFormat3.withRecordSeparator('Q');
      cSVFormat2.withDelimiter('t');
      cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) quote0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[1] = 's';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('y');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      String string0 = null;
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator((String) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat4);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('b');
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charArrayWriter1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[1] = 's';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('g');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '\n';
      objectArray0[1] = (Object) 'v';
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) 'v';
      objectArray0[4] = (Object) '\r';
      objectArray0[5] = (Object) '\r';
      objectArray0[6] = (Object) '\r';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('X');
      cSVFormat0.withEscape(character0);
      cSVFormat0.withQuoteChar('D');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rHd(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      mockPrintWriter0.print((Object) mockFileOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5'eJZf3F0df");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('3');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("rHd(");
      mockFileOutputStream0.flush();
      Quote quote0 = Quote.MINIMAL;
      cSVFormat3.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) printStream0;
      objectArray0[2] = (Object) "rHd(";
      objectArray0[3] = (Object) "5'eJZf3F0df";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) mockPrintWriter0;
      Vector<PushbackInputStream> vector0 = new Vector<PushbackInputStream>();
      ArrayList<PushbackInputStream> arrayList0 = new ArrayList<PushbackInputStream>(vector0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rHd(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      mockPrintWriter0.print((Object) mockFileOutputStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5'eJZf3F0df");
      mockPrintWriter0.write("5'eJZf3F0df", 0, 0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('3');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("rHd(");
      mockFileOutputStream0.flush();
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character('Z');
      cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      Character.valueOf('3');
      Character character1 = new Character('$');
      cSVFormat2.withCommentStart(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) quote0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) mockPrintStream0;
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.println();
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      cSVPrinter1.printRecord((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('u');
      charArrayWriter1.close();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) charArrayWriter1;
      objectArray0[2] = (Object) charArrayWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('o');
      Character character0 = Character.valueOf(']');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('P');
      Character character1 = new Character('[');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character1);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(65);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rHd(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      mockPrintWriter0.print((Object) mockFileOutputStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5'eJZf3F0df");
      mockPrintWriter0.write("5'eJZf3F0df", 0, 0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('3');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("rHd(");
      mockFileOutputStream0.flush();
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character('Z');
      cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      Character.valueOf('3');
      Character character1 = new Character('$');
      cSVFormat2.withCommentStart(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      TreeSet<PipedOutputStream> treeSet0 = new TreeSet<PipedOutputStream>();
      PriorityQueue<PipedOutputStream> priorityQueue0 = new PriorityQueue<PipedOutputStream>((SortedSet<? extends PipedOutputStream>) treeSet0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      cSVPrinter0.print(pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rHd(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PrintStream printStream0 = mockPrintStream0.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      mockPrintWriter0.print((Object) mockFileOutputStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5'eJZf3F0df");
      mockPrintWriter0.write("5'eJZf3F0df", 0, 0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('3');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("rHd(");
      mockFileOutputStream0.flush();
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character('Z');
      cSVFormat2.withQuoteChar(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      Character.valueOf('3');
      Character character1 = new Character('$');
      cSVFormat2.withCommentStart(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      Object[] objectArray0 = new Object[9];
      cSVPrinter0.printComment("x2x_");
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("5'eJZf3F0df");
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[7];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      mockFileOutputStream0.flush();
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockFile mockFile0 = new MockFile("cK:jj~,^]-", "cK:jj~,^]-");
      MockFile mockFile1 = new MockFile(mockFile0, "cK:jj~,^]-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Character character0 = new Character('8');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat0.withRecordSeparator("Q+:6\"C");
      Character character1 = Character.valueOf('d');
      Character character2 = new Character('8');
      cSVFormat1.withCommentStart(character2);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "cK:jj~,^]-";
      objectArray0[1] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) character1;
      objectArray0[4] = (Object) mockFile1;
      objectArray0[5] = (Object) character2;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rHd(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      mockPrintWriter0.print((Object) mockFileOutputStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5'eJZf3F0df");
      mockPrintWriter0.write("5'eJZf3F0df", 0, 0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('3');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("rHd(");
      mockFileOutputStream0.flush();
      Quote quote0 = Quote.MINIMAL;
      cSVFormat3.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      TreeSet<MockFileInputStream> treeSet0 = new TreeSet<MockFileInputStream>((Comparator<? super MockFileInputStream>) null);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      StringWriter stringWriter1 = new StringWriter();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      cSVPrinter1.flush();
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = "Gu)XY6ii<Xnq0vV{<";
      MockFileWriter mockFileWriter0 = new MockFileWriter("Gu)XY6ii<Xnq0vV{<");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.getOut();
      cSVPrinter0.println();
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.flush();
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      Vector<BufferedOutputStream> vector0 = new Vector<BufferedOutputStream>();
      PriorityQueue<FilterOutputStream> priorityQueue0 = new PriorityQueue<FilterOutputStream>(vector0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      stringWriter0.write("&TD{E)U8");
      charArrayWriter0.append('j');
      cSVPrinter0.println();
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 's';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("')");
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "')";
      objectArray0[1] = (Object) "')";
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("`3");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
      cSVFormat0.withQuoteChar('D');
      cSVFormat0.withCommentStart('D');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Character character0 = Character.valueOf('Q');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer0, cSVFormat2);
      cSVPrinter0.printComment("\u0085");
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printComment("g~g0 Hnh");
      cSVPrinter1.print("\u0085");
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('X');
      cSVFormat0.withEscape(character0);
      cSVFormat0.withQuoteChar('D');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "FQ'";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FQ'");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.close();
      Iterable<FilterInputStream> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.flush();
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      Vector<BufferedOutputStream> vector0 = new Vector<BufferedOutputStream>();
      PriorityQueue<FilterOutputStream> priorityQueue0 = new PriorityQueue<FilterOutputStream>(vector0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      stringWriter0.write("&TD{E)U8");
      charArrayWriter0.append('j');
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) stringBuffer0, (-2322), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2322
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "(line ";
      MockFile mockFile0 = new MockFile((File) null, "(line ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFile0.setLastModified(1L);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.flush();
      ArrayList<SQLTransactionRollbackException> arrayList0 = null;
      try {
        arrayList0 = new ArrayList<SQLTransactionRollbackException>((-1143));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1143
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('V');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'M';
      charArray0[5] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.flush();
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      Vector<BufferedOutputStream> vector0 = new Vector<BufferedOutputStream>();
      char char0 = '9';
      cSVFormat0.withQuoteChar('9');
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.close();
      Object[] objectArray1 = new Object[7];
      Object object2 = new Object();
      objectArray1[0] = object2;
      objectArray1[1] = object0;
      objectArray1[2] = (Object) vector0;
      objectArray1[3] = (Object) cSVPrinter0;
      Object object3 = new Object();
      objectArray1[4] = object3;
      objectArray1[5] = object0;
      objectArray1[6] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray1);
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = "Gu)XY6ii<Xnq0vV{<";
      MockFileWriter mockFileWriter0 = new MockFileWriter("Gu)XY6ii<Xnq0vV{<");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MockFile mockFile0 = new MockFile("cK:jj~,^]-", "cK:jj~,^]-");
      MockFile mockFile1 = new MockFile(mockFile0, "cK:jj~,^]-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.print(mockFile0);
      cSVPrinter0.println();
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>((Comparator<? super SQLClientInfoException>) null);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\\');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
