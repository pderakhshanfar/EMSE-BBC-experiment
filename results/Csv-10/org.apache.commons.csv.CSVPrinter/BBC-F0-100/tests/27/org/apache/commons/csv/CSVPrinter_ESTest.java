/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 16:11:05 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('6');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('V');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      pipedWriter0.connect(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVPrinter0.print("D{eHfg8//p|=<U");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('>');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Integer integer0 = new Integer((-4030));
      cSVPrinter0.print(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Y(N\"}4P0t", 0, 0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Y(N\"}4P0t", 0, 0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ALL");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ALL");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Vector<BufferedOutputStream> vector0 = new Vector<BufferedOutputStream>();
      vector0.setSize(2540);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Vector<BufferedOutputStream> vector0 = new Vector<BufferedOutputStream>();
      vector0.setSize(32);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) vector0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Vector<BufferedOutputStream> vector0 = new Vector<BufferedOutputStream>();
      vector0.setSize(32);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) vector0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      Vector<BufferedOutputStream> vector0 = new Vector<BufferedOutputStream>();
      vector0.setSize(549);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) vector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      Object[] objectArray0 = new Object[2];
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[2];
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLNonTransientConnectionException1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "[{eY//p|=<U");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("(Y9|qS neP");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = new Character('.');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('v');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      try { 
        cSVPrinter0.printComment("(Y9|qS neP");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(bufferedWriter0);
      Object[] objectArray0 = new Object[7];
      cSVPrinter0.printRecords(objectArray0);
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('2');
      MockFile mockFile0 = new MockFile("+C`b%", "+C`b%");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      mockFile0.delete();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.print(mockFile0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unexpected Quote value: ");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('~');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('~');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the delimiter cannot be the same ('~')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(9).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn("i", (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      MockPrintStream mockPrintStream0 = new MockPrintStream("i");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D{eH8//p|=<U");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Vector<BufferedOutputStream> vector0 = new Vector<BufferedOutputStream>();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) vector0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yM]'Eme(Z#9`6n?");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "org.apache.commons.csv.CSVPrinter", (-1075));
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientException0);
      assertEquals("org.apache.commons.csv.CSVPrinter", sQLTransientException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[{eY8//p|=<U");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('q');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.print(mockPrintWriter0);
      cSVPrinter0.printComment("[{eY8//p|=<U");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('C');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('0');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "^ us6J");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("^ us6J");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('p');
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedWriter0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[{eY8//p|=<U");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[{eY8//p|=<U");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":B,i");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":B,i", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[{QY*/1p|=<M");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" 6n");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" 6n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[3];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('>');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Y(N\"}4P0t", 0, 0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      Long long0 = new Long((-1L));
      // Undeclared exception!
      try { 
        cSVPrinter0.print(long0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('>');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      Long long0 = new Long((-1L));
      // Undeclared exception!
      try { 
        cSVPrinter0.print(long0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('+');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      try { 
        cSVPrinter0.print("D{eHfg8//p|=<U");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('2');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
      MockFile mockFile0 = new MockFile("+C`b%", "+C`b%");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print(mockFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('6');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(pipedWriter0);
      Object[] objectArray0 = new Object[2];
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9Q");
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('2');
      MockFile mockFile0 = new MockFile("+C`b%", "+C`b%");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[14];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[{eY8//p|<U");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(mockPrintWriter0, appendable0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
}
