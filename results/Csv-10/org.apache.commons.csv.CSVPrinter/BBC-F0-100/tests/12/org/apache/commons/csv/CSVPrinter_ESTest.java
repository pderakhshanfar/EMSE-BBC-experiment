/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 16:13:38 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Character character0 = Character.valueOf('$');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(",iBQq@\"(Cw4~");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "b G/UD3TSCKG9,Mf)<[");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "The comment start character cannot be a line break";
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SQLDataException sQLDataException0 = new SQLDataException("The comment start character cannot be a line break");
      Quote quote0 = Quote.NON_NUMERIC;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLDataException0);
      SQLDataException sQLDataException1 = (SQLDataException)sQLDataException0.initCause(sQLRecoverableException0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("The comment start character cannot be a line break");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)3;
      MockFile mockFile0 = (MockFile)MockFile.createTempFile("The comment start character cannot be a line break", "org.apache.commons.csv.CSVParser");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) sQLDataException1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLDataException sQLDataException0 = new SQLDataException();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("V", hashMap0, sQLDataException0);
      sQLDataException0.initCause(sQLClientInfoException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) sQLDataException0;
      objectArray0[3] = (Object) sQLDataException0;
      objectArray0[4] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      Iterable<MockFileReader> iterable0 = null;
      cSVPrinter0.printRecords(iterable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9pw4;8VxTc7Ws)?");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('Q');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      int int0 = 122;
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "9pw4;8VxTc7Ws)?", 3216, 2265);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('{');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(">v)4kdqDCDIG");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[0] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) ">v)4kdqDCDIG";
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[8] = (Object) ">v)4kdqDCDIG";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      char char0 = 'l';
      charArray0[1] = 'l';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withEscape('?');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('x');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
      Vector<Object> vector0 = new Vector<Object>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) vector0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) 'T';
      objectArray0[4] = (Object) charBuffer1;
      objectArray0[5] = (Object) charBuffer1;
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Vector<MockFileOutputStream> vector1 = new Vector<MockFileOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) vector1);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = object0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) charArrayWriter0;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('j');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter1);
      cSVPrinter0.print(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('m');
      Character character0 = Character.valueOf('m');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      Object[] objectArray0 = new Object[3];
      cSVFormat1.withNullString("TOKEN");
      objectArray0[0] = (Object) cSVFormat0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[1] = (Object) null;
      cSVPrinter0.printRecord(objectArray0);
      objectArray0[2] = (Object) stringWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SQLDataException sQLDataException0 = new SQLDataException("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "uDKb");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) sQLDataException0;
      objectArray0[7] = (Object) sQLDataException0;
      objectArray0[8] = (Object) sQLDataException0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('U');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      MockFile mockFile0 = new MockFile(" Ye= Wx\nP;F[C*Yd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.print(mockPrintStream0);
      cSVPrinter0.printComment(" Ye= Wx\nP;F[C*Yd");
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SQLDataException sQLDataException0 = new SQLDataException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("[-c,01^F3");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("[-c,01^F3");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVFormat0.withRecordSeparator("[-c,01^F3");
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SQLDataException sQLDataException0 = new SQLDataException("The comment start character cannot be a line break");
      Quote quote0 = Quote.NON_NUMERIC;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLDataException0);
      sQLDataException0.initCause(sQLRecoverableException0);
      cSVFormat0.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("The comment start character cannot be a line break");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Cg`K`<=#Ff/}");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Integer integer0 = new Integer((-3859));
      cSVPrinter0.print(integer0);
      cSVPrinter0.print(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" SkipHeaderRecord:");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" SkipHeaderRecord:");
      Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('o');
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVFormat0.withEscape('d');
      Object object1 = new Object();
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Object object2 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      Character character0 = new Character('d');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat0.withDelimiter('_');
      Long long0 = new Long(491L);
      cSVPrinter1.print(long0);
      CSVPrinter cSVPrinter3 = null;
      try {
        cSVPrinter3 = new CSVPrinter(charArrayWriter0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'l';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('x');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      cSVFormat3.withQuoteChar('A');
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords(objectArray0);
      ArrayList<ObjectOutputStream> arrayList0 = new ArrayList<ObjectOutputStream>(1259);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayList0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}T{F>J.ongmh");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(':');
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVFormat0.withEscape(')');
      Object object1 = new Object();
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object object2 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('1');
      CSVPrinter cSVPrinter3 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat0;
      cSVPrinter3.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLClientInfoException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" SkipHeaderRecord:");
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(" SkipHeaderRecord:");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(outputStreamWriter0);
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[4] = (Object) sQLClientInfoException0;
      objectArray0[5] = (Object) charset0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      SQLDataException sQLDataException0 = new SQLDataException("Unxpectd Quote v:lue_}");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unxpectd Quote v:lue_}");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) sQLDataException0;
      objectArray0[3] = (Object) sQLDataException0;
      objectArray0[4] = (Object) mockPrintStream0;
      cSVPrinter0.printRecord(objectArray0);
      Byte byte0 = new Byte((byte)28);
      cSVPrinter0.print(byte0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = new Character('{');
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character1 = Character.valueOf('v');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character1);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      try { 
        cSVPrinter0.printComment("pKcs>?}I<s;\"b}?");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withNullString("Unxpectd Quote v:lue_}");
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = '$';
      charArray0[2] = '\"';
      charArray0[3] = '}';
      charArray0[4] = 'm';
      charArray0[5] = '`';
      charArray0[6] = '8';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) '}';
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) '}';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unxpectd Quote v:lue_}");
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat2.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unxpectd Quote v:lue_}");
      CSVFormat cSVFormat4 = cSVFormat0.withRecordSeparator("ALL");
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("ALL");
      CSVPrinter cSVPrinter0 = cSVFormat5.print(mockPrintStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("HP&'nI:eM`TW");
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.println();
      cSVFormat0.print(stringWriter0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("'^~Y");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      linkedHashSet0.add(sQLInvalidAuthorizationSpecException0);
      CharBuffer charBuffer0 = CharBuffer.allocate(25);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withDelimiter('8');
      cSVFormat0.withNullString("Unxpectd Quote v:lue_}");
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unxpectd Quote v:lue_}");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "Unxpectd Quote v:lue_}";
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('e');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\"');
      Character character0 = Character.valueOf('\"');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.withCommentStart('p');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)21;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) (byte) (-36);
      objectArray0[3] = (Object) fileDescriptor0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) "PcnV";
      objectArray0[7] = (Object) character0;
      objectArray0[8] = (Object) cSVFormat1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "PcnV", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      cSVFormat3.print(mockPrintWriter0);
      byteArray0[2] = (byte)25;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      cSVPrinter0.println();
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>(10);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) hashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.withNullString("!,It'CPZZ}.H<");
      StringWriter stringWriter1 = new StringWriter();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      SQLDataException sQLDataException0 = new SQLDataException("", (Throwable) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      Character character0 = Character.valueOf('C');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      int[] intArray0 = new int[4];
      intArray0[0] = 1870;
      intArray0[1] = 1870;
      intArray0[2] = (int) 'C';
      intArray0[3] = 1870;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "", 1870, intArray0, sQLDataException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.flush();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "Unexpected Quote value: ";
      objectArray0[4] = object0;
      objectArray0[0] = object0;
      objectArray0[6] = (Object) cSVFormat1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5HX");
      objectArray0[7] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedWriter0;
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      linkedHashSet0.add((SQLInvalidAuthorizationSpecException) null);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("^)aC", "Unexpected Quote value: ", 865, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(")@d)S%u)i", "Unexpected Quote value: ", sQLTransactionRollbackException0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Unexpected Quote value: ";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) sQLTransactionRollbackException0;
      objectArray0[3] = (Object) ")@d)S%u)i";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withNullString("Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      String[] stringArray0 = null;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.flush();
      cSVFormat0.withQuoteChar('r');
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withNullString("Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "Unexpected Quote value: ", 83, (Throwable) null);
      sQLTransactionRollbackException0.getLocalizedMessage();
      SQLWarning sQLWarning0 = new SQLWarning("^)aC", "mA+FE{lP*lcuKtqQOn", (Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, mockThrowable0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Unexpected Quote value: ", "", 5, hashMap0, mockThrowable0);
      cSVPrinter0.print(sQLClientInfoException0);
      Float float0 = new Float((-964.0));
      cSVPrinter0.print("Unexpected Quote value: ");
      cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("^)aC", "Unexpected Quote value: ", 865, (Throwable) null);
      sQLTransactionRollbackException0.getSuppressed();
      SQLWarning sQLWarning0 = new SQLWarning(")@d)S%u)i", "Unexpected Quote value: ", sQLTransactionRollbackException0);
      SQLDataException sQLDataException0 = new SQLDataException("Unexpected Quote value: ", "Unexpected Quote value: ", 865);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printRecord((Iterable<?>) sQLWarning0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\"e:oh(\"");
      cSVFormat0.withSkipHeaderRecord(true);
      File file0 = MockFile.createTempFile("idFM^8)w\"(HE", "\"e:oh(\"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<SQLTransactionRollbackException> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = new Character('l');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      cSVFormat1.withQuoteChar(character0);
      cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat2.withSkipHeaderRecord(false);
      MockFile mockFile0 = new MockFile("\"e:oh(\"", "\"e:oh(\"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      TreeSet<Double> treeSet0 = new TreeSet<Double>();
      TreeSet<Double> treeSet1 = new TreeSet<Double>((SortedSet<Double>) treeSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet1);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5nFIr(B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      mockFile0.mkdir();
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\"e:oh(\"");
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(true);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"e:oh(\"");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringBuffer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "\"e:oh(\"";
      objectArray0[6] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("^)aC", "Unexpected Quote value: ", 865, (Throwable) null);
      sQLTransactionRollbackException0.getLocalizedMessage();
      SQLWarning sQLWarning0 = new SQLWarning(")@d)S%u)i", "Unexpected Quote value: ", sQLTransactionRollbackException0);
      SQLDataException sQLDataException0 = new SQLDataException("v", (Throwable) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
      Float float0 = new Float((double) 865);
      cSVPrinter0.print(float0);
      cSVPrinter0.printRecords((Iterable<?>) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) cSVPrinter0;
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\"e:oh(\"");
      cSVFormat0.withSkipHeaderRecord(true);
      File file0 = MockFile.createTempFile("idFM^8)w\"(HE", "\"e:oh(\"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\"e:oh(\"";
      objectArray0[1] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      char char0 = 'l';
      charArray0[1] = 'l';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('x');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
      Vector<Object> vector0 = new Vector<Object>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) vector0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) 'T';
      objectArray0[4] = (Object) charBuffer1;
      objectArray0[5] = (Object) charBuffer1;
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Vector<MockFileOutputStream> vector1 = new Vector<MockFileOutputStream>();
      cSVPrinter0.printRecords((Iterable<?>) vector1);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("OM;M$");
      mockPrintWriter0.checkError();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      mockPrintWriter0.println("O#");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter1, cSVFormat1);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printComment("V");
      cSVPrinter0.printRecords(resultSet0);
      mockPrintWriter1.println("vTGk");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      Vector<Object> vector0 = new Vector<Object>();
      cSVFormat0.format(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      Object object0 = new Object();
      objectArray0[2] = object0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5nFvkIr(B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "5nFvkIr(B";
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) "5nFvkIr(B";
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('x');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(charArray0);
      cSVFormat1.print(charBuffer0);
      cSVFormat2.print(charBuffer0);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedWriter0;
      Object object0 = new Object();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("5x9de", "format", (-1523), (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      SQLWarning sQLWarning0 = new SQLWarning("5x9de", "5x9de", sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("format", sQLInvalidAuthorizationSpecException0);
      try { 
        cSVPrinter0.print(sQLDataException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("OM;M$");
      mockPrintWriter0.checkError();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      mockPrintWriter0.println("O#");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter1, cSVFormat1);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printComment("V");
      cSVPrinter0.printRecords(resultSet0);
      HashSet<MockPrintStream> hashSet0 = null;
      try {
        hashSet0 = new HashSet<MockPrintStream>((Collection<? extends MockPrintStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('j');
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      charArray0[6] = 'j';
      charArray0[7] = 'j';
      stringWriter1.write(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter1);
      cSVPrinter1.close();
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "NUt";
      MockPrintStream mockPrintStream0 = new MockPrintStream("NUt");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
      cSVFormat0.validate();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('!');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      cSVPrinter0.print(mockPrintStream1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5nFIr(B");
      Character character0 = new Character('H');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withSkipHeaderRecord(true);
      MockFile mockFile1 = new MockFile("\"e:oh(\"", "5nFIr(B");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('s');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      char[] charArray0 = new char[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("^)aC", "Unexpected Quote value: ", 865, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(")@d)S%u)i", "Unexpected Quote value: ", sQLTransactionRollbackException0);
      SQLDataException sQLDataException0 = new SQLDataException("v", (Throwable) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5nFIr(B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter1);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = object0;
      objectArray0[2] = (Object) bufferedWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) mockFile0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) pipedWriter0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('W');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\"e:oh(\"");
      cSVFormat0.withSkipHeaderRecord(true);
      File file0 = MockFile.createTempFile("idFM^8)w\"(HE", "\"e:oh(\"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\"e:oh(\"";
      objectArray0[1] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("bBi+01^;G:-");
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("bBi+01^;G:-");
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.wpache.commons.csv.CSVRecord");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
      cSVPrinter0.println();
      Writer writer0 = mockFileWriter0.append((CharSequence) "bBi+01^;G:-", 0, 0);
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(writer0);
      mockPrintWriter0.println("5@");
      Vector<Object> vector0 = new Vector<Object>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "org.wpache.commons.csv.CSVRecord";
      cSVFormat1.format(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.getOut();
      cSVPrinter1.printRecord((Iterable<?>) vector0);
      cSVPrinter1.println();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("out");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('C');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("out");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      cSVPrinter0.getOut();
      Character character0 = new Character('C');
      cSVFormat2.withCommentStart(character0);
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>(1762);
      cSVPrinter0.printRecords((Iterable<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpected Quote value: ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      mockPrintWriter0.printf("Unexpected Quote value: ", objectArray0);
      objectArray0[3] = (Object) cSVFormat0;
      PrintWriter printWriter0 = mockPrintWriter0.format("Unexpected Quote value: ", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printWriter0);
      cSVPrinter0.flush();
      cSVFormat0.withDelimiter('A');
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('_');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('K');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      StringWriter stringWriter0 = new StringWriter(0);
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter1);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpected Quote value: ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      mockPrintWriter0.printf("Unexpected Quote value: ", objectArray0);
      objectArray0[3] = (Object) cSVFormat0;
      PrintWriter printWriter0 = mockPrintWriter0.format("Unexpected Quote value: ", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(printWriter0);
      cSVPrinter0.flush();
      cSVFormat0.withDelimiter('A');
      cSVPrinter0.flush();
      Iterable<BufferedReader> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5nFIr(B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.flush();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('p');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(true);
      Character character1 = new Character('#');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character1);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[24];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      Object object1 = new Object();
      cSVPrinter0.println();
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      cSVPrinter0.printComment("pKcs>?}I<s;\"b}?");
      linkedHashSet0.add((SQLInvalidAuthorizationSpecException) null);
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter1 = cSVFormat5.print(charArrayWriter0);
      cSVPrinter1.printRecords((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('p');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('#');
      Character character1 = new Character('#');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character1);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      Object object1 = new Object();
      cSVPrinter0.println();
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5nFIr(B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter1);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = object0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintWriter1;
      CSVFormat.newFormat('v');
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("5nFIr(B");
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("OM;M$");
      mockPrintWriter0.checkError();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      mockPrintWriter0.println("O#");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter1, cSVFormat1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVPrinter0.printComment("V");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter1 = stringWriter0.append('j');
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      charArray0[6] = 'j';
      charArray0[7] = 'j';
      stringWriter1.write(charArray0);
      cSVFormat0.print(stringWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter1);
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("bBi+01^;G:-");
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("bBi+01^;G:-");
      String string0 = "org.apache.commons.csv.CSVRecord";
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.CSVRecord");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
      cSVPrinter0.println();
      mockFileWriter0.append((CharSequence) "bBi+01^;G:-", 0, 0);
      PriorityQueue<MockPrintStream> priorityQueue0 = new PriorityQueue<MockPrintStream>();
      HashSet<MockPrintStream> hashSet0 = new HashSet<MockPrintStream>(priorityQueue0);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVRecord", "bBi+01^;G:-");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "!6N?Zm");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'l';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('x');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat3);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "5x9de", (-1523), (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning("format", "format", sQLTransactionRollbackException0);
      SQLDataException sQLDataException0 = new SQLDataException("format", sQLWarning0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLDataException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('Q');
      Character character0 = Character.valueOf('Q');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('Q')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }
}
