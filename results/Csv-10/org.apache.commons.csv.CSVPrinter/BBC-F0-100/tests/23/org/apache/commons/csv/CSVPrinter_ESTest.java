/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 16:11:13 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTimeoutException;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.ServiceLoader;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charset0.encode("");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("md%U%)+");
      Character character0 = Character.valueOf('/');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('I');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('K');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("out");
      Object[] objectArray0 = new Object[0];
      cSVFormat2.format(objectArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("out");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      cSVFormat1.withCommentStart('Y');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r\n");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('K');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('K');
      Object[] objectArray0 = new Object[0];
      cSVFormat2.format(objectArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("out");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      cSVFormat1.withCommentStart('Y');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r\n");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      String string0 = "``poxp";
      CSVFormat cSVFormat0 = CSVFormat.newFormat('a');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("``poxp");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "``poxp";
      objectArray0[1] = (Object) sQLNonTransientConnectionException0;
      objectArray0[2] = (Object) quote0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Uay<*;B43v");
      cSVFormat1.withCommentStart('r');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat3);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withNullString(";d");
      Character character0 = new Character('B');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = 'B';
      charArray0[2] = '2';
      charArray0[3] = ':';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = ':';
      charArray0[7] = ':';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("org.apache.commons.csv.CSVPrinter$1");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("gi", "gi");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      Character character0 = Character.valueOf('[');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      MockFile mockFile0 = new MockFile("gi", "gi");
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '0';
      intArray0[1] = (int) '0';
      intArray0[2] = (int) '[';
      intArray0[3] = (int) '[';
      intArray0[4] = 39;
      intArray0[5] = (int) '0';
      intArray0[6] = (int) '0';
      intArray0[7] = (int) '[';
      intArray0[8] = (int) '0';
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.csv.CSVPrinter", "@m", intArray0, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(batchUpdateException0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("gi", false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) sQLNonTransientConnectionException0;
      cSVPrinter0.getOut();
      // Undeclared exception!
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[19];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("AZ+;k4u61j+[gT");
      cSVFormat1.format(objectArray0);
      cSVFormat1.withNullString(">N:ad\";zC^=i'");
      CSVFormat cSVFormat2 = CSVFormat.newFormat('G');
      cSVFormat2.format(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(">N:ad\";zC^=i'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.validate();
      cSVFormat0.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('!');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("9 qM#qoS");
      cSVFormat1.format(objectArray0);
      cSVFormat3.format(objectArray0);
      int int0 = 1893;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1893);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("n");
      cSVFormat1.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "n\tn\tn\tn\tn\tn\tn\tn\tn\tn");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print("n");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('k');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[9];
      charArray0[0] = 'Q';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      charArray0[7] = 'k';
      charArray0[8] = 'k';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("B");
      cSVFormat1.format(objectArray0);
      cSVFormat1.withNullString("B");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("B\tB\tB\tB\tB\tB\tB\tB\tB\tB");
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.format(objectArray0);
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n");
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray1);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("gi", "gi");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      Character character0 = Character.valueOf('[');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      MockFile mockFile0 = new MockFile("gi", "gi");
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '0';
      intArray0[1] = (int) '0';
      intArray0[2] = (int) '[';
      intArray0[3] = (int) '[';
      intArray0[4] = 39;
      intArray0[5] = (int) '0';
      intArray0[6] = (int) '0';
      intArray0[7] = (int) '[';
      intArray0[8] = (int) '0';
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.csv.CSVPrinter", "@m", intArray0, sQLNonTransientConnectionException0);
      batchUpdateException0.addSuppressed(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(batchUpdateException0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("gi", false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Class<Console> class0 = Console.class;
      ServiceLoader<Console> serviceLoader0 = ServiceLoader.load(class0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "gi";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("gi", "gi");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      Character character0 = Character.valueOf('[');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("gi", true);
      mockFileWriter0.close();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      cSVFormat1.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.print(cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[56];
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(116);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-31);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      Character character0 = new Character('U');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar((Character) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(pipedWriter0);
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[28];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0ls_orO~");
      cSVFormat0.format(objectArray0);
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[56];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("1g*7-Tnkje4Bvh(U_c");
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat1.format(objectArray0);
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat1.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("B");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "B");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      char char0 = '@';
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('@');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[55];
      String string0 = "-U/\"W|FRTn";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("-U/\"W|FRTn");
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      cSVFormat0.format(objectArray0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator(";%:kZ#kz4N\\1");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Character character0 = new Character('u');
      Object[] objectArray0 = new Object[3];
      StringWriter stringWriter1 = new StringWriter(48);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character(' ');
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("The quoteChar character and the delimiter cannot be the same ('", "Mapping for %s not found, expected one of %s");
      Quote quote0 = Quote.NONE;
      Quote quote1 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote1);
      Character.valueOf('v');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(' ');
      Character character1 = new Character('_');
      cSVFormat2.withEscape(character1);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Mapping for %s not found, expected one of %s";
      objectArray0[2] = (Object) quote0;
      objectArray0[3] = (Object) sQLNonTransientConnectionException0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("charset", "Mapping for %s not found, expected one of %s");
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('C');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[39];
      cSVFormat0.withNullString("B");
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"\",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,");
      cSVFormat1.withNullString("G=q%9v>P#rA8:>6;6@");
      cSVFormat0.withQuoteChar('n');
      cSVFormat1.format(objectArray0);
      int int0 = (-1636);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-1636));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1636
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[19];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{4mpz)\"E1^");
      cSVFormat1.format(objectArray0);
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      cSVFormat1.format(objectArray0);
      cSVFormat1.withQuoteChar('U');
      cSVFormat1.format(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\",\"{4mpz)\"\"E1^\"");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[19];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Ca)Fi;WRL;[CZqs1|n");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("X6`:");
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      Character.valueOf(')');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[28];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("B");
      cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("Unexpected Quote value: ");
      cSVFormat0.withNullString("B");
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("Unexpected Quote value: ");
      cSVFormat0.withQuoteChar('I');
      cSVFormat3.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(242);
      StringWriter stringWriter1 = new StringWriter(242);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character.valueOf('A');
      Character character0 = new Character('{');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      stringWriter1.flush();
      cSVFormat0.withCommentStart('6');
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "N^YXt#: 5w4u_|'R.");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter1);
      Short short0 = new Short((short) (-3160));
      cSVPrinter0.print(short0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[28];
      String string0 = "B";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("B");
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("Unexpected Quote value: ");
      cSVFormat1.format(objectArray0);
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      MockPrintStream mockPrintStream0 = new MockPrintStream("B");
      char char0 = 'H';
      MockPrintStream mockPrintStream1 = new MockPrintStream("B");
      FilterOutputStream filterOutputStream0 = null;
      try {
        filterOutputStream0 = new MockPrintStream("\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \"", "B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B,B
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringWriter stringWriter1 = new StringWriter(1166);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('E');
      cSVFormat0.withEscape(character0);
      stringWriter1.flush();
      cSVFormat0.withCommentStart('N');
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Double double0 = new Double(0);
      cSVPrinter0.print(double0);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("juD\"\";d'5CF5^0=,");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      Character character0 = new Character(')');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('f');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("juD\"\";d'5CF5^0=,");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "juD\"\";d'5CF5^0=,";
      objectArray0[8] = (Object) "";
      cSVFormat0.format(objectArray0);
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('p');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("k^J]lN&r");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "k^J]lN&r";
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat3.withNullString("");
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("Unexpected Quote value: ");
      cSVFormat3.format(objectArray0);
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("?:e");
      Character character0 = Character.valueOf(';');
      cSVFormat2.withEscape(character0);
      cSVFormat2.print(stringWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter0.printComment("?:e");
      cSVFormat0.print(stringWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.printComment("");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.print("uPxQ;zLqAi10");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(242);
      StringWriter stringWriter1 = new StringWriter(242);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      stringWriter1.flush();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('N');
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "charset");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      cSVPrinter0.print(cSVFormat2);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) sQLNonTransientConnectionException0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(242);
      StringWriter stringWriter1 = new StringWriter(242);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      stringWriter1.flush();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('N');
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "charset");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) sQLNonTransientConnectionException0;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(242);
      StringWriter stringWriter1 = new StringWriter(242);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      stringWriter1.flush();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('N');
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "charset");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer0);
      cSVPrinter0.print(cSVFormat2);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      cSVPrinter1.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'v';
      charArray0[2] = 'W';
      charArray0[3] = 'l';
      charArray0[4] = '^';
      charArray0[5] = 'T';
      stringWriter0.write(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('b');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('p');
      cSVFormat3.withRecordSeparator("org.apache.commons.csv.CSVPrinter");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Character character0 = new Character(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('p');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("k^J]lN&r");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "k^J]lN&r";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) "k^J]lN&r";
      objectArray0[7] = (Object) cSVFormat4;
      cSVFormat1.format(objectArray0);
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat3.withQuoteChar('O');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("?:e");
      stringWriter0.close();
      CSVFormat cSVFormat4 = cSVFormat0.withNullString("INVALID");
      cSVFormat4.withEscape((Character) null);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "r~iTygD56)1d";
      objectArray0[4] = (Object) "?:e";
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) character0;
      objectArray0[8] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printComment((String) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(242);
      StringWriter stringWriter1 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      stringWriter1.flush();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('N');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("format");
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      cSVPrinter1.print(byteArrayInputStream0);
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      cSVPrinter0.printComment("format");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character(' ');
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("charset", "");
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVFormat1.withHeader((String[]) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print("");
      cSVPrinter0.printComment("0");
      cSVPrinter0.printComment("io?GQxZQK06lWgq");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('b');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      cSVFormat2.withDelimiter('p');
      cSVFormat0.withNullString("k^J]lN&r");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      cSVFormat0.format(objectArray0);
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.close();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withRecordSeparator((String) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "");
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("PQ97/2X8I{v5-/(Phz+s");
      cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter");
      Object[] objectArray0 = new Object[1];
      cSVFormat1.format(objectArray0);
      cSVFormat0.format(objectArray0);
      Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
      ServiceLoader.loadInstalled(class0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.csv.CSVPrinter");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(246);
      stringWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character.valueOf(';');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("JVwC");
      stringWriter0.close();
      cSVFormat1.withNullString("r~iTygD56)1d");
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "r~iTygD56)1d";
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(246);
      stringWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character.valueOf(';');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printComment("format");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JVwC", "y");
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('m');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("k^J]lN&r");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "k^J]lN&r";
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat3.withNullString("Unexpected Quote value: ");
      cSVFormat3.format(objectArray0);
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        filterOutputStream0.write((byte[]) null, 57, 1859);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("PQ97/2X8I{v5-/(Phz+s");
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter");
      Object[] objectArray0 = new Object[1];
      cSVFormat1.format(objectArray0);
      cSVFormat0.format(objectArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("F|JZ-zqa8");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F|JZ-zqa8");
      cSVFormat1.withNullString("F|JZ-zqa8");
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      PipedReader pipedReader0 = new PipedReader(94);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.close();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("F|JZ-zqa8", "F|JZ-zqa8", 97);
      linkedHashSet0.add(sQLIntegrityConstraintViolationException0);
      Vector<SQLException> vector0 = new Vector<SQLException>(linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('_');
      cSVFormat2.toString();
      String[] stringArray0 = new String[4];
      cSVFormat2.format(stringArray0);
      cSVFormat2.validate();
      stringArray0[0] = "M7D{!H,*~@J";
      try { 
        MockURI.URI("M7D{!H,*~@J", "/LC6[4xwMZwA`/1A", "Unexpected Quote value: ", "Unexpected Quote value: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: M7D{!H,*~@J:///LC6[4xwMZwA`/1AUnexpected%20Quote%20value:%20#Unexpected%20Quote%20value:%20
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(246);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      String string0 = "-[";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("-[");
      stringWriter1.flush();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('N');
      cSVFormat0.withNullString("-[");
      cSVFormat3.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      cSVPrinter0.close();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(3624).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('b');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('p');
      cSVFormat3.withRecordSeparator("org.apache.commons.csv.CSVPrinter");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "org.apache.commons.csv.CSVPrinter$1");
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      cSVPrinter0.printRecords((Iterable<?>) sQLNonTransientConnectionException0);
      assertEquals("org.apache.commons.csv.CSVPrinter$1", sQLNonTransientConnectionException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":QP9>rH=;");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(":QP9>rH=;", "MINIML", 1486);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) "MINIML";
      Object object1 = new Object();
      objectArray0[0] = object1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\"');
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
      cSVPrinter0.printComment((String) null);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charBuffer0;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('_');
      cSVFormat2.toString();
      String[] stringArray0 = new String[4];
      cSVFormat2.validate();
      stringArray0[0] = "M7D{!H,*~@J";
      stringArray0[1] = "/LC6[4xwMZwA`/1A";
      stringArray0[2] = "/A+;!HTng?!FK";
      stringArray0[3] = "IXjZ4O~+W&";
      cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat1.withHeader(stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("uS6!~/OBXdbqti.V");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVPrinter0.println();
      cSVPrinter0.printRecords((Object[]) stringArray0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer(4156);
      arrayDeque0.add(integer0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\"');
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
      cSVPrinter0.printComment((String) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) null;
      cSVPrinter0.println();
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("FEJZ-zqa8");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter0;
      cSVFormat1.withNullString("FEJZ-zqa8");
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      PipedReader pipedReader0 = new PipedReader(94);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("FEJZ-zqa8", "FEJZ-zqa8", 97);
      linkedHashSet0.add(sQLIntegrityConstraintViolationException0);
      Vector<SQLException> vector0 = new Vector<SQLException>(linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter0;
      cSVFormat1.withNullString("FEJZ-zqa8");
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      PipedReader pipedReader0 = new PipedReader(94);
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("FEJZ-zqa8", "FEJZ-zqa8", 97);
      linkedHashSet0.add(sQLIntegrityConstraintViolationException0);
      Vector<SQLException> vector0 = new Vector<SQLException>(linkedHashSet0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(':');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\ry,\n");
      assertEquals(": \r\n: y,\r\n: \r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(246);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("-[");
      stringWriter1.flush();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('N');
      cSVFormat0.withNullString("-[");
      cSVFormat3.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      cSVPrinter0.close();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVFormat0.withRecordSeparator("-[");
      cSVPrinter0.printComment("format");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(246);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf(';');
      cSVFormat0.withEscape(character0);
      stringWriter1.flush();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('7');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      cSVPrinter0.printComment("format");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("vt6pYNPr", (String) null);
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "vt6pYNPr";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat2;
      cSVPrinter1.printRecords(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
      Character character0 = new Character('$');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('$')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withNullString("PQ97/2X8I{5/(Phz+s");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter");
      Character character0 = new Character('P');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      cSVFormat1.format(objectArray0);
      cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(246);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character.valueOf(';');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character(';');
      Character character1 = Character.valueOf('h');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character1);
      cSVFormat1.withDelimiter(';');
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("k^J]lN&r");
      Object[] objectArray0 = new Object[0];
      cSVFormat3.format(objectArray0);
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
      cSVPrinter0.print(stringWriter1);
      cSVPrinter0.close();
      assertEquals(31, charBuffer0.position());
      assertEquals(215, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withRecordSeparator((String) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "");
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(246);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      String string0 = "-[";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("-[");
      stringWriter1.flush();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('N');
      cSVFormat0.withNullString("-[");
      cSVFormat3.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat3);
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = "HV";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("HV");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = ":QP9>rH=;";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":QP9>rH=;");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) ":QP9>rH=;";
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) ":QP9>rH=;";
      objectArray0[7] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      String string1 = "format";
      String string2 = "WqjB2+l$,`Ep.F";
      cSVPrinter0.printComment("WqjB2+l$,`Ep.F");
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("PQ97/2X8I{5/(Phz+s");
      cSVFormat0.withNullString("org.apache.commons.csv.CSVPrinter");
      Object[] objectArray0 = new Object[1];
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVPrinter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) pipedWriter0;
      objectArray0[6] = (Object) cSVPrinter0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "FEJZ-zqa8";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("FEJZ-zqa8");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter0;
      cSVFormat1.withNullString("FEJZ-zqa8");
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      PipedReader pipedReader0 = new PipedReader(94);
      cSVFormat1.parse(pipedReader0);
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withRecordSeparator((String) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "");
      cSVPrinter0.print(sQLNonTransientConnectionException0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\"');
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.flush();
      cSVPrinter0.printComment((String) null);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) charBuffer0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('_');
      cSVFormat2.toString();
      String[] stringArray0 = new String[4];
      cSVFormat2.validate();
      stringArray0[0] = "M7D{!H,*~@J";
      stringArray0[1] = "/LC6[4xwMZwA`/1A";
      stringArray0[2] = "/A+;!HTng?!FK";
      stringArray0[3] = "IXjZ4O~+W&";
      cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat1.withHeader(stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("uS6!~/OBXdbqti.V");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.println();
      cSVPrinter0.println();
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVPrinter0.println();
      cSVPrinter0.printRecords((Object[]) stringArray0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer(4156);
      arrayDeque0.add(integer0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.println();
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(appendable0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('R');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(449);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 449, 449);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer1);
      Iterable<String> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }
}
