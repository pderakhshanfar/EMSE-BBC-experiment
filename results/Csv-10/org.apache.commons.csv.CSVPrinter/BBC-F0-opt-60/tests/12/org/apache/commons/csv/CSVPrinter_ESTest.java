/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 20:51:57 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Console;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.ClientInfoStatus;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A2'{`B3Y");
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      charArray0[4] = 'S';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("A2'{`B3Y");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!Nx$,B!XdB',bH");
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.getInteger((String) null);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVFormat0.toString();
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0B1$9DoH3a'VVi{S");
      MockFileWriter mockFileWriter0 = new MockFileWriter("0B1$9DoH3a'VVi{S");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("B?+U");
      MockFileWriter mockFileWriter0 = new MockFileWriter("B?+U");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      mockFileWriter0.append('!');
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~?Fw[&L");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      ArrayList<ByteArrayOutputStream> arrayList0 = new ArrayList<ByteArrayOutputStream>(2420);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('u');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("?Y=ci+@h");
      MockFile mockFile0 = new MockFile("?Y=ci+@h");
      MockFileWriter mockFileWriter0 = new MockFileWriter("?Y=ci+@h");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter("]cR 4c5^m[&");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]cR 4c5^m[&");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.print(cSVFormat1);
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("]cR 4c5^m[&");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("]cR 4c5^m[&");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("]cR 4c5^m[&");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"5C");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("]cR 4c5^m[&");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("1*:!nZ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('\uFFFF');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('*');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("B?DU");
      cSVFormat4.withDelimiter('*');
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("rSoo#/%>Z");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 114);
      cSVFormat4.parse(stringReader0);
      MockFile mockFile0 = new MockFile("yzzY}F");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockFileWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLWarning sQLWarning0 = new SQLWarning(") invalid parse sequence", sQLTransientException0);
      sQLTransientException0.initCause(sQLWarning0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('*');
      String string0 = "";
      cSVFormat1.withRecordSeparator("");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLTransientException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('*');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      StringWriter stringWriter0 = new StringWriter(1744);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      Character character0 = Character.valueOf('*');
      cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter1);
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[5];
      stringWriter1.append((CharSequence) "");
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "";
      cSVFormat1.validate();
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('2');
      String string0 = "]cR 4c5^][&";
      MockFileWriter mockFileWriter0 = new MockFileWriter("]cR 4c5^][&");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "]cR 4c5^][&");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.withRecordSeparator('X');
      objectArray0[0] = (Object) character0;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('>');
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      StringReader stringReader0 = new StringReader("");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 1301);
      cSVFormat0.parse(pushbackReader0);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('T');
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      MockFileWriter mockFileWriter0 = new MockFileWriter("@:");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      try { 
        cSVPrinter0.printComment("j@jbr{ (EL;mMh% bW/");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Character.valueOf('2');
      Character character0 = new Character('2');
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Krmat");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      charArray0[6] = '2';
      charArray0[7] = '2';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      ClassLoader.getSystemClassLoader();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Unexpected Quote value: ");
      mockFileWriter0.close();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('0');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockFile mockFile0 = new MockFile("The quoteChar cannot be a line break", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('P');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter1.print((Object) null);
      cSVPrinter0.getOut();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('2');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("72MOw)7Vh;IfD!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat2.format(objectArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      cSVPrinter0.print(charArrayReader0);
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      cSVPrinter0.printRecords((Iterable<?>) enumSet1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('2');
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      cSVFormat1.withCommentStart('2');
      StringReader stringReader0 = new StringReader("_;S[oo//RA>Z");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 2436);
      cSVFormat1.parse(bufferedReader0);
      cSVFormat2.withIgnoreEmptyLines(false);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "_;S[oo//RA>Z");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      PushbackReader pushbackReader0 = new PushbackReader(lineNumberReader0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(pushbackReader0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Object[] objectArray0 = new Object[5];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLTransientException0);
      sQLTransientException0.addSuppressed(sQLRecoverableException0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[3];
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Object[] objectArray0 = new Object[5];
      Character character0 = Character.valueOf('q');
      cSVFormat1.withEscape(character0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("?~K.bUO`QKBcOIb=y&");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat2);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V9@~bhJ1YbToYK^W:");
      MockPrintStream mockPrintStream0 = new MockPrintStream("V9@~bhJ1YbToYK^W:");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V9@~bhJ1YbToYK^W:";
      CSVFormat cSVFormat1 = CSVFormat.newFormat('S');
      Character character0 = Character.valueOf('v');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "V9@~bhJ1YbToYK^W:");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) classLoader0;
      objectArray0[1] = (Object) "F[TOEN.,5)z;a\" ";
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.print(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '@';
      charArray0[2] = 'V';
      charArray0[3] = 'c';
      charArray0[4] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) '@';
      objectArray0[2] = (Object) '7';
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) '?';
      objectArray0[5] = (Object) classLoader0;
      objectArray0[6] = (Object) '@';
      objectArray0[7] = (Object) sQLTransientException0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5Z6");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat0.toString();
      classLoader0.getParent();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[1] = (Object) "F[TOEN.,5)z;a\" ";
      objectArray0[2] = (Object) classLoader0;
      objectArray0[3] = (Object) "F[TOEN.,5)z;a\" ";
      objectArray0[4] = (Object) sQLTransientException0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) classLoader0;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("format");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.validate();
      StringReader stringReader0 = new StringReader("");
      File file0 = MockFile.createTempFile("format", "_;S[oo//RA>Z", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      mockFileInputStream0.read();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 35);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0, charsetDecoder0);
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0, 3812);
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
      CSVParser cSVParser0 = cSVFormat2.parse(bufferedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter1, cSVFormat1);
      cSVPrinter0.print(stringReader0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVParser0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) sequenceInputStream0;
      objectArray0[4] = (Object) charset0;
      objectArray0[5] = (Object) "_;S[oo//RA>Z";
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(">ZNj7wP");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character0 = new Character('\"');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat2.validate();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('\"');
      cSVFormat2.print(charArrayWriter1);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "format";
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) "format";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">ZNj7wP");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) sQLTransientException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('2');
      cSVFormat0.withCommentStart(character0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object[] objectArray0 = new Object[1];
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('2');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('2');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("72MOw)7Vh;IfD!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      StringReader stringReader0 = new StringReader("72MOw)7Vh;IfD!");
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 114);
      CSVParser cSVParser0 = cSVFormat0.parse(bufferedReader0);
      CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('|');
      cSVFormat4.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      cSVPrinter1.print(lineNumberReader0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('l');
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V9@~bhJ1YbToYK^W:");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("V9@~bhJ1YbToYK^W:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "V9@~bhJ1YbToYK^W:");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(printStream0);
      mockPrintWriter0.flush();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V9@~bhJ1YbToYK^W:";
      mockPrintWriter0.format("V9@~bhJ1YbToYK^W:", objectArray0);
      CSVFormat.newFormat('S');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.print(mockPrintWriter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('&');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('H');
      StringReader stringReader0 = new StringReader("&)D&m|");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 53);
      CSVParser cSVParser0 = cSVFormat3.parse(lineNumberReader0);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentStart('M');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat6 = cSVFormat5.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat6);
      cSVPrinter0.print(lineNumberReader0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter1, cSVFormat4);
      Float float0 = new Float(0.0);
      cSVPrinter1.print(cSVFormat4);
      cSVPrinter1.getOut();
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) lineNumberReader0;
      objectArray0[2] = (Object) float0;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat6;
      objectArray0[6] = (Object) "";
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("F[TOEN.,5)z;a\" ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(22);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charArrayWriter0.append((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "F[TOEN.,5)z;a\" ");
      charArrayWriter1.append('F');
      charArrayWriter1.append('h');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>(hashSet0);
      linkedHashSet0.add(sQLTransientException0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) stringBuffer0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('&');
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat1.withCommentStart('&');
      StringReader stringReader0 = new StringReader("_;S[oo//RA>Z");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 114);
      cSVFormat1.parse(lineNumberReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "_;S[oo//RA>Z");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V9@~bhJ1YbToYK^W:");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("V9@~bhJ1YbToYK^W:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "V9@~bhJ1YbToYK^W:");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(printStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(outputStreamWriter0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V9@~bhJ1YbToYK^W:";
      PrintWriter printWriter0 = mockPrintWriter1.format("V9@~bhJ1YbToYK^W:", objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('S');
      Character character0 = Character.valueOf('v');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat2.withQuoteChar('I');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      cSVPrinter0.print("@!~CJR~p'\"[ kv'sZ2J");
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('8');
      cSVFormat1.withSkipHeaderRecord(true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(50);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('8');
      charArrayWriter2.append('8');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      StringReader stringReader0 = new StringReader("The delimiter cannot be a line break");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      int int0 = 114;
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 6);
      cSVFormat2.parse(lineNumberReader0);
      cSVFormat0.withCommentStart('.');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("format", "format", 114, (Map<String, ClientInfoStatus>) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(sQLClientInfoException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('2');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('2');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("72MOw)7Vh;IfD!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.write(1227);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) cSVFormat3;
      mockPrintWriter0.close();
      cSVFormat2.format(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("72MOw)7Vh;IfD!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintWriter0.write(1227);
      cSVFormat2.print(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format("Q4~T", (Object[]) null);
      CSVFormat.newFormat('S');
      Character.valueOf(',');
      Character character0 = new Character(',');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      cSVFormat3.withQuoteChar('L');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.validate();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('%');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>(hashSet0);
      linkedHashSet0.add(sQLTransientException0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charArrayWriter1;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) classLoader1;
      objectArray0[7] = (Object) classLoader0;
      objectArray0[8] = (Object) hashSet0;
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFile mockFile0 = new MockFile("nss_Tjy_t");
      MockFile mockFile1 = new MockFile(mockFile0, "nss_Tjy_t");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('/');
      MockFileReader mockFileReader0 = new MockFileReader(mockFile1);
      cSVFormat1.parse(mockFileReader0);
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      Character character1 = new Character('A');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('A');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      CSVFormat cSVFormat6 = cSVFormat5.withQuoteChar('0');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat6);
      cSVPrinter0.print(character0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) stringBuffer0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withQuoteChar('&');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('&');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.validate();
      charArrayWriter0.append('e');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>(hashSet0);
      cSVPrinter0.println();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringBuffer0);
      cSVPrinter1.flush();
      cSVPrinter1.printRecord((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("NON_NUMERIC");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("NON_NUMERIC");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      String string0 = cSVFormat1.toString();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2066).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.print(pipedWriter0);
      char char0 = 'Q';
      Character character0 = Character.valueOf(char0);
      cSVFormat0.withEscape(character0);
      char char1 = 'A';
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(char1);
      char char2 = ',';
      cSVFormat2.withQuoteChar(char2);
      CSVFormat cSVFormat3 = null;
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat3);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter2.print(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V9@~bhJ1YbToYK^W:");
      MockPrintStream mockPrintStream0 = new MockPrintStream("out");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "V9@~bhJ1YbToYK^W:";
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockPrintStream0;
      cSVFormat0.format(objectArray0);
      mockPrintStream0.flush();
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      cSVPrinter0.printComment("");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("F[TOEN.,5)z;a\" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "F[TOEN.,5)z;a\" ";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) "F[TOEN.,5)z;a\" ";
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      cSVPrinter0.print(byteArrayOutputStream0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecord(objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      bufferedOutputStream0.write(10);
      cSVPrinter0.print(bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "format";
      objectArray0[1] = (Object) "format";
      PrintWriter printWriter0 = mockPrintWriter1.format("@!~CJR~p'\"[ kv'sZ2J", objectArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>(hashSet0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientException0);
      linkedHashSet0.add(sQLTimeoutException0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('S');
      Character character0 = new Character('S');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The comment start character and the delimiter cannot be the same ('S')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V9@~bhJ1YbToYK^W:");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("V9@~bhJ1YbToYK^W:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "V9@~bhJ1YbToYK^W:");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(printStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(outputStreamWriter0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "V9@~bhJ1YbToYK^W:";
      PrintWriter printWriter0 = mockPrintWriter1.format("V9@~bhJ1YbToYK^W:", objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('S');
      Character.valueOf('v');
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(printWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.validate();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('%');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>(hashSet0);
      linkedHashSet0.add(sQLTransientException0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charArrayWriter1;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) classLoader1;
      objectArray0[7] = (Object) classLoader0;
      objectArray0[8] = (Object) hashSet0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('R');
      Character.valueOf('R');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Console> treeSet0 = new TreeSet<Console>(comparator0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "format";
      objectArray0[1] = (Object) "format";
      mockPrintWriter1.format("@!~CJR~p'\"[ kv'sZ2J", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('S');
      Character character0 = Character.valueOf('L');
      cSVFormat0.withEscape(character0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<MockFileWriter> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter1);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('8');
      cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('F');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat2.validate();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>(hashSet0);
      linkedHashSet0.add(sQLTransientException0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('&');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      StringReader stringReader0 = new StringReader("_;S[oo//RA>Z");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 114);
      CSVParser cSVParser0 = cSVFormat1.parse(lineNumberReader0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('N');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat4);
      cSVPrinter0.print(stringWriter1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter1, cSVFormat4);
      Float float0 = new Float((double) 0);
      cSVPrinter1.print(float0);
      cSVPrinter1.getOut();
      cSVPrinter1.printRecords((Iterable<?>) cSVParser0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("NON_NUMERIC");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("NON_NUMERIC");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVFormat1.toString();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      cSVPrinter0.close();
      cSVPrinter0.printComment("NON_NUMERIC");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('&');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('H');
      StringReader stringReader0 = new StringReader("&)D&m|");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 53);
      CSVParser cSVParser0 = cSVFormat3.parse(lineNumberReader0);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentStart('M');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat6 = cSVFormat5.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat6);
      cSVPrinter0.print(lineNumberReader0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter1, cSVFormat4);
      Float float0 = new Float(0.0);
      cSVPrinter1.print(cSVFormat4);
      cSVPrinter1.getOut();
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
      cSVPrinter1.printComment("");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('&');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat1.withCommentStart('H');
      StringReader stringReader0 = new StringReader("&)D&m|");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 53);
      CSVParser cSVParser0 = cSVFormat3.parse(lineNumberReader0);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentStart('M');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat6 = cSVFormat5.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat6);
      cSVPrinter0.print(lineNumberReader0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter1, cSVFormat4);
      cSVFormat6.toString();
      Float float0 = new Float(0.0);
      cSVPrinter1.print(cSVFormat4);
      cSVPrinter1.getOut();
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
      cSVPrinter1.printComment("");
      cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<&> CommentStart=<M> RecordSeparator=<\r\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("72MOw)7Vh;IfD!");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("72MOw)7Vh;IfD!");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintStream0.println();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintWriter0.write(1227);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) mockPrintStream0;
      cSVFormat2.format(objectArray0);
      Object[] objectArray1 = new Object[8];
      mockPrintStream0.flush();
      objectArray1[0] = (Object) cSVFormat1;
      Quote quote0 = Quote.MINIMAL;
      cSVFormat2.withQuotePolicy(quote0);
      cSVPrinter0.close();
      cSVPrinter0.printComment("org.apache.commons.csv.CSVFormat@0000000002\tjava.lang.Object@0000000005\torg.apache.commons.csv.CSVFormat@0000000002\torg.evosuite.runtime.mock.java.io.MockPrintWriter@0000000006\torg.apache.commons.csv.CSVFormat@0000000007\torg.apache.commons.csv.CSVPrinter@0000000003\torg.evosuite.runtime.mock.java.io.MockPrintStream@0000000008");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("72MOw)7Vh;IfD!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintWriter0.write(1227);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) mockPrintStream0;
      cSVFormat2.format(objectArray0);
      Object[] objectArray1 = new Object[8];
      mockPrintStream0.flush();
      objectArray1[0] = (Object) cSVFormat1;
      Quote quote0 = Quote.MINIMAL;
      cSVFormat2.withQuotePolicy(quote0);
      cSVPrinter0.close();
      cSVPrinter0.printComment("org.apache.commons.csv.CSVFormat@0000000002\tjava.lang.Object@0000000005\torg.apache.commons.csv.CSVFormat@0000000002\torg.evosuite.runtime.mock.java.io.MockPrintWriter@0000000006\torg.apache.commons.csv.CSVFormat@0000000007\torg.apache.commons.csv.CSVPrinter@0000000003\torg.evosuite.runtime.mock.java.io.MockPrintStream@0000000008");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("NON_NUMERIC");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("NON_NUMERIC");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVFormat1.toString();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile(" SurroundingSpaces:ignored");
      MockFile mockFile1 = new MockFile(mockFile0, " SurroundingSpaces:ignored");
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile("", "Ggpy|{FA");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "Ggpy|{FA";
      objectArray0[2] = (Object) mockFileOutputStream0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("72MOw)7Vh;IfD!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.write(1227);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) mockPrintStream0;
      cSVFormat2.format(objectArray0);
      Object[] objectArray1 = new Object[8];
      mockPrintStream0.flush();
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) cSVFormat0;
      objectArray1[2] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray1[3] = object1;
      objectArray1[4] = (Object) cSVFormat1;
      objectArray1[5] = (Object) cSVFormat1;
      objectArray1[6] = (Object) cSVFormat1;
      objectArray1[7] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("72MOw)7Vh;IfD!", objectArray1);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("72MOw)7Vh;IfD!", "72MOw)7Vh;IfD!", 1227);
      cSVPrinter0.print(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockFile mockFile0 = new MockFile("L9");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile1;
      objectArray0[1] = (Object) "NON_NUMERIC";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "L9";
      objectArray0[4] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) mockFile1;
      objectArray0[8] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "NON_NUMERIC", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("L9");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('4');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat3);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile("", "Ggpy|{FA");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.close();
      cSVPrinter0.printComment("org.apache.commons.csv.Token$Type");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) dataOutputStream0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) pipedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "The header contains duplicate names: ", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(',');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
      String string0 = "9r<\\U";
      Character character0 = new Character('&');
      cSVFormat0.withQuoteChar(character0);
      MockFile mockFile0 = new MockFile("9r<U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.getAbsoluteFile();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.close();
      Iterable<Console> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The quoteChar character and the delimiter cannot be the same ('");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "format";
      objectArray0[1] = (Object) "format";
      PrintWriter printWriter0 = mockPrintWriter1.format("@!~CJR~p'\"[ kv'sZ2J", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('S');
      Character character0 = Character.valueOf('L');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      cSVPrinter0.print(objectArray0[0]);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("F[TOEN.,5)z;a\" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "F[TOEN.,5)z;a\" ";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) "F[TOEN.,5)z;a\" ";
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      cSVPrinter0.print(byteArrayOutputStream0);
      cSVPrinter0.close();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('8');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "out";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('9');
      cSVFormat5.withRecordSeparator(' ');
      cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat cSVFormat6 = CSVFormat.MYSQL;
      cSVFormat6.withEscape(' ');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat3.validate();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "out");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('\\');
      CSVPrinter cSVPrinter0 = cSVFormat5.print(charArrayWriter2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>(vector0);
      linkedHashSet0.add(sQLTransientException0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("format");
      char char0 = 'I';
      Character character0 = Character.valueOf('I');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('I');
      cSVFormat3.withQuoteChar(character0);
      String[] stringArray0 = null;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((String[]) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat4;
      cSVFormat1.format(objectArray0);
      cSVFormat0.withRecordSeparator("g");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withRecordSeparator('J');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(' ');
      Character character0 = new Character('J');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('.');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('v');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat4;
      cSVFormat2.withDelimiter('.');
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat4.format(objectArray0);
      cSVFormat2.toString();
      // Undeclared exception!
      try { 
        cSVFormat4.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('&');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('N');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter1, cSVFormat4);
      cSVPrinter0.print(stringWriter1);
      cSVPrinter0.close();
      assertEquals(31, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("MCSZ1f@[mU`F5k#.L");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('[');
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '[';
      charArray0[6] = '[';
      charArray0[7] = '[';
      charArray0[8] = '[';
      charArrayWriter0.write(charArray0, 4, 4);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      String string0 = "org.apache.commons.csv.CSVPrinter";
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Collection<SQLNonTransientConnectionException> collection0 = null;
      PushbackReader pushbackReader0 = null;
      try {
        pushbackReader0 = new PushbackReader((Reader) null, 122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('8');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('F');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter1);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<MockFileWriter> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter0.println();
  }
}
