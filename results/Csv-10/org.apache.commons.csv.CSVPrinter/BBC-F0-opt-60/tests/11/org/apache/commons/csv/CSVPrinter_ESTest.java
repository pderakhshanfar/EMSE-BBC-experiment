/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 20:46:58 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.TDF;
          BatchUpdateException batchUpdateException0 = new BatchUpdateException();
          CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
          MockFileWriter mockFileWriter0 = new MockFileWriter("xJ%\"a&", false);
          CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
          cSVPrinter0.printRecords((Iterable<?>) batchUpdateException0);
          Object[] objectArray0 = new Object[7];
          objectArray0[0] = (Object) cSVFormat1;
          objectArray0[1] = (Object) cSVFormat1;
          SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("xJ%\"a&", "xJ%\"a&", 2323, batchUpdateException0);
          batchUpdateException0.initCause(sQLRecoverableException0);
          objectArray0[2] = (Object) "xJ%\"a&";
          objectArray0[3] = (Object) batchUpdateException0;
          objectArray0[4] = (Object) "xJ%\"a&";
          Object object0 = new Object();
          objectArray0[5] = object0;
          Object object1 = new Object();
          objectArray0[6] = object1;
          // Undeclared exception!
          cSVPrinter0.printRecords(objectArray0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('Y');
      cSVFormat0.withQuoteChar(character0);
      StringWriter stringWriter0 = new StringWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0, 3175);
      CSVParser cSVParser0 = cSVFormat0.parse(pushbackReader0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.print((Object) null);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" SurroundingSpaces:ignored");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print(stringWriter0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.printComment(" SurroundingSpaces:ignored");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "format";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "format", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('F');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('&');
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat2);
      cSVFormat2.withCommentStart('6');
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(locale0);
      cSVPrinter0.printComment("9hlN0PdO");
      char char0 = '#';
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 847, batchUpdateException0);
      batchUpdateException0.initCause(sQLTransactionRollbackException0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecord((Iterable<?>) batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9B*6N0-%/<7=h5f}KwP");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.print(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character.valueOf('^');
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.toString();
      cSVFormat1.withRecordSeparator("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      LinkedList<ByteArrayOutputStream> linkedList0 = new LinkedList<ByteArrayOutputStream>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedList0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v<Z");
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = "ml:29>GsUe`01";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("ml:29>GsUe`01");
      Character character0 = Character.valueOf('o');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      cSVFormat2.withCommentStart(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.print(quote0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("ml:29>GsUe`01");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("g(U[?Dpn[");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      stringWriter0.append('C');
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVPrinter0.print((Object) null);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) appendable0;
      objectArray0[1] = (Object) "Unexpected Quote value: ";
      objectArray0[2] = (Object) "Unexpected Quote value: ";
      objectArray0[3] = (Object) appendable0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) appendable0;
      objectArray0[6] = (Object) charArrayWriter0;
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(.._KDD4'2b");
      cSVFormat1.print(stringWriter0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("]");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) "(.._KDD4'2b";
      LinkedHashSet<MockFileWriter> linkedHashSet0 = new LinkedHashSet<MockFileWriter>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";CXF-*$O");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PriorityQueue<ByteArrayOutputStream> priorityQueue0 = new PriorityQueue<ByteArrayOutputStream>();
      priorityQueue0.add(byteArrayOutputStream0);
      char[] charArray0 = new char[9];
      cSVFormat0.withIgnoreEmptyLines(true);
      charArray0[0] = 'P';
      charArray0[1] = 'N';
      charArray0[2] = 'R';
      charArray0[3] = 'm';
      charArray0[4] = '[';
      charArray0[5] = 'I';
      charArray0[6] = 'j';
      charArray0[7] = 'i';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[8] = 'd';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withRecordSeparator("Nl)Wva\"$73&u2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(25);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("' in ");
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0Y/j$*");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("1ER'`$!");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("1ER'`$!");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter(20);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The escape character cannot be a line break");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('S');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") invalid parse sequence", false);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.print(outputStreamWriter0);
      outputStreamWriter0.flush();
      Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.csv.CSVPrinter", ") invalid parse sequence", 35);
      SQLDataException sQLDataException0 = new SQLDataException(") invalid parse sequence", sQLRecoverableException0);
      sQLRecoverableException0.initCause(sQLDataException0);
      cSVPrinter0.print(sQLRecoverableException0);
      cSVFormat0.withIgnoreEmptyLines(false);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "|fPk]6`%5^");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("|fPk]6`%C^", "|fPk]6`%C^");
      Character character0 = Character.valueOf('O');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat0.toString();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      Object object0 = new Object();
      try { 
        cSVPrinter0.printComment("|fPk]6`%C^");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('^');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat1.toString();
      cSVFormat1.withRecordSeparator("Delimiter=<\t> Escape=<> CommentStart=<^> RecordSeparator=<\n> SkipHeaderRecord:false");
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<\t> Escape=<> CommentStart=<^> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("DmF");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Delimiter=<\t> Escape=<> CommentStart=<4> RecordSeparator=<\n> SkipHeaderRecord:false", (String) null);
      Object object0 = new Object();
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<> CommentStart=<4> RecordSeparator=<\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "|fPk]6`%5^";
      MockFile mockFile0 = new MockFile("|fPk]6`%5^", "|fPk]6`%5^");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("|fPk]6`%5^");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("|fPk]6`%5^");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('O');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      Character character0 = Character.valueOf('O');
      cSVFormat2.withEscape(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat1.withQuotePolicy(quote0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      PriorityQueue<ByteArrayOutputStream> priorityQueue0 = new PriorityQueue<ByteArrayOutputStream>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1759);
      priorityQueue0.add(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("|fPk]6`%5^", "|fPk]6`%5^");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(50);
      PriorityQueue<ByteArrayOutputStream> priorityQueue0 = new PriorityQueue<ByteArrayOutputStream>();
      PriorityQueue<ByteArrayOutputStream> priorityQueue1 = new PriorityQueue<ByteArrayOutputStream>();
      priorityQueue1.add(byteArrayOutputStream0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter1.printRecords((Iterable<?>) priorityQueue1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("O%)8%]~}wQ3gh%9;<y");
      Character character0 = Character.valueOf('y');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('O');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(") invalid char between encapsulated token and delimiter");
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      Character.valueOf('p');
      Quote quote0 = Quote.NONE;
      cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      PriorityQueue<ByteArrayOutputStream> priorityQueue0 = new PriorityQueue<ByteArrayOutputStream>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(20);
      priorityQueue0.poll();
      priorityQueue0.add(byteArrayOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ,");
      MockFile.createTempFile("QuoteChar=<", "'L<z0$dVws`Y");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ,");
      MockPrintStream mockPrintStream1 = new MockPrintStream("'L<z0$dVws`Y");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream1, cSVFormat2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream0);
      Byte byte0 = new Byte((byte)84);
      cSVPrinter1.print(byte0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"7w~,;Jp&Sj", "p:'?fNF}v#%o");
      File file0 = MockFile.createTempFile("\"7w~,;Jp&Sj", "Delimiter=<,> QuoteChar=<\"> CommentStart=<4> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      cSVPrinter0.print(mockFileReader0);
      Object object1 = new Object();
      cSVPrinter0.printComment("Zk#k");
      cSVPrinter0.printComment("mAyM5/!qKt!");
      cSVPrinter0.printRecords((Iterable<?>) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ,");
      Character.valueOf('y');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('*');
      cSVFormat1.withRecordSeparator(" ,");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      PriorityQueue<ByteArrayOutputStream> priorityQueue0 = new PriorityQueue<ByteArrayOutputStream>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(20);
      priorityQueue0.add(byteArrayOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ,");
      Character character0 = new Character('y');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('^');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("XXi3W?E'r.|");
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      Character.valueOf('y');
      Character character1 = new Character('A');
      cSVFormat3.withQuoteChar(character1);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat4 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PriorityQueue<ByteArrayOutputStream> priorityQueue0 = new PriorityQueue<ByteArrayOutputStream>();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'u';
      charArray0[2] = 'P';
      charArray0[3] = 'B';
      charArray0[4] = 'K';
      charArray0[5] = '&';
      charArray0[6] = 'P';
      charArray0[7] = 'D';
      charArray0[8] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('<');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("The comment start and the escape character cannot be the same ('");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat3);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      File file0 = MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "The comment start character and the delimiter cannot be the same ('");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      File file1 = MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Q');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("The comment start character and the delimiter cannot be the same ('");
      MockPrintStream mockPrintStream0 = new MockPrintStream("The comment start character and the delimiter cannot be the same ('");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("]f)_ntUmrz>=9z");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      cSVPrinter0.print(sQLTransactionRollbackException0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale_FilteringMode0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) sQLNonTransientConnectionException0;
      objectArray0[3] = (Object) "]f)_ntUmrz>=9z";
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) file1;
      objectArray0[6] = (Object) mockFileOutputStream0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(1782);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.print(stringWriter0);
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) serviceLoader0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("`");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "|fPk]6`%5^");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ,");
      PrintStream printStream0 = mockPrintStream0.append('R');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      Quote quote0 = Quote.ALL;
      Quote quote1 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(printStream0, cSVFormat1);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      Object object0 = new Object();
      cSVPrinter0.printComment("");
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) " ,";
      objectArray0[2] = (Object) " ,";
      objectArray0[3] = (Object) printStream0;
      objectArray0[4] = (Object) quote1;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) quote0;
      cSVPrinter1.printRecord(objectArray0);
      CSVPrinter cSVPrinter2 = cSVFormat1.print(printStream0);
      cSVPrinter2.printComment(" ,");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      File file0 = MockFile.createTempFile("m}bHhE~ 9oT;4Cgq+_", "m}bHhE~ 9oT;4Cgq+_");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.println((-792));
      Object[] objectArray0 = new Object[0];
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Character character0 = Character.valueOf('h');
      cSVFormat0.withEscape(character0);
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(printWriter0);
      cSVPrinter1.println();
      Class<ObjectOutputStream> class0 = ObjectOutputStream.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      cSVPrinter0.printRecord(objectArray0);
      ServiceLoader<ObjectOutputStream> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter1.printRecords((Iterable<?>) serviceLoader0);
      cSVPrinter1.println();
      cSVPrinter1.printComment("");
      cSVPrinter1.close();
      cSVPrinter0.getOut();
      cSVPrinter0.print((Object) null);
      cSVPrinter1.close();
      cSVPrinter1.printComment("");
      cSVPrinter1.println();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('l');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The header contains a duplicate entry: '";
      stringArray0[1] = "63n+\";?'=XM.\"UP#8k";
      stringArray0[2] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[3] = "";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('g');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "org.apache.commons.csv.CSVPrinter", 25, 25);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter2, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile("kfPk]6`%K^", (String) null);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat0.withIgnoreEmptyLines(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/kfPk]6`%K^0kfPk]6`%K^");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.getOut();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      try { 
        cSVPrinter0.print(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArrayWriter0.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "0,C%7b|]hV@X`o";
      stringArray0[2] = "The header contains a duplicate entry: '";
      stringArray0[3] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[4] = "'n";
      stringArray0[5] = "63n+\";?'=XM.\"UP#8k";
      stringArray0[6] = "P vyc'kx7O\"/,KH9%*]";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<OutputStreamWriter> treeSet0 = new TreeSet<OutputStreamWriter>(comparator0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVFormat0.withRecordSeparator('r');
      ArrayDeque<BufferedOutputStream> arrayDeque0 = new ArrayDeque<BufferedOutputStream>((-1878));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 108);
      arrayDeque0.add(bufferedOutputStream0);
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
      cSVPrinter0.printComment("0,C%7b|]hV@X`o");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      Locale locale0 = Locale.JAPAN;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (String) null, 38);
      cSVPrinter0.print(sQLInvalidAuthorizationSpecException0);
      Object object1 = new Object();
      cSVPrinter0.printComment("The header contains a duplicate entry: '");
      cSVPrinter0.printRecord((Iterable<?>) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('\'');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      ArrayList<PipedWriter> arrayList0 = new ArrayList<PipedWriter>();
      TreeSet<PipedWriter> treeSet0 = new TreeSet<PipedWriter>(arrayList0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVFormat1.withDelimiter('#');
      cSVPrinter0.close();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3079)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile("kfPk]6`%K^", "kfPk]6`%K^");
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat0.withIgnoreEmptyLines(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/kfPk]6`%K^0kfPk]6`%K^");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      cSVPrinter0.flush();
      cSVPrinter0.getOut();
      cSVPrinter0.flush();
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      File file0 = MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "The comment start character and the delimiter cannot be the same ('");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('#');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = Character.valueOf('#');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character1);
      Quote quote0 = Quote.NONE;
      cSVFormat0.withRecordSeparator("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[8];
      cSVFormat2.withEscape(character1);
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      cSVFormat2.toString();
      Object object1 = new Object();
      Object object2 = new Object();
      String string0 = "The header contains duplicate names: ";
      Iterable<Object> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ,");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('-');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
      cSVFormat1.withSkipHeaderRecord(false);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ,");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('-');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat1.print(mockPrintStream0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
      cSVFormat1.withSkipHeaderRecord(false);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      Long long0 = new Long(0L);
      cSVPrinter0.print(long0);
      cSVPrinter0.printComment("");
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Delimiter=<,> QuoteChar=<\"> CommentStart=<4> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", (String) null);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      cSVPrinter0.print(objectOutputStream0);
      Object object0 = new Object();
      cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> CommentStart=<4> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "0,C%7b|]hV@X`o";
      stringArray0[2] = "The header contains a duplicate entry: '";
      stringArray0[3] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[4] = "'n";
      stringArray0[5] = "63n+\";?'=XM.\"UP#8k";
      stringArray0[6] = "P vyc'kx7O\"/,KH9%*]";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<OutputStreamWriter> treeSet0 = new TreeSet<OutputStreamWriter>(comparator0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVFormat0.withRecordSeparator('r');
      ArrayDeque<BufferedOutputStream> arrayDeque0 = new ArrayDeque<BufferedOutputStream>((-1878));
      cSVPrinter0.printRecord((Iterable<?>) arrayDeque0);
      cSVPrinter0.printComment("");
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "0,C%7b|]hV@X`o";
      stringArray0[2] = "The header contains a duplicate entry: '";
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      TreeSet<OutputStreamWriter> treeSet0 = new TreeSet<OutputStreamWriter>((Comparator<? super OutputStreamWriter>) null);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charArrayWriter1);
      cSVPrinter1.printComment("\u2029");
      charArrayWriter0.append('4');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      cSVPrinter1.print(pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile("|fPk]6`%5^", "|fPk]6`%5^");
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.flush();
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = new CSVPrinter(appendable0, cSVFormat1);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(2471, 2);
      Character character0 = new Character('Q');
      cSVFormat0.withCommentStart(character0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter2 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) file0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVPrinter0;
      try { 
        cSVPrinter2.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter(122);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.close();
      cSVPrinter0.print(cSVFormat0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter2.flush();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "g(eXBnuH";
      MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "g(eXBnuH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('#');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = Character.valueOf('#');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      cSVPrinter0.printComment("The comment start character and the delimiter cannot be the same ('");
      CSVPrinter cSVPrinter1 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter1.printComment("g(eXBnuH");
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(90, 388.7F);
      Character.valueOf('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVFormat1.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.printRecord((Object[]) stringArray0);
      Class<MockPrintStream> class0 = MockPrintStream.class;
      ServiceLoader<MockPrintStream> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(90, 388.7F);
      Character character1 = Character.valueOf('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      cSVFormat1.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.printRecord((Object[]) stringArray0);
      Class<MockPrintStream> class0 = MockPrintStream.class;
      ServiceLoader.load(class0);
      cSVFormat0.withEscape(character1);
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('#');
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '#';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = '6';
      charArray0[2] = 'l';
      charArray0[3] = 'D';
      charArray0[4] = 'f';
      charArray0[5] = 'E';
      charArray0[6] = 'u';
      charArray0[7] = '5';
      charArray0[8] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      cSVPrinter0.flush();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(31);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) stringWriter0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('4');
      cSVFormat0.withCommentStart(character0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "0,C%7b|]hV@X`o";
      stringArray0[2] = "The header contains a duplicate entry: '";
      stringArray0[3] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[4] = "'n";
      stringArray0[5] = "63n+\";?'=XM.\"UP#8k";
      stringArray0[6] = "P vyc'kx7O\"/,KH9%*]";
      Object object0 = new Object();
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('4');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter2);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('\'');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      ArrayList<PipedWriter> arrayList0 = new ArrayList<PipedWriter>();
      TreeSet<PipedWriter> treeSet0 = new TreeSet<PipedWriter>(arrayList0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVFormat1.withDelimiter('#');
      cSVPrinter0.close();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) treeSet0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) arrayList0;
      objectArray0[5] = (Object) pipedWriter0;
      objectArray0[6] = (Object) pipedWriter0;
      objectArray0[7] = (Object) pipedWriter0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('#');
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '#';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Character character0 = Character.valueOf('#');
      cSVFormat1.withEscape(character0);
      Object object0 = new Object();
      cSVFormat1.toString();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      Object object3 = new Object();
      objectArray0[1] = object3;
      objectArray0[2] = (Object) charBuffer1;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "0,C%7b|]hV@X`o";
      stringArray0[2] = "The header contains a duplicate entry: '";
      stringArray0[3] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[4] = "'n";
      stringArray0[5] = "63n+\";?'=XM.\"UP#8k";
      stringArray0[6] = "P vyc'kx7O\"/,KH9%*]";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat3);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(2, 2);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      Object[] objectArray0 = new Object[7];
      cSVFormat1.withCommentStart(character0);
      objectArray0[1] = (Object) "P vyc'kx7O\"/,KH9%*]";
      objectArray0[2] = (Object) "'n";
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[5] = (Object) "org.apache.commons.csv.CSVPrinter";
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('4');
      Character character0 = new Character('4');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Character character1 = Character.valueOf(')');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character1);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('C');
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat6);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      cSVPrinter1.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      File file0 = MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "g(eXBnuH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('#');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = Character.valueOf('#');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character1);
      Quote quote0 = Quote.NONE;
      cSVFormat0.withRecordSeparator("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[8];
      cSVFormat2.withEscape(character1);
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      cSVFormat2.toString();
      Object object1 = new Object();
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) mockPrintWriter0;
      Class<MockPrintStream> class0 = MockPrintStream.class;
      ServiceLoader.load(class0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1237).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "g(eXBnuH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('#');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = Character.valueOf('#');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character1);
      cSVFormat0.withHeader((String[]) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(2, 2);
      ArrayDeque<MockPrintWriter> arrayDeque0 = new ArrayDeque<MockPrintWriter>();
      ArrayDeque<MockPrintWriter> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque1);
      cSVFormat2.withCommentStart(character0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      File file0 = MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "g(eXBnuH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('#');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = Character.valueOf('#');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character1);
      Quote quote0 = Quote.NONE;
      cSVFormat0.withRecordSeparator("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[8];
      cSVFormat2.withEscape(character1);
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      cSVFormat2.toString();
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecord(objectArray0);
      Class<MockPrintStream> class0 = MockPrintStream.class;
      ServiceLoader<MockPrintStream> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3648)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.println();
      cSVPrinter0.getOut();
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = "|fPk]6`%5^";
      File file0 = MockFile.createTempFile("|fPk]6`%5^", "|fPk]6`%5^");
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.flush();
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = new CSVPrinter(appendable0, cSVFormat1);
      cSVFormat1.withEscape(']');
      cSVPrinter1.printComment("|fPk]6`%5^");
      cSVPrinter1.printComment("NONE");
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      File file0 = MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "g(eXBnuH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('#');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = Character.valueOf('#');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character1);
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat3 = CSVFormat.newFormat('#');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[8];
      cSVFormat2.withEscape(character1);
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('}');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("");
      cSVFormat3.validate();
      Character character0 = new Character('S');
      cSVFormat3.withCommentStart(character0);
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteChar('}');
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(false);
      Character character1 = new Character('}');
      cSVFormat5.toString();
      cSVFormat5.withQuoteChar(character1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.append((CharSequence) "org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('}')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile("kfPk]6`%K^", "kfPk]6`%K^");
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat0.withIgnoreEmptyLines(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/kfPk]6`%K^0kfPk]6`%K^");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.getOut();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('#');
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '#';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      cSVFormat1.print(charBuffer1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(617, 1637.5444F);
      Character character0 = Character.valueOf('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat2);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character1 = new Character('\'');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character1);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) linkedHashSet0;
      objectArray0[2] = (Object) linkedHashSet0;
      objectArray0[3] = (Object) character1;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreEmptyLines(true);
      File file0 = MockFile.createTempFile("|fPk]6`%5^", "|fPk]6`%5^");
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("|fPk]6`%5^");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.flush();
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      CSVPrinter cSVPrinter1 = new CSVPrinter(appendable0, cSVFormat1);
      file0.getAbsoluteFile();
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(2471, 2);
      Character character0 = new Character('Q');
      cSVFormat0.withCommentStart(character0);
      Object object0 = new Object();
      cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) file0;
      objectArray0[2] = objectArray0[1];
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile("kfPk]6`%K^", "kfPk]6`%K^");
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat0.withIgnoreEmptyLines(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.flush();
      cSVPrinter0.getOut();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      cSVPrinter0.printComment("kfPk]6`%K^");
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("kfPk]6`%K^", "kfPk]6`%K^");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.flush();
      cSVFormat1.withEscape((Character) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Character character0 = new Character('%');
      cSVFormat2.withEscape(character0);
      objectArray0[2] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "0,C%7b|]hV@X`o";
      stringArray0[2] = "The header contains a duplicate entry: '";
      stringArray0[3] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[4] = "'n";
      stringArray0[5] = "63n+\";?'=XM.\"UP#8k";
      stringArray0[6] = "P vyc'kx7O\"/,KH9%*]";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat3);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(2, 2);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      Object[] objectArray0 = new Object[7];
      cSVFormat1.withCommentStart(character0);
      objectArray0[0] = (Object) charArrayWriter1;
      objectArray0[1] = (Object) "P vyc'kx7O\"/,KH9%*]";
      objectArray0[2] = (Object) "'n";
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[5] = (Object) "org.apache.commons.csv.CSVPrinter";
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(197, charArrayWriter1.size());
      assertEquals(197, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      File file0 = MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "g(eXBnuH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('#');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = Character.valueOf('#');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character1);
      Quote quote0 = Quote.NONE;
      cSVFormat0.withRecordSeparator("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[8];
      cSVFormat2.withEscape(character1);
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      cSVFormat2.toString();
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecord(objectArray0);
      Class<MockPrintStream> class0 = MockPrintStream.class;
      ServiceLoader<MockPrintStream> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      cSVPrinter0.println();
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(appendable0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('0');
      CSVFormat cSVFormat2 = CSVFormat.newFormat('0');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(33);
      Quote quote0 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote0);
      cSVFormat2.withEscape('=');
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '=';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '=';
      charArray0[6] = '5';
      charArray0[7] = '0';
      charArray0[8] = '=';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      PriorityQueue<BufferedOutputStream> priorityQueue0 = new PriorityQueue<BufferedOutputStream>();
      PriorityQueue<BufferedOutputStream> priorityQueue1 = new PriorityQueue<BufferedOutputStream>(priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue1);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(cSVFormat1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('p');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('p');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter1);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ,");
      Character character0 = Character.valueOf('y');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('*');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(" ,");
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      Character.valueOf('A');
      cSVFormat2.withQuoteChar(character0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat4);
      PriorityQueue<ByteArrayOutputStream> priorityQueue0 = new PriorityQueue<ByteArrayOutputStream>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(20);
      priorityQueue0.poll();
      priorityQueue0.add(byteArrayOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      assertTrue(priorityQueue0.contains(byteArrayOutputStream0));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile("kfPk]6`%K^", "kfPk]6`%K^");
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.flush();
      cSVFormat1.withCommentStart((Character) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Character character0 = new Character('%');
      cSVFormat1.withEscape(character0);
      objectArray0[2] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      File file0 = MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "g(eXBnuH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('#');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = Character.valueOf('#');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character1);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat4 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat5 = cSVFormat2.withEscape(character1);
      cSVFormat4.withNullString("The comment start character and the delimiter cannot be the same ('");
      cSVFormat3.withRecordSeparator('#');
      Character.valueOf('#');
      Character character2 = new Character('k');
      cSVFormat5.withEscape(character2);
      cSVPrinter0.printComment("]**F'5w70");
      cSVPrinter0.printComment("The comment start character and the delimiter cannot be the same ('");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter1.println();
      cSVPrinter0.printRecord(objectArray0);
      assertNotSame(cSVPrinter0, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      File file0 = MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "g(eXBnuH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('#');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = Character.valueOf('#');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character1);
      Quote quote0 = Quote.NONE;
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[8];
      cSVFormat2.withEscape(character1);
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      cSVFormat2.toString();
      objectArray0[3] = (Object) cSVFormat3;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecord(objectArray0);
      Class<MockPrintStream> class0 = MockPrintStream.class;
      ServiceLoader<MockPrintStream> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      File file0 = MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "g(eXBnuH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('#');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = Character.valueOf('#');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character1);
      Quote quote0 = Quote.NONE;
      cSVFormat0.withRecordSeparator("The comment start character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[8];
      cSVFormat2.withEscape(character1);
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      cSVFormat2.toString();
      Object object1 = new Object();
      Object object2 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      Class<MockPrintStream> class0 = MockPrintStream.class;
      ServiceLoader<MockPrintStream> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('p');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('p');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("MD?9q'W (N`eseh6", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "MD?9q'W (N`eseh6");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        cSVPrinter0.print(locale_FilteringMode0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('#');
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '#';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('4');
      cSVFormat0.withCommentStart(character0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "0,C%7b|]hV@X`o";
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0,C%7b|]hV@X`o");
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      cSVPrinter0.close();
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("0,C%7b|]hV@X`o");
      CharArrayWriter charArrayWriter2 = charArrayWriter0.append((CharSequence) "");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(charArrayWriter2);
      cSVPrinter1.print((Object) null);
      assertEquals("null\"0,C%7b|]hV@X`o\"", charArrayWriter2.toString());
      assertEquals(20, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char char0 = 'A';
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('A');
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('4');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "0,C%7b|]hV@X`o";
      stringArray0[2] = "The header contains a duplicate entry: '";
      stringArray0[3] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[4] = "'n";
      stringArray0[5] = "63n+\";?'=XM.\"UP#8k";
      stringArray0[6] = "P vyc'kx7O\"/,KH9%*]";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat3);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>(2, 2);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      Object[] objectArray0 = new Object[7];
      cSVFormat1.withCommentStart(character0);
      objectArray0[0] = (Object) charArrayWriter1;
      objectArray0[1] = (Object) "P vyc'kx7O\"/,KH9%*]";
      objectArray0[2] = (Object) "'n";
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[5] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[6] = (Object) "";
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(224, charArrayWriter1.size());
      assertEquals(224, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = "(line ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(line ");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.MINIMAL;
      cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.withNullString("(line ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = '`';
      charArray0[2] = 'U';
      charArray0[3] = 'f';
      charArray0[4] = 'M';
      charArray0[5] = 'I';
      // Undeclared exception!
      try { 
        mockPrintWriter0.write(charArray0, 0, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }
}
