/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 02:27:07 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.BatchUpdateException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9'o");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1163);
      intArray0[1] = (-1163);
      intArray0[2] = (-1163);
      intArray0[3] = (-1163);
      intArray0[4] = (-1163);
      intArray0[5] = (-1163);
      intArray0[6] = (-1163);
      intArray0[7] = (-1163);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLWarning sQLWarning0 = new SQLWarning("Ol}W~kN1WR2GZ", "Ol}W~kN1WR2GZ", sQLIntegrityConstraintViolationException0);
      SQLWarning sQLWarning1 = new SQLWarning((String) null, " [", sQLWarning0);
      sQLWarning0.setNextWarning(sQLWarning1);
      sQLIntegrityConstraintViolationException0.initCause(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-1163), intArray0, sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('e');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter0.printRecord((Iterable<?>) batchUpdateException0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) sQLIntegrityConstraintViolationException0;
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[6];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('S');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      cSVFormat0.withRecordSeparator("AJJaj]+");
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('/');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("CeYiux>@l'2jG");
      cSVFormat4.toString();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "CeYiux>@l'2jG");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" EmptyLines:i,anored");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.flush();
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVPrinter0.printRecord((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[7];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("z !P");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-81), (byte)116);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0, 99);
      CSVParser cSVParser0 = cSVFormat1.parse(lineNumberReader0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1163);
      intArray0[1] = (-1163);
      intArray0[2] = (-1163);
      intArray0[3] = (-1163);
      intArray0[4] = (-1163);
      intArray0[5] = (-1163);
      intArray0[6] = (-1163);
      intArray0[7] = (-1163);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLWarning sQLWarning0 = new SQLWarning("Ol}W~kN1WR2GZ", "Ol}W~kN1WR2GZ", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-1163), intArray0, sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('e');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.validate();
      objectArray0[0] = (Object) sQLIntegrityConstraintViolationException0;
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("|*>");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";oW=K|UkL");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('L');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.withNullString(" EmptyLines:ignored");
      CSVFormat cSVFormat2 = cSVFormat0.withNullString(")-$V(4TNS7FZ5 N3K-:");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("s` ");
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('L');
      Quote quote0 = Quote.NONE;
      cSVFormat2.withQuotePolicy(quote0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("11+yqm\"");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(")_XcC@~[|T!_D");
      cSVFormat0.withEscape('m');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('m');
      MockPrintStream mockPrintStream0 = new MockPrintStream(")_XcC@~[|T!_D");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<ByteArrayOutputStream> stack0 = new Stack<ByteArrayOutputStream>();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLNonTransientException0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.printComment("\"~'JtGAT*,O&{*k ");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLSyntaxErrorException0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.print(charArrayWriter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[1] = "Index for header '%s' is %d but CSVRecord only has %d values!";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("org.apache.commons.csv.CSVPrinter");
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = '2';
      charArray0[2] = '}';
      charArray0[3] = '#';
      charArray0[4] = '[';
      charArray0[5] = 'a';
      charArray0[6] = '#';
      charArray0[7] = '`';
      charArray0[8] = 'O';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>(37, (-1627));
      cSVPrinter0.printRecords((Iterable<?>) vector0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) vector0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1163);
      intArray0[1] = (-1163);
      intArray0[2] = (-1163);
      intArray0[3] = (-1163);
      intArray0[4] = (-1163);
      intArray0[5] = (-1163);
      intArray0[6] = (-1163);
      intArray0[7] = (-1163);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLWarning sQLWarning0 = new SQLWarning("Ol}W~kN1WR2GZ", "Ol}W~kN1WR2GZ", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-1163), intArray0, sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('e');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) sQLIntegrityConstraintViolationException0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('F');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("j:&U.'nnAoW@<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) cSVFormat1;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('7');
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = 'F';
      cSVFormat0.withDelimiter('5');
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      String string0 = "";
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[7];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("z !P");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      CSVParser cSVParser0 = cSVFormat1.parse(inputStreamReader0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
      cSVPrinter0.printComment("z !P");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.nio.charset.MalformedInputException: Input length = 1
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>();
      vector0.add(byteArrayOutputStream0);
      CharBuffer charBuffer0 = CharBuffer.allocate(57);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1, 57, 57);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer2, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Stack<ByteArrayOutputStream> stack0 = new Stack<ByteArrayOutputStream>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      stack0.add(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = 'Y';
      charArray0[2] = '}';
      charArray0[3] = '~';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 3, 1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) stack0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "n'|";
      stringArray0[1] = "org.apache.commons.csv.CSVPrinter";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[2] = "~";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('X');
      Character character0 = Character.valueOf('H');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      cSVFormat4.withDelimiter('V');
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('`');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('S');
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat4 = cSVFormat0.withQuoteChar('3');
      CSVFormat cSVFormat5 = cSVFormat3.withDelimiter('`');
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      Object object0 = new Object();
      cSVPrinter0.flush();
      StringReader stringReader0 = new StringReader("");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringReader0;
      objectArray0[1] = (Object) '`';
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) '`';
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>();
      vector0.add(byteArrayOutputStream0);
      CharBuffer charBuffer0 = CharBuffer.allocate(57);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1, 57, 57);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer2, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) vector0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('R');
      CSVFormat cSVFormat2 = CSVFormat.newFormat('R');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat2.withRecordSeparator("T`k*:RTVj)");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat1.print(charArrayWriter0);
      cSVFormat2.withEscape('+');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "T`k*:RTVj)");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray1[1] = object0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('{');
      cSVFormat2.withDelimiter('c');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('+');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(charBuffer0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter2 = cSVFormat0.print(stringWriter1);
      cSVPrinter2.flush();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringWriter0, cSVFormat3);
      try { 
        cSVPrinter0.print(cSVPrinter1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = new Character('e');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("' in ", false);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockFileWriter0);
      String string0 = "format";
      cSVPrinter0.close();
      try { 
        cSVPrinter0.printComment("format");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withCommentStart('\u001C');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(65);
      vector0.add(byteArrayOutputStream1);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      try { 
        cSVPrinter0.printRecords((Iterable<?>) vector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5810);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      PipedReader pipedReader0 = new PipedReader(5810);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.close();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVParser0;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('#');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('?');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('m');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter0.print(cSVFormat2);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) charArrayWriter0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("Unexpected Quote value: ");
      Integer integer0 = new Integer(101);
      cSVPrinter0.print(integer0);
      stringWriter0.write((-3209));
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter1.print(cSVPrinter0);
      ArrayList<ByteArrayOutputStream> arrayList0 = new ArrayList<ByteArrayOutputStream>();
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>(arrayList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      vector0.add(byteArrayOutputStream0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat0.withCommentStart('y');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = '\u0017';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'y';
      charArray0[5] = '\u0017';
      charArray0[6] = '\u0017';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charArrayWriter0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      String string0 = "format";
      MockFile mockFile0 = new MockFile("format");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('4');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      cSVFormat0.withQuotePolicy(quote0);
      Quote quote1 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote1);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('w');
      cSVFormat0.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('w');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) charArrayWriter0;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(pipedWriter1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(pipedWriter0, cSVFormat0);
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Quote quote1 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote1);
      cSVFormat2.withCommentStart('w');
      cSVFormat0.withNullString("hu");
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("?cbh6m<bo3");
      cSVFormat3.withDelimiter('~');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.print((Object) null);
      TreeSet<ObjectInputStream> treeSet0 = new TreeSet<ObjectInputStream>();
      TreeSet<ObjectInputStream> treeSet1 = new TreeSet<ObjectInputStream>((SortedSet<ObjectInputStream>) treeSet0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      ArrayDeque<PipedOutputStream> arrayDeque0 = new ArrayDeque<PipedOutputStream>();
      ArrayDeque<PipedOutputStream> arrayDeque1 = arrayDeque0.clone();
      cSVPrinter1.printRecords((Iterable<?>) arrayDeque1);
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Vector<ByteArrayOutputStream> vector0 = new Vector<ByteArrayOutputStream>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      vector0.add(byteArrayOutputStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      MockFile mockFile1 = new MockFile(mockFile0, "qOE3");
      File file0 = MockFile.createTempFile("qOE3", "org.apache.commons.csv.CSVPrinter$1", (File) mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.forLanguageTag("qOE3");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "qOE3";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) fileDescriptor0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(printStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('`');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('`');
      cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat0.withNullString("e");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVPrinter");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "e");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('e');
      Character character0 = new Character('S');
      Object object0 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) cSVFormat0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.csv.CSVPrinter");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutException1.getLocalizedMessage();
      cSVPrinter0.print(cSVFormat3);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("");
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('Y');
      CSVPrinter cSVPrinter1 = new CSVPrinter(printStream0, cSVFormat6);
      cSVPrinter1.printRecords((Iterable<?>) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('w');
      cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('.');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      cSVPrinter0.print("");
      TreeSet<ObjectInputStream> treeSet0 = new TreeSet<ObjectInputStream>();
      TreeSet<ObjectInputStream> treeSet1 = new TreeSet<ObjectInputStream>((SortedSet<ObjectInputStream>) treeSet0);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      cSVPrinter1.printRecords((Iterable<?>) treeSet1);
      cSVPrinter1.close();
      cSVPrinter0.printComment("");
      cSVPrinter1.printComment("out");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('^');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter1.close();
      StringReader stringReader0 = new StringReader("d_8HG\"hJ");
      CSVPrinter cSVPrinter2 = cSVFormat0.print(mockPrintStream1);
      cSVPrinter2.flush();
      StringReader stringReader1 = new StringReader("d_8HG\"hJ");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("d_8HG\"hJ");
      SQLDataException sQLDataException0 = new SQLDataException("7l)z3^A@=:w", "7l)z3^A@=:w", sQLTimeoutException0);
      cSVPrinter2.print(sQLDataException0);
      cSVPrinter1.printRecords((Iterable<?>) sQLDataException0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5810);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Quote quote1 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote1);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('w');
      cSVFormat0.withNullString("");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object object1 = new Object();
      Object object2 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) quote1;
      Object object3 = new Object();
      objectArray0[1] = object3;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVFormat3;
      cSVPrinter1.printRecords(objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) cSVFormat1;
      Object object4 = new Object();
      objectArray1[1] = object4;
      objectArray1[2] = (Object) quote0;
      cSVPrinter0.printRecords(objectArray1);
      cSVPrinter0.printComment("out");
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('`');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('`');
      cSVFormat2.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2233);
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('S');
      charArrayWriter0.write(2233);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      cSVPrinter0.print(locale_FilteringMode0);
      cSVPrinter0.flush();
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("s;su3\u0002QAa");
      SQLDataException sQLDataException0 = new SQLDataException("", "s;su3\u0002QAa", sQLNonTransientConnectionException0);
      TreeSet<SQLTransientException> treeSet1 = new TreeSet<SQLTransientException>();
      TreeSet<SQLTransientException> treeSet2 = new TreeSet<SQLTransientException>((SortedSet<SQLTransientException>) treeSet1);
      cSVFormat1.print(charArrayWriter0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "s;su3\u0002QAa");
      CSVPrinter cSVPrinter1 = cSVFormat0.print(charBuffer0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        cSVPrinter1.print(locale_FilteringMode1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('`');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('`');
      cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2233);
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('S');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVFormat4;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      cSVPrinter0.print(locale_FilteringMode0);
      cSVPrinter0.flush();
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      TreeSet<SQLTransientException> treeSet1 = new TreeSet<SQLTransientException>((SortedSet<SQLTransientException>) treeSet0);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(charArrayWriter0);
      cSVPrinter1.print(cSVFormat4);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('`');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('`');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      cSVFormat2.withCommentStart('f');
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(false);
      String string0 = "out";
      cSVFormat0.withNullString("out");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "out");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charBuffer0);
      Object object0 = new Object();
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyLines(false);
      Character character0 = new Character('w');
      cSVFormat2.withQuoteChar(character0);
      Object object1 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "out";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat4;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Unexpected Quote value: ";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Object object0 = new Object();
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = '';
      charArray0[2] = '?';
      charArray0[3] = 'G';
      charArray0[4] = '{';
      charArray0[5] = 'T';
      charArray0[6] = 'A';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) stringArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('`');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('`');
      cSVFormat3.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2233);
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('S');
      charArrayWriter0.write(2233);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVFormat4;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      cSVPrinter0.print(locale_FilteringMode0);
      cSVPrinter0.flush();
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      TreeSet<SQLTransientException> treeSet1 = new TreeSet<SQLTransientException>((SortedSet<SQLTransientException>) treeSet0);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(charArrayWriter0);
      cSVPrinter1.print(cSVFormat4);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("s", objectArray0);
      Character character0 = new Character('=');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      cSVFormat0.withRecordSeparator("s");
      Character character1 = Character.valueOf('Z');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('&');
      MockFile mockFile0 = new MockFile("kG3jE^R&t8o", "j&@<Z0$");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('&');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.printComment("oH<)$MbK;@nWzXt");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile.createTempFile("Ldn]TvL;YI", "Ldn]TvL;YI");
      MockFile mockFile0 = new MockFile("J?Y-<tn1r%^9>z0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('g');
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("RecordSeparator=0");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(58);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('+');
      charArrayWriter0.write(56);
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteChar('_');
      CSVPrinter cSVPrinter0 = cSVFormat5.print(mockPrintWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "J?Y-<tn1r%^9>z0";
      objectArray0[1] = (Object) "J?Y-<tn1r%^9>z0";
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) "RecordSeparator=0";
      objectArray0[4] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter1.close();
      cSVPrinter0.flush();
      StringReader stringReader0 = new StringReader("RecordSeparator=0");
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('`');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('`');
      cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat3.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2233);
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('<');
      charArrayWriter0.write(2233);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat4;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('^');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(65);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('<');
      charArrayWriter0.write(4167);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(printStream0, cSVFormat1);
      cSVPrinter1.close();
      cSVPrinter0.flush();
      StringReader stringReader0 = new StringReader("d_8HG\"hJ");
      try { 
        MockURI.URI("(k>vb71geX'7*\"J", "d_8HG\"hJ", "d_8HG\"hJ", "d_8HG\"hJ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: (k>vb71geX'7*\"J://d_8HG\"hJd_8HG%22hJ#d_8HG%22hJ
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5810);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) stringWriter0;
      cSVPrinter0.println();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(5810).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      mockPrintWriter0.println(0.0F);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('-');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('+');
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar('k');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(objectOutputStream0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter1, cSVFormat4);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      cSVPrinter1.flush();
      LinkedHashSet<MockPrintStream> linkedHashSet0 = new LinkedHashSet<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(linkedHashSet0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) linkedHashSet0;
      objectArray0[3] = (Object) treeSet0;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecord((Iterable<?>) linkedHashSet0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Quote quote1 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote1);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('w');
      cSVFormat0.withNullString("");
      cSVFormat1.withCommentStart('.');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charArrayWriter0);
      cSVPrinter0.print("");
      TreeSet<ObjectInputStream> treeSet0 = new TreeSet<ObjectInputStream>();
      TreeSet<ObjectInputStream> treeSet1 = new TreeSet<ObjectInputStream>((SortedSet<ObjectInputStream>) treeSet0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) treeSet0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("@7.~7");
      cSVPrinter0.close();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile.createTempFile("Ldn]TvL;YI", "Ldn]TvL;YI");
      MockFile mockFile0 = new MockFile("J?Y-<tn1r%^9>z0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat0.withQuoteChar('&');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.println(0.0F);
      cSVFormat1.withEscape('k');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('k');
      charArrayWriter1.write(1224);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5810);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) stringWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5810);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      PipedReader pipedReader0 = new PipedReader(5810);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.close();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVParser0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Character character0 = new Character('=');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("kG3jE^R&t8o");
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('@');
      MockFile mockFile0 = new MockFile("kG3jE^R&t8o", "kG3jE^R&t8o");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('=');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(printStream0);
      cSVPrinter0.printComment("kG3jE^R&t8o");
      cSVPrinter0.printComment("%1");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withQuoteChar('`');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      cSVFormat1.withEscape('<');
      charArrayWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVPrinter0.close();
      cSVPrinter0.flush();
      StringReader stringReader0 = new StringReader("(k>vb71geX'7*\"J");
      cSVPrinter0.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5810);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('w');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("out");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      Object[] objectArray0 = new Object[9];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      Object object2 = new Object();
      objectArray0[3] = object2;
      cSVPrinter0.printRecords(objectArray0);
      Character character0 = new Character('2');
      CSVFormat cSVFormat5 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat5);
      cSVPrinter0.close();
      cSVPrinter1.flush();
      StringReader stringReader0 = new StringReader("out");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      StringReader stringReader1 = new StringReader("out");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      cSVPrinter0.print("out");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      File file0 = MockFile.createTempFile("Qrc,CQL5X6z[", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('S');
      mockPrintWriter0.println(0.0F);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat3.withQuoteChar('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[24];
      objectArray0[0] = (Object) file0;
      cSVPrinter0.flush();
      objectArray0[1] = (Object) cSVPrinter0;
      LinkedHashSet<MockPrintStream> linkedHashSet0 = new LinkedHashSet<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      mockPrintWriter0.println((-230.903));
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVPrinter0.printRecords(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(92);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('_');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('^');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) printStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) mockPrintStream1;
      objectArray0[4] = (Object) mockPrintStream1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      File file0 = MockFile.createTempFile("Qrc,CQL5X6z[", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('S');
      mockPrintWriter0.println(0.0F);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat3.withQuoteChar('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) file0;
      cSVPrinter0.flush();
      objectArray0[1] = (Object) cSVPrinter0;
      LinkedHashSet<MockPrintStream> linkedHashSet0 = new LinkedHashSet<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      mockPrintWriter0.println((-230.903));
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      cSVFormat2.withHeader((String[]) null);
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) mockPrintWriter0;
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintWriter0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      cSVPrinter2.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      File file0 = MockFile.createTempFile("Qrc,CQL5X6z[", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('S');
      mockPrintWriter0.println(0.0F);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat3.withQuoteChar('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) file0;
      cSVPrinter0.flush();
      objectArray0[1] = (Object) cSVPrinter0;
      LinkedHashSet<MockPrintStream> linkedHashSet0 = new LinkedHashSet<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(linkedHashSet0);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withQuoteChar('`');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      cSVFormat1.withEscape('<');
      charArrayWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Iterable<SQLIntegrityConstraintViolationException> iterable0 = null;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "", objectArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(")_XcC@~[|T!_D");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("0@*vvwnFc-?M");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('m');
      MockPrintStream mockPrintStream0 = new MockPrintStream(")_XcC@~[|T!_D");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "W H5>tFJUW";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "0@*vvwnFc-?M";
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) byteArrayOutputStream0;
      Character character0 = Character.valueOf('5');
      cSVFormat2.withEscape(character0);
      PrintStream printStream0 = mockPrintStream0.printf("W H5>tFJUW", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat4);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      File file0 = MockFile.createTempFile("Qrc,CQL5X6z[", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('S');
      mockPrintWriter0.println(0.0F);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) file0;
      cSVPrinter0.flush();
      objectArray0[1] = (Object) cSVPrinter0;
      LinkedHashSet<MockPrintStream> linkedHashSet0 = new LinkedHashSet<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(linkedHashSet0);
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord((Iterable<?>) treeSet0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat4);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecord((Iterable<?>) treeSet0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('&');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("s", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter1);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("url", "url", (-2347), sQLWarning0);
      vector0.add(sQLIntegrityConstraintViolationException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P6jO\"@,Zb+0#");
      cSVPrinter0.println();
      cSVFormat0.withDelimiter('f');
      vector0.clone();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>(vector0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printComment(",Q5x;-$:#Wt2.Q!1O");
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("s", "P6jO\"@,Zb+0#");
      cSVPrinter0.print(sQLTransactionRollbackException0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('`');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('`');
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar('S');
      cSVFormat3.withRecordSeparator("");
      CSVFormat cSVFormat5 = cSVFormat0.withQuoteChar('3');
      cSVFormat4.withDelimiter('`');
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat5.print(charBuffer0);
      Object object0 = new Object();
      cSVPrinter0.flush();
      String string0 = "&lBCf";
      StringReader stringReader0 = new StringReader("&lBCf");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("R[", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5810);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('w');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("out");
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringWriter0);
      Object[] objectArray0 = new Object[9];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) "out";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      objectArray0[8] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      Class<BufferedWriter> class0 = BufferedWriter.class;
      ServiceLoader<BufferedWriter> serviceLoader0 = ServiceLoader.load(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('`');
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar('`');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2233);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object object0 = new Object();
      cSVFormat2.withEscape('+');
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteChar('`');
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('B');
      cSVFormat5.print(charArrayWriter0);
      Object object1 = new Object();
      cSVPrinter0.flush();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      CSVPrinter cSVPrinter2 = cSVFormat3.print(charBuffer0);
      cSVPrinter2.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      File file0 = MockFile.createTempFile("Qrc,CQL5X6z[", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('S');
      mockPrintWriter0.println(0.0F);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat3.withQuoteChar('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) file0;
      cSVPrinter0.flush();
      objectArray0[1] = (Object) cSVPrinter0;
      LinkedHashSet<MockPrintStream> linkedHashSet0 = new LinkedHashSet<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      mockPrintWriter0.println((-230.903));
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) mockPrintWriter0;
      cSVFormat1.print(mockPrintWriter0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter1.flush();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('`');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('`');
      cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat3.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2233);
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('<');
      charArrayWriter0.write(2233);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat4;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      StringReader stringReader0 = new StringReader("");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      cSVPrinter0.print(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream1.append('^');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream1);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('^');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = null;
      File file0 = MockFile.createTempFile("Qrc,CQL5X6z[", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('S');
      mockPrintWriter0.println(0.0F);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('k');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat3.withQuoteChar('k');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) file0;
      cSVPrinter0.flush();
      objectArray0[1] = (Object) cSVPrinter0;
      LinkedHashSet<MockPrintStream> linkedHashSet0 = new LinkedHashSet<MockPrintStream>();
      TreeSet<MockPrintStream> treeSet0 = new TreeSet<MockPrintStream>(linkedHashSet0);
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      mockPrintWriter0.println((-230.903));
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) mockPrintWriter0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withQuoteChar('`');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      cSVFormat1.withEscape('<');
      charArrayWriter0.write(0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object[] objectArray0 = new Object[1];
      cSVFormat0.withIgnoreEmptyLines(false);
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('`');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('`');
      cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat3.withRecordSeparator("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2233);
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('<');
      charArrayWriter0.write(2233);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(charArrayWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat4;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('U');
      charArrayWriter0.flush();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('[');
      Character character0 = Character.valueOf('[');
      cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVFormat2.withEscape('[');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }
}
