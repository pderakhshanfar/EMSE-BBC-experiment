/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 21:03:21 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 24;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 24);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0);
      pipedOutputStream0.close();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      cSVPrinter0.print(pipedOutputStream0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('r');
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 13);
      CSVParser cSVParser0 = cSVFormat1.parse(pushbackReader0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(charArrayWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) pipedReader0;
      objectArray0[3] = (Object) cSVParser0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) pipedReader0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) cSVParser0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      cSVFormat1.withCommentStart('u');
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "k.{\r\n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('E');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("k\r");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter(31);
      StringWriter stringWriter1 = stringWriter0.append('v');
      stringWriter1.getBuffer();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "@Mh*aLq%(Q", 490, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLClientInfoException1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) sQLClientInfoException0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      StringWriter stringWriter0 = new StringWriter(31);
      StringWriter stringWriter1 = stringWriter0.append('v');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      charArrayWriter0.append((CharSequence) stringBuffer0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "@Mh*aLq%(Q", 490, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLClientInfoException1);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0,PXp,hODy+");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "1k&Z";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1k&Z");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
      PipedReader pipedReader0 = new PipedReader(48);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      pipedReader0.markSupported();
      cSVFormat0.withRecordSeparator("1k&Z");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1k&Z");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.print(cSVParser0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "1k&Z";
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat0.withRecordSeparator("fB}Tr!=wsY3P +");
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string0);
      cSVPrinter0.print(sQLTimeoutException0);
      cSVPrinter0.printRecord(objectArray0);
      char char0 = 'd';
      CSVFormat.newFormat(char0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("kp\n");
      Object[] objectArray0 = new Object[5];
      cSVFormat1.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('U');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVFormat1.toString();
      cSVPrinter0.printComment("k\r[");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("k\r\n");
      Object[] objectArray0 = new Object[9];
      cSVFormat1.format(objectArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\"k\r\n\",\"k\r\n\",\"k\r\n\",\"k\r\n\",\"k\r\n\",\"k\r\n\",\"k\r\n\",\"k\r\n\",\"k\r\n\"", "\"k\r\n\",\"k\r\n\",\"k\r\n\",\"k\r\n\",\"k\r\n\",\"k\r\n\",\"k\r\n\",\"k\r\n\",\"k\r\n\"");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \"k\r
         // \",\"k\r
         // \",\"k\r
         // \",\"k\r
         // \",\"k\r
         // \",\"k\r
         // \",\"k\r
         // \",\"k\r
         // \",\"k\r
         // \"
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}%h{3gzM\"rS~l1B*B?f");
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '[';
      charArray0[2] = 'O';
      charArray0[3] = 'k';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
      cSVPrinter0.printComment("}%h{3gzM\"rS~l1B*B?f");
      Object[] objectArray0 = new Object[9];
      cSVFormat1.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat0);
      Byte byte0 = new Byte((byte)113);
      cSVPrinter0.print(byte0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      PriorityQueue<PipedWriter> priorityQueue0 = new PriorityQueue<PipedWriter>();
      priorityQueue0.add(pipedWriter0);
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = 'A';
      charArray0[2] = '`';
      charArray0[3] = '^';
      charArray0[4] = 'Q';
      charArray0[5] = 'h';
      charArray0[6] = 'Y';
      charArray0[7] = 'd';
      charArray0[8] = 'w';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.put(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      Object[] objectArray0 = new Object[3];
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \"");
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat.newFormat('X');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Na2(Q6j]w?0bJ";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('}');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      cSVFormat0.withRecordSeparator('\'');
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('=');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(printStream0);
      cSVPrinter0.getOut();
      mockPrintStream0.print(':');
      Float float0 = new Float(2589.3439546);
      cSVPrinter0.print(float0);
      cSVPrinter0.printRecords((Object[]) stringArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('(');
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('(');
      cSVFormat2.toString();
      try { 
        cSVPrinter0.printComment("U");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("9OQXeK&a>`+{");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter1.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" 7cHhD");
      Object[] objectArray0 = new Object[4];
      cSVFormat1.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Class<MockFileReader> class0 = MockFileReader.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<MockFileReader> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      cSVPrinter0.printRecords((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("4u,");
      Object[] objectArray0 = new Object[4];
      cSVFormat1.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray1 = new Object[9];
      Character character0 = new Character('');
      cSVFormat0.withCommentStart(character0);
      objectArray1[0] = (Object) "4u,";
      objectArray1[1] = (Object) cSVFormat1;
      objectArray1[2] = (Object) charArrayWriter0;
      objectArray1[3] = (Object) cSVPrinter0;
      objectArray1[4] = (Object) "4u,";
      Object object0 = new Object();
      objectArray1[5] = object0;
      objectArray1[6] = (Object) "4u,";
      objectArray1[7] = (Object) "4u,\t4u,\t4u,\t4u,";
      objectArray1[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('=');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVFormat0.toString();
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter1.printComment("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(";M7d");
      Object[] objectArray0 = new Object[3];
      cSVFormat2.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PriorityQueue<PipedWriter> priorityQueue0 = new PriorityQueue<PipedWriter>();
      PipedWriter pipedWriter0 = new PipedWriter();
      priorityQueue0.add(pipedWriter0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      cSVFormat1.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>(hashSet0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) treeSet0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      cSVFormat1.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      PriorityQueue<PipedWriter> priorityQueue0 = new PriorityQueue<PipedWriter>();
      PipedWriter pipedWriter0 = new PipedWriter();
      priorityQueue0.add(pipedWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('-');
      String string0 = ",";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(",");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.format(objectArray0);
      Integer integer0 = new Integer((-1));
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Character.valueOf('%');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('f');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('|');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("");
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat5 = cSVFormat4.withQuotePolicy(quote0);
      CSVFormat cSVFormat6 = cSVFormat5.withNullString("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat6.print(charArrayWriter0);
      cSVPrinter0.print(cSVFormat6);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('3');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^Q");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.print(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('3');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("!");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.print(locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(110);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('p');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      PriorityQueue<PipedWriter> priorityQueue0 = new PriorityQueue<PipedWriter>();
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('s');
      StringWriter stringWriter1 = new StringWriter(110);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      cSVFormat3.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object object0 = new Object();
      cSVFormat0.toString();
      Object object1 = new Object();
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat2);
      cSVPrinter2.print(object1);
      cSVPrinter2.printComment("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[12];
      cSVFormat1.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        cSVPrinter0.print(integer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('3');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("U");
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter0.getOut();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("U", "U");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // U
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[12];
      cSVFormat1.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray1 = new Object[5];
      Object object1 = new Object();
      objectArray1[0] = object1;
      objectArray1[1] = (Object) "\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"";
      objectArray1[2] = (Object) cSVFormat0;
      objectArray1[3] = (Object) cSVPrinter0;
      objectArray1[4] = (Object) cSVPrinter0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(23);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('r');
      Character character0 = new Character('V');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      cSVPrinter0.print(objectArray0[0]);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[12];
      cSVFormat1.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"");
      cSVFormat0.toString();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RwY%<LFuqyfW");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) mockPrintStream1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream1);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(objectArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withCommentStart('P');
      PriorityQueue<PipedWriter> priorityQueue0 = new PriorityQueue<PipedWriter>();
      PipedWriter pipedWriter0 = new PipedWriter();
      priorityQueue0.add(pipedWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      cSVPrinter0.flush();
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('3');
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      Object object1 = new Object();
      CharBuffer charBuffer0 = CharBuffer.allocate(41);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      cSVFormat1.print(charBuffer0);
      // Undeclared exception!
      try { 
        cSVPrinter0.print("");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      StringWriter stringWriter0 = new StringWriter(90);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuffer0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('T');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      PriorityQueue<PipedWriter> priorityQueue0 = new PriorityQueue<PipedWriter>();
      cSVFormat0.withQuoteChar('T');
      StringWriter stringWriter0 = new StringWriter(3);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object object0 = new Object();
      Object object1 = new Object();
      Character character0 = Character.valueOf('T');
      cSVFormat2.withEscape(character0);
      cSVFormat1.toString();
      Object object2 = new Object();
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter2.print(object0);
      cSVPrinter1.getOut();
      cSVPrinter0.printComment("Delimiter=<,> QuoteChar=<\"> CommentStart=<T> RecordSeparator=<\r\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(23);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('l');
      Object[] objectArray0 = new Object[7];
      Character character0 = new Character('l');
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("\u0085");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      cSVPrinter1.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('H');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      Character character0 = Character.valueOf('+');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charArrayWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('T');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      PriorityQueue<PipedWriter> priorityQueue0 = new PriorityQueue<PipedWriter>();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat2);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      cSVPrinter2.print(sequenceInputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) cSVPrinter1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) cSVPrinter0;
      objectArray0[6] = (Object) "NullString=<";
      objectArray0[7] = (Object) cSVPrinter1;
      objectArray0[8] = (Object) priorityQueue0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('l');
      StringWriter stringWriter0 = new StringWriter(35);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.println();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(35);
      charArrayWriter0.write("");
      cSVFormat1.withRecordSeparator('l');
      charArrayWriter0.flush();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("-^ehlv,p!");
      charArrayWriter0.reset();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer0, cSVFormat2);
      Object object1 = new Object();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('C');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('C');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat0.withRecordSeparator('K');
      cSVFormat3.toString();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '&';
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Character character1 = new Character('&');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('@');
      Object object0 = new Object();
      Character character2 = Character.valueOf('V');
      Character.valueOf('Z');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVFormat4.withQuoteChar((Character) '&');
      Object object1 = new Object();
      CSVFormat cSVFormat5 = cSVFormat3.withQuoteChar('A');
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      Object object2 = new Object();
      Object object3 = new Object();
      cSVFormat5.toString();
      Object object4 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object2;
      objectArray0[1] = (Object) character2;
      objectArray0[2] = (Object) "Delimiter=<,> Escape=<@> QuoteChar=<A> CommentStart=<&> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) character2;
      objectArray0[5] = object4;
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(23);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('l');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('%');
      cSVFormat1.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\u0085");
      cSVPrinter1.print(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '&';
      charArray0[2] = '<';
      charArray0[3] = '{';
      Character character0 = Character.valueOf('p');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withQuoteChar(character0);
      Object object0 = new Object();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      Object object1 = new Object();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      try { 
        cSVPrinter0.print(sQLNonTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(110);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');
      Object object0 = new Object();
      Character character0 = Character.valueOf('C');
      Character character1 = Character.valueOf('C');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character1);
      Object object1 = new Object();
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('C');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) character0;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      cSVFormat2.toString();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) stringWriter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("Delimiter=<\t> Escape=<C> QuoteChar=<C> RecordSeparator=<\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '&';
      charArray0[2] = '<';
      charArray0[1] = '{';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('{');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Byte byte0 = new Byte((byte)99);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(byte0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat1.withEscape('?');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullString=<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(110);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullString=<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "NullString=<";
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter1.print(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringWriter0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = '\"';
      charArray0[2] = '<';
      charArray0[3] = '{';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('R');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) '{';
      objectArray0[6] = (Object) '{';
      objectArray0[7] = (Object) null;
      objectArray0[4] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('<');
      StringWriter stringWriter0 = new StringWriter(35);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVFormat0.format(objectArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      cSVPrinter0.print((Object) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      charArray0[6] = '<';
      charArray0[7] = 'K';
      stringWriter0.write(charArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = '\"';
      charArray0[2] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('R');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) linkedList0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('<');
      StringWriter stringWriter0 = new StringWriter(35);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVFormat0.format(objectArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.println();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(35);
      charArrayWriter0.write("");
      charArrayWriter0.flush();
      cSVPrinter0.printRecords(objectArray0);
      String string0 = "\\-^ehlv,p!";
      cSVPrinter0.printComment("-^ehlv,p!");
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer0, cSVFormat2);
      cSVPrinter1.printComment("j%9|ab>:9A");
      cSVPrinter1.flush();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      cSVFormat1.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      PriorityQueue<PipedWriter> priorityQueue0 = new PriorityQueue<PipedWriter>();
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVPrinter0.flush();
      priorityQueue0.add(pipedWriter0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = '\"';
      charArray0[2] = '<';
      charArray0[3] = '{';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('R');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) character0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = '&';
      charArray0[2] = '<';
      charArray0[3] = '{';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'R';
      objectArray0[1] = (Object) 'R';
      objectArray0[2] = (Object) 'R';
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) quote0;
      objectArray0[5] = (Object) 'R';
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) 'R';
      cSVFormat1.format(objectArray0);
      int int0 = (-1773);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1773));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1773
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) stringWriter0;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('\'');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same (''')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('w');
      cSVFormat0.withCommentStart(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "\r\n";
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) "\r\n";
      cSVFormat1.format(objectArray0);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) bufferedOutputStream0;
      mockPrintStream0.println("");
      objectArray0[2] = (Object) byteArrayOutputStream0;
      bufferedOutputStream0.write((-920));
      cSVPrinter0.printRecords(objectArray0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-920));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CommentStart=<");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      char char0 = 'k';
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat1.validate();
      mockPrintWriter0.println();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "CommentStart=<";
      Object object2 = new Object();
      objectArray0[1] = object2;
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter1.printRecords(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[23];
      objectArray0[0] = (Object) 'R';
      objectArray0[2] = (Object) 'R';
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) quote0;
      objectArray0[5] = (Object) 'R';
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) 'R';
      cSVFormat1.format(objectArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "java.lang.Character@0000000002\t\tjava.lang.Character@0000000003\tjava.lang.Object@0000000004\torg.apache.commons.csv.Quote@0000000005\tjava.lang.Character@0000000006\torg.apache.commons.csv.CSVFormat@0000000007\tjava.lang.Character@0000000008");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      cSVFormat1.validate();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(240);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) charBuffer0, (-2716), (-1773));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e3");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVFormat0.withRecordSeparator('k');
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.validate();
      objectArray0[6] = (Object) cSVPrinter0;
      mockPrintWriter0.println();
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(48).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData1).getColumnCount();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData1).when(resultSet1).getMetaData();
      doReturn(false).when(resultSet1).next();
      cSVPrinter0.printRecords(resultSet1);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Stack<Integer> stack0 = new Stack<Integer>();
      int int0 = 0;
      Integer integer0 = Integer.valueOf(int0);
      // Undeclared exception!
      try { 
        stack0.set(int0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(110);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('?');
      String string0 = "NullString=<";
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullString=<");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "NullString=<";
      cSVPrinter0.flush();
      cSVPrinter0.flush();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "NullString=<");
      CSVPrinter cSVPrinter1 = new CSVPrinter(printStream0, cSVFormat2);
      cSVPrinter1.printRecords(objectArray0);
      TreeSet<PipedWriter> treeSet0 = new TreeSet<PipedWriter>();
      treeSet0.pollFirst();
      PriorityQueue<PipedWriter> priorityQueue0 = new PriorityQueue<PipedWriter>((SortedSet<? extends PipedWriter>) treeSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        priorityQueue0.add((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char char0 = '<';
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('<');
      StringWriter stringWriter0 = new StringWriter(35);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVFormat0.format(objectArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.println();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withRecordSeparator("out");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('q');
      cSVFormat0.withEscape(character0);
      StringWriter stringWriter0 = new StringWriter(0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('i');
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> CommentStart=<i> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'i';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      charArray0[5] = 'i';
      charArray0[6] = 'q';
      charArray0[7] = 'i';
      charArray0[8] = '=';
      stringWriter0.write(charArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Delimiter=<,> QuoteChar=<\"> CommentStart=<i> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", (-615));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Delimiter=<,> QuoteChar=<\"> CommentStart=<i> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLRecoverableException0);
      cSVPrinter0.print(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('e');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('e');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('1');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat3);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) stringBuffer0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVFormat3.withDelimiter('K');
      cSVFormat1.withCommentStart('^');
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) stringBuffer0;
      cSVFormat0.toString();
      objectArray0[7] = (Object) cSVPrinter0;
      objectArray0[8] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = 'K';
      charArray0[4] = 'e';
      charArray0[5] = 'K';
      charArray0[6] = 'K';
      stringWriter0.write(charArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.close();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = "TjhjAR<BOl*'*`*";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("TjhjAR<BOl*'*`*");
      MockFileWriter mockFileWriter0 = new MockFileWriter("TjhjAR<BOl*'*`*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      cSVFormat1.print(mockPrintWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      Iterable<SQLInvalidAuthorizationSpecException> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray1 = new Object[3];
      cSVFormat1.validate();
      char[] charArray0 = new char[4];
      cSVPrinter0.printRecords(objectArray1);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "java.lang.String@0000000004'org.apache.commons.csv.CSVFormat@0000000001'java.lang.String@0000000004'java.io.StringWriter@0000000005'java.lang.String@0000000004'java.lang.String@0000000004'org.apache.commons.csv.CSVFormat@0000000002'org.apache.commons.csv.CSVFormat@0000000001", (-1439), (-1439));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) bufferedOutputStream0;
      mockPrintStream0.println("");
      objectArray0[2] = (Object) byteArrayOutputStream0;
      bufferedOutputStream0.write((-920));
      objectArray0[3] = (Object) byteArrayOutputStream0;
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat0.withNullString("Escape=<");
      cSVPrinter0.printComment("");
      cSVPrinter0.printRecords(objectArray0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      mockPrintStream0.print((long) (-920));
      cSVPrinter0.flush();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.flush();
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<PipedWriter> treeSet0 = new TreeSet<PipedWriter>();
      PriorityQueue<PipedWriter> priorityQueue0 = new PriorityQueue<PipedWriter>((SortedSet<? extends PipedWriter>) treeSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      priorityQueue0.add(pipedWriter0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter1, 2);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('3');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      bufferedWriter0.close();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('3');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) appendable0;
      charArrayWriter0.write("");
      charArrayWriter0.flush();
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('=');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('1');
      cSVFormat3.withCommentStart('W');
      cSVFormat1.toString();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(110);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');
      Object object0 = new Object();
      Character.valueOf('C');
      Character character0 = Character.valueOf('C');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      Object object1 = new Object();
      cSVFormat2.withEscape('3');
      String string0 = "MgqK+?\\uD";
      CSVFormat cSVFormat3 = cSVFormat1.withNullString(string0);
      CSVFormat cSVFormat4 = cSVFormat1.withQuoteChar('6');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat4);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("NullString=<", "NullString=<");
      DataTruncation dataTruncation0 = new DataTruncation(110, true, false, 110, (-2196), sQLTransactionRollbackException0);
      cSVPrinter1.print(dataTruncation0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) dataTruncation0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter1, 2);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('3');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('3');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) appendable0;
      charArrayWriter0.write("");
      charArrayWriter0.flush();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment((String) null);
      Vector<FilterOutputStream> vector0 = new Vector<FilterOutputStream>(57);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      vector0.add((FilterOutputStream) bufferedOutputStream0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(bufferedWriter0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.println();
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('e');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('e');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('1');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat3);
      cSVFormat3.print(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) stringBuffer0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      StringWriter stringWriter1 = new StringWriter(1237);
      stringWriter1.getBuffer();
      stringWriter1.append((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringWriter0);
      PriorityQueue<FilterOutputStream> priorityQueue0 = new PriorityQueue<FilterOutputStream>();
      cSVPrinter1.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(110);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('C');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('C');
      cSVFormat2.withCommentStart('C');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "NullString=<";
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringWriter0, cSVFormat1);
      PriorityQueue<PipedWriter> priorityQueue0 = new PriorityQueue<PipedWriter>();
      PipedReader pipedReader0 = new PipedReader(110);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      priorityQueue0.add(pipedWriter0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.printComment("NullString=<");
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e3");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVFormat0.withRecordSeparator('k');
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.validate();
      objectArray0[6] = (Object) cSVPrinter0;
      mockPrintWriter0.println();
      objectArray0[7] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'k';
      longArray0[1] = (long) 122;
      longArray0[2] = (long) 122;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ofct&", "e3", sQLTimeoutException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ofct&", "org.apache.commons.csv.CSVPrinter$1", 122, longArray0, sQLTransactionRollbackException0);
      arrayDeque0.add(batchUpdateException0);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>(arrayDeque0);
      cSVPrinter0.printRecord((Iterable<?>) vector0);
      cSVPrinter0.getOut();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) vector0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("TjhjAR<BOl*'*`*");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "TjhjAR<BOl*'*`*";
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.csv.CSVFormat@0000000001,java.lang.String@0000000003,org.apache.commons.csv.CSVFormat@0000000001,java.lang.Object@0000000004,org.apache.commons.csv.CSVFormat@0000000005");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      cSVFormat1.validate();
      StringWriter stringWriter0 = new StringWriter(483);
      // Undeclared exception!
      try { 
        stringWriter0.write((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("TjhjAR<BOl*'*`*");
      MockFileWriter mockFileWriter0 = new MockFileWriter("TjhjAR<BOl*'*`*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Class<MockPrintStream> class0 = MockPrintStream.class;
      ServiceLoader<MockPrintStream> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('q');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVPrinter0.getOut();
      Character character0 = new Character(';');
      cSVFormat0.withCommentStart(character0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('<');
      StringWriter stringWriter0 = new StringWriter(35);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 48);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      Class<MockPrintStream> class0 = MockPrintStream.class;
      ServiceLoader<MockPrintStream> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Stack<OutputStreamWriter> stack0 = new Stack<OutputStreamWriter>();
      Stack<OutputStreamWriter> stack1 = new Stack<OutputStreamWriter>();
      stack1.stream();
      cSVPrinter0.printRecord((Iterable<?>) serviceLoader0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 35, 2430);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      cSVPrinter1.print(pushbackInputStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(23);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('l');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printComment("The escape character cannot be a line break");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      Character character0 = Character.valueOf('l');
      cSVFormat0.withQuoteChar(character0);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "The escape character cannot be a line break";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('l');
      StringWriter stringWriter0 = new StringWriter(35);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVFormat0.format(objectArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      cSVPrinter0.print((Object) null);
      cSVPrinter0.println();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(35);
      charArrayWriter0.write("");
      cSVFormat1.withRecordSeparator('l');
      charArrayWriter0.flush();
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("-^ehlv,p!");
      charArrayWriter0.reset();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer0, cSVFormat2);
      CSVPrinter cSVPrinter2 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      Character character0 = new Character('(');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter3 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      CSVPrinter cSVPrinter4 = new CSVPrinter(stringWriter0, cSVFormat3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVPrinter4.printComment("-^ehlv,p!");
      cSVPrinter3.getOut();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      Quote quote1 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) quote0;
      cSVFormat0.format(objectArray0);
      int int0 = (-1773);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1773));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1773
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter1, 2);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('3');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('3');
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat3);
      Appendable appendable0 = cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) appendable0;
      charArrayWriter0.write("");
      charArrayWriter0.flush();
      cSVPrinter0.printRecords(objectArray0);
      String string0 = null;
      cSVPrinter0.printComment((String) null);
      LinkedHashSet<MockPrintWriter> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<MockPrintWriter>(111, (-1146.486F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1146.486
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray1 = new Object[3];
      cSVFormat1.validate();
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      stringWriter0.write(charArray0);
      objectArray1[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) stringWriter0;
      cSVPrinter0.printRecord(objectArray1);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) bufferedOutputStream0;
      mockPrintStream0.println("");
      objectArray0[2] = (Object) byteArrayOutputStream0;
      bufferedOutputStream0.write((-920));
      objectArray0[3] = (Object) byteArrayOutputStream0;
      cSVPrinter0.printRecord(objectArray0);
      cSVFormat0.withNullString("Escape=<");
      cSVPrinter0.printComment("");
      cSVPrinter0.printRecords(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      mockPrintStream0.print((long) (-920));
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('e');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('e');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('1');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat3);
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) stringBuffer0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      cSVFormat3.withDelimiter('K');
      cSVFormat1.withCommentStart('^');
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) stringBuffer0;
      cSVFormat0.toString();
      objectArray0[7] = (Object) cSVPrinter0;
      objectArray0[8] = (Object) cSVFormat2;
      cSVPrinter0.printRecords(objectArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = 'K';
      charArray0[4] = 'e';
      charArray0[5] = 'K';
      charArray0[6] = 'K';
      stringWriter0.write(charArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.close();
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = "edMQ jy}bo)'2yV|?Q";
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("edMQ jy}bo)'2yV|?Q");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\"');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter1);
      stringWriter0.write(3);
      Collection<DataOutputStream> collection0 = null;
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      stringWriter1.append((CharSequence) "edMQ jy}bo)'2yV|?Q");
      LinkedHashSet<DataOutputStream> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<DataOutputStream>((Collection<? extends DataOutputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y#/(");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "y#/(", 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat0);
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = '&';
      charArray0[2] = '<';
      charArray0[3] = '{';
      charArray0[4] = '%';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('&');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
