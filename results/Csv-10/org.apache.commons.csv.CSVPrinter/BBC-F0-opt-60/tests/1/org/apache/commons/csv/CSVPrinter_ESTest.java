/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:04:56 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLClientInfoException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.TreeSet;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("The comment start and theescape character cannot be the same ('");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('b');
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = 't';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = '*';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("The comment start and theescape character cannot be the same ('");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('x');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('x');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('0');
      String string0 = "org.apache.commons.csv.CSVParser$1";
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("org.apache.commons.csv.CSVParser$1");
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat4.withQuotePolicy(quote0);
      PipedReader pipedReader0 = new PipedReader(97);
      CSVParser cSVParser0 = cSVFormat3.parse(pipedReader0);
      CharBuffer charBuffer0 = CharBuffer.allocate(97);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.commons.csv.CSVParser$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0W");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("0W");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream1);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0W");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[10];
      CSVPrinter cSVPrinter0 = cSVFormat1.print(outputStreamWriter0);
      cSVFormat1.print(outputStreamWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
      Character character0 = new Character('O');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('O');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Quote quote1 = Quote.NON_NUMERIC;
      cSVFormat2.withQuotePolicy(quote1);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer1);
      cSVPrinter0.printComment("eHCLt");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat4;
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(" EmptyLines:ignored");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat3;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
      Character character0 = new Character('O');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentStart(character0);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Quote quote1 = Quote.NON_NUMERIC;
      cSVFormat2.withQuotePolicy(quote1);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printComment("eHCLt");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("{");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("{");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("^.'je");
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("++b2%K? B)fV P^l'");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("++b2%K? B)fV P^l'");
      Quote quote1 = Quote.NONE;
      cSVFormat0.withQuotePolicy(quote1);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString((String) null);
      Object object0 = new Object();
      cSVFormat4.print(mockFileWriter0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat4);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ast.artline ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("ast.artline ");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withNullString("ast.artline ");
      Character character0 = new Character('Y');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withSkipHeaderRecord(false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
      Character character0 = new Character('O');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar('O');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Quote quote1 = Quote.NON_NUMERIC;
      cSVFormat2.withQuotePolicy(quote1);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer1);
      cSVPrinter0.printComment("eHCLt");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat4;
      charBuffer0.compact();
      objectArray0[2] = (Object) 'O';
      objectArray0[3] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.print(charBuffer0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLTransactionRollbackException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('1');
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('1');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('1');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat1.withQuoteChar('1');
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat4;
      objectArray0[8] = (Object) cSVFormat2;
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.csv.CSVPrinter", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat3);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = object0;
      Object object1 = new Object();
      objectArray1[1] = object1;
      objectArray1[2] = (Object) mockPrintWriter0;
      objectArray1[3] = (Object) printWriter0;
      Object object2 = new Object();
      objectArray1[4] = object2;
      objectArray1[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray1);
      Object object3 = new Object();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(startline ");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("(startline ");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream1);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("(startline ");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[10];
      CSVPrinter cSVPrinter0 = cSVFormat1.print(outputStreamWriter0);
      cSVFormat1.print(outputStreamWriter0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8p($Mm\tYUex(+ ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("8p($Mm\tYUex(+ ");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8p($Mm\tYUex(+ ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.print(object0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) mockFileWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockFileWriter0;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) mockFileWriter0;
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";++b2%K? B)fV P^l'");
      MockFileWriter mockFileWriter0 = new MockFileWriter(")SB))?&e");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withNullString(";++b2%K? B)fV P^l'");
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.printComment(";++b2%K? B)fV P^l'");
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object object0 = new Object();
      cSVPrinter0.println();
      int int0 = 29;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("n)n+7k", "z=#-:Q;:_3", 29);
      cSVPrinter0.print(cSVFormat0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLTransientConnectionException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) charBuffer1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) charBuffer1;
      objectArray0[6] = (Object) charBuffer1;
      Object[] objectArray1 = new Object[8];
      objectArray1[1] = (Object) charBuffer0;
      objectArray1[3] = (Object) charBuffer0;
      objectArray1[5] = (Object) charBuffer1;
      objectArray1[6] = (Object) charBuffer0;
      objectArray1[7] = (Object) charBuffer1;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(charBuffer2);
      // Undeclared exception!
      try { 
        cSVPrinter0.print(charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Object object0 = new Object();
      cSVFormat0.withCommentStart('1');
      stringWriter0.append('1');
      Character character0 = new Character('c');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[3];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "yu|";
      cSVPrinter1.printRecord(objectArray0);
      StringReader stringReader0 = new StringReader("");
      cSVPrinter0.print(stringReader0);
      cSVPrinter0.printComment("Unexpected Quote value: ");
      cSVPrinter1.close();
      cSVPrinter1.close();
      cSVPrinter0.printComment("yu|");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('.');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(630);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) "org.apache.commons.csv.CSVPrinter$1";
      objectArray0[8] = object0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.getOut();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("out", sQLTransactionRollbackException0);
      cSVPrinter0.print(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+Tb2%K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("+Tb2%K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = object0;
      cSVPrinter0.printRecord(objectArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("+Tb2%K? B)fV P^l'", "+Tb2%K? B)fV P^l'");
      cSVPrinter0.print(sQLSyntaxErrorException0);
      cSVPrinter0.printComment("B?\"#Vc`<j/e");
      cSVPrinter0.close();
      cSVPrinter0.close();
      cSVPrinter0.printComment("");
      try { 
        cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('d');
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("oS!}o;vP/p~`", "oS!}o;vP/p~`", 2970);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter2.print(sQLFeatureNotSupportedException0);
      cSVPrinter2.printComment("");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter2.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("++b2%K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("++b2%K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object object1 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = object0;
      cSVPrinter0.printRecord(objectArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("o*B/CNm~G~m[A}", "", 41);
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      cSVPrinter0.print(lineNumberReader0);
      cSVPrinter0.printComment("++b2%K? B)fV P^l'");
      cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
      LineNumberReader lineNumberReader1 = new LineNumberReader(pipedReader0, 48);
      cSVPrinter0.print(lineNumberReader1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "VB:l)U?+OTg";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("VB:l)U?+OTg");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("VB:l)U?+OTg");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) cSVFormat1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(objectArray0[1]);
      cSVPrinter0.printComment("VB:l)U?+OTg");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        outputStreamWriter0.write("VB:l)U?+OTg", 98, 1053);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A+b2K? B)fV P^l'");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("A+b2K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream1);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A+b2K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object object1 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = object0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print((Object) null);
      CSVPrinter cSVPrinter1 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      cSVPrinter1.printComment("A+b2K? B)fV P^l'");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter1.getOut();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";++b2%K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";++b2%K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = object0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(object0);
      cSVPrinter0.printComment(";++b2%K? B)fV P^l'");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(44).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter0.close();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('_');
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("org.apache.commons.csv.CSVPrinter$1");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat2);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) cSVPrinter0;
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[4] = object0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printComment("gvlE,x");
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = ";++b2%K? B)fV P^l'";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";++b2%K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";++b2%K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      outputStreamWriter0.append('o');
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = object0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.print(object0);
      cSVPrinter0.printComment("");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = ";++b2%K? B)fV P^l'";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";++b2%K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(";++b2%K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = object0;
      cSVPrinter0.printRecord(objectArray0);
      Object object2 = null;
      cSVPrinter0.print(object2);
      CSVPrinter cSVPrinter1 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      cSVPrinter1.printComment(string0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
      cSVPrinter1.close();
      cSVPrinter1.getOut();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
      cSVPrinter0.close();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`HVSB-)B=GIs6[)", "The header contains a duplicate entry: '", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Unexpected Token type: ", sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Unexpected Token type: ", sQLWarning0);
      cSVPrinter0.print(sQLTimeoutException0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) sQLWarning0;
      objectArray0[1] = (Object) "`HVSB-)B=GIs6[)";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) charBuffer1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) charBuffer1;
      objectArray0[6] = (Object) charBuffer1;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+Tb2%K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("+Tb2%K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecord(objectArray0);
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      cSVPrinter0.printRecord(objectArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, (-926));
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      cSVPrinter0.print(sQLFeatureNotSupportedException0);
      cSVPrinter0.printComment(";UoOpVKJgm3{Y");
      cSVPrinter1.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5XG50 U{A-b{3k^.fI6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("5XG50 U{A-b{3k^.fI6", "5XG50 U{A-b{3k^.fI6", (-926));
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      cSVPrinter2.print(mockFileOutputStream0);
      cSVPrinter2.printComment("5XG50 U{A-b{3k^.fI6");
      cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
      cSVPrinter1.getOut();
      cSVPrinter1.print(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      // Undeclared exception!
      try { 
        cSVPrinter0.println();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('d');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object object1 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(";UoOpVKJgm3{Y", ";UoOpVKJgm3{Y", (-926));
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVPrinter1.print(cSVPrinter0);
      cSVPrinter0.printComment(";UoOpVKJgm3{Y");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      Object[] objectArray0 = new Object[1];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-90);
      bufferedOutputStream0.write(byteArray0);
      cSVPrinter0.printRecord(objectArray0);
      LinkedList<MockFileOutputStream> linkedList0 = new LinkedList<MockFileOutputStream>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ec[xW5nvdy?=S^");
      linkedList0.add(mockFileOutputStream0);
      PriorityQueue<MockFileOutputStream> priorityQueue0 = new PriorityQueue<MockFileOutputStream>(linkedList0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("++b2%K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("++b2%K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object object1 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = object0;
      cSVPrinter0.printRecord(objectArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("++b2%K? B)fV P^l'", "++b2%K? B)fV P^l'", 41);
      cSVPrinter0.print(sQLFeatureNotSupportedException0);
      cSVPrinter0.printComment("++b2%K? B)fV P^l'");
      cSVPrinter0.printRecords((Iterable<?>) sQLFeatureNotSupportedException0);
      cSVPrinter0.print(objectArray0[0]);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.withRecordSeparator('o');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*5NI7Zxuo");
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart('Y');
      MockFileWriter mockFileWriter1 = new MockFileWriter(file0);
      mockFileWriter1.close();
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
      String string0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter1.printComment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('1');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('7');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('7');
      Object object0 = new Object();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, charsetEncoder0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(outputStreamWriter0);
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVPrinter");
      Object[] objectArray0 = new Object[7];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) cSVFormat3;
      Object object3 = new Object();
      objectArray0[2] = object3;
      objectArray0[3] = object1;
      objectArray0[4] = (Object) charsetEncoder0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) charset0;
      mockPrintWriter0.printf("The escape character cannot be a line break", objectArray0);
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter1 = cSVFormat4.print(outputStreamWriter0);
      cSVPrinter1.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("8c*`T-7ZUH7xq_H['");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter1.getOut();
      // Undeclared exception!
      try { 
        cSVPrinter1.print(cSVPrinter0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('%');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("*5NI7Zxuo");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      Object object0 = new Object();
      Object object1 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringWriter0);
      Object[] objectArray0 = new Object[1];
      cSVPrinter0.println();
      CSVPrinter cSVPrinter2 = cSVFormat1.print(mockFileWriter0);
      cSVPrinter2.printRecord(objectArray0);
      Short short0 = new Short((short)901);
      cSVPrinter1.print(short0);
      cSVPrinter1.printComment("");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      Short short0 = new Short((short)48);
      cSVPrinter0.print(short0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      TreeSet<MockFileWriter> treeSet0 = new TreeSet<MockFileWriter>();
      PriorityQueue<MockFileWriter> priorityQueue0 = new PriorityQueue<MockFileWriter>((SortedSet<? extends MockFileWriter>) treeSet0);
      priorityQueue0.parallelStream();
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.withRecordSeparator('o');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*5NI7Zxuo");
      mockPrintWriter0.print((-1167.14F));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[18];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.print(mockPrintWriter0);
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockFileWriter0;
      objectArray0[8] = (Object) cSVPrinter0;
      mockPrintWriter0.printf("MY", objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.close();
      cSVPrinter0.println();
      cSVPrinter1.flush();
      cSVPrinter1.close();
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      cSVPrinter1.close();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.withCommentStart('1');
      cSVFormat0.withDelimiter('7');
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "*x#)aeRQ$pr";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(bufferedOutputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintWriter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("++b2%K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("++b2%K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object object1 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = object0;
      cSVPrinter0.printRecord(objectArray0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("vAii]`eG3Fu1|9M");
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      cSVFormat2.withDelimiter('W');
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('7');
      Character character0 = new Character('7');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart(character0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@4,(woo4");
      mockPrintWriter0.print((-1403.0F));
      Object object0 = new Object();
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('A');
      CSVPrinter cSVPrinter0 = cSVFormat5.print(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.withRecordSeparator('o');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*5NI7Zxuo");
      mockPrintWriter0.print((-1167.14F));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat0.print(mockPrintWriter0);
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockFileWriter0;
      objectArray0[8] = (Object) cSVPrinter0;
      mockPrintWriter0.printf("W1", objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.close();
      cSVPrinter0.println();
      cSVPrinter1.flush();
      cSVPrinter1.close();
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      cSVPrinter1.close();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.withRecordSeparator('o');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*5NI7Zxuo");
      mockPrintWriter0.print((-1167.14F));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[18];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat0;
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockPrintWriter0);
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockFileWriter0;
      objectArray0[8] = (Object) cSVPrinter0;
      mockPrintWriter0.printf("MY", objectArray0);
      CSVPrinter cSVPrinter2 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter2.printRecord(objectArray0);
      cSVPrinter2.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter1.println();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart('1');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("Unexpected Quote value: ");
      cSVFormat2.withNullString("Unexpected Quote value: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpected Quote value: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) quote0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(printWriter0, cSVFormat3);
      Object object1 = new Object();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 41);
      cSVPrinter0.print(objectArray0[0]);
      cSVPrinter0.printComment("|LU, W.Dwo");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('1');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("Unexpected Quote value: ");
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("Unexpected Quote value: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unexpected Quote value: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) quote0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.printRecord(objectArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (String) null, 41);
      cSVPrinter0.print(cSVFormat1);
      cSVPrinter0.printComment("`zE");
      CSVPrinter cSVPrinter1 = cSVFormat3.print(mockPrintWriter0);
      cSVPrinter1.getOut();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("&aw_h", "ZtKUgZI,Z", sQLFeatureNotSupportedException0);
      cSVPrinter0.print(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("++b2%K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("++b2%K? B)fV P^l'");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("++b2%K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat2);
      Object object0 = new Object();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      Object object1 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = object0;
      cSVPrinter0.printRecord(objectArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("++b2%K? B)fV P^l'", "++b2%K? B)fV P^l'", 41);
      cSVPrinter0.print(sQLFeatureNotSupportedException0);
      cSVPrinter0.printComment("++b2%K? B)fV P^l'");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(41).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVFormat0.withCommentStart('Y');
      mockFileWriter0.close();
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockFileWriter0);
      try { 
        cSVPrinter1.printRecord((Iterable<?>) arrayList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.print(1.0F);
      Object object0 = new Object();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(mockFileWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVPrinter1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.close();
      try { 
        cSVPrinter1.println();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      mockFileWriter0.close();
      String string0 = "+Hu]!+9GRg8<";
      cSVPrinter0.printComment("+Hu]!+9GRg8<");
      Object[] objectArray0 = new Object[1];
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("++b2%K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("++b2%K? B)fV P^l'");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("++b2%K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat2);
      Object object0 = new Object();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      Object object1 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = object0;
      cSVPrinter0.printRecord(objectArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("++b2%K? B)fV P^l'", "++b2%K? B)fV P^l'", 41);
      cSVPrinter0.print(sQLFeatureNotSupportedException0);
      cSVPrinter0.printComment("++b2%K? B)fV P^l'");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("++b2%K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("++b2%K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);
      Object object0 = new Object();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object object1 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = object0;
      cSVPrinter0.printRecord(objectArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("++b2%K? B)fV P^l'", "++b2%K? B)fV P^l'", 41);
      cSVPrinter0.print(sQLFeatureNotSupportedException0);
      cSVPrinter0.printComment("++b2%K? B)fV P^l'");
      CSVPrinter cSVPrinter1 = cSVFormat0.print(outputStreamWriter0);
      cSVPrinter1.getOut();
      cSVPrinter1.print("++b2%K? B)fV P^l'");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "*5NI7Zxuo";
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string1 = null;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      Character character0 = new Character('Y');
      cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('%');
      mockFileWriter0.close();
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat2);
      cSVFormat0.withRecordSeparator("*5NI7Zxuo");
      try { 
        cSVPrinter0.printComment((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('J');
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('J');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      cSVFormat3.withNullString("org.apache.commons.csv.CSVPrinter");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "org.apache.commons.csv.CSVPrinter", 0, 3);
      stringWriter1.getBuffer();
      LinkedHashSet<ByteArrayInputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayInputStream>();
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)23;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      arrayList0.add(0, byteArrayInputStream0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('z');
      cSVFormat0.withRecordSeparator(" [");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("yu-TjI_r");
      Object object0 = new Object();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      String string0 = "}";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("yu-TjI_r", "}", 19);
      CharBuffer charBuffer0 = CharBuffer.allocate(41);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) sQLFeatureNotSupportedException0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('Y');
      mockFileWriter0.close();
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      TreeSet<BufferedWriter> treeSet0 = new TreeSet<BufferedWriter>();
      cSVPrinter0.printRecords((Iterable<?>) treeSet0);
      cSVPrinter0.getOut();
      try { 
        cSVPrinter0.print(cSVFormat1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$%";
      stringArray0[1] = "T/qO=:5_+ka}NCgB&";
      stringArray0[2] = "*A~[N)m7y8Vou|";
      stringArray0[3] = "kPx@el~F";
      stringArray0[4] = "";
      stringArray0[5] = "a^dd9oW\u0006";
      stringArray0[6] = "4I8YZHauotS-7qVd@/";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('V');
      charArrayWriter1.append((CharSequence) "");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      Iterable<CharArrayReader> iterable0 = null;
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withQuotePolicy(quote0);
      cSVFormat0.withCommentStart('1');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('7');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('7');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      mockPrintWriter0.print(1.0F);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "*x#)aeRQ$pr";
      objectArray0[2] = (Object) "*x#)aeRQ$pr";
      objectArray0[3] = (Object) cSVFormat0;
      mockPrintWriter0.printf("*x#)aeRQ$pr", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      cSVPrinter0.printComment("Delimiter=<");
      cSVPrinter0.flush();
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('J');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('J');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("org.apache.commons.csv.CSVPrinter");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "org.apache.commons.csv.CSVPrinter", 0, 3);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringBuffer0);
      cSVPrinter0.println();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('C');
      objectOutputStream0.flush();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      cSVPrinter0.println();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 4);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        pipedInputStream0.read(byteArray0, 1861, 393);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('1');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('7');
      cSVFormat3.withRecordSeparator('1');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gG`<$^tUd0<>>Yg N");
      Object[] objectArray0 = new Object[6];
      mockPrintWriter0.print(1.0F);
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "gG`<$^tUd0<>>Yg N";
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = '7';
      charArray0[2] = '1';
      mockPrintStream0.print(charArray0);
      ResultSet resultSet0 = null;
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("++b2%K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("++b2%K? B)fV P^l'");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("++b2%K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat2);
      Object object0 = new Object();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      Object object1 = new Object();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = object0;
      cSVPrinter0.printRecord(objectArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("++b2%K? B)fV P^l'", "++b2%K? B)fV P^l'", 41);
      cSVPrinter0.print(sQLFeatureNotSupportedException0);
      cSVPrinter0.printComment("++b2%K? B)fV P^l'");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVFormat0.withCommentStart('Y');
      mockFileWriter0.close();
      cSVPrinter0.printComment("+Hu]!+9GRg8<");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "+Hu]!+9GRg8<";
      try { 
        cSVPrinter0.printRecords(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      cSVFormat0.withCommentStart('Y');
      mockFileWriter0.close();
      cSVPrinter0.printComment("");
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      try { 
        cSVPrinter0.printRecord(objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('J');
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('J');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      cSVFormat3.withNullString("org.apache.commons.csv.CSVPrinter");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "org.apache.commons.csv.CSVPrinter", 0, 3);
      stringWriter1.getBuffer();
      LinkedHashSet<ByteArrayInputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayInputStream>();
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('s');
      cSVFormat1.withNullString("org.apache.commons.csv.CSVPrinter");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "org.apache.commons.csv.CSVPrinter", 3, 3);
      stringWriter0.getBuffer();
      cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.println();
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('u');
      String string0 = null;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      cSVFormat0.withCommentStart('n');
      Character character0 = new Character('u');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The escape character and the delimiter cannot be the same ('u')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8p($Mm\tYUex(+ ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("8p($Mm\tYUex(+ ");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("8p($Mm\tYUex(+ ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat1);
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.print(object0);
      cSVPrinter0.print((Object) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      Object object2 = new Object();
      objectArray0[3] = (Object) mockFileWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockFileWriter0;
      objectArray0[6] = (Object) cSVPrinter0;
      objectArray0[7] = (Object) mockFileWriter0;
      objectArray0[8] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oh,r";
      stringArray0[1] = "' in ";
      stringArray0[2] = "/8Z";
      stringArray0[3] = "";
      stringArray0[4] = "T-yJ";
      stringArray0[5] = "]2+1O6l";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("' in ");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      Character character0 = Character.valueOf('l');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(false);
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord((Object[]) stringArray0);
      cSVFormat2.withRecordSeparator('l');
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "(line ", 41);
      CSVPrinter cSVPrinter1 = cSVFormat5.print(stringWriter0);
      cSVPrinter1.print((Object) null);
      cSVPrinter0.printComment("");
      cSVPrinter0.getOut();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      String string0 = "5:eF)0h~";
      cSVPrinter0.printComment("5:eF)0h~");
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('1');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('7');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('1');
      Character character0 = new Character('7');
      cSVFormat4.withCommentStart(character0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gG`<$^tUd0<>>Yg N");
      Object[] objectArray0 = new Object[6];
      mockPrintWriter0.print(1.0F);
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "gG`<$^tUd0<>>Yg N";
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      CSVPrinter cSVPrinter0 = cSVFormat4.print(mockPrintWriter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      cSVPrinter0.printComment("Delimiter=<");
      cSVPrinter0.flush();
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('1');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('7');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('1');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gG`<$^tUd0<>>Yg N");
      Object[] objectArray0 = new Object[6];
      mockPrintWriter0.print(1.0F);
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "gG`<$^tUd0<>>Yg N";
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) cSVFormat0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("gG`<$^tUd0<>>Yg N", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat4.print(printWriter0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.close();
      cSVPrinter0.println();
      cSVPrinter0.flush();
      cSVPrinter0.close();
      cSVPrinter0.printComment("Delimiter=<");
      cSVPrinter0.flush();
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);
      char char0 = 'Y';
      cSVFormat0.withCommentStart('Y');
      char char1 = '7';
      char char2 = 'G';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) "*5NI7Zxuo";
      objectArray0[3] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) file0;
      cSVPrinter0.printRecord(objectArray0);
      char char3 = ' ';
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("UM49{e", "UM49{e");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // UM49{e
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      OutputStream outputStream0 = null;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.printComment("5:eF)0h~");
      // Undeclared exception!
      try { 
        cSVPrinter0.print((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("++b2%K? B)fV P^l'");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("++b2%K? B)fV P^l'");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("++b2%K? B)fV P^l'");
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat2);
      cSVPrinter0.print(mockFileOutputStream0);
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[1];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 390);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        pipedInputStream0.read(byteArray0, (-2753), (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      File file0 = MockFile.createTempFile("*5NI7Zxuo", "*5NI7Zxuo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      Character character0 = new Character('Y');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      cSVFormat3.withDelimiter(']');
      cSVFormat0.withRecordSeparator(',');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.print(1.0F);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) mockFileWriter0;
      CSVFormat.newFormat('6');
      objectArray0[2] = (Object) quote0;
      objectArray0[3] = (Object) "gG`<$^tUd0<>>Yg N";
      mockPrintWriter0.printf("6rQ8(e\"k?&w", objectArray0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$%";
      stringArray0[1] = "T/qO=:5_+ka}NCgB&";
      stringArray0[2] = "*A~[N)m7y8Vou|";
      stringArray0[3] = "kPx@el~F";
      stringArray0[4] = "";
      stringArray0[5] = "a^dd9oW\u0006";
      stringArray0[6] = "4I8YZHauotS-7qVd@/";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('V');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter2);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('C');
      objectOutputStream0.flush();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("N|gWK-\"h", "", hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLClientInfoException0);
      DataTruncation dataTruncation0 = new DataTruncation(1580, false, false, 4, 1580, batchUpdateException0);
      dataTruncation0.getNextWarning();
      objectOutputStream0.writeUnshared((Object) null);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('(');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('(');
      cSVFormat2.withCommentStart(character0);
      cSVFormat0.withRecordSeparator("|_MBAOUo.N");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Appendable appendable0 = null;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('W');
      CSVPrinter cSVPrinter0 = null;
      try {
        cSVPrinter0 = new CSVPrinter((Appendable) null, cSVFormat3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }
}
