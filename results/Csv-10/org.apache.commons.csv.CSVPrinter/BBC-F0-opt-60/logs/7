* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-60
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 13554
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-10/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 927
* Using seed 18058006
* Starting evolution
bbc usage percentage is: 60%
* Initial Number of Goals in DynaMOSA = 184 / 927
[MASTER] 22:51:50.452 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:51:50.452 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:51:50.452 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:51:50.452 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:51:50.452 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:51:50.452 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:51:50.452 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:51:50.452 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:51:50.453 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:51:50.453 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:51:50.453 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:51:51.861 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:52:08.749 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 22:56:19.955 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 602s and 1630 generations, 872851 statements, best individual has fitness: 107.0
* Minimizing test suite
[MASTER] 23:02:59.867 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 159
* Number of covered goals: 154
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 128
* Number of covered goals: 119
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 34
* Number of covered goals: 34
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 486
* Number of covered goals: 440
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 128
* Number of covered goals: 113
* Generated 89 tests with total length 1564
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:03:49.802 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7161833333333333% of time used, but only 25/89 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 29%
* Compiling and checking tests
[MASTER] 23:04:34.797 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:04:35.579 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:04:36.040 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:04:36.524 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:04:36.537 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<275> but was:<272>
[MASTER] 23:04:36.538 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockFile mockFile0 = new MockFile("p75oJJwzf?<8,");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
Locale locale0 = Locale.KOREA;
Object[] objectArray0 = new Object[7];
objectArray0[0] = (Object) "p75oJJwzf?<8,";
objectArray0[1] = (Object) "H:jq75.!TMw`a &C";
objectArray0[2] = (Object) mockFile0;
Object object0 = new Object();
objectArray0[3] = object0;
objectArray0[4] = (Object) "H:jq75.!TMw`a &C";
objectArray0[5] = (Object) mockPrintStream0;
objectArray0[6] = (Object) "p75oJJwzf?<8,";
PrintStream printStream0 = mockPrintStream0.printf(locale0, "H:jq75.!TMw`a &C", objectArray0);
CSVFormat cSVFormat0 = CSVFormat.RFC4180;
Character character0 = new Character('8');
CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
CSVPrinter cSVPrinter0 = new CSVPrinter(printStream0, cSVFormat1);
cSVPrinter0.printComment("H:jq75.!TMw`a &C");
cSVPrinter0.printRecord(objectArray0);
assertEquals(275L, mockFile0.length());


[MASTER] 23:04:50.275 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_133_tmp__ESTest.test0(CSVPrinter_133_tmp__ESTest.java:229)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:50.283 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuotePolicy());
assertNotNull(cSVFormat0);

String[] stringArray0 = new String[1];
String string0 = "/";
stringArray0[0] = "/";
CSVFormat cSVFormat1 = CSVFormat.TDF;
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.isNullHandling());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isCommentingEnabled());
assertNull(cSVFormat1.getEscape());
assertTrue(cSVFormat1.isQuoting());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getNullString());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuotePolicy());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertNull(cSVFormat1.getCommentStart());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNotNull(cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);

CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('-');
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.isNullHandling());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isCommentingEnabled());
assertNull(cSVFormat1.getEscape());
assertTrue(cSVFormat1.isQuoting());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getNullString());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuotePolicy());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertNull(cSVFormat1.getCommentStart());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getCommentStart());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertEquals('-', cSVFormat2.getDelimiter());
assertTrue(cSVFormat2.isQuoting());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertNull(cSVFormat2.getEscape());
assertFalse(cSVFormat2.isCommentingEnabled());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.isNullHandling());
assertNull(cSVFormat2.getQuotePolicy());
assertNotNull(cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);

Character character0 = new Character('=');
assertEquals('=', (char)character0);
assertNotNull(character0);

CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.isNullHandling());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isCommentingEnabled());
assertNull(cSVFormat1.getEscape());
assertTrue(cSVFormat1.isQuoting());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getNullString());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuotePolicy());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertNull(cSVFormat1.getCommentStart());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getCommentStart());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertEquals('-', cSVFormat2.getDelimiter());
assertTrue(cSVFormat2.isQuoting());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertNull(cSVFormat2.getEscape());
assertFalse(cSVFormat2.isCommentingEnabled());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.isNullHandling());
assertNull(cSVFormat2.getQuotePolicy());
assertTrue(cSVFormat3.isQuoting());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertEquals('-', cSVFormat3.getDelimiter());
assertEquals('=', (char)cSVFormat3.getEscape());
assertNull(cSVFormat3.getNullString());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertNull(cSVFormat3.getCommentStart());
assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.isNullHandling());
assertNull(cSVFormat3.getQuotePolicy());
assertFalse(cSVFormat3.isCommentingEnabled());
assertTrue(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertNotNull(cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);

Character character1 = new Character('=');
assertTrue(character1.equals((Object)character0));
assertEquals('=', (char)character1);
assertNotNull(character1);

Character character2 = Character.valueOf('g');
assertFalse(character2.equals((Object)character0));
assertFalse(character2.equals((Object)character1));
assertEquals('g', (char)character2);
assertNotNull(character2);

CSVFormat cSVFormat4 = cSVFormat1.withEscape(character0);
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertTrue(character0.equals((Object)character1));
assertFalse(character0.equals((Object)character2));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.isNullHandling());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isCommentingEnabled());
assertNull(cSVFormat1.getEscape());
assertTrue(cSVFormat1.isQuoting());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getNullString());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuotePolicy());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertNull(cSVFormat1.getCommentStart());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertTrue(cSVFormat4.isQuoting());
assertEquals('\"', (char)cSVFormat4.getQuoteChar());
assertFalse(cSVFormat4.isNullHandling());
assertFalse(cSVFormat4.isCommentingEnabled());
assertEquals('=', (char)cSVFormat4.getEscape());
assertNull(cSVFormat4.getCommentStart());
assertNull(cSVFormat4.getNullString());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertEquals('\t', cSVFormat4.getDelimiter());
assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat4.getIgnoreEmptyLines());
assertNull(cSVFormat4.getQuotePolicy());
assertTrue(cSVFormat4.isEscaping());
assertNotNull(cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat3));
assertTrue(character0.equals((Object)character1));
assertFalse(character0.equals((Object)character2));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat4));
assertFalse(cSVFormat1.isNullHandling());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isCommentingEnabled());
assertNull(cSVFormat1.getEscape());
assertTrue(cSVFormat1.isQuoting());
assertFalse(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getNullString());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getQuotePolicy());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertNull(cSVFormat1.getCommentStart());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat2.isEscaping());
assertNull(cSVFormat2.getCommentStart());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertEquals('-', cSVFormat2.getDelimiter());
assertTrue(cSVFormat2.isQuoting());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertNull(cSVFormat2.getEscape());
assertFalse(cSVFormat2.isCommentingEnabled());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.isNullHandling());
assertNull(cSVFormat2.getQuotePolicy());
assertTrue(cSVFormat3.isQuoting());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertEquals('-', cSVFormat3.getDelimiter());
assertEquals('=', (char)cSVFormat3.getEscape());
assertNull(cSVFormat3.getNullString());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertNull(cSVFormat3.getCommentStart());
assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.isNullHandling());
assertNull(cSVFormat3.getQuotePolicy());
assertFalse(cSVFormat3.isCommentingEnabled());
assertTrue(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertFalse(fileDescriptor0.valid());
assertNotNull(cSVPrinter0);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat4);

cSVPrinter0.close();

[MASTER] 23:04:56.099 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.csv.CSVPrinter_138_tmp__ESTest.test0(CSVPrinter_138_tmp__ESTest.java:30)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:56.136 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockFile mockFile0 = new MockFile("out");
assertNotNull(mockFile0);

Character character0 = new Character('H');
assertEquals('H', (char)character0);
assertNotNull(character0);

CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertNotNull(cSVFormat0);

CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.isCommentingEnabled());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isEscaping());
assertTrue(cSVFormat1.isQuoting());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals('H', (char)cSVFormat1.getEscape());
assertNotNull(cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);

CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertNull(cSVFormat2.getCommentStart());
assertFalse(cSVFormat2.isCommentingEnabled());
assertNull(cSVFormat2.getQuotePolicy());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertTrue(cSVFormat2.isNullHandling());
assertEquals("", cSVFormat2.getNullString());
assertFalse(cSVFormat2.isEscaping());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertNull(cSVFormat2.getEscape());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertEquals(',', cSVFormat2.getDelimiter());
assertTrue(cSVFormat2.isQuoting());
assertNotNull(cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);

Quote quote0 = Quote.NON_NUMERIC;
CSVFormat cSVFormat3 = cSVFormat1.withQuotePolicy(quote0);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.isCommentingEnabled());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isEscaping());
assertTrue(cSVFormat1.isQuoting());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals('H', (char)cSVFormat1.getEscape());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals('H', (char)cSVFormat3.getEscape());
assertNull(cSVFormat3.getCommentStart());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isQuoting());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.isNullHandling());
assertTrue(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertNotNull(cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);

CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertTrue(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.isCommentingEnabled());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isEscaping());
assertTrue(cSVFormat1.isQuoting());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals('H', (char)cSVFormat1.getEscape());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals('H', (char)cSVFormat3.getEscape());
assertNull(cSVFormat3.getCommentStart());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isQuoting());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.isNullHandling());
assertTrue(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertTrue(cSVFormat4.isQuoting());
assertEquals('\"', (char)cSVFormat4.getQuoteChar());
assertFalse(cSVFormat4.isNullHandling());
assertFalse(cSVFormat4.isCommentingEnabled());
assertEquals(Quote.NON_NUMERIC, cSVFormat4.getQuotePolicy());
assertNull(cSVFormat4.getCommentStart());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertNull(cSVFormat4.getNullString());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertEquals("\r\n", cSVFormat4.getRecordSeparator());
assertEquals(',', cSVFormat4.getDelimiter());
assertTrue(cSVFormat4.getIgnoreEmptyLines());
assertTrue(cSVFormat4.isEscaping());
assertEquals('H', (char)cSVFormat4.getEscape());
assertNotNull(cSVFormat4);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat1);

MockFile mockFile1 = new MockFile("out", "");
assertFalse(mockFile1.equals((Object)mockFile0));
assertNotNull(mockFile1);

MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1, false);
assertFalse(mockFile1.equals((Object)mockFile0));
assertNotNull(mockFileWriter0);

CSVPrinter cSVPrinter0 = cSVFormat3.print(mockFileWriter0);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertTrue(cSVFormat3.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(mockFile1.equals((Object)mockFile0));
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.isCommentingEnabled());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isEscaping());
assertTrue(cSVFormat1.isQuoting());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals('H', (char)cSVFormat1.getEscape());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals('H', (char)cSVFormat3.getEscape());
assertNull(cSVFormat3.getCommentStart());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isQuoting());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.isNullHandling());
assertTrue(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertEquals(0L, mockFile1.getUsableSpace());
assertFalse(mockFile1.isHidden());
assertTrue(mockFile1.isFile());
assertTrue(mockFile1.canRead());
assertTrue(mockFile1.canWrite());
assertTrue(mockFile1.canExecute());
assertEquals("out", mockFile1.getName());
assertEquals(0L, mockFile1.getTotalSpace());
assertTrue(mockFile1.exists());
assertEquals(0L, mockFile1.length());
assertEquals(1392409281320L, mockFile1.lastModified());
assertFalse(mockFile1.isDirectory());
assertEquals(0L, mockFile1.getFreeSpace());
assertTrue(mockFile1.isAbsolute());
assertEquals("/experiment/out", mockFile1.toString());
assertEquals("/experiment", mockFile1.getParent());
assertNotNull(cSVPrinter0);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(mockFile1, mockFile0);

Byte byte0 = new Byte((byte)33);
assertEquals((byte)33, (byte)byte0);
assertNotNull(byte0);

cSVPrinter0.print(byte0);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertTrue(cSVFormat3.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(mockFile1.equals((Object)mockFile0));
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.isCommentingEnabled());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isEscaping());
assertTrue(cSVFormat1.isQuoting());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals('H', (char)cSVFormat1.getEscape());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals('H', (char)cSVFormat3.getEscape());
assertNull(cSVFormat3.getCommentStart());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isQuoting());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.isNullHandling());
assertTrue(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertEquals(0L, mockFile1.getUsableSpace());
assertFalse(mockFile1.isHidden());
assertTrue(mockFile1.isFile());
assertTrue(mockFile1.canRead());
assertTrue(mockFile1.canWrite());
assertTrue(mockFile1.canExecute());
assertEquals("out", mockFile1.getName());
assertEquals(0L, mockFile1.getTotalSpace());
assertTrue(mockFile1.exists());
assertEquals(0L, mockFile1.length());
assertEquals(1392409281320L, mockFile1.lastModified());
assertFalse(mockFile1.isDirectory());
assertEquals(0L, mockFile1.getFreeSpace());
assertTrue(mockFile1.isAbsolute());
assertEquals("/experiment/out", mockFile1.toString());
assertEquals("/experiment", mockFile1.getParent());
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(mockFile1, mockFile0);

Object[] objectArray0 = new Object[2];
objectArray0[0] = (Object) "";
objectArray0[1] = (Object) "";
cSVPrinter0.printRecords(objectArray0);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertTrue(cSVFormat3.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(mockFile1.equals((Object)mockFile0));
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.isCommentingEnabled());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isEscaping());
assertTrue(cSVFormat1.isQuoting());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals('H', (char)cSVFormat1.getEscape());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals('H', (char)cSVFormat3.getEscape());
assertNull(cSVFormat3.getCommentStart());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isQuoting());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.isNullHandling());
assertTrue(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertEquals(0L, mockFile1.getUsableSpace());
assertFalse(mockFile1.isHidden());
assertTrue(mockFile1.isFile());
assertTrue(mockFile1.canRead());
assertTrue(mockFile1.canWrite());
assertTrue(mockFile1.canExecute());
assertEquals("out", mockFile1.getName());
assertEquals(0L, mockFile1.getTotalSpace());
assertTrue(mockFile1.exists());
assertEquals(0L, mockFile1.length());
assertEquals(1392409281320L, mockFile1.lastModified());
assertFalse(mockFile1.isDirectory());
assertEquals(0L, mockFile1.getFreeSpace());
assertTrue(mockFile1.isAbsolute());
assertEquals("/experiment/out", mockFile1.toString());
assertEquals("/experiment", mockFile1.getParent());
assertEquals(2, objectArray0.length);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(mockFile1, mockFile0);

cSVPrinter0.printRecords(objectArray0);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertTrue(cSVFormat3.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(mockFile1.equals((Object)mockFile0));
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.isCommentingEnabled());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isEscaping());
assertTrue(cSVFormat1.isQuoting());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals('H', (char)cSVFormat1.getEscape());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals('H', (char)cSVFormat3.getEscape());
assertNull(cSVFormat3.getCommentStart());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isQuoting());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.isNullHandling());
assertTrue(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertEquals(0L, mockFile1.getUsableSpace());
assertFalse(mockFile1.isHidden());
assertTrue(mockFile1.isFile());
assertTrue(mockFile1.canRead());
assertTrue(mockFile1.canWrite());
assertTrue(mockFile1.canExecute());
assertEquals("out", mockFile1.getName());
assertEquals(0L, mockFile1.getTotalSpace());
assertTrue(mockFile1.exists());
assertEquals(0L, mockFile1.length());
assertEquals(1392409281320L, mockFile1.lastModified());
assertFalse(mockFile1.isDirectory());
assertEquals(0L, mockFile1.getFreeSpace());
assertTrue(mockFile1.isAbsolute());
assertEquals("/experiment/out", mockFile1.toString());
assertEquals("/experiment", mockFile1.getParent());
assertEquals(2, objectArray0.length);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(mockFile1, mockFile0);

Appendable appendable0 = cSVPrinter0.getOut();
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertTrue(cSVFormat3.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(mockFile1.equals((Object)mockFile0));
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.isCommentingEnabled());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isEscaping());
assertTrue(cSVFormat1.isQuoting());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals('H', (char)cSVFormat1.getEscape());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals('H', (char)cSVFormat3.getEscape());
assertNull(cSVFormat3.getCommentStart());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isQuoting());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.isNullHandling());
assertTrue(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertEquals(0L, mockFile1.getUsableSpace());
assertFalse(mockFile1.isHidden());
assertTrue(mockFile1.isFile());
assertTrue(mockFile1.canRead());
assertTrue(mockFile1.canWrite());
assertTrue(mockFile1.canExecute());
assertEquals("out", mockFile1.getName());
assertEquals(0L, mockFile1.getTotalSpace());
assertTrue(mockFile1.exists());
assertEquals(0L, mockFile1.length());
assertEquals(1392409281320L, mockFile1.lastModified());
assertFalse(mockFile1.isDirectory());
assertEquals(0L, mockFile1.getFreeSpace());
assertTrue(mockFile1.isAbsolute());
assertEquals("/experiment/out", mockFile1.toString());
assertEquals("/experiment", mockFile1.getParent());
assertNotNull(appendable0);
assertSame(appendable0, mockFileWriter0);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(mockFile1, mockFile0);
assertSame(mockFileWriter0, appendable0);

Appendable appendable1 = cSVPrinter0.getOut();
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertTrue(cSVFormat3.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(mockFile1.equals((Object)mockFile0));
assertNull(cSVFormat0.getQuotePolicy());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertFalse(cSVFormat0.isNullHandling());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getNullString());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.isCommentingEnabled());
assertEquals(',', cSVFormat1.getDelimiter());
assertNull(cSVFormat1.getCommentStart());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertNull(cSVFormat1.getNullString());
assertTrue(cSVFormat1.isEscaping());
assertTrue(cSVFormat1.isQuoting());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertEquals('H', (char)cSVFormat1.getEscape());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertEquals('H', (char)cSVFormat3.getEscape());
assertNull(cSVFormat3.getCommentStart());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isQuoting());
assertEquals(',', cSVFormat3.getDelimiter());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertNull(cSVFormat3.getNullString());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.isNullHandling());
assertTrue(cSVFormat3.isEscaping());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertEquals(0L, mockFile1.getUsableSpace());
assertFalse(mockFile1.isHidden());
assertTrue(mockFile1.isFile());
assertTrue(mockFile1.canRead());
assertTrue(mockFile1.canWrite());
assertTrue(mockFile1.canExecute());
assertEquals("out", mockFile1.getName());
assertEquals(0L, mockFile1.getTotalSpace());
assertTrue(mockFile1.exists());
assertEquals(0L, mockFile1.length());
assertEquals(1392409281320L, mockFile1.lastModified());
assertFalse(mockFile1.isDirectory());
assertEquals(0L, mockFile1.getFreeSpace());
assertTrue(mockFile1.isAbsolute());
assertEquals("/experiment/out", mockFile1.toString());
assertEquals("/experiment", mockFile1.getParent());
assertNotNull(appendable1);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertSame(appendable1, appendable0);
assertSame(appendable1, mockFileWriter0);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(mockFile1, mockFile0);
assertSame(mockFileWriter0, appendable1);
assertSame(mockFileWriter0, appendable0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-10/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-60/tests/7
* Done!

* Computation finished
