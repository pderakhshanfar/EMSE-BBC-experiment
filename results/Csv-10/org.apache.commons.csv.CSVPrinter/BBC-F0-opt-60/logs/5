* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-60
* Going to generate test cases for class: org.apache.commons.csv.CSVPrinter
* Starting Client-0
* Connecting to master process on port 21337
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-10/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVPrinter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 927
* Using seed 77927086
* Starting evolution
bbc usage percentage is: 60%
* Initial Number of Goals in DynaMOSA = 184 / 927
[MASTER] 22:51:29.537 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayDeque<E> : Type points to itself
[MASTER] 22:51:29.538 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ArrayList<E> : Type points to itself
[MASTER] 22:51:29.538 [logback-2] ERROR TestCluster - Failed to check cache for java.util.EnumSet<E> : Type points to itself
[MASTER] 22:51:29.538 [logback-2] ERROR TestCluster - Failed to check cache for java.util.HashSet<E> : Type points to itself
[MASTER] 22:51:29.538 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 22:51:29.538 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:51:29.538 [logback-2] ERROR TestCluster - Failed to check cache for java.util.PriorityQueue<E> : Type points to itself
[MASTER] 22:51:29.538 [logback-2] ERROR TestCluster - Failed to check cache for java.util.ServiceLoader<S> : Type points to itself
[MASTER] 22:51:29.538 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Stack<E> : Type points to itself
[MASTER] 22:51:29.538 [logback-2] ERROR TestCluster - Failed to check cache for java.util.TreeSet<E> : Type points to itself
[MASTER] 22:51:29.539 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Vector<E> : Type points to itself
[MASTER] 22:51:37.435 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:51:45.438 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 601s and 968 generations, 531759 statements, best individual has fitness: 118.0
* Minimizing test suite
[MASTER] 23:02:36.487 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 159
* Number of covered goals: 154
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 128
* Number of covered goals: 117
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 36
* Number of covered goals: 36
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 486
* Number of covered goals: 437
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 2
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 87%
* Total number of goals: 128
* Number of covered goals: 111
* Generated 87 tests with total length 1708
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:03:22.545 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7199166666666666% of time used, but only 25/87 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 31%
* Compiling and checking tests
[MASTER] 23:03:58.406 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 23:04:05.480 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_106_tmp__ESTest.test0(CSVPrinter_106_tmp__ESTest.java:33)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:05.481 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.EXCEL;
CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
Character character0 = new Character('g');
CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
Character character1 = new Character('1');
cSVFormat2.withCommentStart(character1);
ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
doReturn(0).when(resultSetMetaData0).getColumnCount();
ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
doReturn(false).when(resultSet0).next();
cSVPrinter0.printRecords(resultSet0);

[MASTER] 23:04:10.771 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_113_tmp__ESTest.test0(CSVPrinter_113_tmp__ESTest.java:143)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:10.773 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.EXCEL;
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNotNull(cSVFormat0);

CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isEscaping());
assertEquals(',', cSVFormat1.getDelimiter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getEscape());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertTrue(cSVFormat1.isQuoting());
assertNull(cSVFormat1.getCommentStart());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertNotNull(cSVFormat1);

Character character0 = new Character('g');
assertEquals('g', (char)character0);
assertNotNull(character0);

CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isEscaping());
assertEquals(',', cSVFormat1.getDelimiter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getEscape());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertTrue(cSVFormat1.isQuoting());
assertNull(cSVFormat1.getCommentStart());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat2.getEscape());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertEquals(',', cSVFormat2.getDelimiter());
assertEquals('g', (char)cSVFormat2.getQuoteChar());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertTrue(cSVFormat2.isQuoting());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.isNullHandling());
assertNull(cSVFormat2.getNullString());
assertNull(cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat2.getCommentStart());
assertFalse(cSVFormat2.isEscaping());
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertNotNull(cSVFormat2);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
assertNotNull(mockPrintWriter0);

CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
assertFalse(cSVFormat0.isCommentingEnabled());
assertNull(cSVFormat0.getEscape());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals(',', cSVFormat0.getDelimiter());
assertNull(cSVFormat0.getCommentStart());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isNullHandling());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat1.isEscaping());
assertEquals(',', cSVFormat1.getDelimiter());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNull(cSVFormat1.getEscape());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertTrue(cSVFormat1.isQuoting());
assertNull(cSVFormat1.getCommentStart());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat2.getEscape());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertEquals(',', cSVFormat2.getDelimiter());
assertEquals('g', (char)cSVFormat2.getQuoteChar());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertTrue(cSVFormat2.isQuoting());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat2.isNullHandling());
assertNull(cSVFormat2.getNullString());
assertNull(cSVFormat2.getQuotePolicy());
assertFalse(cSVFormat2.isCommentingEnabled());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat2.getCommentStart());
assertFalse(cSVFormat2.isEscaping());
assertFalse(fileDescriptor0.valid());
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertNotNull(cSVPrinter0);

ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
cSVPrinter0.close();

[MASTER] 23:04:16.641 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_116_tmp__ESTest.test0(CSVPrinter_116_tmp__ESTest.java:358)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:16.694 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.MYSQL;
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertTrue(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertNotNull(cSVFormat0);

CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertTrue(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getCommentStart());
assertTrue(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isQuoting());
assertEquals("\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertEquals('\\', (char)cSVFormat1.getEscape());
assertNull(cSVFormat1.getQuoteChar());
assertEquals('\t', cSVFormat1.getDelimiter());
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertNotNull(cSVFormat1);

CSVFormat cSVFormat2 = cSVFormat1.withNullString("J.P1Yq7GY@)ZOgi");
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertTrue(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getCommentStart());
assertTrue(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isQuoting());
assertEquals("\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertEquals('\\', (char)cSVFormat1.getEscape());
assertNull(cSVFormat1.getQuoteChar());
assertEquals('\t', cSVFormat1.getDelimiter());
assertFalse(cSVFormat2.isQuoting());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat2.getNullString());
assertNull(cSVFormat2.getQuoteChar());
assertTrue(cSVFormat2.isNullHandling());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals('\t', cSVFormat2.getDelimiter());
assertEquals('\\', (char)cSVFormat2.getEscape());
assertNull(cSVFormat2.getCommentStart());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.isCommentingEnabled());
assertNull(cSVFormat2.getQuotePolicy());
assertTrue(cSVFormat2.isEscaping());
assertEquals("\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertNotNull(cSVFormat2);

CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("out");
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertTrue(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getCommentStart());
assertTrue(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isQuoting());
assertEquals("\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertEquals('\\', (char)cSVFormat1.getEscape());
assertNull(cSVFormat1.getQuoteChar());
assertEquals('\t', cSVFormat1.getDelimiter());
assertFalse(cSVFormat2.isQuoting());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat2.getNullString());
assertNull(cSVFormat2.getQuoteChar());
assertTrue(cSVFormat2.isNullHandling());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals('\t', cSVFormat2.getDelimiter());
assertEquals('\\', (char)cSVFormat2.getEscape());
assertNull(cSVFormat2.getCommentStart());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.isCommentingEnabled());
assertNull(cSVFormat2.getQuotePolicy());
assertTrue(cSVFormat2.isEscaping());
assertEquals("\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertNull(cSVFormat3.getCommentStart());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertNull(cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isEscaping());
assertFalse(cSVFormat3.isQuoting());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat3.getNullString());
assertNull(cSVFormat3.getQuoteChar());
assertTrue(cSVFormat3.isNullHandling());
assertEquals('\t', cSVFormat3.getDelimiter());
assertEquals('\\', (char)cSVFormat3.getEscape());
assertEquals("out", cSVFormat3.getRecordSeparator());
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat0);
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertNotNull(cSVFormat3);

CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('J');
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertTrue(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getCommentStart());
assertTrue(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isQuoting());
assertEquals("\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertEquals('\\', (char)cSVFormat1.getEscape());
assertNull(cSVFormat1.getQuoteChar());
assertEquals('\t', cSVFormat1.getDelimiter());
assertFalse(cSVFormat2.isQuoting());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat2.getNullString());
assertNull(cSVFormat2.getQuoteChar());
assertTrue(cSVFormat2.isNullHandling());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals('\t', cSVFormat2.getDelimiter());
assertEquals('\\', (char)cSVFormat2.getEscape());
assertNull(cSVFormat2.getCommentStart());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.isCommentingEnabled());
assertNull(cSVFormat2.getQuotePolicy());
assertTrue(cSVFormat2.isEscaping());
assertEquals("\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertNull(cSVFormat3.getCommentStart());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertNull(cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isEscaping());
assertFalse(cSVFormat3.isQuoting());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat3.getNullString());
assertNull(cSVFormat3.getQuoteChar());
assertTrue(cSVFormat3.isNullHandling());
assertEquals('\t', cSVFormat3.getDelimiter());
assertEquals('\\', (char)cSVFormat3.getEscape());
assertEquals("out", cSVFormat3.getRecordSeparator());
assertEquals('\t', cSVFormat4.getDelimiter());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertNull(cSVFormat4.getCommentStart());
assertNull(cSVFormat4.getQuotePolicy());
assertEquals('\\', (char)cSVFormat4.getEscape());
assertNull(cSVFormat4.getQuoteChar());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat4.isNullHandling());
assertEquals("J", cSVFormat4.getRecordSeparator());
assertFalse(cSVFormat4.isQuoting());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat4.getNullString());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.isCommentingEnabled());
assertTrue(cSVFormat4.isEscaping());
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat1);
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertNotNull(cSVFormat4);

PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
assertNotNull(pipedOutputStream0);

String string0 = cSVFormat0.toString();
assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertTrue(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat4);
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertNotNull(string0);

BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1558);
assertNotNull(bufferedOutputStream0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
assertNotNull(mockPrintWriter0);

CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('Z');
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertTrue(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getCommentStart());
assertTrue(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isQuoting());
assertEquals("\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertEquals('\\', (char)cSVFormat1.getEscape());
assertNull(cSVFormat1.getQuoteChar());
assertEquals('\t', cSVFormat1.getDelimiter());
assertFalse(cSVFormat2.isQuoting());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat2.getNullString());
assertNull(cSVFormat2.getQuoteChar());
assertTrue(cSVFormat2.isNullHandling());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals('\t', cSVFormat2.getDelimiter());
assertEquals('\\', (char)cSVFormat2.getEscape());
assertNull(cSVFormat2.getCommentStart());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.isCommentingEnabled());
assertNull(cSVFormat2.getQuotePolicy());
assertTrue(cSVFormat2.isEscaping());
assertEquals("\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertNull(cSVFormat3.getCommentStart());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertNull(cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isEscaping());
assertFalse(cSVFormat3.isQuoting());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat3.getNullString());
assertNull(cSVFormat3.getQuoteChar());
assertTrue(cSVFormat3.isNullHandling());
assertEquals('\t', cSVFormat3.getDelimiter());
assertEquals('\\', (char)cSVFormat3.getEscape());
assertEquals("out", cSVFormat3.getRecordSeparator());
assertEquals('\t', cSVFormat4.getDelimiter());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertNull(cSVFormat4.getCommentStart());
assertNull(cSVFormat4.getQuotePolicy());
assertEquals('\\', (char)cSVFormat4.getEscape());
assertNull(cSVFormat4.getQuoteChar());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat4.isNullHandling());
assertEquals("J", cSVFormat4.getRecordSeparator());
assertFalse(cSVFormat4.isQuoting());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat4.getNullString());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.isCommentingEnabled());
assertTrue(cSVFormat4.isEscaping());
assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat5.isNullHandling());
assertEquals("J", cSVFormat5.getRecordSeparator());
assertNull(cSVFormat5.getQuoteChar());
assertEquals('Z', cSVFormat5.getDelimiter());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat5.getNullString());
assertFalse(cSVFormat5.isQuoting());
assertFalse(cSVFormat5.isCommentingEnabled());
assertEquals('\\', (char)cSVFormat5.getEscape());
assertFalse(cSVFormat5.getSkipHeaderRecord());
assertNull(cSVFormat5.getCommentStart());
assertTrue(cSVFormat5.isEscaping());
assertNull(cSVFormat5.getQuotePolicy());
assertFalse(cSVFormat5.getIgnoreEmptyLines());
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat5);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat5);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat5);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat5, cSVFormat1);
assertNotSame(cSVFormat5, cSVFormat0);
assertNotSame(cSVFormat5, cSVFormat2);
assertNotSame(cSVFormat5, cSVFormat3);
assertNotSame(cSVFormat5, cSVFormat4);
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat3.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat5.equals((Object)cSVFormat1));
assertFalse(cSVFormat5.equals((Object)cSVFormat0));
assertFalse(cSVFormat5.equals((Object)cSVFormat2));
assertFalse(cSVFormat5.equals((Object)cSVFormat3));
assertFalse(cSVFormat5.equals((Object)cSVFormat4));
assertNotNull(cSVFormat5);

CSVPrinter cSVPrinter0 = cSVFormat5.print(mockFileWriter0);
assertEquals("\n", cSVFormat0.getRecordSeparator());
assertNull(cSVFormat0.getQuoteChar());
assertNull(cSVFormat0.getNullString());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isCommentingEnabled());
assertTrue(cSVFormat0.isEscaping());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.getIgnoreEmptyLines());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertEquals('\t', cSVFormat0.getDelimiter());
assertEquals('\\', (char)cSVFormat0.getEscape());
assertFalse(cSVFormat0.isQuoting());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertNull(cSVFormat1.getCommentStart());
assertTrue(cSVFormat1.isEscaping());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isCommentingEnabled());
assertFalse(cSVFormat1.isNullHandling());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.isQuoting());
assertEquals("\n", cSVFormat1.getRecordSeparator());
assertFalse(cSVFormat1.getIgnoreEmptyLines());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertEquals('\\', (char)cSVFormat1.getEscape());
assertNull(cSVFormat1.getQuoteChar());
assertEquals('\t', cSVFormat1.getDelimiter());
assertFalse(cSVFormat2.isQuoting());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat2.getNullString());
assertNull(cSVFormat2.getQuoteChar());
assertTrue(cSVFormat2.isNullHandling());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertEquals('\t', cSVFormat2.getDelimiter());
assertEquals('\\', (char)cSVFormat2.getEscape());
assertNull(cSVFormat2.getCommentStart());
assertFalse(cSVFormat2.getIgnoreEmptyLines());
assertFalse(cSVFormat2.isCommentingEnabled());
assertNull(cSVFormat2.getQuotePolicy());
assertTrue(cSVFormat2.isEscaping());
assertEquals("\n", cSVFormat2.getRecordSeparator());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertNull(cSVFormat3.getCommentStart());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.getIgnoreEmptyLines());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.getSkipHeaderRecord());
assertNull(cSVFormat3.getQuotePolicy());
assertTrue(cSVFormat3.isEscaping());
assertFalse(cSVFormat3.isQuoting());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat3.getNullString());
assertNull(cSVFormat3.getQuoteChar());
assertTrue(cSVFormat3.isNullHandling());
assertEquals('\t', cSVFormat3.getDelimiter());
assertEquals('\\', (char)cSVFormat3.getEscape());
assertEquals("out", cSVFormat3.getRecordSeparator());
assertEquals('\t', cSVFormat4.getDelimiter());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertNull(cSVFormat4.getCommentStart());
assertNull(cSVFormat4.getQuotePolicy());
assertEquals('\\', (char)cSVFormat4.getEscape());
assertNull(cSVFormat4.getQuoteChar());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat4.isNullHandling());
assertEquals("J", cSVFormat4.getRecordSeparator());
assertFalse(cSVFormat4.isQuoting());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat4.getNullString());
assertFalse(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.isCommentingEnabled());
assertTrue(cSVFormat4.isEscaping());
assertFalse(fileDescriptor0.valid());
assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat5.isNullHandling());
assertEquals("J", cSVFormat5.getRecordSeparator());
assertNull(cSVFormat5.getQuoteChar());
assertEquals('Z', cSVFormat5.getDelimiter());
assertEquals("J.P1Yq7GY@)ZOgi", cSVFormat5.getNullString());
assertFalse(cSVFormat5.isQuoting());
assertFalse(cSVFormat5.isCommentingEnabled());
assertEquals('\\', (char)cSVFormat5.getEscape());
assertFalse(cSVFormat5.getSkipHeaderRecord());
assertNull(cSVFormat5.getCommentStart());
assertTrue(cSVFormat5.isEscaping());
assertNull(cSVFormat5.getQuotePolicy());
assertFalse(cSVFormat5.getIgnoreEmptyLines());
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat5);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat0);
assertNotSame(cSVFormat1, cSVFormat2);
assertNotSame(cSVFormat1, cSVFormat5);
assertNotSame(cSVFormat1, cSVFormat4);
assertNotSame(cSVFormat1, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat5);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat3, cSVFormat4);
assertNotSame(cSVFormat3, cSVFormat1);
assertNotSame(cSVFormat3, cSVFormat5);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat3);
assertNotSame(cSVFormat4, cSVFormat5);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat5, cSVFormat1);
assertNotSame(cSVFormat5, cSVFormat0);
assertNotSame(cSVFormat5, cSVFormat2);
assertNotSame(cSVFormat5, cSVFormat3);
assertNotSame(cSVFormat5, cSVFormat4);
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat5));
assertTrue(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat1.equals((Object)cSVFormat2));
assertFalse(cSVFormat1.equals((Object)cSVFormat5));
assertFalse(cSVFormat1.equals((Object)cSVFormat4));
assertTrue(cSVFormat1.equals((Object)cSVFormat0));
assertFalse(cSVFormat1.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat5));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat3.equals((Object)cSVFormat4));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertFalse(cSVFormat3.equals((Object)cSVFormat5));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertFalse(cSVFormat4.equals((Object)cSVFormat5));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat5.equals((Object)cSVFormat1));
assertFalse(cSVFormat5.equals((Object)cSVFormat0));
assertFalse(cSVFormat5.equals((Object)cSVFormat2));
assertFalse(cSVFormat5.equals((Object)cSVFormat3));
assertFalse(cSVFormat5.equals((Object)cSVFormat4));
assertNotNull(cSVPrinter0);

cSVPrinter0.close();

[MASTER] 23:04:21.038 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
java.io.FileWriter.<init>(FileWriter.java:116)
org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
org.apache.commons.csv.CSVPrinter_120_tmp__ESTest.test0(CSVPrinter_120_tmp__ESTest.java:345)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 23:04:21.080 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertNotNull(cSVFormat0);

Character character0 = Character.valueOf('}');
assertEquals('}', (char)character0);
assertNotNull(character0);

CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat1.getSkipHeaderRecord());
assertEquals(',', cSVFormat1.getDelimiter());
assertTrue(cSVFormat1.getIgnoreEmptyLines());
assertNull(cSVFormat1.getQuotePolicy());
assertFalse(cSVFormat1.isNullHandling());
assertFalse(cSVFormat1.isEscaping());
assertEquals('}', (char)cSVFormat1.getCommentStart());
assertTrue(cSVFormat1.isQuoting());
assertNull(cSVFormat1.getNullString());
assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat1.isCommentingEnabled());
assertEquals('\"', (char)cSVFormat1.getQuoteChar());
assertNull(cSVFormat1.getEscape());
assertEquals("\r\n", cSVFormat1.getRecordSeparator());
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat1, cSVFormat0);
assertFalse(cSVFormat1.equals((Object)cSVFormat0));
assertNotNull(cSVFormat1);

Quote quote0 = Quote.NON_NUMERIC;
CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat2.isEscaping());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat2.isQuoting());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertEquals(',', cSVFormat2.getDelimiter());
assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertNull(cSVFormat2.getEscape());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat2.getCommentStart());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat2.isNullHandling());
assertFalse(cSVFormat2.isCommentingEnabled());
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat0);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertNotNull(cSVFormat2);

CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat2.isEscaping());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat2.isQuoting());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertEquals(',', cSVFormat2.getDelimiter());
assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertNull(cSVFormat2.getEscape());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat2.getCommentStart());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat2.isNullHandling());
assertFalse(cSVFormat2.isCommentingEnabled());
assertTrue(cSVFormat3.getIgnoreEmptyLines());
assertEquals(',', cSVFormat3.getDelimiter());
assertNull(cSVFormat3.getCommentStart());
assertEquals("\r\n", cSVFormat3.getRecordSeparator());
assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
assertFalse(cSVFormat3.isEscaping());
assertFalse(cSVFormat3.isCommentingEnabled());
assertFalse(cSVFormat3.isNullHandling());
assertEquals('\"', (char)cSVFormat3.getQuoteChar());
assertNull(cSVFormat3.getNullString());
assertTrue(cSVFormat3.getSkipHeaderRecord());
assertTrue(cSVFormat3.isQuoting());
assertNull(cSVFormat3.getEscape());
assertEquals(Quote.NON_NUMERIC, cSVFormat3.getQuotePolicy());
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat2);
assertNotSame(cSVFormat3, cSVFormat0);
assertNotSame(cSVFormat3, cSVFormat1);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat2));
assertFalse(cSVFormat3.equals((Object)cSVFormat0));
assertFalse(cSVFormat3.equals((Object)cSVFormat1));
assertNotNull(cSVFormat3);

CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator("$VALUES");
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat2.isEscaping());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat2.isQuoting());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertEquals(',', cSVFormat2.getDelimiter());
assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertNull(cSVFormat2.getEscape());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat2.getCommentStart());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat2.isNullHandling());
assertFalse(cSVFormat2.isCommentingEnabled());
assertNull(cSVFormat4.getEscape());
assertFalse(cSVFormat4.isCommentingEnabled());
assertTrue(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.isNullHandling());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertTrue(cSVFormat4.isQuoting());
assertFalse(cSVFormat4.isEscaping());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertEquals("$VALUES", cSVFormat4.getRecordSeparator());
assertEquals(Quote.NON_NUMERIC, cSVFormat4.getQuotePolicy());
assertEquals('\"', (char)cSVFormat4.getQuoteChar());
assertNull(cSVFormat4.getCommentStart());
assertNull(cSVFormat4.getNullString());
assertEquals(',', cSVFormat4.getDelimiter());
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat3);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertNotNull(cSVFormat4);

CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "$VALUES");
assertFalse(charBuffer0.hasArray());
assertTrue(charBuffer0.isReadOnly());
assertEquals("$VALUES", charBuffer0.toString());
assertEquals(7, charBuffer0.capacity());
assertEquals(7, charBuffer0.length());
assertFalse(charBuffer0.isDirect());
assertEquals(7, charBuffer0.limit());
assertTrue(charBuffer0.hasRemaining());
assertEquals(7, charBuffer0.remaining());
assertEquals(0, charBuffer0.position());
assertNotNull(charBuffer0);

CSVPrinter cSVPrinter0 = cSVFormat4.print(charBuffer0);
assertNull(cSVFormat0.getEscape());
assertFalse(cSVFormat0.isCommentingEnabled());
assertFalse(cSVFormat0.getSkipHeaderRecord());
assertTrue(cSVFormat0.getIgnoreEmptyLines());
assertNull(cSVFormat0.getCommentStart());
assertFalse(cSVFormat0.isNullHandling());
assertNull(cSVFormat0.getNullString());
assertNull(cSVFormat0.getQuotePolicy());
assertFalse(cSVFormat0.isEscaping());
assertTrue(cSVFormat0.isQuoting());
assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
assertEquals('\"', (char)cSVFormat0.getQuoteChar());
assertEquals(',', cSVFormat0.getDelimiter());
assertEquals("\r\n", cSVFormat0.getRecordSeparator());
assertFalse(cSVFormat2.isEscaping());
assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
assertTrue(cSVFormat2.isQuoting());
assertEquals('\"', (char)cSVFormat2.getQuoteChar());
assertEquals(',', cSVFormat2.getDelimiter());
assertEquals(Quote.NON_NUMERIC, cSVFormat2.getQuotePolicy());
assertEquals("\r\n", cSVFormat2.getRecordSeparator());
assertNull(cSVFormat2.getEscape());
assertTrue(cSVFormat2.getIgnoreEmptyLines());
assertNull(cSVFormat2.getCommentStart());
assertNull(cSVFormat2.getNullString());
assertFalse(cSVFormat2.getSkipHeaderRecord());
assertFalse(cSVFormat2.isNullHandling());
assertFalse(cSVFormat2.isCommentingEnabled());
assertNull(cSVFormat4.getEscape());
assertFalse(cSVFormat4.isCommentingEnabled());
assertTrue(cSVFormat4.getIgnoreEmptyLines());
assertFalse(cSVFormat4.isNullHandling());
assertFalse(cSVFormat4.getSkipHeaderRecord());
assertTrue(cSVFormat4.isQuoting());
assertFalse(cSVFormat4.isEscaping());
assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
assertEquals("$VALUES", cSVFormat4.getRecordSeparator());
assertEquals(Quote.NON_NUMERIC, cSVFormat4.getQuotePolicy());
assertEquals('\"', (char)cSVFormat4.getQuoteChar());
assertNull(cSVFormat4.getCommentStart());
assertNull(cSVFormat4.getNullString());
assertEquals(',', cSVFormat4.getDelimiter());
assertFalse(charBuffer0.hasArray());
assertTrue(charBuffer0.isReadOnly());
assertEquals("$VALUES", charBuffer0.toString());
assertEquals(7, charBuffer0.capacity());
assertEquals(7, charBuffer0.length());
assertFalse(charBuffer0.isDirect());
assertEquals(7, charBuffer0.limit());
assertTrue(charBuffer0.hasRemaining());
assertEquals(7, charBuffer0.remaining());
assertEquals(0, charBuffer0.position());
assertNotSame(cSVFormat0, cSVFormat1);
assertNotSame(cSVFormat0, cSVFormat3);
assertNotSame(cSVFormat0, cSVFormat2);
assertNotSame(cSVFormat0, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat1);
assertNotSame(cSVFormat2, cSVFormat3);
assertNotSame(cSVFormat2, cSVFormat4);
assertNotSame(cSVFormat2, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat0);
assertNotSame(cSVFormat4, cSVFormat1);
assertNotSame(cSVFormat4, cSVFormat2);
assertNotSame(cSVFormat4, cSVFormat3);
assertFalse(cSVFormat0.equals((Object)cSVFormat1));
assertFalse(cSVFormat0.equals((Object)cSVFormat3));
assertFalse(cSVFormat0.equals((Object)cSVFormat2));
assertFalse(cSVFormat0.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat1));
assertFalse(cSVFormat2.equals((Object)cSVFormat3));
assertFalse(cSVFormat2.equals((Object)cSVFormat4));
assertFalse(cSVFormat2.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat0));
assertFalse(cSVFormat4.equals((Object)cSVFormat1));
assertFalse(cSVFormat4.equals((Object)cSVFormat2));
assertFalse(cSVFormat4.equals((Object)cSVFormat3));
assertNotNull(cSVPrinter0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
assertNotNull(mockFileWriter0);

cSVPrinter0.print(mockFileWriter0);

[MASTER] 23:04:30.119 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'CSVPrinter_ESTest' to results/Csv-10/org.apache.commons.csv.CSVPrinter/BBC-F0-opt-60/tests/5
* Done!

* Computation finished
